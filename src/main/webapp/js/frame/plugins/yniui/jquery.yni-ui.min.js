﻿/**
 * 
 * Licensed under the GPL or commercial licenses
 * To use it on other terms please contact us: info@jeasyui.com
 * http://www.gnu.org/licenses/gpl.txt
 *
 */
(function ($) {
    $.parser = {
        auto: true,
        onComplete: function (_1) {},
        plugins: ["draggable", "droppable", "resizable", "pagination", "tooltip", "linkbutton", "menu", "menubutton", "splitbutton", "progressbar", "tree", "combobox", "combotree", "combogrid", "numberbox", "validatebox", "searchbox", "numberspinner", "timespinner", ,"datetimespinner", "calendar", "datebox", "datetimebox", "slider", "layout", "panel", "datagrid", "propertygrid", "treegrid", "tabs", "accordion", "window", "dialog", "textbox"],
        parse: function (_2) {
            var aa = [];
            for (var i = 0; i < $.parser.plugins.length; i++) {
                var _3 = $.parser.plugins[i];
                var r = $(".easyui-" + _3, _2);
                if (r.length) {
                    if (r[_3]) {
                        r[_3]();
                    } else {
                        aa.push({ 
                            name: _3,
                            jq: r
                        });
                    }
                }
            }
            if (aa.length && window.easyloader) {
                var _4 = [];
                for (var i = 0; i < aa.length; i++) {
                    _4.push(aa[i].name);
                }
                easyloader.load(_4, function () {
                    for (var i = 0; i < aa.length; i++) {
                        var _5 = aa[i].name;
                        var jq = aa[i].jq;
                        jq[_5]();
                    }
                    $.parser.onComplete.call($.parser, _2);
                });
            } else {
                $.parser.onComplete.call($.parser, _2);
            }
        },
        parseOptions: function (_6, _7) {
            var t = $(_6);
            var _8 = {};
            var s = $.trim(t.attr("data-options"));
            if (s) {
                var _9 = s.substring(0, 1);
                var _a = s.substring(s.length - 1, 1);
                if (_9 != "{") {
                    s = "{" + s;
                }
                if (_a != "}") {
                    s = s + "}";
                }
                _8 = (new Function("return " + s))();
            }
            if (_7) {
                var _b = {};
                for (var i = 0; i < _7.length; i++) {
                    var pp = _7[i];
                    if (typeof pp == "string") {
                        if (pp == "width" || pp == "height" || pp == "left" || pp == "top") {
                            _b[pp] = parseInt(_6.style[pp]) || undefined;
                        } else {
                            _b[pp] = t.attr(pp);
                        }
                    } else {
                        for (var _c in pp) {
                            var _d = pp[_c];
                            if (_d == "boolean") {
                                _b[_c] = t.attr(_c) ? (t.attr(_c) == "true") : undefined;
                            } else {
                                if (_d == "number") {
                                    _b[_c] = t.attr(_c) == "0" ? 0 : parseFloat(t.attr(_c)) || undefined;
                                }
                            }
                        }
                    }
                }
                $.extend(_8, _b);
            }
            return _8;
        }
    };
    $(function () {
        var d = $("<div style=\"position:absolute;top:-1000px;width:100px;height:100px;padding:5px\"></div>").appendTo("body");
        $._boxModel = parseInt(d.width()) == 100;
        d.remove();
        if (!window.easyloader && $.parser.auto) {
            $.parser.parse();
        }
    });
    $.fn._outerWidth = function (_e) {
        if (_e == undefined) {
            if (this[0] == window) {
                return this.width() || document.body.clientWidth;
            }
            return this.outerWidth() || 0;
        }
        return this.each(function () {
            if ($._boxModel) {
                $(this).width(_e - ($(this).outerWidth() - $(this).width()));
            } else {
                $(this).width(_e);
            }
        });
    };
    $.fn._outerHeight = function (_f) {
        if (_f == undefined) {
            if (this[0] == window) {
                return this.height() || document.body.clientHeight;
            }
            return this.outerHeight() || 0;
        }
        return this.each(function () {
            if ($._boxModel) {
                $(this).height(_f - ($(this).outerHeight() - $(this).height()));
            } else {
                $(this).height(_f);
            }
        });
    };
    $.fn._scrollLeft = function (_10) {
        if (_10 == undefined) {
            return this.scrollLeft();
        } else {
            return this.each(function () {
                $(this).scrollLeft(_10);
            });
        }
    };
    $.fn._propAttr = $.fn.prop || $.fn.attr;
    $.fn._fit = function (fit) {
        fit = fit == undefined ? true : fit;
        var t = this[0];
        var p = (t.tagName == "BODY" ? t : this.parent()[0]);
        var _11 = p.fcount || 0;
        if (fit) {
            if (!t.fitted) {
                t.fitted = true;
                p.fcount = _11 + 1;
                $(p).addClass("panel-noscroll");
                if (p.tagName == "BODY") {
                    $("html").addClass("panel-fit");
                }
            }
        } else {
            if (t.fitted) {
                t.fitted = false;
                p.fcount = _11 - 1;
                if (p.fcount == 0) {
                    $(p).removeClass("panel-noscroll");
                    if (p.tagName == "BODY") {
                        $("html").removeClass("panel-fit");
                    }
                }
            }
        }
        return {
            width: $(p).width(),
            height: $(p).height()
        };
    };
})(jQuery);
(function ($) {
    var _12 = null;
    var _13 = null;
    var _14 = false;

    function _15(e) {
        if (!_14) {
            _14 = true;
            dblClickTimer = setTimeout(function () {
                _14 = false;
            },
            500);
        } else {
            if (e.touches.length == 1) {
                clearTimeout(dblClickTimer);
                _14 = false;
                _16(e, "dblclick");
                e.preventDefault();
            }
        }
        _12 = setTimeout(function () {
            _16(e, "contextmenu");
        },
        1000);
        _16(e, "mousedown");
    };

    function _17(e) {
        if (_12) {
            clearTimeout(_12);
        }
        _16(e, "mousemove");
    };

    function _18(e) {
        if (_12) {
            clearTimeout(_12);
        }
        _16(e, "mouseup");
    };

    function _16(e, _19) {
        var _1a = new $.Event(_19);
        _1a.pageX = e.changedTouches[0].pageX;
        _1a.pageY = e.changedTouches[0].pageY;
        $(e.target).trigger(_1a);
    };
    if (document.addEventListener) {
        document.addEventListener("touchstart", _15, true);
        document.addEventListener("touchmove", _17, true);
        document.addEventListener("touchend", _18, true);
    }
})(jQuery);
(function ($) {
    var _1b = false;

    function _1c(e) {
        var _1d = $.data(e.data.target, "draggable");
        var _1e = _1d.options;
        var _1f = _1d.proxy;
        var _20 = e.data;
        var _21 = _20.startLeft + e.pageX - _20.startX;
        var top = _20.startTop + e.pageY - _20.startY;
        if (_1f) {
            if (_1f.parent()[0] == document.body) {
                if (_1e.deltaX != null && _1e.deltaX != undefined) {
                    _21 = e.pageX + _1e.deltaX;
                } else {
                    _21 = e.pageX - e.data.offsetWidth;
                }
                if (_1e.deltaY != null && _1e.deltaY != undefined) {
                    top = e.pageY + _1e.deltaY;
                } else {
                    top = e.pageY - e.data.offsetHeight;
                }
            } else {
                if (_1e.deltaX != null && _1e.deltaX != undefined) {
                    _21 += e.data.offsetWidth + _1e.deltaX;
                }
                if (_1e.deltaY != null && _1e.deltaY != undefined) {
                    top += e.data.offsetHeight + _1e.deltaY;
                }
            }
        }
        if (e.data.parent != document.body) {
            _21 += $(e.data.parent).scrollLeft();
            top += $(e.data.parent).scrollTop();
        }
        if (_1e.axis == "h") {
            _20.left = _21;
        } else {
            if (_1e.axis == "v") {
                _20.top = top;
            } else {
                _20.left = _21;
                _20.top = top;
            }
        }
    };

    function _22(e) {
        var _23 = $.data(e.data.target, "draggable");
        var _24 = _23.options;
        var _25 = _23.proxy;
        if (!_25) {
            _25 = $(e.data.target);
        }
        _25.css({
            left: e.data.left,
            top: e.data.top
        });
        $("body").css("cursor", _24.cursor);
    };

    function _26(e) {
        _1b = true;
        var _27 = $.data(e.data.target, "draggable");
        var _28 = _27.options;
        var _29 = $(".droppable").filter(function () {
            return e.data.target != this;
        }).filter(function () {
            var _2a = $.data(this, "droppable").options.accept;
            if (_2a) {
                return $(_2a).filter(function () {
                    return this == e.data.target;
                }).length > 0;
            } else {
                return true;
            }
        });
        _27.droppables = _29;
        var _2b = _27.proxy;
        if (!_2b) {
            if (_28.proxy) {
                if (_28.proxy == "clone") {
                    _2b = $(e.data.target).clone().insertAfter(e.data.target);
                } else {
                    _2b = _28.proxy.call(e.data.target, e.data.target);
                }
                _27.proxy = _2b;
            } else {
                _2b = $(e.data.target);
            }
        }
        _2b.css("position", "absolute");
        _1c(e);
        _22(e);
        _28.onStartDrag.call(e.data.target, e);
        return false;
    };

    function _2c(e) {
        var _2d = $.data(e.data.target, "draggable");
        _1c(e);
        if (_2d.options.onDrag.call(e.data.target, e) != false) {
            _22(e);
        }
        var _2e = e.data.target;
        _2d.droppables.each(function () {
            var _2f = $(this);
            if (_2f.droppable("options").disabled) {
                return;
            }
            var p2 = _2f.offset();
            if (e.pageX > p2.left && e.pageX < p2.left + _2f.outerWidth() && e.pageY > p2.top && e.pageY < p2.top + _2f.outerHeight()) {
                if (!this.entered) {
                    $(this).trigger("_dragenter", [_2e]);
                    this.entered = true;
                }
                $(this).trigger("_dragover", [_2e]);
            } else {
                if (this.entered) {
                    $(this).trigger("_dragleave", [_2e]);
                    this.entered = false;
                }
            }
        });
        return false;
    };

    function _30(e) {
        _1b = false;
        _2c(e);
        var _31 = $.data(e.data.target, "draggable");
        var _32 = _31.proxy;
        var _33 = _31.options;
        if (_33.revert) {
            if (_34() == true) {
                $(e.data.target).css({
                    position: e.data.startPosition,
                    left: e.data.startLeft,
                    top: e.data.startTop
                });
            } else {
                if (_32) {
                    var _35, top;
                    if (_32.parent()[0] == document.body) {
                        _35 = e.data.startX - e.data.offsetWidth;
                        top = e.data.startY - e.data.offsetHeight;
                    } else {
                        _35 = e.data.startLeft;
                        top = e.data.startTop;
                    }
                    _32.animate({
                        left: _35,
                        top: top
                    },


                    function () {
                        _36();
                    });
                } else {
                    $(e.data.target).animate({
                        left: e.data.startLeft,
                        top: e.data.startTop
                    },


                    function () {
                        $(e.data.target).css("position", e.data.startPosition);
                    });
                }
            }
        } else {
            $(e.data.target).css({
                position: "absolute",
                left: e.data.left,
                top: e.data.top
            });
            _34();
        }
        _33.onStopDrag.call(e.data.target, e);
        $(document).unbind(".draggable");
        setTimeout(function () {
            $("body").css("cursor", "");
        },
        100);

        function _36() {
            if (_32) {
                _32.remove();
            }
            _31.proxy = null;
        };

        function _34() {
            var _37 = false;
            _31.droppables.each(function () {
                var _38 = $(this);
                if (_38.droppable("options").disabled) {
                    return;
                }
                var p2 = _38.offset();
                if (e.pageX > p2.left && e.pageX < p2.left + _38.outerWidth() && e.pageY > p2.top && e.pageY < p2.top + _38.outerHeight()) {
                    if (_33.revert) {
                        $(e.data.target).css({
                            position: e.data.startPosition,
                            left: e.data.startLeft,
                            top: e.data.startTop
                        });
                    }
                    $(this).trigger("_drop", [e.data.target]);
                    _36();
                    _37 = true;
                    this.entered = false;
                    return false;
                }
            });
            if (!_37 && !_33.revert) {
                _36();
            }
            return _37;
        };
        return false;
    };
    $.fn.draggable = function (_39, _3a) {
        if (typeof _39 == "string") {
            return $.fn.draggable.methods[_39](this, _3a);
        }
        return this.each(function () {
            var _3b;
            var _3c = $.data(this, "draggable");
            if (_3c) {
                _3c.handle.unbind(".draggable");
                _3b = $.extend(_3c.options, _39);
            } else {
                _3b = $.extend({},
                $.fn.draggable.defaults, $.fn.draggable.parseOptions(this), _39 || {});
            }
            var _3d = _3b.handle ? (typeof _3b.handle == "string" ? $(_3b.handle, this) : _3b.handle) : $(this);
            $.data(this, "draggable", {
                options: _3b,
                handle: _3d
            });
            if (_3b.disabled) {
                $(this).css("cursor", "");
                return;
            }
            _3d.unbind(".draggable").bind("mousemove.draggable", {
                target: this
            }, function (e) {
                if (_1b) {
                    return;
                }
                var _3e = $.data(e.data.target, "draggable").options;
                if (_3f(e)) {
                    $(this).css("cursor", _3e.cursor);
                } else {
                    $(this).css("cursor", "");
                }
            }).bind("mouseleave.draggable", {
                target: this
            }, function (e) {
                $(this).css("cursor", "");
            }).bind("mousedown.draggable", {
                target: this
            }, function (e) {
                if (_3f(e) == false) {
                    return;
                }
                $(this).css("cursor", "");
                var _40 = $(e.data.target).position();
                var _41 = $(e.data.target).offset();
                var _42 = {
                    startPosition: $(e.data.target).css("position"),
                    startLeft: _40.left,
                    startTop: _40.top,
                    left: _40.left,
                    top: _40.top,
                    startX: e.pageX,
                    startY: e.pageY,
                    offsetWidth: (e.pageX - _41.left),
                    offsetHeight: (e.pageY - _41.top),
                    target: e.data.target,
                    parent: $(e.data.target).parent()[0]
                };
                $.extend(e.data, _42);
                var _43 = $.data(e.data.target, "draggable").options;
                if (_43.onBeforeDrag.call(e.data.target, e) == false) {
                    return;
                }
                $(document).bind("mousedown.draggable", e.data, _26);
                $(document).bind("mousemove.draggable", e.data, _2c);
                $(document).bind("mouseup.draggable", e.data, _30);
            });

            function _3f(e) {
                var _44 = $.data(e.data.target, "draggable");
                var _45 = _44.handle;
                var _46 = $(_45).offset();
                var _47 = $(_45).outerWidth();
                var _48 = $(_45).outerHeight();
                var t = e.pageY - _46.top;
                var r = _46.left + _47 - e.pageX;
                var b = _46.top + _48 - e.pageY;
                var l = e.pageX - _46.left;
                return Math.min(t, r, b, l) > _44.options.edge;
            };
        });
    };
    $.fn.draggable.methods = {
        options: function (jq) {
            return $.data(jq[0], "draggable").options;
        },
        proxy: function (jq) {
            return $.data(jq[0], "draggable").proxy;
        },
        enable: function (jq) {
            return jq.each(function () {
                $(this).draggable({
                    disabled: false
                });
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                $(this).draggable({
                    disabled: true
                });
            });
        }
    };
    $.fn.draggable.parseOptions = function (_49) {
        var t = $(_49);
        return $.extend({}, 
        $.parser.parseOptions(_49, ["cursor", "handle", "axis", {
            "revert": "boolean",
            "deltaX": "number",
            "deltaY": "number",
            "edge": "number"
        }]), {
            disabled: (t.attr("disabled") ? true : undefined)
        });
    };
    $.fn.draggable.defaults = {
        proxy: null,
        revert: false,
        cursor: "move",
        deltaX: null,
        deltaY: null,
        handle: null,
        disabled: false,
        edge: 0,
        axis: null,
        onBeforeDrag: function (e) {},
        onStartDrag: function (e) {},
        onDrag: function (e) {},
        onStopDrag: function (e) {}
    };
    $(function () {
        function _4a(e) {
            var _4b = e.changedTouches,
                _4c = _4b[0],
                _4d = "";
            switch (e.type) {
            case "touchstart":
                _4d = "mousedown";
                break;
            case "touchmove":
                _4d = "mousemove";
                break;
            case "touchend":
                _4d = "mouseup";
                break;
            default:
                return;
            }
            var _4e = document.createEvent("MouseEvent");
            _4e.initMouseEvent(_4d, true, true, window, 1, _4c.screenX, _4c.screenY, _4c.clientX, _4c.clientY, false, false, false, false, 0, null);
            _4c.target.dispatchEvent(_4e);
            if (_1b) {
                e.preventDefault();
            }
        };
        if (document.addEventListener) {
            document.addEventListener("touchstart", _4a, true);
            document.addEventListener("touchmove", _4a, true);
            document.addEventListener("touchend", _4a, true);
            document.addEventListener("touchcancel", _4a, true);
        }
    });
})(jQuery);
(function ($) {
    function _4f(_50) {
        $(_50).addClass("droppable");
        $(_50).bind("_dragenter", function (e, _51) {
            $.data(_50, "droppable").options.onDragEnter.apply(_50, [e, _51]);
        });
        $(_50).bind("_dragleave", function (e, _52) {
            $.data(_50, "droppable").options.onDragLeave.apply(_50, [e, _52]);
        });
        $(_50).bind("_dragover", function (e, _53) {
            $.data(_50, "droppable").options.onDragOver.apply(_50, [e, _53]);
        });
        $(_50).bind("_drop", function (e, _54) {
            $.data(_50, "droppable").options.onDrop.apply(_50, [e, _54]);
        });
    };
    $.fn.droppable = function (_55, _56) {
        if (typeof _55 == "string") {
            return $.fn.droppable.methods[_55](this, _56);
        }
        _55 = _55 || {};
        return this.each(function () {
            var _57 = $.data(this, "droppable");
            if (_57) {
                $.extend(_57.options, _55);
            } else {
                _4f(this);
                $.data(this, "droppable", {
                    options: $.extend({}, 
                    $.fn.droppable.defaults, $.fn.droppable.parseOptions(this), _55)
                });
            }
        });
    };
    $.fn.droppable.methods = {
        options: function (jq) {
            return $.data(jq[0], "droppable").options;
        },
        enable: function (jq) {
            return jq.each(function () {
                $(this).droppable({
                    disabled: false
                });
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                $(this).droppable({
                    disabled: true
                });
            });
        }
    };
    $.fn.droppable.parseOptions = function (_58) {
        var t = $(_58);
        return $.extend({}, 
        $.parser.parseOptions(_58, ["accept"]), {
            disabled: (t.attr("disabled") ? true : undefined)
        });
    };
    $.fn.droppable.defaults = {
        accept: null,
        disabled: false,
        onDragEnter: function (e, _59) {},
        onDragOver: function (e, _5a) {},
        onDragLeave: function (e, _5b) {},
        onDrop: function (e, _5c) {}
    };
})(jQuery);
(function ($) {
    var _5d = false;
    $.fn.resizable = function (_5e, _5f) {
        if (typeof _5e == "string") {
            return $.fn.resizable.methods[_5e](this, _5f);
        }

        function _60(e) {
            var _61 = e.data;
            var _62 = $.data(_61.target, "resizable").options;
            if (_61.dir.indexOf("e") != -1) {
                var _63 = _61.startWidth + e.pageX - _61.startX;
                _63 = Math.min(Math.max(_63, _62.minWidth), _62.maxWidth);
                _61.width = _63;
            }
            if (_61.dir.indexOf("s") != -1) {
                var _64 = _61.startHeight + e.pageY - _61.startY;
                _64 = Math.min(Math.max(_64, _62.minHeight), _62.maxHeight);
                _61.height = _64;
            }
            if (_61.dir.indexOf("w") != -1) {
                var _63 = _61.startWidth - e.pageX + _61.startX;
                _63 = Math.min(Math.max(_63, _62.minWidth), _62.maxWidth);
                _61.width = _63;
                _61.left = _61.startLeft + _61.startWidth - _61.width;
            }
            if (_61.dir.indexOf("n") != -1) {
                var _64 = _61.startHeight - e.pageY + _61.startY;
                _64 = Math.min(Math.max(_64, _62.minHeight), _62.maxHeight);
                _61.height = _64;
                _61.top = _61.startTop + _61.startHeight - _61.height;
            }
        };

        function _65(e) {
            var _66 = e.data;
            var t = $(_66.target);
            t.css({
                left: _66.left,
                top: _66.top
            });
            if (t.outerWidth() != _66.width) {
                t._outerWidth(_66.width);
            }
            if (t.outerHeight() != _66.height) {
                t._outerHeight(_66.height);
            }
        };

        function _67(e) {
            _5d = true;
            $.data(e.data.target, "resizable").options.onStartResize.call(e.data.target, e);
            return false;
        };

        function _68(e) {
            _60(e);
            if ($.data(e.data.target, "resizable").options.onResize.call(e.data.target, e) != false) {
                _65(e);
            }
            return false;
        };

        function _69(e) {
            _5d = false;
            _60(e, true);
            _65(e);
            $.data(e.data.target, "resizable").options.onStopResize.call(e.data.target, e);
            $(document).unbind(".resizable");
            $("body").css("cursor", "");
            return false;
        };
        return this.each(function () {
            var _6a = null;
            var _6b = $.data(this, "resizable");
            if (_6b) {
                $(this).unbind(".resizable");
                _6a = $.extend(_6b.options, _5e || {});
            } else {
                _6a = $.extend({}, 
                $.fn.resizable.defaults, $.fn.resizable.parseOptions(this), _5e || {});
                $.data(this, "resizable", {
                    options: _6a
                });
            }
            if (_6a.disabled == true) {
                return;
            }
            $(this).bind("mousemove.resizable", {
                target: this
            }, function (e) {
                if (_5d) {
                    return;
                }
                var dir = _6c(e);
                if (dir == "") {
                    $(e.data.target).css("cursor", "");
                } else {
                	//console.log("cursor.....");
                	$(e.data.target).parent().css("border-right", "1px solid #ffa8a8");
                    $(e.data.target).css("cursor", dir + "-resize");
                }
            }).bind("mouseleave.resizable", {
                target: this
            }, function (e) {
            	$(e.data.target).parent().css("border-right", "1px solid #d4d4d4");
                $(e.data.target).css("cursor", "");
            }).bind("mousedown.resizable", {
                target: this
            }, function (e) {
                var dir = _6c(e);
                if (dir == "") {
                    return;
                }

                function _6d(css) {
                    var val = parseInt($(e.data.target).css(css));
                    if (isNaN(val)) {
                        return 0;
                    } else {
                        return val;
                    }
                };
                var _6e = {
                    target: e.data.target,
                    dir: dir,
                    startLeft: _6d("left"),
                    startTop: _6d("top"),
                    left: _6d("left"),
                    top: _6d("top"),
                    startX: e.pageX,
                    startY: e.pageY,
                    startWidth: $(e.data.target).outerWidth(),
                    startHeight: $(e.data.target).outerHeight(),
                    width: $(e.data.target).outerWidth(),
                    height: $(e.data.target).outerHeight(),
                    deltaWidth: $(e.data.target).outerWidth() - $(e.data.target).width(),
                    deltaHeight: $(e.data.target).outerHeight() - $(e.data.target).height()
                };
                $(document).bind("mousedown.resizable", _6e, _67);
                $(document).bind("mousemove.resizable", _6e, _68);
                $(document).bind("mouseup.resizable", _6e, _69);
                $("body").css("cursor", dir + "-resize");
            });

            function _6c(e) {
                var tt = $(e.data.target);
                var dir = "";
                var _6f = tt.offset();
                var _70 = tt.outerWidth();
                var _71 = tt.outerHeight();
                var _72 = _6a.edge;
                if (e.pageY > _6f.top && e.pageY < _6f.top + _72) {
                    dir += "n";
                } else {
                    if (e.pageY < _6f.top + _71 && e.pageY > _6f.top + _71 - _72) {
                        dir += "s";
                    }
                }
                if (e.pageX > _6f.left && e.pageX < _6f.left + _72) {
                    dir += "w";
                } else {
                    if (e.pageX < _6f.left + _70 && e.pageX > _6f.left + _70 - _72) {
                        dir += "e";
                    }
                }
                var _73 = _6a.handles.split(",");
                for (var i = 0; i < _73.length; i++) {
                    var _74 = _73[i].replace(/(^\s*)|(\s*$)/g, "");
                    if (_74 == "all" || _74 == dir) {
                        return dir;
                    }
                }
                return "";
            };
        });
    };
    $.fn.resizable.methods = {
        options: function (jq) {
            return $.data(jq[0], "resizable").options;
        },
        enable: function (jq) {
            return jq.each(function () {
                $(this).resizable({
                    disabled: false
                });
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                $(this).resizable({
                    disabled: true
                });
            });
        }
    };
    $.fn.resizable.parseOptions = function (_75) {
        var t = $(_75);
        return $.extend({}, $.parser.parseOptions(_75, ["handles", {
            minWidth: "number",
            minHeight: "number",
            maxWidth: "number",
            maxHeight: "number",
            edge: "number"
        }]), {
            disabled: (t.attr("disabled") ? true : undefined)
        });
    };
    $.fn.resizable.defaults = {
        disabled: false,
        handles: "n, e, s, w, ne, se, sw, nw, all",
        minWidth: 5,
        minHeight: 5,
        maxWidth: 10000,
        maxHeight: 10000,
        edge: 5,
        onStartResize: function (e) {},
        onResize: function (e) {},
        onStopResize: function (e) {}
    };
})(jQuery);
// linkbutton 1.4.1 버전으로 업그레이드(YNI-Master, 2015-12-11)
(function($) {
	function _83(_84, _85) {
		var _86 = $.data(_84, "linkbutton").options;
		if (_85) {
			$.extend(_86, _85);
		}
		if (_86.width || _86.height || _86.fit) {
			var btn = $(_84);
			var _87 = btn.parent();
			var _88 = btn.is(":visible");
			if (!_88) {
				var _89 = $("<div style=\"display:none\"></div>").insertBefore(
						_84);
				var _8a = {
					position : btn.css("position"),
					display : btn.css("display"),
					left : btn.css("left")
				};
				btn.appendTo("body");
				btn.css({
					position : "absolute",
					display : "inline-block",
					left : -20000
				});
			}
			btn._size(_86, _87);
			var _8b = btn.find(".l-btn-left");
			_8b.css("margin-top", 0);
			_8b.css("margin-top", parseInt((btn.height() - _8b.height()) / 2) + "px");
			if (!_88) {
				btn.insertAfter(_89);
				btn.css(_8a);
				_89.remove();
			}
		}
	}
	;
	function _8c(_8d) {
		var _8e = $.data(_8d, "linkbutton").options;
		var t = $(_8d).empty();
		t.addClass("l-btn").removeClass("l-btn-plain l-btn-selected l-btn-plain-selected");
		t.removeClass("l-btn-small l-btn-medium l-btn-large").addClass("l-btn-" + _8e.size);
		if (_8e.plain) {
			t.addClass("l-btn-plain");
		}
		if (_8e.selected) {
			t.addClass(_8e.plain ? "l-btn-selected l-btn-plain-selected" : "l-btn-selected");
		}
		t.attr("group", _8e.group || "");
		t.attr("id", _8e.id || "");
		var _8f = $("<span class=\"l-btn-left\"></span>").appendTo(t);
		if (_8e.text) {
			$("<span class=\"l-btn-text\"></span>").html(_8e.text).appendTo(_8f);
		} else {
			$("<span class=\"l-btn-text l-btn-empty\">&nbsp;</span>").appendTo(_8f);
		}
		if (_8e.iconCls) {
			$("<span class=\"l-btn-icon\">&nbsp;</span>").addClass(_8e.iconCls).appendTo(_8f);
			_8f.addClass("l-btn-icon-" + _8e.iconAlign);
		}
		t.unbind(".linkbutton").bind("focus.linkbutton", function() {
			if (!_8e.disabled) {
				$(this).addClass("l-btn-focus");
			}
		}).bind("blur.linkbutton", function() {
			$(this).removeClass("l-btn-focus");
		}).bind("click.linkbutton", function() {
			if (!_8e.disabled) {
				if (_8e.toggle) {
					if (_8e.selected) {
						$(this).linkbutton("unselect");
					} else {
						$(this).linkbutton("select");
					}
				}
				_8e.onClick.call(this);
			}
		});
		_90(_8d, _8e.selected);
		
		// 페이징란에 설정,관리,열너비 조정 버튼은 무조건 enable상태로 표시하도록 추가(2020-12-30)
		if(_8e.iconCls == "pagination-setting"||_8e.iconCls == "pagination-management"||_8e.iconCls == "pagination-resize_column") {
			_91(_8d, false);
		} else {
			_91(_8d, _8e.disabled);
		}
	}
	;
	function _90(_92, _93) {
		var _94 = $.data(_92, "linkbutton").options;
		if (_93) {
			if (_94.group) {
				$("a.l-btn[group=\"" + _94.group + "\"]").each(
						function() {
							var o = $(this).linkbutton("options");
							if (o.toggle) {
								$(this).removeClass("l-btn-selected l-btn-plain-selected");
								o.selected = false;
							}
						});
			}
			$(_92).addClass(_94.plain ? "l-btn-selected l-btn-plain-selected" : "l-btn-selected");
			_94.selected = true;
		} else {
			if (!_94.group) {
				$(_92).removeClass("l-btn-selected l-btn-plain-selected");
				_94.selected = false;
			}
		}
	}
	;
	function _91(_95, _96) {
		var _97 = $.data(_95, "linkbutton");
		var _98 = _97.options;
		$(_95).removeClass("l-btn-disabled l-btn-plain-disabled");
		
		if (_96) {
			_98.disabled = true;
			var _99 = $(_95).attr("href");
			if (_99) {
				_97.href = _99;
				$(_95).attr("href", "javascript:void(0)");
			}
			if (_95.onclick) {
				_97.onclick = _95.onclick;
				_95.onclick = null;
			}
			_98.plain ? $(_95).addClass("l-btn-disabled l-btn-plain-disabled") : $(_95).addClass("l-btn-disabled");
		} else {
			_98.disabled = false;
			if (_97.href) {
				$(_95).attr("href", _97.href);
			}
			if (_97.onclick) {
				_95.onclick = _97.onclick;
			}
		}
	}
	;
	$.fn.linkbutton = function(_9a, _9b) {
		if (typeof _9a == "string") {
			return $.fn.linkbutton.methods[_9a](this, _9b);
		}
		_9a = _9a || {};
		return this.each(function() {
			var _9c = $.data(this, "linkbutton");
			if (_9c) {
				$.extend(_9c.options, _9a);
			} else {
				$.data(this, "linkbutton", {
					options : $.extend({}, $.fn.linkbutton.defaults, $.fn.linkbutton.parseOptions(this), _9a)
				});
				$(this).removeAttr("disabled");
				$(this).bind("_resize", function(e, _9d) {
					if ($(this).hasClass("easyui-fluid") || _9d) {
						_83(this);
					}
					return false;
				});
			}
			// 링크버튼의 css대신 YNI-UX의 css에서 지정한 버튼을 적용하기 위해 주석처리함(2018-05-11)
			_8c(this);
			_83(this);
		});
	};
	$.fn.linkbutton.methods = {
		options : function(jq) {
			return $.data(jq[0], "linkbutton").options;
		},
		resize : function(jq, _9e) {
			return jq.each(function() {
				_83(this, _9e);
			});
		},
		enable : function(jq) {
			return jq.each(function() {
				_91(this, false);
			});
		},
		disable : function(jq) {
			return jq.each(function() {
				_91(this, true);
			});
		},
		select : function(jq) {
			return jq.each(function() {
				_90(this, true);
			});
		},
		unselect : function(jq) {
			return jq.each(function() {
				_90(this, false);
			});
		}
	};
	$.fn.linkbutton.parseOptions = function(_9f) {
		var t = $(_9f);
		return $.extend({}, $.parser.parseOptions(_9f, [ "id", "iconCls",
				"iconAlign", "group", "size", {
					plain : "boolean",
					toggle : "boolean",
					selected : "boolean"
				} ]), {
			disabled : (t.attr("disabled") ? true : undefined),
			text : $.trim(t.html()),
			iconCls : (t.attr("icon") || t.attr("iconCls"))
		});
	};
	$.fn.linkbutton.defaults = {
		id : null,
		disabled : false,
		toggle : false,
		selected : false,
		group : null,
		plain : false,
		text : "",
		iconCls : null,
		iconAlign : "left",
		size : "small",
		onClick : function() {
		}
	};
})(jQuery);
(function ($) {
    function _87(_88) {
        var _89 = $.data(_88, "pagination");
        var _8a = _89.options;
        var bb = _89.bb = {};
        var _8b = $(_88).addClass("pagination").html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0px\" class=\"pagination-rate\"><tr></tr></table>");
        var tr = _8b.find("tr");
        
        // 소스 수정 시작(jonghyun 2014.11.12)
        var aa=$.extend([],_8a.layout);
		if(!_8a.showPageList){
			_a5(aa,"list");
		}
		if(!_8a.showRefresh){
			_a5(aa,"refresh");
		}
		if(aa[0]=="sep"){
			aa.shift();
		}
		if(aa[aa.length-1]=="sep"){
			aa.pop();
		}
		for(var _a6=0;_a6<aa.length;_a6++){
			var _a7=aa[_a6];
			
			if(_a7=="list"){
				var ps=$("<select class=\"pagination-page-list\"></select>");
				ps.bind("change", function(){
					_8a.pageSize=parseInt($(this).val());
					_8a.onChangePageSize.call(_88, _8a.pageSize);
					_8f(_88,_8a.pageNumber);
					//alert("showPageList = " + _8a.pageSize);
				});
				for(var i=0;i<_8a.pageList.length;i++){
					$("<option></option>").text(_8a.pageList[i]).appendTo(ps);   // 페이지 콤보박스
				}
				$("<td></td>").append(ps).appendTo(tr);
			}else if(_a7=="setting"){ // 그리드 설정버튼 추가(2020-03-23)
				bb.first=_8c("setting", _a6);
			}else if(_a7=="management"){ // 그리드 관리버튼 추가(2020-03-23)
				bb.first=_8c("management", _a6);
			}else if(_a7=="resizeColumn"){ // 데이터 넓이 자동 조절(2020-12-30)
				bb.first=_8c("resizeColumn", _a6);
			}else{
				if(_a7=="sep"){
					$("<td></td>").appendTo(tr);
				}else{
					if(_a7=="first"){
						bb.first=_8c("first");
					}else{
						if(_a7=="prev"){
							bb.prev=_8c("prev");
						}else{
							if(_a7=="next"){
								bb.next=_8c("next");
							}else{
								if(_a7=="last"){
									bb.last=_8c("last");
								}else{
									if(_a7=="manual") {
										$("<span style=\"padding-left:6px;\"></span>").html(_8a.beforePageText).appendTo(tr).wrap("<td></td>");
										bb.num=$("<input class=\"pagination-num\" type=\"text\" value=\"1\" size=\"2\">").appendTo(tr).wrap("<td></td>");
										bb.num.unbind(".pagination").bind("keydown.pagination",function(e){
											if(e.keyCode==13){
												var _a9=parseInt($(this).val())||1;
												_8f(_88,_a9);
												return false;
											}
										});
										bb.after=$("<span style=\"padding-right:6px;\"></span>").appendTo(tr).wrap("<td></td>");
									} else {
										if(_a7=="refresh"){
											bb.refresh=_8c("refresh"); 
										} else {
											if(_a7=="links"){
												$("<td class=\"pagination-links\"></td>").appendTo(tr);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
        if (_8a.buttons) {
            $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
            if($.isArray(_8a.buttons)){
	            for (var i = 0; i < _8a.buttons.length; i++) {
	                var btn = _8a.buttons[i];
	                if (btn == "-") {
	                    $("<td><div class=\"pagination-btn-separator\"></div></td>").appendTo(tr);
	                } else {
	                    var td = $("<td></td>").appendTo(tr);
	                    var a = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
	                    a[0].onclick = eval(btn.handler || function () {});
	                    a.linkbutton($.extend({}, btn, {
	                        plain: true
	                    }));
	                }
	            }
            } else {
				var td=$("<td></td>").appendTo(tr);
				$(_8a.buttons).appendTo(td).show();
			}
        }
        $("<div class=\"pagination-info\"></div>").appendTo(_8b);  // total 조회 결과(text 표시)
        $("<div style=\"clear:both;\"></div>").appendTo(_8b);
        
        function _8c(_8d, idx) {
            var btn = _8a.nav[_8d];
            var a
            if(_8d == "setting") {
            	a = $("<a href=\"javascript:void(0)\">"+resource.getMessage("SETTING")+"</a>").appendTo(tr);
            	if(idx != 0) {            		
            		a.wrap("<td><div class=\"pagination-btn-separator\"></div></td>");
            	} else {
            		a.wrap("<td></td>");
            	}
            } else if(_8d == "management") {
            	a = $("<a href=\"javascript:void(0)\">"+resource.getMessage("MGT")+"</a>").appendTo(tr);
            	a.wrap("<td><div class=\"pagination-btn-separator\"></div></td>");
            } else if(_8d == "resizeColumn") {
            	a = $("<a href=\"javascript:void(0)\">"+resource.getMessage("COL_WIDTH_ADJST")+"</a>").appendTo(tr);
            	if(idx != 0) {
            		a.wrap("<td><div class=\"pagination-btn-separator\"></div></td>");
            	} else {
            		a.wrap("<td></td>");
            	}
            } else {
            	a = $("<a href=\"javascript:void(0)\"></a>").appendTo(tr);
            	a.wrap("<td></td>");
            }
            a.linkbutton({
                iconCls: btn.iconCls,
                plain: true
            }).unbind(".pagination").bind("click.pagination", function () {
                btn.handler.call(_88);
            });
            return a;
        };
        function _a5(aa,_ab){
			var _ac=$.inArray(_ab,aa);
			if(_ac>=0){
				aa.splice(_ac,1);
			}
			return aa;
		};
    };

    function _8f(_90, _91) {
    	// 소스 수정 시작(jonghyun 2014.11.12)
    	var _92=$.data(_90,"pagination").options;
    	_94(_90,{pageNumber:_91});
    	_92.onSelectPage.call(_90,_92.pageNumber,_92.pageSize);
    	// 원본 소스
    	/*var _92 = $.data(_90, "pagination").options;
        var _93 = Math.ceil(_92.total / _92.pageSize) || 1;
        _92.pageNumber = _91;
        if (_92.pageNumber < 1) {
            _92.pageNumber = 1;
        }
        if (_92.pageNumber > _93) {
            _92.pageNumber = _93;
        }
        _94(_90, {
            pageNumber: _92.pageNumber
        });
        _92.onSelectPage.call(_90, _92.pageNumber, _92.pageSize);*/
    };

    function _94(_95, _96) {
    	var _100 = $.data(_95,"pagination");
        var _97 = _100.options;
        var bb = _100.bb;
        $.extend(_97, _96 || {});
        var ps = $(_95).find("select.pagination-page-list");
        
        if (ps.length) {
            ps.val(_97.pageSize + "");
            _97.pageSize = parseInt(ps.val());
        }
        // 소스 추가(jonghyun 2015.01.19)
        // - 페이지 처리시 NaN으로 나오는 부분에 대한 처리
        if(isNaN(_97.total) || _97.total == 1000000000) _97.total = 0;
        if(isNaN(_97.pageSize) || _97.pageSize == 0) _97.pageSize = _97.pageList[0];
        
        var _98 = Math.ceil(_97.total / _97.pageSize) || 1;
        
        // 소스 수정 시작(jonghyun 2014.11.12)
        if(_97.pageNumber<1){
			_97.pageNumber=1;
		}
		if(_97.pageNumber>_98){
			_97.pageNumber=_98;
		}
		if(_97.total==0){
			_97.pageNumber=0;
			_98=0;
		}
		if(bb.num){
			bb.num.val(_97.pageNumber);
		}
		if(bb.after){
			bb.after.html(_97.afterPageText.replace(/{pages}/,_98));
		}
		var td=$(_95).find("td.pagination-links");
		if(td.length){
			td.empty();
			var _b7=_97.pageNumber-Math.floor(_97.links/2);
			if(_b7<1){
				_b7=1;
			}
			var _b8=_b7+_97.links-1;
			if(_b8>_98){
				_b8=_98;
			}
			_b7=_b8-_97.links+1;
			if(_b7<1){
				_b7=1;
			}
			for(var i=_b7;i<=_b8;i++){
				var a=$("<a class=\"pagination-link\" href=\"javascript:void(0)\"></a>").appendTo(td);
				a.linkbutton({plain:true,text:i});
				if(i==_97.pageNumber){
					a.linkbutton("select");
				}else{
					a.unbind(".pagination").bind("click.pagination",{pageNumber:i},function(e){
						_8f(_95,e.data.pageNumber);
					});
				}
			}
		}
		var _b9=_97.displayMsg;
		_b9=_b9.replace(/{from}/,_97.total == 0 ? 0 : _97.pageSize*(_97.pageNumber-1)+1);
		_b9=_b9.replace(/{to}/,Math.min(_97.pageSize*(_97.pageNumber),_97.total));
		_b9=_b9.replace(/{rows}/,_97.total == 0 ? 0 : _97.viewNumber); // bufferview에 대해 현재표시된 row를 표시함(2020.06.06)
		_b9=_b9.replace(/{total}/,_97.total);
		$(_95).find("div.pagination-info").html(_b9);
		if(bb.first){
			bb.first.linkbutton({disabled:((!_97.total)||_97.pageNumber==1)});
		}
		if(bb.prev){
			bb.prev.linkbutton({disabled:((!_97.total)||_97.pageNumber==1)});
		}
		if(bb.next){
			bb.next.linkbutton({disabled:(_97.pageNumber==_98)});
		}
		if(bb.last){
			bb.last.linkbutton({disabled:(_97.pageNumber==_98)});
		}
		_9a(_95,_97.loading);
		// 원본 소스
        /*bb.num.val(_97.pageNumber);
        bb.after.html(_97.afterPageText.replace(/{pages}/, _98));
        var _99 = _97.displayMsg;
        _99 = _99.replace(/{from}/, _97.total == 0 ? 0 : _97.pageSize * (_97.pageNumber - 1) + 1);
        _99 = _99.replace(/{to}/, Math.min(_97.pageSize * (_97.pageNumber), _97.total));
        _99 = _99.replace(/{total}/, _97.total);
        $(_95).find("div.pagination-info").html(_99);
        bb.first.add(bb.prev).linkbutton({
            disabled: (_97.pageNumber == 1)
        });
        bb.next.add(bb.last).linkbutton({
            disabled: (_97.pageNumber == _98)
        });
        _9a(_95, _97.loading);*/
    };

    function _9a(_9b, _9c) {
    	var _9d=$.data(_9b,"pagination");
    	var _9f=_9d.options;
    	_9f.loading=_9c;
    	if(_9f.showRefresh && _9d.bb.refresh){
    		_9d.bb.refresh.linkbutton({iconCls:(_9f.loading?"pagination-loading":"pagination-load")});
    	}
    	/*var _9d = $.data(_9b, "pagination").options;
        var bb = $.data(_9b, "pagination").bb;
        _9d.loading = _9c;
        if (_9d.showRefresh) {
            if (_9d.loading) {
                bb.refresh.linkbutton({
                    iconCls: "pagination-loading"
                });
            } else {
                bb.refresh.linkbutton({
                    iconCls: "pagination-load"
                });
            }
        }*/
    };
    $.fn.pagination = function (_9e, _9f) {
        if (typeof _9e == "string") {
            return $.fn.pagination.methods[_9e](this, _9f);
        }
        _9e = _9e || {};
        return this.each(function () {
            var _a0;
            var _a1 = $.data(this, "pagination");
            if (_a1) {
                _a0 = $.extend(_a1.options, _9e);
            } else {
                _a0 = $.extend({}, $.fn.pagination.defaults, $.fn.pagination.parseOptions(this), _9e);
                $.data(this, "pagination", {
                    options: _a0
                });
            }
            _87(this);
            _94(this);
        });
    };
    
    $.fn.pagination.methods = {
        options: function (jq) {
            return $.data(jq[0], "pagination").options;
        },
        loading: function (jq) {
            return jq.each(function () {
                _9a(this, true);
            });
        },
        loaded: function (jq) {
            return jq.each(function () {
                _9a(this, false);
            });
        },
        refresh: function (jq, _a2) {
            return jq.each(function () {
                _94(this, _a2);
            });
        },
        select: function (jq, _a3) {
            return jq.each(function () {
                _8f(this, _a3);
            });
        }
    };
    $.fn.pagination.parseOptions = function (_a4) {
        var t = $(_a4);
        return $.extend({}, $.parser.parseOptions(_a4, [{
            total: "number",
            pageSize: "number",
            pageNumber: "number",
            viewNumber: "number"
        }, {
            loading: "boolean",
            showPageList: "boolean",
            showRefresh: "boolean"
        }]), {
            pageList: (t.attr("pageList") ? eval(t.attr("pageList")) : undefined)
        });
    };
    $.fn.pagination.defaults = {
        total: 1,
        pageSize: 10,
        pageNumber: 1,
        viewNumber: 0,
        pageList: [10, 20, 30, 50],
        loading: false,
        buttons: null,
        showPageList: true,
        showRefresh: false,
        links:10,
        //layout:["list","sep","first","prev","sep","manual","sep","next","last","sep","refresh"],
        layout:["list","first","prev","sep","manual","sep","next","last"],
        onSelectPage: function (_a5, _a6) {},
        onBeforeRefresh: function (_a7, _a8) {},
        onRefresh: function (_a9, _aa) {},
        onChangePageSize: function (_ab) {},
        onSettingPopup: function (_a5, _a6) {},
        onManagementPopup: function (_a5, _a6) {},
        onResizeColumn: function (_a5, _a6) {},
        beforePageText: "",
        afterPageText: " / {pages}",
        displayMsg: "{from}~{to} of {total}",
        nav: {
            first: {
                iconCls: "pagination-first",
                handler: function () {
                    var _ac = $(this).pagination("options");
                    if (_ac.pageNumber > 1) {
                        $(this).pagination("select", 1);
                    }
                }
            },
            prev: {
                iconCls: "pagination-prev",
                handler: function () {
                    var _ad = $(this).pagination("options");
                    if (_ad.pageNumber > 1) {
                        $(this).pagination("select", _ad.pageNumber - 1);
                    }
                }
            },
            next: {
                iconCls: "pagination-next",
                handler: function () {
                    var _ae = $(this).pagination("options");
                    var _af = Math.ceil(_ae.total / _ae.pageSize);
                    if (_ae.pageNumber < _af) {
                        $(this).pagination("select", _ae.pageNumber + 1);
                    }
                }
            },
            last: {
                iconCls: "pagination-last",
                handler: function () {
                    var _b0 = $(this).pagination("options");
                    var _b1 = Math.ceil(_b0.total / _b0.pageSize);
                    if (_b0.pageNumber < _b1) {
                        $(this).pagination("select", _b1);
                    }
                }
            },
            refresh: {
                iconCls: "pagination-refresh",
                handler: function () {
                    var _b2 = $(this).pagination("options");
                    if (_b2.onBeforeRefresh.call(this, _b2.pageNumber, _b2.pageSize) != false) {
                        $(this).pagination("select", _b2.pageNumber);
                        _b2.onRefresh.call(this, _b2.pageNumber, _b2.pageSize);
                    }
                }
            },
            setting: {
                iconCls: "pagination-setting",
                handler: function () {
                    var _b3 = $(this).pagination("options");
                    _b3.onSettingPopup.call(this);
                }
            },
            management: {
                iconCls: "pagination-management",
                handler: function () {
                    var _b4 = $(this).pagination("options");
                    _b4.onManagementPopup.call(this);
                }
            },
            resizeColumn: { // 데이터 넚이에 맞게 폭을 자동 조절(2020-12-30)
                iconCls: "pagination-resize_column",
                handler: function () {
                	var _b5 = $(this).pagination("options");
                    _b5.onResizeColumn.call(this);
                }
            }
        }
    };
})(jQuery);
(function ($) {
    function _b3(_b4) {
        var _b5 = $(_b4);
        _b5.addClass("tree");
        return _b5;
    };

    function _b6(_b7) {
        var _b8 = [];
        _b9(_b8, $(_b7));

        function _b9(aa, _ba) {
            _ba.children("li").each(function () {
                var _bb = $(this);
                var _bc = $.extend({}, $.parser.parseOptions(this, ["id", "iconCls", "state"]), {
                    checked: (_bb.attr("checked") ? true : undefined)
                });
                _bc.text = _bb.children("span").html();
                if (!_bc.text) {
                    _bc.text = _bb.html();
                }
                var _bd = _bb.children("ul");
                if (_bd.length) {
                    _bc.children = [];
                    _b9(_bc.children, _bd);
                }
                aa.push(_bc);
            });
        };
        return _b8;
    };

    function _be(_bf) {
        var _c0 = $.data(_bf, "tree").options;
        $(_bf).unbind().bind("mouseover", function (e) {
            var tt = $(e.target);
            var _c1 = tt.closest("div.tree-node");
            if (!_c1.length) {
                return;
            }
            _c1.addClass("tree-node-hover");
            if (tt.hasClass("tree-hit")) {
                if (tt.hasClass("tree-expanded")) {
                    tt.addClass("tree-expanded-hover");
                } else {
                    tt.addClass("tree-collapsed-hover");
                }
            }
            e.stopPropagation();
        }).bind("mouseout", function (e) {
            var tt = $(e.target);
            var _c2 = tt.closest("div.tree-node");
            if (!_c2.length) {
                return;
            }
            _c2.removeClass("tree-node-hover");
            if (tt.hasClass("tree-hit")) {
                if (tt.hasClass("tree-expanded")) {
                    tt.removeClass("tree-expanded-hover");
                } else {
                    tt.removeClass("tree-collapsed-hover");
                }
            }
            e.stopPropagation();
        }).bind("click", function (e) {
            var tt = $(e.target);
            var _c3 = tt.closest("div.tree-node");
            if (!_c3.length) {
                return;
            }
            if (tt.hasClass("tree-hit")) {
                _126(_bf, _c3[0]);
                return false;
            } else {
                if (tt.hasClass("tree-checkbox")) {
                    _eb(_bf, _c3[0], !tt.hasClass("tree-checkbox1"));
                    return false;
                } else {
                    _164(_bf, _c3[0]);
                    _c0.onClick.call(_bf, _c6(_bf, _c3[0]));
                }
            }
            e.stopPropagation();
        }).bind("dblclick", function (e) {
            var _c4 = $(e.target).closest("div.tree-node");
            if (!_c4.length) {
                return;
            }
            _164(_bf, _c4[0]);
            _c0.onDblClick.call(_bf, _c6(_bf, _c4[0]));
            e.stopPropagation();
        }).bind("contextmenu", function (e) {
            var _c5 = $(e.target).closest("div.tree-node");
            if (!_c5.length) {
                return;
            }
            _c0.onContextMenu.call(_bf, e, _c6(_bf, _c5[0]));
            e.stopPropagation();
        });
    };

    function _c7(_c8) {
        var _c9 = $(_c8).find("div.tree-node");
        _c9.draggable("disable");
        _c9.css("cursor", "pointer");
    };

    function _ca(_cb) {
        var _cc = $.data(_cb, "tree");
        var _cd = _cc.options;
        var _ce = _cc.tree;
        _cc.disabledNodes = [];
        _ce.find("div.tree-node").draggable({
            disabled: false,
            revert: true,
            cursor: "pointer",
            proxy: function (_cf) {
                var p = $("<div class=\"tree-node-proxy\"></div>").appendTo("body");
                p.html("<span class=\"tree-dnd-icon tree-dnd-no\">&nbsp;</span>" + $(_cf).find(".tree-title").html());
                p.hide();
                return p;
            },
            deltaX: 15,
            deltaY: 15,
            onBeforeDrag: function (e) {
                if (_cd.onBeforeDrag.call(_cb, _c6(_cb, this)) == false) {
                    return false;
                }
                if ($(e.target).hasClass("tree-hit") || $(e.target).hasClass("tree-checkbox")) {
                    return false;
                }
                if (e.which != 1) {
                    return false;
                }
                $(this).next("ul").find("div.tree-node").droppable({
                    accept: "no-accept"
                });
                var _d0 = $(this).find("span.tree-indent");
                if (_d0.length) {
                    e.data.offsetWidth -= _d0.length * _d0.width();
                }
            },
            onStartDrag: function () {
                $(this).draggable("proxy").css({
                    left: -10000,
                    top: -10000
                });
                _cd.onStartDrag.call(_cb, _c6(_cb, this));
                var _d1 = _c6(_cb, this);
                if (_d1.id == undefined) {
                    _d1.id = "easyui_tree_node_id_temp";
                    _15c(_cb, _d1);
                }
                _cc.draggingNodeId = _d1.id;
            },
            onDrag: function (e) {
                var x1 = e.pageX,
                    y1 = e.pageY,
                    x2 = e.data.startX,
                    y2 = e.data.startY;
                var d = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
                if (d > 3) {
                    $(this).draggable("proxy").show();
                }
                this.pageY = e.pageY;
            },
            onStopDrag: function () {
                $(this).next("ul").find("div.tree-node").droppable({
                    accept: "div.tree-node"
                });
                for (var i = 0; i < _cc.disabledNodes.length; i++) {
                    $(_cc.disabledNodes[i]).droppable("enable");
                }
                _cc.disabledNodes = [];
                var _d2 = _162(_cb, _cc.draggingNodeId);
                if (_d2 && _d2.id == "easyui_tree_node_id_temp") {
                    _d2.id = "";
                    _15c(_cb, _d2);
                }
                _cd.onStopDrag.call(_cb, _d2);
            }
        }).droppable({
            accept: "div.tree-node",
            onDragEnter: function (e, _d3) {
                if (_cd.onDragEnter.call(_cb, this, _c6(_cb, _d3)) == false) {
                    _d4(_d3, false);
                    $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                    $(this).droppable("disable");
                    _cc.disabledNodes.push(this);
                }
            },
            onDragOver: function (e, _d5) {
                if ($(this).droppable("options").disabled) {
                    return;
                }
                var _d6 = _d5.pageY;
                var top = $(this).offset().top;
                var _d7 = top + $(this).outerHeight();
                _d4(_d5, true);
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                if (_d6 > top + (_d7 - top) / 2) {
                    if (_d7 - _d6 < 5) {
                        $(this).addClass("tree-node-bottom");
                    } else {
                        $(this).addClass("tree-node-append");
                    }
                } else {
                    if (_d6 - top < 5) {
                        $(this).addClass("tree-node-top");
                    } else {
                        $(this).addClass("tree-node-append");
                    }
                }
                if (_cd.onDragOver.call(_cb, this, _c6(_cb, _d5)) == false) {
                    _d4(_d5, false);
                    $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                    $(this).droppable("disable");
                    _cc.disabledNodes.push(this);
                }
            },
            onDragLeave: function (e, _d8) {
                _d4(_d8, false);
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                _cd.onDragLeave.call(_cb, this, _c6(_cb, _d8));
            },
            onDrop: function (e, _d9) {
                var _da = this;
                var _db, _dc;
                if ($(this).hasClass("tree-node-append")) {
                    _db = _dd;
                } else {
                    _db = _de;
                    _dc = $(this).hasClass("tree-node-top") ? "top" : "bottom";
                }
                if (_cd.onBeforeDrop.call(_cb, _da, _156(_cb, _d9), _dc) == false) {
                    $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                    return;
                }
                _db(_d9, _da, _dc);
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
            }
        });

        function _d4(_df, _e0) {
            var _e1 = $(_df).draggable("proxy").find("span.tree-dnd-icon");
            _e1.removeClass("tree-dnd-yes tree-dnd-no").addClass(_e0 ? "tree-dnd-yes" : "tree-dnd-no");
        };

        function _dd(_e2, _e3) {
            if (_c6(_cb, _e3).state == "closed") {
                _11e(_cb, _e3, function () {
                    _e4();
                });
            } else {
                _e4();
            }

            function _e4() {
                var _e5 = $(_cb).tree("pop", _e2);
                $(_cb).tree("append", {
                    parent: _e3,
                    data: [_e5]
                });
                _cd.onDrop.call(_cb, _e3, _e5, "append");
            };
        };

        function _de(_e6, _e7, _e8) {
            var _e9 = {};
            if (_e8 == "top") {
                _e9.before = _e7;
            } else {
                _e9.after = _e7;
            }
            var _ea = $(_cb).tree("pop", _e6);
            _e9.data = _ea;
            $(_cb).tree("insert", _e9);
            _cd.onDrop.call(_cb, _e7, _ea, _e8);
        };
    };

    function _eb(_ec, _ed, _ee) {
        var _ef = $.data(_ec, "tree").options;
        if (!_ef.checkbox) {
            return;
        }
        var _f0 = _c6(_ec, _ed);
        if (_ef.onBeforeCheck.call(_ec, _f0, _ee) == false) {
            return;
        }
        var _f1 = $(_ed);
        var ck = _f1.find(".tree-checkbox");
        ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
        if (_ee) {
            ck.addClass("tree-checkbox1");
        } else {
            ck.addClass("tree-checkbox0");
        }
        if (_ef.cascadeCheck) {
            _f2(_f1);
            _f3(_f1);
        }
        _ef.onCheck.call(_ec, _f0, _ee);

        function _f3(_f4) {
            var _f5 = _f4.next().find(".tree-checkbox");
            _f5.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
            if (_f4.find(".tree-checkbox").hasClass("tree-checkbox1")) {
                _f5.addClass("tree-checkbox1");
            } else {
                _f5.addClass("tree-checkbox0");
            }
        };

        function _f2(_f6) {
            var _f7 = _131(_ec, _f6[0]);
            if (_f7) {
                var ck = $(_f7.target).find(".tree-checkbox");
                ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
                if (_f8(_f6)) {
                    ck.addClass("tree-checkbox1");
                } else {
                    if (_f9(_f6)) {
                        ck.addClass("tree-checkbox0");
                    } else {
                        ck.addClass("tree-checkbox2");
                    }
                }
                _f2($(_f7.target));
            }

            function _f8(n) {
                var ck = n.find(".tree-checkbox");
                if (ck.hasClass("tree-checkbox0") || ck.hasClass("tree-checkbox2")) {
                    return false;
                }
                var b = true;
                n.parent().siblings().each(function () {
                    if (!$(this).children("div.tree-node").children(".tree-checkbox").hasClass("tree-checkbox1")) {
                        b = false;
                    }
                });
                return b;
            };

            function _f9(n) {
                var ck = n.find(".tree-checkbox");
                if (ck.hasClass("tree-checkbox1") || ck.hasClass("tree-checkbox2")) {
                    return false;
                }
                var b = true;
                n.parent().siblings().each(function () {
                    if (!$(this).children("div.tree-node").children(".tree-checkbox").hasClass("tree-checkbox0")) {
                        b = false;
                    }
                });
                return b;
            };
        };
    };

    function _fa(_fb, _fc) {
        var _fd = $.data(_fb, "tree").options;
        var _fe = $(_fc);
        if (_ff(_fb, _fc)) {
            var ck = _fe.find(".tree-checkbox");
            if (ck.length) {
                if (ck.hasClass("tree-checkbox1")) {
                    _eb(_fb, _fc, true);
                } else {
                    _eb(_fb, _fc, false);
                }
            } else {
                if (_fd.onlyLeafCheck) {
                    $("<span class=\"tree-checkbox tree-checkbox0\"></span>").insertBefore(_fe.find(".tree-title"));
                }
            }
        } else {
            var ck = _fe.find(".tree-checkbox");
            if (_fd.onlyLeafCheck) {
                ck.remove();
            } else {
                if (ck.hasClass("tree-checkbox1")) {
                    _eb(_fb, _fc, true);
                } else {
                    if (ck.hasClass("tree-checkbox2")) {
                        var _100 = true;
                        var _101 = true;
                        var _102 = _103(_fb, _fc);
                        for (var i = 0; i < _102.length; i++) {
                            if (_102[i].checked) {
                                _101 = false;
                            } else {
                                _100 = false;
                            }
                        }
                        if (_100) {
                            _eb(_fb, _fc, true);
                        }
                        if (_101) {
                            _eb(_fb, _fc, false);
                        }
                    }
                }
            }
        }
    };

    function _104(_105, ul, data, _106) {
        var opts = $.data(_105, "tree").options;
        data = opts.loadFilter.call(_105, data, $(ul).prev("div.tree-node")[0]);
        if (!_106) {
            $(ul).empty();
        }
        var _107 = [];
        var _108 = $(ul).prev("div.tree-node").find("span.tree-indent, span.tree-hit").length;
        _109(ul, data, _108);
        if (opts.dnd) {
            _ca(_105);
        } else {
            _c7(_105);
        }
        for (var i = 0; i < _107.length; i++) {
            _eb(_105, _107[i], true);
        }
        setTimeout(function () {
            _10e(_105, _105);
        }, 0);
        var _10a = null;
        if (_105 != ul) {
            var node = $(ul).prev();
            _10a = _c6(_105, node[0]);
        }
        
        opts.onLoadSuccess.call(_105, _10a, data);

        function _109(ul, _10b, _10c) {
            for (var i = 0; i < _10b.length; i++) {
                var li = $("<li></li>").appendTo(ul);
                var item = _10b[i];
                if (item.state != "open" && item.state != "closed") {
                    item.state = "open";
                }
                var node = $("<div class=\"tree-node\"></div>").appendTo(li);
                node.attr("node-id", item.id);
                $.data(node[0], "tree-node", {
                    id: item.id,
                    text: item.text,
                    iconCls: item.iconCls,
                    attributes: item.attributes
                });
                $("<span class=\"tree-title\"></span>").html(opts.formatter.call(_105, item)).appendTo(node);
                if (opts.checkbox) {
                    if (opts.onlyLeafCheck) {
                        if (item.state == "open" && (!item.children || !item.children.length)) {
                            if (item.checked) {
                                $("<span class=\"tree-checkbox tree-checkbox1\"></span>").prependTo(node);
                            } else {
                                $("<span class=\"tree-checkbox tree-checkbox0\"></span>").prependTo(node);
                            }
                        }
                    } else {
                        if (item.checked) {
                            $("<span class=\"tree-checkbox tree-checkbox1\"></span>").prependTo(node);
                            _107.push(node[0]);
                        } else {
                            $("<span class=\"tree-checkbox tree-checkbox0\"></span>").prependTo(node);
                        }
                    }
                }
                if (item.children && item.children.length) {
                    var _10d = $("<ul></ul>").appendTo(li);
                    if (item.state == "open") {
                        $("<span class=\"tree-icon tree-folder tree-folder-open\"></span>").addClass(item.iconCls).prependTo(node);
                        $("<span class=\"tree-hit tree-expanded\"></span>").prependTo(node);
                    } else {
                        $("<span class=\"tree-icon tree-folder\"></span>").addClass(item.iconCls).prependTo(node);
                        $("<span class=\"tree-hit tree-collapsed\"></span>").prependTo(node);
                        _10d.css("display", "none");
                    }
                    _109(_10d, item.children, _10c + 1);
                } else {
                    if (item.state == "closed") {
                        $("<span class=\"tree-icon tree-folder\"></span>").addClass(item.iconCls).prependTo(node);
                        $("<span class=\"tree-hit tree-collapsed\"></span>").prependTo(node);
                    } else {
                        $("<span class=\"tree-icon tree-file\"></span>").addClass(item.iconCls).prependTo(node);
                        $("<span class=\"tree-indent\"></span>").prependTo(node);
                    }
                }
                for (var j = 0; j < _10c; j++) {
                    $("<span class=\"tree-indent\"></span>").prependTo(node);
                }
            }
        };
    };

    function _10e(_10f, ul, _110) {
        var opts = $.data(_10f, "tree").options;
        if (!opts.lines) {
            return;
        }
        if (!_110) {
            _110 = true;
            $(_10f).find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom");
            $(_10f).find("div.tree-node").removeClass("tree-node-last tree-root-first tree-root-one");
            var _111 = $(_10f).tree("getRoots");
            if (_111.length > 1) {
                $(_111[0].target).addClass("tree-root-first");
            } else {
                if (_111.length == 1) {
                    $(_111[0].target).addClass("tree-root-one");
                }
            }
        }
        $(ul).children("li").each(function () {
            var node = $(this).children("div.tree-node");
            var ul = node.next("ul");
            if (ul.length) {
                if ($(this).next().length) {
                    _112(node);
                }
                _10e(_10f, ul, _110);
            } else {
                _113(node);
            }
        });
        var _114 = $(ul).children("li:last").children("div.tree-node").addClass("tree-node-last");
        _114.children("span.tree-join").removeClass("tree-join").addClass("tree-joinbottom");

        function _113(node, _115) {
            var icon = node.find("span.tree-icon");
            icon.prev("span.tree-indent").addClass("tree-join");
        };

        function _112(node) {
            var _116 = node.find("span.tree-indent, span.tree-hit").length;
            node.next().find("div.tree-node").each(function () {
                $(this).children("span:eq(" + (_116 - 1) + ")").addClass("tree-line");
            });
        };
    };

    function _117(_118, ul, _119, _11a) {
        var opts = $.data(_118, "tree").options;
        //_119 = _119 || {};
        var _11b = null;
        if (_118 != ul) {
            var node = $(ul).prev();
            _11b = _c6(_118, node[0]);
        }
        var _1f7 = $.extend({}, opts.queryParams);   // 추가(YNI-Master, 2020.01.10)
        _119 = _119 || _1f7; // 추가(YNI-Master, 2020.01.10)
        if (opts.onBeforeLoad.call(_118, _11b, _119) == false) {
            return;
        }
        var _11c = $(ul).prev().children("span.tree-folder");
        _11c.addClass("tree-loading");
        var _11d = opts.loader.call(_118, _119, function (data) {
            _11c.removeClass("tree-loading");
            _104(_118, ul, data);
            if (_11a) {
                _11a();
            }
        }, function () {
            _11c.removeClass("tree-loading");
            opts.onLoadError.apply(_118, arguments);
            if (_11a) {
                _11a();
            }
        });
        if (_11d == false) {
            _11c.removeClass("tree-loading");
        }
    };

    function _11e(_11f, _120, _121) {
        var opts = $.data(_11f, "tree").options;
        var hit = $(_120).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-expanded")) {
            return;
        }
        var node = _c6(_11f, _120);
        if (opts.onBeforeExpand.call(_11f, node) == false) {
            return;
        }
        hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
        hit.next().addClass("tree-folder-open");
        var ul = $(_120).next();
        if (ul.length) {
            if (opts.animate) {
                ul.slideDown("normal", function () {
                    opts.onExpand.call(_11f, node);
                    if (_121) {
                        _121();
                    }
                });
            } else {
                ul.css("display", "block");
                opts.onExpand.call(_11f, node);
                if (_121) {
                    _121();
                }
            }
        } else {
            var _122 = $("<ul style=\"display:none\"></ul>").insertAfter(_120);
            _117(_11f, _122[0], {
                id: node.id
            }, function () {
                if (_122.is(":empty")) {
                    _122.remove();
                }
                if (opts.animate) {
                    _122.slideDown("normal", function () {
                        opts.onExpand.call(_11f, node);
                        if (_121) {
                            _121();
                        }
                    });
                } else {
                    _122.css("display", "block");
                    opts.onExpand.call(_11f, node);
                    if (_121) {
                        _121();
                    }
                }
            });
        }
    };

    function _123(_124, _125) {
        var opts = $.data(_124, "tree").options;
        var hit = $(_125).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-collapsed")) {
            return;
        }
        var node = _c6(_124, _125);
        if (opts.onBeforeCollapse.call(_124, node) == false) {
            return;
        }
        hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
        hit.next().removeClass("tree-folder-open");
        var ul = $(_125).next();
        if (opts.animate) {
            ul.slideUp("normal", function () {
                opts.onCollapse.call(_124, node);
            });
        } else {
            ul.css("display", "none");
            opts.onCollapse.call(_124, node);
        }
    };

    function _126(_127, _128) {
        var hit = $(_128).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-expanded")) {
            _123(_127, _128);
        } else {
            _11e(_127, _128);
        }
    };

    function _129(_12a, _12b) {
        var _12c = _103(_12a, _12b);
        if (_12b) {
            _12c.unshift(_c6(_12a, _12b));
        }
        for (var i = 0; i < _12c.length; i++) {
            _11e(_12a, _12c[i].target);
        }
    };

    function _12d(_12e, _12f) {
        var _130 = [];
        var p = _131(_12e, _12f);
        while (p) {
            _130.unshift(p);
            p = _131(_12e, p.target);
        }
        for (var i = 0; i < _130.length; i++) {
            _11e(_12e, _130[i].target);
        }
    };

    function _132(_133, _134) {
        var _135 = _103(_133, _134);
        if (_134) {
            _135.unshift(_c6(_133, _134));
        }
        for (var i = 0; i < _135.length; i++) {
            _123(_133, _135[i].target);
        }
    };

    function _136(_137) {
        var _138 = _139(_137);
        if (_138.length) {
            return _138[0];
        } else {
            return null;
        }
    };

    function _139(_13a) {
        var _13b = [];
        $(_13a).children("li").each(function () {
            var node = $(this).children("div.tree-node");
            _13b.push(_c6(_13a, node[0]));
        });
        return _13b;
    };

    function _103(_13c, _13d) {
        var _13e = [];
        if (_13d) {
            _13f($(_13d));
        } else {
            var _140 = _139(_13c);
            for (var i = 0; i < _140.length; i++) {
                _13e.push(_140[i]);
                _13f($(_140[i].target));
            }
        }

        function _13f(node) {
            node.next().find("div.tree-node").each(function () {
                _13e.push(_c6(_13c, this));
            });
        };
        return _13e;
    };

    function _131(_141, _142) {
        var ul = $(_142).parent().parent();
        if (ul[0] == _141) {
            return null;
        } else {
            return _c6(_141, ul.prev()[0]);
        }
    };

    function _143(_144, _145) {
        _145 = _145 || "checked";
        var _146 = "";
        if (_145 == "checked") {
            _146 = "span.tree-checkbox1";
        } else {
            if (_145 == "unchecked") {
                _146 = "span.tree-checkbox0";
            } else {
                if (_145 == "indeterminate") {
                    _146 = "span.tree-checkbox2";
                }
            }
        }
        var _147 = [];
        $(_144).find(_146).each(function () {
            var node = $(this).parent();
            _147.push(_c6(_144, node[0]));
        });
        return _147;
    };

    function _148(_149) {
        var node = $(_149).find("div.tree-node-selected");
        if (node.length) {
            return _c6(_149, node[0]);
        } else {
            return null;
        }
    };

    function _14a(_14b, _14c) {
        var node = $(_14c.parent);
        var data = _14c.data;
        if (!data) {
            return;
        }
        data = $.isArray(data) ? data : [data];
        if (!data.length) {
            return;
        }
        var ul;
        if (node.length == 0) {
            ul = $(_14b);
        } else {
            if (_ff(_14b, node[0])) {
                var _14d = node.find("span.tree-icon");
                _14d.removeClass("tree-file").addClass("tree-folder tree-folder-open");
                var hit = $("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(_14d);
                if (hit.prev().length) {
                    hit.prev().remove();
                }
            }
            ul = node.next();
            if (!ul.length) {
                ul = $("<ul></ul>").insertAfter(node);
            }
        }
        _104(_14b, ul[0], data, true);
        _fa(_14b, ul.prev());
    };

    function _14e(_14f, _150) {
        var ref = _150.before || _150.after;
        var _151 = _131(_14f, ref);
        var data = _150.data;
        if (!data) {
            return;
        }
        data = $.isArray(data) ? data : [data];
        if (!data.length) {
            return;
        }
        _14a(_14f, {
            parent: (_151 ? _151.target : null),
            data: data
        });
        var li = $();
        var last = _151 ? $(_151.target).next().children("li:last") : $(_14f).children("li:last");
        for (var i = 0; i < data.length; i++) {
            li = last.add(li);
            last = last.prev();
        }
        if (_150.before) {
            li.insertBefore($(ref).parent());
        } else {
            li.insertAfter($(ref).parent());
        }
    };

    function _152(_153, _154) {
        var _155 = _131(_153, _154);
        var node = $(_154);
        var li = node.parent();
        var ul = li.parent();
        li.remove();
        if (ul.children("li").length == 0) {
            var node = ul.prev();
            node.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
            node.find(".tree-hit").remove();
            $("<span class=\"tree-indent\"></span>").prependTo(node);
            if (ul[0] != _153) {
                ul.remove();
            }
        }
        if (_155) {
            _fa(_153, _155.target);
        }
        _10e(_153, _153);
    };

    function _156(_157, _158) {
        function _159(aa, ul) {
            ul.children("li").each(function () {
                var node = $(this).children("div.tree-node");
                var _15a = _c6(_157, node[0]);
                var sub = $(this).children("ul");
                if (sub.length) {
                    _15a.children = [];
                    _159(_15a.children, sub);
                }
                aa.push(_15a);
            });
        };
        if (_158) {
            var _15b = _c6(_157, _158);
            _15b.children = [];
            _159(_15b.children, $(_158).next());
            return _15b;
        } else {
            return null;
        }
    };

    function _15c(_15d, _15e) {
        var opts = $.data(_15d, "tree").options;
        var node = $(_15e.target);
        var _15f = _c6(_15d, _15e.target);
        if (_15f.iconCls) {
            node.find(".tree-icon").removeClass(_15f.iconCls);
        }
        var data = $.extend({}, _15f, _15e);
        $.data(_15e.target, "tree-node", data);
        node.attr("node-id", data.id);
        node.find(".tree-title").html(opts.formatter.call(_15d, data));
        if (data.iconCls) {
            node.find(".tree-icon").addClass(data.iconCls);
        }
        if (_15f.checked != data.checked) {
            _eb(_15d, _15e.target, data.checked);
        }
    };

    function _c6(_160, _161) {
        var node = $.extend({}, $.data(_161, "tree-node"), {
            target: _161,
            checked: $(_161).find(".tree-checkbox").hasClass("tree-checkbox1")
        });
        if (!_ff(_160, _161)) {
            node.state = $(_161).find(".tree-hit").hasClass("tree-expanded") ? "open" : "closed";
        }
        return node;
    };

    function _162(_163, id) {
        var node = $(_163).find("div.tree-node[node-id=" + id + "]");
        if (node.length) {
            return _c6(_163, node[0]);
        } else {
            return null;
        }
    };

    function _164(_165, _166) {
        var opts = $.data(_165, "tree").options;
        var node = _c6(_165, _166);
        if (opts.onBeforeSelect.call(_165, node) == false) {
            return;
        }
        $("div.tree-node-selected", _165).removeClass("tree-node-selected");
        $(_166).addClass("tree-node-selected");
        opts.onSelect.call(_165, node);
    };

    function _ff(_167, _168) {
        var node = $(_168);
        var hit = node.children("span.tree-hit");
        return hit.length == 0;
    };

    function _169(_16a, _16b) {
        var opts = $.data(_16a, "tree").options;
        var node = _c6(_16a, _16b);
        if (opts.onBeforeEdit.call(_16a, node) == false) {
            return;
        }
        $(_16b).css("position", "relative");
        var nt = $(_16b).find(".tree-title");
        var _16c = nt.outerWidth();
        nt.empty();
        var _16d = $("<input class=\"tree-editor\">").appendTo(nt);
        _16d.val(node.text).focus();
        _16d.width(_16c + 20);
        _16d.height(document.compatMode == "CSS1Compat" ? (18 - (_16d.outerHeight() - _16d.height())) : 18);
        _16d.bind("click", function (e) {
            return false;
        }).bind("mousedown", function (e) {
            e.stopPropagation();
        }).bind("mousemove", function (e) {
            e.stopPropagation();
        }).bind("keydown", function (e) {
            if (e.keyCode == 13) {
                _16e(_16a, _16b);
                return false;
            } else {
                if (e.keyCode == 27) {
                    _172(_16a, _16b);
                    return false;
                }
            }
        }).bind("blur", function (e) {
            e.stopPropagation();
            _16e(_16a, _16b);
        });
    };

    function _16e(_16f, _170) {
        var opts = $.data(_16f, "tree").options;
        $(_170).css("position", "");
        var _171 = $(_170).find("input.tree-editor");
        var val = _171.val();
        _171.remove();
        var node = _c6(_16f, _170);
        node.text = val;
        _15c(_16f, node);
        opts.onAfterEdit.call(_16f, node);
    };

    function _172(_173, _174) {
        var opts = $.data(_173, "tree").options;
        $(_174).css("position", "");
        $(_174).find("input.tree-editor").remove();
        var node = _c6(_173, _174);
        _15c(_173, node);
        opts.onCancelEdit.call(_173, node);
    };
    $.fn.tree = function (_175, _176) {
        if (typeof _175 == "string") {
            return $.fn.tree.methods[_175](this, _176);
        }
        var _175 = _175 || {};
        return this.each(function () {
            var _177 = $.data(this, "tree");
            var opts;
            if (_177) {
                opts = $.extend(_177.options, _175);
                _177.options = opts;
            } else {
                opts = $.extend({}, $.fn.tree.defaults, $.fn.tree.parseOptions(this), _175);
                $.data(this, "tree", {
                    options: opts,
                    tree: _b3(this)
                });
                var data = _b6(this);
                if (data.length && !opts.data) {
                    opts.data = data;
                }
            }
            _be(this);
            if (opts.lines) {
                $(this).addClass("tree-lines");
            }
            if (opts.data) {
                _104(this, this, opts.data);
            } else {
                if (opts.dnd) {
                    _ca(this);
                } else {
                    _c7(this);
                }
            }
            _117(this, this);
        });
    };
    $.fn.tree.methods = {
        options: function (jq) {
            return $.data(jq[0], "tree").options;
        },
        loadData: function (jq, data) {
            return jq.each(function () {
            	_104(this, this, data);
            });
        },
        getNode: function (jq, _178) {
            return _c6(jq[0], _178);
        },
        getData: function (jq, _179) {
            return _156(jq[0], _179);
        },
        reload: function (jq, _17a) {
            return jq.each(function () {
                if (_17a) {
                    var node = $(_17a);
                    var hit = node.children("span.tree-hit");
                    hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
                    node.next().remove();
                    _11e(this, _17a);
                } else {
                    $(this).empty();
                    _117(this, this);
                }
            });
        },
        getRoot: function (jq) {
            return _136(jq[0]);
        },
        getRoots: function (jq) {
            return _139(jq[0]);
        },
        getParent: function (jq, _17b) {
            return _131(jq[0], _17b);
        },
        getChildren: function (jq, _17c) {
            return _103(jq[0], _17c);
        },
        getChecked: function (jq, _17d) {
            return _143(jq[0], _17d);
        },
        getSelected: function (jq) {
            return _148(jq[0]);
        },
        isLeaf: function (jq, _17e) {
            return _ff(jq[0], _17e);
        },
        find: function (jq, id) {
            return _162(jq[0], id);
        },
        select: function (jq, _17f) {
            return jq.each(function () {
                _164(this, _17f);
            });
        },
        check: function (jq, _180) {
            return jq.each(function () {
                _eb(this, _180, true);
            });
        },
        uncheck: function (jq, _181) {
            return jq.each(function () {
                _eb(this, _181, false);
            });
        },
        collapse: function (jq, _182) {
            return jq.each(function () {
                _123(this, _182);
            });
        },
        expand: function (jq, _183) {
            return jq.each(function () {
                _11e(this, _183);
            });
        },
        collapseAll: function (jq, _184) {
            return jq.each(function () {
                _132(this, _184);
            });
        },
        expandAll: function (jq, _185) {
            return jq.each(function () {
                _129(this, _185);
            });
        },
        expandTo: function (jq, _186) {
            return jq.each(function () {
                _12d(this, _186);
            });
        },
        toggle: function (jq, _187) {
            return jq.each(function () {
                _126(this, _187);
            });
        },
        append: function (jq, _188) {
            return jq.each(function () {
                _14a(this, _188);
            });
        },
        insert: function (jq, _189) {
            return jq.each(function () {
                _14e(this, _189);
            });
        },
        remove: function (jq, _18a) {
            return jq.each(function () {
                _152(this, _18a);
            });
        },
        pop: function (jq, _18b) {
            var node = jq.tree("getData", _18b);
            jq.tree("remove", _18b);
            return node;
        },
        update: function (jq, _18c) {
            return jq.each(function () {
                _15c(this, _18c);
            });
        },
        enableDnd: function (jq) {
            return jq.each(function () {
                _ca(this);
            });
        },
        disableDnd: function (jq) {
            return jq.each(function () {
                _c7(this);
            });
        },
        beginEdit: function (jq, _18d) {
            return jq.each(function () {
                _169(this, _18d);
            });
        },
        endEdit: function (jq, _18e) {
            return jq.each(function () {
                _16e(this, _18e);
            });
        },
        cancelEdit: function (jq, _18f) {
            return jq.each(function () {
                _172(this, _18f);
            });
        }
    };
    $.fn.tree.parseOptions = function (_190) {
        var t = $(_190);
        return $.extend({}, $.parser.parseOptions(_190, ["url", "method", {
            checkbox: "boolean",
            cascadeCheck: "boolean",
            onlyLeafCheck: "boolean"
        }, {
            animate: "boolean",
            lines: "boolean",
            dnd: "boolean"
        }]));
    };
    $.fn.tree.defaults = {
        url: null,
        method: "post",
        queryParams : {}, // 파라메터 추가(YNI-Master, 2020.01.10)
        animate: false,
        checkbox: false,
        cascadeCheck: true,
        onlyLeafCheck: false,
        lines: false,
        dnd: false,
        data: null,
        formatter: function (node) {
            return node.text;
        },
        loader: function (_191, _192, _193) {
            var opts = $(this).tree("options");
            if (!opts.url) {
                return false;
            }
            $.ajax({
                type: opts.method,
                url: opts.url,
                queryParams : opts.queryParams, // 파라메터 추가(YNI-Master, 2020.01.10)
                data: _191,
                dataType: "json",
                success: function (data) {
                    _192(data);
                },
                error: function () {
                    _193.apply(this, arguments);
                }
            });
        },
        loadFilter: function (data, _194) {
            return data;
        },
        onBeforeLoad: function (node, _195) {},
        onLoadSuccess: function (node, data) {},
        onLoadError: function () {},
        onClick: function (node) {},
        onDblClick: function (node) {},
        onBeforeExpand: function (node) {},
        onExpand: function (node) {},
        onBeforeCollapse: function (node) {},
        onCollapse: function (node) {},
        onBeforeCheck: function (node, _196) {},
        onCheck: function (node, _197) {},
        onBeforeSelect: function (node) {},
        onSelect: function (node) {},
        onContextMenu: function (e, node) {},
        onBeforeDrag: function (node) {},
        onStartDrag: function (node) {},
        onStopDrag: function (node) {},
        onDragEnter: function (_198, _199) {},
        onDragOver: function (_19a, _19b) {},
        onDragLeave: function (_19c, _19d) {},
        onBeforeDrop: function (_19e, _19f, _1a0) {},
        onDrop: function (_1a1, _1a2, _1a3) {},
        onBeforeEdit: function (node) {},
        onAfterEdit: function (node) {},
        onCancelEdit: function (node) {}
    };
})(jQuery);
(function ($) {
    function init(_1a4) {
        $(_1a4).addClass("progressbar");
        $(_1a4).html("<div class=\"progressbar-text\"></div><div class=\"progressbar-value\"><div class=\"progressbar-text\"></div></div>");
        return $(_1a4);
    };

    function _1a5(_1a6, _1a7) {
    	var _1a10 = $.data(_1a6, "progressbar");
        var opts = _1a10.options;
        var bar = _1a10.bar;
        if (_1a7) {
            opts.width = _1a7;
        }
        bar._outerWidth(opts.width)._outerHeight(opts.height);
        bar.find("div.progressbar-text").width(bar.width());
        bar.find("div.progressbar-text,div.progressbar-value").css({
            height: bar.height() + "px",
            lineHeight: bar.height() + "px"
        });
        return false;
    };
    $.fn.progressbar = function (_1a8, _1a9) {
        if (typeof _1a8 == "string") {
            var _1aa = $.fn.progressbar.methods[_1a8];
            if (_1aa) {
                return _1aa(this, _1a9);
            }
        }
        _1a8 = _1a8 || {};
        return this.each(function () {
            var _1ab = $.data(this, "progressbar");
            
            if (_1ab) {
                $.extend(_1ab.options, _1a8);
            } else {
            	_1ab = $.data(this, "progressbar", {
                    options: $.extend({}, $.fn.progressbar.defaults, $.fn.progressbar.parseOptions(this), _1a8),
                    bar: init(this)
                });
            }
            
            $(this).progressbar("setValue", _1ab.options.value);
            _1a5(this);
        });
    };
    $.fn.progressbar.methods = {
        options: function (jq) {
            return $.data(jq[0], "progressbar").options;
        },
        resize: function (jq, _1ac) {
            return jq.each(function () {
                _1a5(this, _1ac);
            });
        },
        getValue: function (jq) {
            return $.data(jq[0], "progressbar").options.value;
        },
        setValue: function (jq, _1ad) {
            if (_1ad < 0) {
                _1ad = 0;
            }
            if (_1ad > 100) {
                _1ad = 100;
            }
            return jq.each(function () {
                var opts = $.data(this, "progressbar").options;
                var text = opts.text.replace(/{value}/, _1ad);
                var _1ae = opts.value;
                opts.value = _1ad;
                $(this).find("div.progressbar-value").width(_1ad + "%");
                $(this).find("div.progressbar-text").html(text);
                if (_1ae != _1ad) {
                    opts.onChange.call(this, _1ad, _1ae);
                }
            });
        }
    };
    $.fn.progressbar.parseOptions = function (_1af) {
        return $.extend({}, $.parser.parseOptions(_1af, ["width", "height", "text", {
            value: "number"
        }]));
    };
    $.fn.progressbar.defaults = {
        width: "auto",
        height: 22,
        value: 0,
        text: "{value}%",
        onChange: function (_1b0, _1b1) {}
    };
})(jQuery);
(function ($) {
    function init(_1b2) {
        $(_1b2).addClass("tooltip-f");
    };

    function _1b3(_1b4) {
        var opts = $.data(_1b4, "tooltip").options;
        $(_1b4).unbind(".tooltip").bind(opts.showEvent + ".tooltip", function (e) {
            _1bb(_1b4, e);
        }).bind(opts.hideEvent + ".tooltip", function (e) {
            _1c1(_1b4, e);
        }).bind("mousemove.tooltip", function (e) {
            if (opts.trackMouse) {
                opts.trackMouseX = e.pageX;
                opts.trackMouseY = e.pageY;
                _1b5(_1b4);
            }
        });
    };

    function _1b6(_1b7) {
        var _1b8 = $.data(_1b7, "tooltip");
        if (_1b8.showTimer) {
            clearTimeout(_1b8.showTimer);
            _1b8.showTimer = null;
        }
        if (_1b8.hideTimer) {
            clearTimeout(_1b8.hideTimer);
            _1b8.hideTimer = null;
        }
    };

    function _1b5(_1b9) {
        var _1ba = $.data(_1b9, "tooltip");
        if (!_1ba || !_1ba.tip) {
            return;
        }
        var opts = _1ba.options;
        var tip = _1ba.tip;
        if (opts.trackMouse) {
            t = $();
            var left = opts.trackMouseX + opts.deltaX;
            var top = opts.trackMouseY + opts.deltaY;
        } else {
            var t = $(_1b9);
            var left = t.offset().left + opts.deltaX;
            var top = t.offset().top + opts.deltaY;
        }
        switch (opts.position) {
        case "right":
            left += t._outerWidth() + 3 + (opts.trackMouse ? 12 : 0);
            top -= (tip._outerHeight() - t._outerHeight()) / 2;
            break;
        case "left":
            left -= tip._outerWidth() + 3 + (opts.trackMouse ? 12 : 0);
            top -= (tip._outerHeight() - t._outerHeight()) / 2;
            break;
        case "top":
            left -= (tip._outerWidth() - t._outerWidth()) / 2;
            top -= tip._outerHeight() + 2 + (opts.trackMouse ? 12 : 0);
            break;
        case "bottom":
            left -= (tip._outerWidth() - t._outerWidth()) / 2;
            top += t._outerHeight() + 2 + (opts.trackMouse ? 12 : 0);
            break;
        case "bottom,left": // 하단 좌측추가(2020.05.30)
        	left -= tip._outerWidth() + (opts.trackMouse ? 12 : 0);
            top += t._outerHeight() + 2 + (opts.trackMouse ? 12 : 0);
            if(left < 0) {
            	left = 0;
            }
            break;
        case "bottom,right": // 하단 우측추가(2020.05.30)
        	left += t._outerWidth() + 3 + (opts.trackMouse ? 12 : 0);
            top += t._outerHeight() - 20;
            break;
        }
        tip.css({
            left: left,
            top: top,
            zIndex: (opts.zIndex != undefined ? opts.zIndex : ($.fn.window ? $.fn.window.defaults.zIndex++ : ""))
        });
        opts.onPosition.call(_1b9, left, top);
    };

    function _1bb(_1bc, e) {
        var _1bd = $.data(_1bc, "tooltip");
        var opts = _1bd.options;
        var tip = _1bd.tip;
        if (!tip) {
            tip = $("<div tabindex=\"-1\" class=\"tooltip\">" + "<div class=\"tooltip-content\"></div>" + "<div class=\"tooltip-arrow-outer\"></div>" + "<div class=\"tooltip-arrow\"></div>" + "</div>").appendTo("body");
            _1bd.tip = tip;
            _1be(_1bc);
        }
        tip.removeClass("tooltip-top tooltip-bottom tooltip-left tooltip-right").addClass("tooltip-" + opts.position);
        _1b6(_1bc);
        _1bd.showTimer = setTimeout(function () {
            _1b5(_1bc);
            tip.show();
            opts.onShow.call(_1bc, e);
            var _1bf = tip.children(".tooltip-arrow-outer");
            var _1c0 = tip.children(".tooltip-arrow");
            var bc = "border-" + opts.position + "-color";
            _1bf.add(_1c0).css({
                borderTopColor: "",
                borderBottomColor: "",
                borderLeftColor: "",
                borderRightColor: ""
            });
            _1bf.css(bc, tip.css(bc));
            _1c0.css(bc, tip.css("backgroundColor"));
        }, opts.showDelay);
    };

    function _1c1(_1c2, e) {
        var _1c3 = $.data(_1c2, "tooltip");
        if (_1c3 && _1c3.tip) {
            _1b6(_1c2);
            _1c3.hideTimer = setTimeout(function () {
                _1c3.tip.hide();
                _1c3.options.onHide.call(_1c2, e);
            }, _1c3.options.hideDelay);
        }
    };

    function _1be(_1c4, _1c5) {
        var _1c6 = $.data(_1c4, "tooltip");
        var opts = _1c6.options;
        if (_1c5) {
            opts.content = _1c5;
        }
        if (!_1c6.tip) {
            return;
        }
        var cc = typeof opts.content == "function" ? opts.content.call(_1c4) : opts.content;
        _1c6.tip.children(".tooltip-content").html(cc);
        opts.onUpdate.call(_1c4, cc);
    };

    function _1c7(_1c8) {
        var _1c9 = $.data(_1c8, "tooltip");
        if (_1c9) {
            _1b6(_1c8);
            var opts = _1c9.options;
            if (_1c9.tip) {
                _1c9.tip.remove();
            }
            if (opts._title) {
                $(_1c8).attr("title", opts._title);
            }
            $.removeData(_1c8, "tooltip");
            $(_1c8).unbind(".tooltip").removeClass("tooltip-f");
            opts.onDestroy.call(_1c8);
        }
    };
    $.fn.tooltip = function (_1ca, _1cb) {
        if (typeof _1ca == "string") {
            return $.fn.tooltip.methods[_1ca](this, _1cb);
        }
        _1ca = _1ca || {};
        return this.each(function () {
            var _1cc = $.data(this, "tooltip");
            if (_1cc) {
                $.extend(_1cc.options, _1ca);
            } else {
                $.data(this, "tooltip", {
                    options: $.extend({}, $.fn.tooltip.defaults, $.fn.tooltip.parseOptions(this), _1ca)
                });
                init(this);
            }
            _1b3(this);
            _1be(this);
        });
    };
    $.fn.tooltip.methods = {
        options: function (jq) {
            return $.data(jq[0], "tooltip").options;
        },
        tip: function (jq) {
            return $.data(jq[0], "tooltip").tip;
        },
        arrow: function (jq) {
            return jq.tooltip("tip").children(".tooltip-arrow-outer,.tooltip-arrow");
        },
        show: function (jq, e) {
            return jq.each(function () {
                _1bb(this, e);
            });
        },
        hide: function (jq, e) {
            return jq.each(function () {
                _1c1(this, e);
            });
        },
        update: function (jq, _1cd) {
            return jq.each(function () {
                _1be(this, _1cd);
            });
        },
        reposition: function (jq) {
            return jq.each(function () {
                _1b5(this);
            });
        },
        destroy: function (jq) {
            return jq.each(function () {
                _1c7(this);
            });
        }
    };
    $.fn.tooltip.parseOptions = function (_1ce) {
        var t = $(_1ce);
        var opts = $.extend({}, $.parser.parseOptions(_1ce, ["position", "showEvent", "hideEvent", "content", {
            deltaX: "number",
            deltaY: "number",
            showDelay: "number",
            hideDelay: "number"
        }]), {
            _title: t.attr("title")
        });
        t.attr("title", "");
        if (!opts.content) {
            opts.content = opts._title;
        }
        return opts;
    };
    $.fn.tooltip.defaults = {
        position: "bottom",
        content: null,
        trackMouse: false,
        deltaX: 0,
        deltaY: 0,
        showEvent: "mouseenter",
        hideEvent: "mouseleave",
        showDelay: 200,
        hideDelay: 100,
        onShow: function (e) {},
        onHide: function (e) {},
        onUpdate: function (_1cf) {},
        onPosition: function (left, top) {},
        onDestroy: function () {}
    };
})(jQuery);
(function ($) {
    $.fn._remove = function () {
        return this.each(function () {
            $(this).remove();
            try {
                this.outerHTML = "";
            } catch (err) {}
        });
    };

    function _1d0(node) {
        node._remove();
    };

    function _1d1(_1d2, _1d3) {
        var opts = $.data(_1d2, "panel").options;
        var _1d4 = $.data(_1d2, "panel").panel;
        var _1d5 = _1d4.children("div.panel-header");
        var _1d6 = _1d4.children("div.panel-body");
        if (_1d3) {
            if (_1d3.width) {
                opts.width = _1d3.width;
            }
            if (_1d3.height) {
            	opts.height = _1d3.height;
            }
            if (_1d3.left != null) {
                opts.left = _1d3.left;
            }
            if (_1d3.top != null) {
                opts.top = _1d3.top;
            }
        }
        opts.fit ? $.extend(opts, _1d4._fit()) : _1d4._fit(false);
        _1d4.css({
            left: opts.left,
            top: opts.top
        });
        if (!isNaN(opts.width)) {
            _1d4._outerWidth(opts.width);
        } else {
            _1d4.width("auto");
        }
        _1d5.add(_1d6)._outerWidth(_1d4.width());
        if (!isNaN(opts.height)) {
            _1d4._outerHeight(opts.height);
            _1d6._outerHeight(_1d4.height() - _1d5._outerHeight());
        } else {
            _1d6.height("auto");
        }
        _1d4.css("height", "");
        opts.onResize.apply(_1d2, [opts.width, opts.height]);
        _1d4.find(">div.panel-body>div").triggerHandler("_resize");
    };

    function _1d7(_1d8, _1d9) {
        var opts = $.data(_1d8, "panel").options;
        var _1da = $.data(_1d8, "panel").panel;
        if (_1d9) {
            if (_1d9.left != null) {
                opts.left = _1d9.left;
            }
            if (_1d9.top != null) {
                opts.top = _1d9.top;
            }
        }
        _1da.css({
            left: opts.left,
            top: opts.top
        });
        opts.onMove.apply(_1d8, [opts.left, opts.top]);
    };

    function _1db(_1dc) {
        $(_1dc).addClass("panel-body");
        var _1dd = $("<div class=\"panel\"></div>").insertBefore(_1dc);
        _1dd[0].appendChild(_1dc);
        _1dd.bind("_resize", function () {
            var opts = $.data(_1dc, "panel").options;
            if (opts.fit == true) {
                _1d1(_1dc);
            }
            return false;
        });
        return _1dd;
    };

    function _1de(_1df) {
        var opts = $.data(_1df, "panel").options;
        var _1e0 = $.data(_1df, "panel").panel;
        if (opts.tools && typeof opts.tools == "string") {
            _1e0.find(">div.panel-header>div.panel-tool .panel-tool-a").appendTo(opts.tools);
        }
        _1d0(_1e0.children("div.panel-header"));
        if (opts.title && !opts.noheader) {
        	var addClass = "";
        	var title = "";
        	var tilecls = "";
        	
        	if(opts.title == "none"){ //jonghyun:none추가
        		addClass = "panel-title-menu";
        		titlecls = "panel-header";
        	} else {
        		addClass = "panel-title";
        		title = opts.title;
        		titlecls = "panel-header";
        	}
        	
            var _1e1 = $("<div class=\""+titlecls+"\"><div class=\""+addClass+"\">" + title + "</div></div>").prependTo(_1e0);
            
            // jonghyun : none조건에 따라 panel-fit-icon css 추가
            if (opts.iconCls && opts.title != "none") {
                _1e1.find(".panel-title").addClass("panel-with-icon");
                $("<div class=\"panel-icon\"></div>").addClass(opts.iconCls).appendTo(_1e1);
            }
            if (opts.iconCls && opts.title == "none") {
                _1e1.find(".panel-fit-title").addClass("panel-with-icon");
                $("<div class=\"panel-fit-icon\"></div>").addClass(opts.iconCls).appendTo(_1e1);
            }
            
            var tool = $("<div class=\"panel-tool\"></div>").appendTo(_1e1);
            tool.bind("click", function (e) {
                e.stopPropagation();
            });
            if (opts.tools) {
                if (typeof opts.tools == "string") {
                    $(opts.tools).children().each(function () {
                        $(this).addClass($(this).attr("iconCls")).addClass("panel-tool-a").appendTo(tool);
                    });
                } else {
                    for (var i = 0; i < opts.tools.length; i++) {
                        var t = $("<a href=\"javascript:void(0)\"></a>").addClass(opts.tools[i].iconCls).appendTo(tool);
                        if (opts.tools[i].handler) {
                            t.bind("click", eval(opts.tools[i].handler));
                        }
                    }
                }
            }
            if (opts.collapsible) {
                $("<a class=\"panel-tool-collapse\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function () {
                    if (opts.collapsed == true) {
                        _1fc(_1df, true);
                    } else {
                        _1f1(_1df, true);
                    }
                    return false;
                });
            }
            if (opts.helpable) {
                $("<a class=\"panel-tool-help\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function () {
                	MM0001_01.dialog.dialogOpen_1();
                    return false;
                });
            }
            if (opts.minimizable) {
                $("<a class=\"panel-tool-min\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function () {
                    _202(_1df);
                    return false;
                });
            }
            if (opts.maximizable) {
                $("<a class=\"panel-tool-max\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function () {
                    if (opts.maximized == true) {
                        _205(_1df);
                    } else {
                        _1f0(_1df);
                    }
                    return false;
                });
            }
            if (opts.closable) {
                $("<a class=\"panel-tool-close\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function () {
                    _1e2(_1df);
                    return false;
                });
            }
            
            _1e0.children("div.panel-body").removeClass("panel-body-noheader");
        } else {
            _1e0.children("div.panel-body").addClass("panel-body-noheader");
        }
    };

    function _1e3(_1e4, _1f7) {
    	var _1e5 = $.data(_1e4, "panel");
        var opts = _1e5.options;
        if (_1f9) {  // 추가(YNI-Master, 2014.12.03)
			opts.queryParams = _1f7;  // 추가(YNI-Master, 2014.12.03)
		}  // 추가(YNI-Master, 2014.12.03)
        if (opts.href) {
            if (!_1e5.isLoaded || !opts.cache) {
            	var _1f9 = $.extend({}, opts.queryParams);   // 추가(YNI-Master, 2014.12.03)
				/*if (opts.onBeforeLoad.call(_1e4, _1f9) == false) {
					return;
				}*/  // 추가(YNI-Master, 2014.12.03)
                _1e5.isLoaded = false;
                _1e6(_1e4);
                if (opts.loadingMessage) {
                    $(_1e4).html($("<div class=\"panel-loading\"></div>").html(opts.loadingMessage));
                }
                // 추가(YNI-Master, 2014.12.03)
                opts.loader.call(_1e4, _1f9, function(data) {
                	_1e7(opts.extractor.call(_1e4, data));
					opts.onLoad.apply(_1e4, arguments);
					_1e5.isLoaded = true;
				}, function() {
					opts.onLoadError.apply(_1e4, arguments);
				});
                /*$.ajax({
                    url: opts.href,
                    cache: false,
                    dataType: "html",
                    success: function (data) {
                        _1e7(opts.extractor.call(_1e4, data));
                        opts.onLoad.apply(_1e4, arguments);
                        _1e5.isLoaded = true;
                    }
                });*/
            }
        } else {
            if (opts.content) {
                if (!_1e5.isLoaded) {
                    _1e6(_1e4);
                    _1e7(opts.content);
                    _1e5.isLoaded = true;
                }
            }
        }

        function _1e7(_1e8) {
            $(_1e4).html(_1e8);
            if ($.parser) {
                $.parser.parse($(_1e4));
            }
        };
    };

    function _1e6(_1e9) {
        var t = $(_1e9);
        t.find(".combo-f").each(function () {
            $(this).combo("destroy");
        });
        t.find(".m-btn").each(function () {
            $(this).menubutton("destroy");
        });
        t.find(".s-btn").each(function () {
            $(this).splitbutton("destroy");
        });
        t.find(".tooltip-f").tooltip("destroy");
    };

    function _1ea(_1eb) {
        $(_1eb).find("div.panel:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible").each(function () {
            $(this).triggerHandler("_resize", [true]);
        });
    };

    function _1ec(_1ed, _1ee) {
        var opts = $.data(_1ed, "panel").options;
        var _1ef = $.data(_1ed, "panel").panel;
        if (_1ee != true) {
            if (opts.onBeforeOpen.call(_1ed) == false) {
                return;
            }
        }
        _1ef.show();
        opts.closed = false;
        opts.minimized = false;
        var tool = _1ef.children("div.panel-header").find("a.panel-tool-restore");
        if (tool.length) {
            opts.maximized = true;
        }
        opts.onOpen.call(_1ed);
        if (opts.maximized == true) {
            opts.maximized = false;
            _1f0(_1ed);
        }
        if (opts.collapsed == true) {
            opts.collapsed = false;
            _1f1(_1ed);
        }
        if (!opts.collapsed) {
            _1e3(_1ed);
            _1ea(_1ed);
        }
    };

    function _1e2(_1f2, _1f3) {
        var opts = $.data(_1f2, "panel").options;
        var _1f4 = $.data(_1f2, "panel").panel;
        if (_1f3 != true) {
            if (opts.onBeforeClose.call(_1f2) == false) {
                return;
            }
        }
        _1f4._fit(false);
        _1f4.hide();
        opts.closed = true;
        opts.onClose.call(_1f2);
    };

    function _1f5(_1f6, _1f7) {
        var opts = $.data(_1f6, "panel").options;
        var _1f8 = $.data(_1f6, "panel").panel;
        if (_1f7 != true) {
            if (opts.onBeforeDestroy.call(_1f6) == false) {
                return;
            }
        }
        _1e6(_1f6);
        _1d0(_1f8);
        opts.onDestroy.call(_1f6);
    };

    function _1f1(_1f9, _1fa) {
        var opts = $.data(_1f9, "panel").options;
        var _1fb = $.data(_1f9, "panel").panel;
        var body = _1fb.children("div.panel-body");
        var tool = _1fb.children("div.panel-header").find("a.panel-tool-collapse");
        if (opts.collapsed == true) {
            return;
        }
        body.stop(true, true);
        if (opts.onBeforeCollapse.call(_1f9) == false) {
            return;
        }
        tool.addClass("panel-tool-expand");
        if (_1fa == true) {
            body.slideUp("normal", function () {
                opts.collapsed = true;
                opts.onCollapse.call(_1f9);
            });
        } else {
            body.hide();
            opts.collapsed = true;
            opts.onCollapse.call(_1f9);
        }
    };

    function _1fc(_1fd, _1fe) {
        var opts = $.data(_1fd, "panel").options;
        var _1ff = $.data(_1fd, "panel").panel;
        var body = _1ff.children("div.panel-body");
        var tool = _1ff.children("div.panel-header").find("a.panel-tool-collapse");
        if (opts.collapsed == false) {
            return;
        }
        body.stop(true, true);
        if (opts.onBeforeExpand.call(_1fd) == false) {
            return;
        }
        tool.removeClass("panel-tool-expand");
        if (_1fe == true) {
            body.slideDown("normal", function () {
                opts.collapsed = false;
                opts.onExpand.call(_1fd);
                _1e3(_1fd);
                _1ea(_1fd);
            });
        } else {
            body.show();
            opts.collapsed = false;
            opts.onExpand.call(_1fd);
            _1e3(_1fd);
            _1ea(_1fd);
        }
    };

    function _1f0(_200) {
        var opts = $.data(_200, "panel").options;
        var _201 = $.data(_200, "panel").panel;
        var tool = _201.children("div.panel-header").find("a.panel-tool-max");
        if (opts.maximized == true) {
            return;
        }
        tool.addClass("panel-tool-restore");
        if (!$.data(_200, "panel").original) {
            $.data(_200, "panel").original = {
                width: opts.width,
                height: opts.height,
                left: opts.left,
                top: opts.top,
                fit: opts.fit
            };
        }
        opts.left = 0;
        opts.top = 0;
        opts.fit = true;
        _1d1(_200);
        opts.minimized = false;
        opts.maximized = true;
        opts.onMaximize.call(_200);
    };

    function _202(_203) {
        var opts = $.data(_203, "panel").options;
        var _204 = $.data(_203, "panel").panel;
        _204._fit(false);
        _204.hide();
        opts.minimized = true;
        opts.maximized = false;
        opts.onMinimize.call(_203);
    };

    function _205(_206) {
        var opts = $.data(_206, "panel").options;
        var _207 = $.data(_206, "panel").panel;
        var tool = _207.children("div.panel-header").find("a.panel-tool-max");
        if (opts.maximized == false) {
            return;
        }
        _207.show();
        tool.removeClass("panel-tool-restore");
        $.extend(opts, $.data(_206, "panel").original);
        _1d1(_206);
        opts.minimized = false;
        opts.maximized = false;
        $.data(_206, "panel").original = null;
        opts.onRestore.call(_206);
    };

    function _208(_209) {
        var opts = $.data(_209, "panel").options;
        var _20a = $.data(_209, "panel").panel;
        var _20b = $(_209).panel("header");
        var body = $(_209).panel("body");
        _20a.css(opts.style);
        _20a.addClass(opts.cls);
        if (opts.border) {
            _20b.removeClass("panel-header-noborder");
            body.removeClass("panel-body-noborder");
        } else {
            _20b.addClass("panel-header-noborder");
            body.addClass("panel-body-noborder");
        }
        _20b.addClass(opts.headerCls);
        body.addClass(opts.bodyCls);
        if (opts.id) {
            $(_209).attr("id", opts.id);
        } else {
            $(_209).attr("id", "");
        }
    };

    function _20c(_20d, _20e) {
        $.data(_20d, "panel").options.title = _20e;
        $(_20d).panel("header").find("div.panel-title").html(_20e);
    };
    var TO = false;
    var _20f = true;
    $(window).unbind(".panel").bind("resize.panel", function () {
        if (!_20f) {
            return;
        }
        if (TO !== false) {
            clearTimeout(TO);
        }
        TO = setTimeout(function () {
            _20f = false;
            var _210 = $("body.layout");
            if (_210.length) {
                _210.layout("resize");
            } else {
                $("body").children("div.panel,div.accordion,div.tabs-container,div.layout").triggerHandler("_resize");
            }
            _20f = true;
            TO = false;
        }, 200);
    });
    $.fn.panel = function (_211, _212) {
        if (typeof _211 == "string") {
            return $.fn.panel.methods[_211](this, _212);
        }
        _211 = _211 || {};
        return this.each(function () {
            var _213 = $.data(this, "panel");
            var opts;
            if (_213) {
                opts = $.extend(_213.options, _211);
                _213.isLoaded = false;
            } else {
                opts = $.extend({}, $.fn.panel.defaults, $.fn.panel.parseOptions(this), _211);
                $(this).attr("title", "");
                _213 = $.data(this, "panel", {
                    options: opts,
                    panel: _1db(this),
                    isLoaded: false
                });
            }
            _1de(this);
            _208(this);
            if (opts.doSize == true) {
                _213.panel.css("display", "block");
                _1d1(this);
            }
            if (opts.closed == true || opts.minimized == true) {
                _213.panel.hide();
            } else {
                _1ec(this);
            }
        });
    };
    $.fn.panel.methods = {
        options: function (jq) {
            return $.data(jq[0], "panel").options;
        },
        panel: function (jq) {
            return $.data(jq[0], "panel").panel;
        },
        header: function (jq) {
            return $.data(jq[0], "panel").panel.find(">div.panel-header");
        },
        body: function (jq) {
            return $.data(jq[0], "panel").panel.find(">div.panel-body");
        },
        setTitle: function (jq, _214) {
            return jq.each(function () {
                _20c(this, _214);
            });
        },
        open: function (jq, _215) {
            return jq.each(function () {
                _1ec(this, _215);
            });
        },
        close: function (jq, _216) {
            return jq.each(function () {
                _1e2(this, _216);
            });
        },
        destroy: function (jq, _217) {
            return jq.each(function () {
                _1f5(this, _217);
            });
        },
        refresh: function (jq, href) {
            return jq.each(function () {
                $.data(this, "panel").isLoaded = false;
                if (href) {
                	if (typeof href == "string") {
                		$.data(this, "panel").options.href = href;
                	} else {
                		$.data(this, "panel").options.queryParams = href;
					}
                }
                _1e3(this);
            });
        },
        resize: function (jq, _218) {
            return jq.each(function () {
                _1d1(this, _218);
            });
        },
        move: function (jq, _219) {
            return jq.each(function () {
                _1d7(this, _219);
            });
        },
        maximize: function (jq) {
            return jq.each(function () {
                _1f0(this);
            });
        },
        minimize: function (jq) {
            return jq.each(function () {
                _202(this);
            });
        },
        restore: function (jq) {
            return jq.each(function () {
                _205(this);
            });
        },
        collapse: function (jq, _21a) {
            return jq.each(function () {
                _1f1(this, _21a);
            });
        },
        expand: function (jq, _21b) {
            return jq.each(function () {
                _1fc(this, _21b);
            });
        }
    };
    $.fn.panel.parseOptions = function (_21c) {
        var t = $(_21c);
        return $.extend({}, $.parser.parseOptions(_21c, ["id", "width", "height", "left", "top", "title", "iconCls", "cls", "headerCls", "bodyCls", "tools", "href", "method", {
            cache: "boolean",
            fit: "boolean",
            border: "boolean",
            noheader: "boolean"
        }, {
            collapsible: "boolean",
            minimizable: "boolean",
            maximizable: "boolean"
        }, {
            closable: "boolean",
            collapsed: "boolean",
            minimized: "boolean",
            maximized: "boolean",
            closed: "boolean"
        }]), {
            loadingMessage: (t.attr("loadingMessage") != undefined ? t.attr("loadingMessage") : undefined)
        });
    };
    $.fn.panel.defaults = {
        id: null,
        title: null,
        iconCls: null,
        width: "auto",
        height: "auto",
        left: null,
        top: null,
        cls: null,
        headerCls: null,
        bodyCls: null,
        style: {},
        cache: true,
        fit: false,
        border: true,
        doSize: true,
        noheader: false,
        content: null,
        collapsible: false,
        minimizable: false,
        maximizable: false,
        closable: false,
        collapsed: false,
        minimized: false,
        maximized: false,
        closed: false,
        tools: null,
        queryParams : {}, // 추가(YNI-Master, 2014.12.03)
		method : "post",	  // 추가(YNI-Master, 2014.12.03)
		mtype : null,   // 메뉴타입 추가(2020-02-28)
        href: null,
        loadingMessage: "Loading...",
        loader : function(_232, _233, _234) {
			var opts = $(this).panel("options");
			var dataType = "html";
			
			if (!opts.href) {
				return false;
			}
			if(!oUtil.isNull(opts.dataType)) {
				dataType = opts.dataType;
			}
			$.ajax({
				type : opts.method,
				url : opts.href,
				cache : false,
				data : _232,
				dataType :dataType,
				success : function(data) {
					_233(data);
				},
				error : function() {
					_234.apply(this, arguments);
				}
			});
		},
        extractor: function (data) {
            var _21d = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
            var _21e = _21d.exec(data);
            if (_21e) {
                return _21e[1];
            } else {
                return data;
            }
        },
        onBeforeLoad : function(_237) {},
        onLoad: function () {},
        onBeforeOpen: function () {},
        onOpen: function () {},
        onBeforeClose: function () {},
        onClose: function () {},
        onBeforeDestroy: function () {},
        onDestroy: function () {},
        onResize: function (_21g, _220) {},
        onMove: function (left, top) {},
        onMaximize: function () {},
        onRestore: function () {},
        onMinimize: function () {},
        onBeforeCollapse: function () {},
        onBeforeExpand: function () {},
        onCollapse: function () {},
        onExpand: function () {}
    };
})(jQuery);
(function ($) {
    function _221(_222, _223) {
        var opts = $.data(_222, "window").options;
        if (_223) {
            if (_223.width) {
                opts.width = _223.width;
            }
            if (_223.height) {
                opts.height = _223.height;
            }
            if (_223.left != null) {
                opts.left = _223.left;
            }
            if (_223.top != null) {
                opts.top = _223.top;
            }
        }
        $(_222).panel("resize", opts);
    };

    function _224(_225, _226) {
        var _227 = $.data(_225, "window");
        if (_226) {
            if (_226.left != null) {
                _227.options.left = _226.left;
            }
            if (_226.top != null) {
                _227.options.top = _226.top;
            }
        }
        $(_225).panel("move", _227.options);
        if (_227.shadow) {
            _227.shadow.css({
                left: _227.options.left,
                top: _227.options.top
            });
        }
    };

    function _228(_229, _22a) {
        var _22b = $.data(_229, "window");
        var opts = _22b.options;
        var _22c = opts.width;
        if (isNaN(_22c)) {
            _22c = _22b.window._outerWidth();
        }
        if (opts.inline) {
            var _22d = _22b.window.parent();
            opts.left = (_22d.width() - _22c) / 2 + _22d.scrollLeft();
        } else {
            opts.left = ($(window)._outerWidth() - _22c) / 2 + $(document).scrollLeft();
        }
        if (_22a) {
            _224(_229);
        }
    };

    function _22e(_22f, _230) {
        var _231 = $.data(_22f, "window");
        var opts = _231.options;
        var _232 = opts.height;
        if (isNaN(_232)) {
            _232 = _231.window._outerHeight();
        }
        if (opts.inline) {
            var _233 = _231.window.parent();
            opts.top = (_233.height() - _232) / 2 + _233.scrollTop();
        } else {
            opts.top = ($(window)._outerHeight() - _232) / 2 + $(document).scrollTop();
        }
        if (_230) {
            _224(_22f);
        }
    };

    function _234(_235) {
        var _236 = $.data(_235, "window");
        var win = $(_235).panel($.extend({}, _236.options, {
            border: false,
            doSize: true,
            closed: true,
            cls: "window",
            headerCls: "window-header",
            bodyCls: "window-body " + (_236.options.noheader ? "window-body-noheader" : ""),
            onBeforeDestroy: function () {
                if (_236.options.onBeforeDestroy.call(_235) == false) {
                    return false;
                }
                if (_236.shadow) {
                    _236.shadow.remove();
                }
                if (_236.mask) {
                    _236.mask.remove();
                }
            },
            onClose: function () {
                if (_236.shadow) {
                    _236.shadow.hide();
                }
                if (_236.mask) {
                    _236.mask.hide();
                }
                _236.options.onClose.call(_235);
            },
            onOpen: function () {
                if (_236.mask) {
                    _236.mask.css({
                        display: "block",
                        zIndex: $.fn.window.defaults.zIndex++
                    });
                }
                if (_236.shadow) {
                    _236.shadow.css({
                        display: "block",
                        zIndex: $.fn.window.defaults.zIndex++,
                        left: _236.options.left,
                        top: _236.options.top,
                        width: _236.window._outerWidth(),
                        height: _236.window._outerHeight()
                    });
                }
                _236.window.css("z-index", $.fn.window.defaults.zIndex++);
                _236.options.onOpen.call(_235);
            },
            onResize: function (_237, _238) {
                var opts = $(this).panel("options");
                $.extend(_236.options, {
                    width: opts.width,
                    height: opts.height,
                    left: opts.left,
                    top: opts.top
                });
                if (_236.shadow) {
                    _236.shadow.css({
                        left: _236.options.left,
                        top: _236.options.top,
                        width: _236.window._outerWidth(),
                        height: _236.window._outerHeight()
                    });
                }
                _236.options.onResize.call(_235, _237, _238);
            },
            onMinimize: function () {
                if (_236.shadow) {
                    _236.shadow.hide();
                }
                if (_236.mask) {
                    _236.mask.hide();
                }
                _236.options.onMinimize.call(_235);
            },
            onBeforeCollapse: function () {
                if (_236.options.onBeforeCollapse.call(_235) == false) {
                    return false;
                }
                if (_236.shadow) {
                    _236.shadow.hide();
                }
            },
            onExpand: function () {
                if (_236.shadow) {
                    _236.shadow.show();
                }
                _236.options.onExpand.call(_235);
            }
        }));
        _236.window = win.panel("panel");
        if (_236.mask) {
            _236.mask.remove();
        }
        if (_236.options.modal == true) {
            _236.mask = $("<div class=\"window-mask\"></div>").insertAfter(_236.window);
            _236.mask.css({
                width: (_236.options.inline ? _236.mask.parent().width() : _239().width),
                height: (_236.options.inline ? _236.mask.parent().height() : _239().height),
                display: "none"
            });
        }
        if (_236.shadow) {
            _236.shadow.remove();
        }
        if (_236.options.shadow == true) {
            _236.shadow = $("<div class=\"window-shadow\"></div>").insertAfter(_236.window);
            _236.shadow.css({
                display: "none"
            });
        }
        if (_236.options.left == null) {
            _228(_235);
        }
        if (_236.options.top == null) {
            _22e(_235);
        }
        _224(_235);
        if (_236.options.closed == false) {
            win.window("open");
        }
    };

    function _23a(_23b) {
        var _23c = $.data(_23b, "window");
        _23c.window.draggable({
            handle: ">div.panel-header>div.panel-title",
            disabled: _23c.options.draggable == false,
            onStartDrag: function (e) {
                if (_23c.mask) {
                    _23c.mask.css("z-index", $.fn.window.defaults.zIndex++);
                }
                if (_23c.shadow) {
                    _23c.shadow.css("z-index", $.fn.window.defaults.zIndex++);
                }
                _23c.window.css("z-index", $.fn.window.defaults.zIndex++);
                if (!_23c.proxy) {
                    _23c.proxy = $("<div class=\"window-proxy\"></div>").insertAfter(_23c.window);
                }
                _23c.proxy.css({
                    display: "none",
                    zIndex: $.fn.window.defaults.zIndex++,
                    left: e.data.left,
                    top: e.data.top
                });
                _23c.proxy._outerWidth(_23c.window._outerWidth());
                _23c.proxy._outerHeight(_23c.window._outerHeight());
                setTimeout(function () {
                    if (_23c.proxy) {
                        _23c.proxy.show();
                    }
                }, 500);
            },
            onDrag: function (e) {
                _23c.proxy.css({
                    display: "block",
                    left: e.data.left,
                    top: e.data.top
                });
                return false;
            },
            onStopDrag: function (e) {
                _23c.options.left = e.data.left;
                _23c.options.top = e.data.top;
                $(_23b).window("move");
                _23c.proxy.remove();
                _23c.proxy = null;
            }
        });
        _23c.window.resizable({
            disabled: _23c.options.resizable == false,
            onStartResize: function (e) {
                _23c.pmask = $("<div class=\"window-proxy-mask\"></div>").insertAfter(_23c.window);
                _23c.pmask.css({
                    zIndex: $.fn.window.defaults.zIndex++,
                    left: e.data.left,
                    top: e.data.top,
                    width: _23c.window._outerWidth(),
                    height: _23c.window._outerHeight()
                });
                if (!_23c.proxy) {
                    _23c.proxy = $("<div class=\"window-proxy\"></div>").insertAfter(_23c.window);
                }
                _23c.proxy.css({
                    zIndex: $.fn.window.defaults.zIndex++,
                    left: e.data.left,
                    top: e.data.top
                });
                _23c.proxy._outerWidth(e.data.width);
                _23c.proxy._outerHeight(e.data.height);
            },
            onResize: function (e) {
                _23c.proxy.css({
                    left: e.data.left,
                    top: e.data.top
                });
                _23c.proxy._outerWidth(e.data.width);
                _23c.proxy._outerHeight(e.data.height);
                return false;
            },
            onStopResize: function (e) {
                $.extend(_23c.options, {
                    left: e.data.left,
                    top: e.data.top,
                    width: e.data.width,
                    height: e.data.height
                });
                _221(_23b);
                _23c.pmask.remove();
                _23c.pmask = null;
                _23c.proxy.remove();
                _23c.proxy = null;
            }
        });
    };

    function _239() {
        if (document.compatMode == "BackCompat") {
            return {
                width: Math.max(document.body.scrollWidth, document.body.clientWidth),
                height: Math.max(document.body.scrollHeight, document.body.clientHeight)
            };
        } else {
            return {
                width: Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth),
                height: Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight)
            };
        }
    };
    $(window).resize(function () {
        $("body>div.window-mask").css({
            width: $(window)._outerWidth(),
            height: $(window)._outerHeight()
        });
        setTimeout(function () {
            $("body>div.window-mask").css({
                width: _239().width,
                height: _239().height
            });
        }, 50);
    });
    $.fn.window = function (_23d, _23e) {
        if (typeof _23d == "string") {
            var _23f = $.fn.window.methods[_23d];
            if (_23f) {
                return _23f(this, _23e);
            } else {
                return this.panel(_23d, _23e);
            }
        }
        _23d = _23d || {};
        return this.each(function () {
            var _240 = $.data(this, "window");
            if (_240) {
                $.extend(_240.options, _23d);
            } else {
                _240 = $.data(this, "window", {
                    options: $.extend({}, $.fn.window.defaults, $.fn.window.parseOptions(this), _23d)
                });
                if (!_240.options.inline) {
                    document.body.appendChild(this);
                }
            }
            _234(this);
            _23a(this);
        });
    };
    $.fn.window.methods = {
        options: function (jq) {
            var _241 = jq.panel("options");
            var _242 = $.data(jq[0], "window").options;
            return $.extend(_242, {
                closed: _241.closed,
                collapsed: _241.collapsed,
                minimized: _241.minimized,
                maximized: _241.maximized
            });
        },
        window: function (jq) {
            return $.data(jq[0], "window").window;
        },
        resize: function (jq, _243) {
            return jq.each(function () {
                _221(this, _243);
            });
        },
        move: function (jq, _244) {
            return jq.each(function () {
                _224(this, _244);
            });
        },
        hcenter: function (jq) {
            return jq.each(function () {
                _228(this, true);
            });
        },
        vcenter: function (jq) {
            return jq.each(function () {
                _22e(this, true);
            });
        },
        center: function (jq) {
            return jq.each(function () {
                _228(this);
                _22e(this);
                _224(this);
            });
        }
    };
    $.fn.window.parseOptions = function (_245) {
        return $.extend({}, $.fn.panel.parseOptions(_245), $.parser.parseOptions(_245, [{
            draggable: "boolean",
            resizable: "boolean",
            shadow: "boolean",
            modal: "boolean",
            inline: "boolean"
        }]));
    };
    $.fn.window.defaults = $.extend({}, $.fn.panel.defaults, {
        zIndex: 9000,
        draggable: true,
        resizable: true,
        shadow: true,
        modal: false,
        inline: false,
        title: "New Window",
        collapsible: true,
        minimizable: true,
        maximizable: true,
        closable: true,
        closed: false
    });
})(jQuery);
(function ($) {
    function _246(_247) {
        var cp = document.createElement("div");
        while (_247.firstChild) {
            cp.appendChild(_247.firstChild);
        }
        _247.appendChild(cp);
        var _248 = $(cp);
        _248.attr("style", $(_247).attr("style"));
        $(_247).removeAttr("style").css("overflow", "hidden");
        _248.panel({
            border: false,
            doSize: false,
            bodyCls: "dialog-content"
        });
        return _248;
    };

    function _249(_24a) {
        var opts = $.data(_24a, "dialog").options;
        var _24b = $.data(_24a, "dialog").contentPanel;
        if (opts.toolbar) {
            if (typeof opts.toolbar == "string") {
                $(opts.toolbar).addClass("dialog-toolbar").prependTo(_24a);
                $(opts.toolbar).show();
            } else {
                $(_24a).find("div.dialog-toolbar").remove();
                var _24c = $("<div class=\"dialog-toolbar\"><table cellspacing=\"0\" cellpadding=\"0\"><tr></tr></table></div>").prependTo(_24a);
                var tr = _24c.find("tr");
                for (var i = 0; i < opts.toolbar.length; i++) {
                    var btn = opts.toolbar[i];
                    if (btn == "-") {
                        $("<td><div class=\"dialog-tool-separator\"></div></td>").appendTo(tr);
                    } else {
                        var td = $("<td></td>").appendTo(tr);
                        var tool = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
                        tool[0].onclick = eval(btn.handler || function () {});
                        tool.linkbutton($.extend({}, btn, {
                            plain: true
                        }));
                    }
                }
            }
        } else {
            $(_24a).find("div.dialog-toolbar").remove();
        }
        if (opts.buttons) {
            if (typeof opts.buttons == "string") {
                $(opts.buttons).addClass("dialog-button").appendTo(_24a);
                $(opts.buttons).show();
            } else {
                $(_24a).find("div.dialog-button").remove();
                var _24d = $("<div class=\"dialog-button\"></div>").appendTo(_24a);
                for (var i = 0; i < opts.buttons.length; i++) {
                    var p = opts.buttons[i];
                    var _24e = $("<a href=\"javascript:void(0)\"></a>").appendTo(_24d);
                    if (p.handler) {
                        _24e[0].onclick = p.handler;
                    }
                    _24e.linkbutton(p);
                }
            }
        } else {
            $(_24a).find("div.dialog-button").remove();
        }
        var _24f = opts.href;
        var _250 = opts.content;
        opts.href = null;
        opts.content = null;

        _24b.panel({
            closed: opts.closed,
            cache: opts.cache,
            queryParams : opts.queryParams, // POST방식 추가(YNI-Master, 2014.12.03)
    		method : opts.method, // POST방식 추가(YNI-Master, 2014.12.03)
            href: _24f,
            content: _250,
            onLoad: function () {
                if (opts.height == "auto") {
                    $(_24a).window("resize");
                }
                opts.onLoad.apply(_24a, arguments);
            }
        });
        $(_24a).window($.extend({}, opts, {
            onOpen: function () {
                if (_24b.panel("options").closed) {
                    _24b.panel("open");
                }
                if (opts.onOpen) {
                    opts.onOpen.call(_24a);
                }
            },
            onResize: function (_251, _252) {
                var _253 = $(_24a);
                _24b.panel("panel").show();
                _24b.panel("resize", {
                    width: _253.width(),
                    height: (_252 == "auto") ? "auto" : _253.height() - _253.children("div.dialog-toolbar")._outerHeight() - _253.children("div.dialog-button")._outerHeight()
                });
                if (opts.onResize) {
                    opts.onResize.call(_24a, _251, _252);
                }
            }
        }));
        opts.href = _24f;
        opts.content = _250;
    };

    function _254(_255, href) {
        var _256 = $.data(_255, "dialog").contentPanel;
        _256.panel("refresh", href);
    };
    $.fn.dialog = function (_257, _258) {
        if (typeof _257 == "string") {
            var _259 = $.fn.dialog.methods[_257];
            if (_259) {
                return _259(this, _258);
            } else {
                return this.window(_257, _258);
            }
        }
        _257 = _257 || {};
        return this.each(function () {
            var _25a = $.data(this, "dialog");
            if (_25a) {
                $.extend(_25a.options, _257);
            } else {
                $.data(this, "dialog", {
                    options: $.extend({}, $.fn.dialog.defaults, $.fn.dialog.parseOptions(this), _257),
                    contentPanel: _246(this)
                });
            }
            _249(this);
        });
    };
    $.fn.dialog.methods = {
        options: function (jq) {
            var _25b = $.data(jq[0], "dialog").options;
            var _25c = jq.panel("options");
            $.extend(_25b, {
                closed: _25c.closed,
                collapsed: _25c.collapsed,
                minimized: _25c.minimized,
                maximized: _25c.maximized
            });
            var _25d = $.data(jq[0], "dialog").contentPanel;
            return _25b;
        },
        dialog: function (jq) {
            return jq.window("window");
        },
        refresh: function (jq, href) {
            return jq.each(function () {
                _254(this, href);
            });
        }
    };
    $.fn.dialog.parseOptions = function (_25e) {
        return $.extend({}, $.fn.window.parseOptions(_25e), $.parser.parseOptions(_25e, ["toolbar", "buttons"]));
    };
    $.fn.dialog.defaults = $.extend({}, $.fn.window.defaults, {
        title: "  ",
        collapsible: false,
        minimizable: false,
        maximizable: false,
        resizable: false,
        toolbar: null,
        buttons: null,
        //closeOnEscape : true,
        queryParams : {}, // POST방식 추가(YNI-Master, 2014.12.03)
		method : "post", // POST방식 추가(YNI-Master, 2014.12.03)
		arrowEvent : false // dialog상세서 화살표 이벤트를 적용할지 여부(2020-02-29) 
    });
})(jQuery);
(function ($) {
    function show(el, type, _25f, _260) {
        var win = $(el).window("window");
        if (!win) {
            return;
        }
        switch (type) {
        case null:
            win.show();
            break;
        case "slide":
            win.slideDown(_25f);
            break;
        case "fade":
            win.fadeIn(_25f);
            break;
        case "show":
            win.show(_25f);
            break;
        }
        var _261 = null;
        if (_260 > 0) {
            _261 = setTimeout(function () {
                hide(el, type, _25f);
            }, _260);
        }
        win.hover(function () {
            if (_261) {
                clearTimeout(_261);
            }
        }, function () {
            if (_260 > 0) {
                _261 = setTimeout(function () {
                    hide(el, type, _25f);
                }, _260);
            }
        });
    };

    function hide(el, type, _262) {
        if (el.locked == true) {
            return;
        }
        el.locked = true;
        var win = $(el).window("window");
        if (!win) {
            return;
        }
        switch (type) {
        case null:
            win.hide();
            break;
        case "slide":
            win.slideUp(_262);
            break;
        case "fade":
            win.fadeOut(_262);
            break;
        case "show":
            win.hide(_262);
            break;
        }
        setTimeout(function () {
            $(el).window("destroy");
        }, _262);
    };

    function _263(_264) {
        var opts = $.extend({}, $.fn.window.defaults, {
            collapsible: false,
            minimizable: false,
            maximizable: false,
            shadow: false,
            draggable: false,
            resizable: false,
            closed: true,
            style: {
                left: "",
                top: "",
                right: 0,
                zIndex: $.fn.window.defaults.zIndex++,
                bottom: -document.body.scrollTop - document.documentElement.scrollTop
            },
            onBeforeOpen: function () {
                show(this, opts.showType, opts.showSpeed, opts.timeout);
                return false;
            },
            onBeforeClose: function () {
                hide(this, opts.showType, opts.showSpeed);
                return false;
            }
        }, {
            title: "",
            width: 250,
            height: 100,
            showType: "slide",
            showSpeed: 600,
            msg: "",
            timeout: 4000
        }, _264);
        opts.style.zIndex = $.fn.window.defaults.zIndex++;
        var win = $("<div class=\"messager-body\" style=\"border:0;\"></div>").html(opts.msg).appendTo("body");
        win.window(opts);
        win.window("window").css(opts.style);
        win.window("open");
        return win;
    };

    function _265(_266, _267, _268) {
        var win = $("<div class=\"messager-body\" style=\"border:0;\"></div>").appendTo("body");
        win.append(_267);
        if (_268) {
            var tb = $("<div class=\"messager-button\"></div>").appendTo(win);
            for (var _269 in _268) {
                $("<a></a>").attr("href", "javascript:void(0)").text(_269).css("margin-left", 10).bind("click", eval(_268[_269])).appendTo(tb).linkbutton();
            }
        }
        win.window({
            title: _266,
            noheader: (_266 ? false : true),
            width: 400,   // 메세지 창 넓이
            height: "auto",
            modal: true,
            collapsible: false,
            minimizable: false,
            maximizable: false,
            resizable: false,
            onClose: function () {
            	setTimeout(function () {
                    win.window("destroy");
                }, 100);
            }
        });
        win.window("window").addClass("messager-window");
        win.children("div.messager-button").children("a:first").focus();
        
        // ESC키를 누를 경우 메시지 창이 닫히도록 함(YNI-Maker, 20170421)
        /*
        win.bind("keydown", function (e) {
            if (e.keyCode == 27) {
            	$.messager.alert("close");
            }
        });
        */
        return win;
    };
    $.messager = {
        show: function (_26a) {
            return _263(_26a);
        },
        alert: function (_26b, msg, icon, fn) {
            var _26c = "<div class=\"messager-contents-msg\">" + msg + "</div>";
            switch (icon) {
            case "error":
                _26c = "<div class=\"messager-icon messager-error\"></div>" + _26c;
                break;
            case "info":
                _26c = "<div class=\"messager-icon messager-info\"></div>" + _26c;
                break;
            case "question":
                _26c = "<div class=\"messager-icon messager-question\"></div>" + _26c;
                break;
            case "warning":
                _26c = "<div class=\"messager-icon messager-warning\"></div>" + _26c;
                break;
            }
            _26c += "<div style=\"clear:both;\"/>";
            var _26d = {};
            _26d[$.messager.defaults.ok] = function () {
                win.window("close");
                if (fn) {
                    fn();
                    return false;
                }
            };
            var win = _265(_26b, _26c, _26d);
            return win;
        },
        confirm: function (_26e, msg, fn) {
            var _26f = "<div class=\"messager-icon messager-question\"></div>" + "<div class=\"messager-contents-msg\">" + msg + "</div>" + "<div style=\"clear:both;\"/>";
            var _270 = {};
            _270[$.messager.defaults.ok] = function () {
                win.window("close");
                if (fn) {
                    fn(true);
                    return false;
                }
            };
            _270[$.messager.defaults.cancel] = function () {
                win.window("close");
                if (fn) {
                    fn(false);
                    return false;
                }
            };
            var win = _265(_26e, _26f, _270);
            return win;
        },
        prompt: function (_271, msg, fn) {
            var _272 = "<div class=\"messager-icon messager-question\"></div>" + "<div class=\"messager-contents-msg\">" + msg + "</div>" + "<br/>" + "<div style=\"clear:both;\"/>" + "<div><input class=\"messager-input\" type=\"text\"/></div>";
            var _273 = {};
            _273[$.messager.defaults.ok] = function () {
                win.window("close");
                if (fn) {
                    fn($(".messager-input", win).val());
                    return false;
                }
            };
            _273[$.messager.defaults.cancel] = function () {
                win.window("close");
                if (fn) {
                    fn();
                    return false;
                }
            };
            var win = _265(_271, _272, _273);
            win.children("input.messager-input").focus();
            return win;
        },
        progress: function (_274) {
            var _275 = {
                bar: function () {
                    return $("body>div.messager-window").find("div.messager-p-bar");
                },
                close: function () {
                    var win = $("body>div.messager-window>div.messager-body:has(div.messager-progress)");
                    if (win.length) {
                        win.window("close");
                    }
                }
            };
            if (typeof _274 == "string") {
                var _276 = _275[_274];
                return _276();
            }
            var opts = $.extend({
                title: "",
                msg: "",
                text: undefined,
                interval: 300
            }, _274 || {});
            var _277 = "<div class=\"messager-progress\"><div class=\"messager-p-msg\"></div><div class=\"messager-p-bar\"></div></div>";
            var win = _265(opts.title, _277, null);
            win.find("div.messager-p-msg").html(opts.msg);
            var bar = win.find("div.messager-p-bar");
            bar.progressbar({
                text: opts.text
            });
            win.window({
                closable: false,
                onClose: function () {
                    if (this.timer) {
                        clearInterval(this.timer);
                    }
                    $(this).window("destroy");
                }
            });
            if (opts.interval) {
                win[0].timer = setInterval(function () {
                    var v = bar.progressbar("getValue");
                    v += 10;
                    if (v > 100) {
                        v = 0;
                    }
                    bar.progressbar("setValue", v);
                }, opts.interval);
            }
            return win;
        }
    };
    $.messager.defaults = {
        ok: "Ok",
        cancel: "Cancel"
    };
})(jQuery);
(function ($) {
    function _278(_279) {
        var opts = $.data(_279, "accordion").options;
        var _27a = $.data(_279, "accordion").panels;
        var cc = $(_279);
        opts.fit ? $.extend(opts, cc._fit()) : cc._fit(false);
        if (opts.width > 0) {
            cc._outerWidth(opts.width);
        }
        var _27b = "auto";
        if (opts.height > 0) {
            cc._outerHeight(opts.height);
            var _27c = _27a.length ? _27a[0].panel("header").css("height", "")._outerHeight() : "auto";
            var _27b = cc.height() - (_27a.length - 1) * _27c;
        }
        for (var i = 0; i < _27a.length; i++) {
            var _27d = _27a[i];
            var _27e = _27d.panel("header");
            _27e._outerHeight(_27c);
            _27d.panel("resize", {
                width: cc.width(),
                height: _27b
            });
        }
    };

    function _27f(_280) {
        var _281 = $.data(_280, "accordion").panels;
        for (var i = 0; i < _281.length; i++) {
            var _282 = _281[i];
            if (_282.panel("options").collapsed == false) {
                return _282;
            }
        }
        return null;
    };

    function _283(_284, _285) {
        var _286 = $.data(_284, "accordion").panels;
        for (var i = 0; i < _286.length; i++) {
            if (_286[i][0] == $(_285)[0]) {
                return i;
            }
        }
        return -1;
    };

    function _287(_288, _289, _28a) {
        var _28b = $.data(_288, "accordion").panels;
        if (typeof _289 == "number") {
            if (_289 < 0 || _289 >= _28b.length) {
                return null;
            } else {
                var _28c = _28b[_289];
                if (_28a) {
                    _28b.splice(_289, 1);
                }
                return _28c;
            }
        }
        for (var i = 0; i < _28b.length; i++) {
            var _28c = _28b[i];
            if (_28c.panel("options").title == _289) {
                if (_28a) {
                    _28b.splice(i, 1);
                }
                return _28c;
            }
        }
        return null;
    };

    function _28d(_28e) {
        var opts = $.data(_28e, "accordion").options;
        var cc = $(_28e);
        if (opts.border) {
            cc.removeClass("accordion-noborder");
        } else {
            cc.addClass("accordion-noborder");
        }
    };

    function _28f(_290) {
        var cc = $(_290);
        cc.addClass("accordion");
        var _291 = [];
        cc.children("div").each(function () {
            var opts = $.extend({}, $.parser.parseOptions(this), {
                selected: ($(this).attr("selected") ? true : undefined)
            });
            var pp = $(this);
            _291.push(pp);
            _293(_290, pp, opts);
        });
        cc.bind("_resize", function (e, _292) {
            var opts = $.data(_290, "accordion").options;
            if (opts.fit == true || _292) {
                _278(_290);
            }
            return false;
        });
        return {
            accordion: cc,
            panels: _291
        };
    };

    function _293(_294, pp, _295) {
        pp.panel($.extend({}, _295, {
            collapsible: false,
            minimizable: false,
            maximizable: false,
            closable: false,
            doSize: false,
            collapsed: true,
            headerCls: "accordion-header",
            bodyCls: "accordion-body",
            onBeforeExpand: function () {
                var curr = _27f(_294);
                if (curr) {
                    var _296 = $(curr).panel("header");
                    _296.removeClass("accordion-header-selected");
                    _296.find(".accordion-collapse").triggerHandler("click");
                }
                var _296 = pp.panel("header");
                _296.addClass("accordion-header-selected");
                _296.find(".accordion-collapse").removeClass("accordion-expand");
            },
            onExpand: function () {
                var opts = $.data(_294, "accordion").options;
                opts.onSelect.call(_294, pp.panel("options").title, _283(_294, this));
            },
            onBeforeCollapse: function () {
                var _297 = pp.panel("header");
                _297.removeClass("accordion-header-selected");
                _297.find(".accordion-collapse").addClass("accordion-expand");
            }
        }));
        var _298 = pp.panel("header");
        var t = $("<a class=\"accordion-collapse accordion-expand\" href=\"javascript:void(0)\"></a>").appendTo(_298.children("div.panel-tool"));
        t.bind("click", function (e) {
            var _299 = $.data(_294, "accordion").options.animate;
            _2a4(_294);
            if (pp.panel("options").collapsed) {
                pp.panel("expand", _299);
            } else {
                pp.panel("collapse", _299);
            }
            return false;
        });
        _298.click(function () {
            $(this).find(".accordion-collapse").triggerHandler("click");
            return false;
        });
    };

    function _29a(_29b, _29c) {
        var _29d = _287(_29b, _29c);
        if (!_29d) {
            return;
        }
        var curr = _27f(_29b);
        if (curr && curr[0] == _29d[0]) {
            return;
        }
        _29d.panel("header").triggerHandler("click");
    };

    function _29e(_29f) {
        var _2a0 = $.data(_29f, "accordion").panels;
        for (var i = 0; i < _2a0.length; i++) {
            if (_2a0[i].panel("options").selected) {
                _2a1(i);
                return;
            }
        }
        if (_2a0.length) {
            _2a1(0);
        }

        function _2a1(_2a2) {
            var opts = $.data(_29f, "accordion").options;
            var _2a3 = opts.animate;
            opts.animate = false;
            _29a(_29f, _2a2);
            opts.animate = _2a3;
        };
    };

    function _2a4(_2a5) {
        var _2a6 = $.data(_2a5, "accordion").panels;
        for (var i = 0; i < _2a6.length; i++) {
            _2a6[i].stop(true, true);
        }
    };

    function add(_2a7, _2a8) {
        var opts = $.data(_2a7, "accordion").options;
        var _2a9 = $.data(_2a7, "accordion").panels;
        if (_2a8.selected == undefined) {
            _2a8.selected = true;
        }
        _2a4(_2a7);
        var pp = $("<div></div>").appendTo(_2a7);
        _2a9.push(pp);
        _293(_2a7, pp, _2a8);
        _278(_2a7);
        opts.onAdd.call(_2a7, _2a8.title, _2a9.length - 1);
        if (_2a8.selected) {
            _29a(_2a7, _2a9.length - 1);
        }
    };

    function _2aa(_2ab, _2ac) {
        var opts = $.data(_2ab, "accordion").options;
        var _2ad = $.data(_2ab, "accordion").panels;
        _2a4(_2ab);
        var _2ae = _287(_2ab, _2ac);
        var _2af = _2ae.panel("options").title;
        var _2b0 = _283(_2ab, _2ae);
        if (opts.onBeforeRemove.call(_2ab, _2af, _2b0) == false) {
            return;
        }
        var _2ae = _287(_2ab, _2ac, true);
        if (_2ae) {
            _2ae.panel("destroy");
            if (_2ad.length) {
                _278(_2ab);
                var curr = _27f(_2ab);
                if (!curr) {
                    _29a(_2ab, 0);
                }
            }
        }
        opts.onRemove.call(_2ab, _2af, _2b0);
    };
    $.fn.accordion = function (_2b1, _2b2) {
        if (typeof _2b1 == "string") {
            return $.fn.accordion.methods[_2b1](this, _2b2);
        }
        _2b1 = _2b1 || {};
        return this.each(function () {
            var _2b3 = $.data(this, "accordion");
            var opts;
            if (_2b3) {
                opts = $.extend(_2b3.options, _2b1);
                _2b3.opts = opts;
            } else {
                opts = $.extend({}, $.fn.accordion.defaults, $.fn.accordion.parseOptions(this), _2b1);
                var r = _28f(this);
                $.data(this, "accordion", {
                    options: opts,
                    accordion: r.accordion,
                    panels: r.panels
                });
            }
            _28d(this);
            _278(this);
            _29e(this);
        });
    };
    $.fn.accordion.methods = {
        options: function (jq) {
            return $.data(jq[0], "accordion").options;
        },
        panels: function (jq) {
            return $.data(jq[0], "accordion").panels;
        },
        resize: function (jq) {
            return jq.each(function () {
                _278(this);
            });
        },
        getSelected: function (jq) {
            return _27f(jq[0]);
        },
        getPanel: function (jq, _2b4) {
            return _287(jq[0], _2b4);
        },
        getPanelIndex: function (jq, _2b5) {
            return _283(jq[0], _2b5);
        },
        select: function (jq, _2b6) {
            return jq.each(function () {
                _29a(this, _2b6);
            });
        },
        add: function (jq, _2b7) {
            return jq.each(function () {
                add(this, _2b7);
            });
        },
        remove: function (jq, _2b8) {
            return jq.each(function () {
                _2aa(this, _2b8);
            });
        }
    };
    $.fn.accordion.parseOptions = function (_2b9) {
        var t = $(_2b9);
        return $.extend({}, $.parser.parseOptions(_2b9, ["width", "height", {
            fit: "boolean",
            border: "boolean",
            animate: "boolean"
        }]));
    };
    $.fn.accordion.defaults = {
        width: "auto",
        height: "auto",
        fit: false,
        border: true,
        animate: true,
        onSelect: function (_2ba, _2bb) {},
        onAdd: function (_2bc, _2bd) {},
        onBeforeRemove: function (_2be, _2bf) {},
        onRemove: function (_2c0, _2c1) {}
    };
})(jQuery);
(function ($) {
    function _2c2(_2c3) {
        var opts = $.data(_2c3, "tabs").options;
        if (opts.tabPosition == "left" || opts.tabPosition == "right") {
            return;
        }
        var _2c4 = $(_2c3).children("div.tabs-header");
        var tool = _2c4.children("div.tabs-tool");
        var _2c5 = _2c4.children("div.tabs-scroller-left");
        var _2c6 = _2c4.children("div.tabs-scroller-right");
        var wrap = _2c4.children("div.tabs-wrap");
        tool._outerHeight(_2c4.outerHeight() - (opts.plain ? 2 : 0));
        var _2c7 = 0;
        $("ul.tabs li", _2c4).each(function () {
            _2c7 += $(this).outerWidth(true);
        });
        var _2c8 = _2c4.width() - tool._outerWidth();
        if (_2c7 > _2c8) {
            _2c5.show();
            _2c6.show();
            if (opts.toolPosition == "left") {
                tool.css({
                    left: _2c5.outerWidth(),
                    right: ""
                });
                wrap.css({
                    marginLeft: _2c5.outerWidth() + tool._outerWidth(),
                    marginRight: _2c6._outerWidth(),
                    width: _2c8 - _2c5.outerWidth() - _2c6.outerWidth()
                });
            } else {
                tool.css({
                    left: "",
                    right: _2c6.outerWidth()
                });
                wrap.css({
                    marginLeft: _2c5.outerWidth(),
                    marginRight: _2c6.outerWidth() + tool._outerWidth(),
                    width: _2c8 - _2c5.outerWidth() - _2c6.outerWidth()
                });
            }
        } else {
            _2c5.hide();
            _2c6.hide();
            if (opts.toolPosition == "left") {
                tool.css({
                    left: 0,
                    right: ""
                });
                wrap.css({
                    marginLeft: tool._outerWidth(),
                    marginRight: 0,
                    width: _2c8
                });
            } else {
                tool.css({
                    left: "",
                    right: 0
                });
                wrap.css({
                    marginLeft: 0,
                    marginRight: tool._outerWidth(),
                    width: _2c8
                });
            }
        }
    };

    function _2c9(_2ca) {
        var opts = $.data(_2ca, "tabs").options;
        var _2cb = $(_2ca).children("div.tabs-header");
        if (opts.tools) {
            if (typeof opts.tools == "string") {
                $(opts.tools).addClass("tabs-tool").appendTo(_2cb);
                $(opts.tools).show();
            } else {
                _2cb.children("div.tabs-tool").remove();
                var _2cc = $("<div class=\"tabs-tool\"></div>").appendTo(_2cb);
                for (var i = 0; i < opts.tools.length; i++) {
                    var tool = $("<a href=\"javascript:void(0);\"></a>").appendTo(_2cc);
                    tool[0].onclick = eval(opts.tools[i].handler || function () {});
                    tool.linkbutton($.extend({}, opts.tools[i], {
                        plain: true
                    }));
                }
            }
        } else {
            _2cb.children("div.tabs-tool").remove();
        }
    };

    function _2cd(_2ce) {
        var opts = $.data(_2ce, "tabs").options;
        var cc = $(_2ce);
        opts.fit ? $.extend(opts, cc._fit()) : cc._fit(false);
        cc.width(opts.width).height(opts.height);
        var _2cf = $(_2ce).children("div.tabs-header");
        var _2d0 = $(_2ce).children("div.tabs-panels");
        if (opts.tabPosition == "left" || opts.tabPosition == "right") {
            _2cf._outerWidth(opts.headerWidth-10);
            _2d0._outerWidth(cc.width() - opts.headerWidth);
            _2cf.add(_2d0)._outerHeight(opts.height);
            var wrap = _2cf.find("div.tabs-wrap");
            wrap._outerWidth(_2cf.width());
            _2cf.find(".tabs")._outerWidth(wrap.width());
        } else {
            _2cf.css("height", "");
            _2cf.find("div.tabs-wrap").css("width", "");
            _2cf.find(".tabs").css("width", "");
            _2cf._outerWidth(opts.width); // tab header 사이즈 조절(jonghyun 2014.11.13)
            _2c2(_2ce);
            var _2d1 = opts.height;
            if (!isNaN(_2d1)) {
                _2d0._outerHeight(_2d1 - _2cf.outerHeight());
            } else {
                _2d0.height("auto");
            }
            var _2d2 = opts.width; // tab panels 사이즈 조절(jonghyun 2014.11.13)
            if (!isNaN(_2d2)) {
                _2d0._outerWidth(_2d2);
            } else {
                _2d0.width("auto");
            }
        }
    };

    function _2d3(_2d4) {
        var opts = $.data(_2d4, "tabs").options;
        var tab = _2d5(_2d4);
        if (tab) {
            var _2d6 = $(_2d4).children("div.tabs-panels");
            var _2d7 = opts.width == "auto" ? "auto" : _2d6.width();
            var _2d8 = opts.height == "auto" ? "auto" : _2d6.height();
            tab.panel("resize", {
                width: _2d7,
                height: _2d8
            });
        }
    };

    function _2d9(_2da) {
        var tabs = $.data(_2da, "tabs").tabs;
        var cc = $(_2da);
        cc.addClass("tabs-container");
        cc.wrapInner("<div class=\"tabs-panels\"/>");
        $("<div class=\"tabs-header\">" + "<div class=\"tabs-scroller-left\"></div>" + "<div class=\"tabs-scroller-right\"></div>" + "<div class=\"tabs-wrap\">" + "<ul class=\"tabs\"></ul>" + "</div>" + "</div>").prependTo(_2da);
        cc.children("div.tabs-panels").children("div").each(function (i) {
            var opts = $.extend({}, $.parser.parseOptions(this), {
                selected: ($(this).attr("selected") ? true : undefined)
            });
            var pp = $(this);
            tabs.push(pp);
            _2e0(_2da, pp, opts);
        });
        cc.children("div.tabs-header").find(".tabs-scroller-left, .tabs-scroller-right").hover(function () {
            $(this).addClass("tabs-scroller-over");
        }, function () {
            $(this).removeClass("tabs-scroller-over");
        });
        // 해더 표시여부 설정기능 추가(김종현, 2017.03.22)
        cc.children("div.tabs-header").find(".tabs-scroller-left, .tabs-scroller-right, .tabs-wrap, .tabs").each(function () {
        	var opts = $.data(_2da, "tabs").options;
        	if(opts.showHeader) {
        		$(this).css("display", "online");
        	} else {
        		$(this).css("display", "none");
        	}
        });
        cc.bind("_resize", function (e, _2db) {
            var opts = $.data(_2da, "tabs").options;
            if (opts.fit == true || _2db) {
                _2cd(_2da);
                _2d3(_2da);
            }
            return false;
        });
    };

    function _2dc(_2dd) {
        var opts = $.data(_2dd, "tabs").options;
        var _2de = $(_2dd).children("div.tabs-header");
        var _2df = $(_2dd).children("div.tabs-panels");
        _2de.removeClass("tabs-header-top tabs-header-bottom tabs-header-left tabs-header-right");
        _2df.removeClass("tabs-panels-top tabs-panels-bottom tabs-panels-left tabs-panels-right");
        if (opts.tabPosition == "top") {
            _2de.insertBefore(_2df);
        } else {
            if (opts.tabPosition == "bottom") {
                _2de.insertAfter(_2df);
                _2de.addClass("tabs-header-bottom");
                _2df.addClass("tabs-panels-top");
            } else {
                if (opts.tabPosition == "left") {
                    _2de.addClass("tabs-header-left");
                    _2df.addClass("tabs-panels-right");
                } else {
                    if (opts.tabPosition == "right") {
                        _2de.addClass("tabs-header-right");
                        _2df.addClass("tabs-panels-left");
                    }
                }
            }
        }
        if (opts.plain == true) {
            _2de.addClass("tabs-header-plain");
        } else {
            _2de.removeClass("tabs-header-plain");
        }
        if (opts.border == true) {
            _2de.removeClass("tabs-header-noborder");
            _2df.removeClass("tabs-panels-noborder");
        } else {
            _2de.addClass("tabs-header-noborder");
            _2df.addClass("tabs-panels-noborder");
        }
        $(".tabs-scroller-left", _2de).unbind(".tabs").bind("click.tabs", function () {
            $(_2dd).tabs("scrollBy", -opts.scrollIncrement);
        });
        $(".tabs-scroller-right", _2de).unbind(".tabs").bind("click.tabs", function () {
            $(_2dd).tabs("scrollBy", opts.scrollIncrement);
        });
    };

    function _2e0(_2e1, pp, _2e2) {
        var _2e3 = $.data(_2e1, "tabs");
        _2e2 = _2e2 || {};
        pp.panel($.extend({}, _2e2, {
            border: false,
            noheader: true,
            closed: true,
            doSize: false,
            iconCls: (_2e2.icon ? _2e2.icon : undefined),
            onLoad: function () {
                if (_2e2.onLoad) {
                    _2e2.onLoad.call(this, arguments);
                }
                _2e3.options.onLoad.call(_2e1, $(this));
            }
        }));
        var opts = pp.panel("options");
        var tabs = $(_2e1).children("div.tabs-header").find("ul.tabs");
        opts.tab = $("<li></li>").appendTo(tabs);
        opts.tab.append("<a href=\"javascript:void(0)\" class=\"tabs-inner\">" + "<span class=\"tabs-title\"></span>" + "<span class=\"tabs-icon\"></span>" + "</a>");
        opts.tab.unbind(".tabs").bind("click.tabs", {
            p: pp
        }, function (e) {
            if ($(this).hasClass("tabs-disabled")) {
                return;
            }
            _2e8(_2e1, _2e4(_2e1, e.data.p));
        }).bind("contextmenu.tabs", {
            p: pp
        }, function (e) {
            if ($(this).hasClass("tabs-disabled")) {
                return;
            }
        	_2e8(_2e1, _2e4(_2e1, e.data.p)); // 오른쪽 마우스 클릭 시 해당 tab으로 이동하도록 추가함(김종현, 2018-10-22)
            _2e3.options.onContextMenu.call(_2e1, e, $(this).find("span.tabs-title").html(), _2e4(_2e1, e.data.p));
        });
        $(_2e1).tabs("update", {
            tab: pp,
            options: opts
        });
    };

    function _2e5(_2e6, _2e7) {
        var opts = $.data(_2e6, "tabs").options;
        var tabs = $.data(_2e6, "tabs").tabs;
        if (_2e7.selected == undefined) {
            _2e7.selected = true;
        }
        var pp = $("<div></div>").appendTo($(_2e6).children("div.tabs-panels"));
        tabs.push(pp);
        _2e0(_2e6, pp, _2e7);
        opts.onAdd.call(_2e6, _2e7.title, tabs.length - 1);
        _2c2(_2e6);
        if (_2e7.selected) {
            _2e8(_2e6, tabs.length - 1);
        }
    };

    function _2e9(_2ea, _2eb) {
        var _2ec = $.data(_2ea, "tabs").selectHis;
        var pp = _2eb.tab;
        var _2ed = pp.panel("options").title;
        pp.panel($.extend({}, _2eb.options, {
            iconCls: (_2eb.options.icon ? _2eb.options.icon : undefined)
        }));
        var opts = pp.panel("options");
        var tab = opts.tab;
        var _2ee = tab.find("span.tabs-title");
        var _2ef = tab.find("span.tabs-icon");
        _2ee.html(opts.title);
        _2ef.attr("class", "tabs-icon");
        tab.find("a.tabs-close").remove();
        if (opts.closable) {
            _2ee.addClass("tabs-closable");
            var _2f0 = $("<a href=\"javascript:void(0)\" class=\"tabs-close\"></a>").appendTo(tab);
            _2f0.bind("click.tabs", {
                p: pp
            }, function (e) {
                if ($(this).parent().hasClass("tabs-disabled")) {
                    return;
                }
                _2f2(_2ea, _2e4(_2ea, e.data.p));
                return false;
            });
        } else {
            _2ee.removeClass("tabs-closable");
        }
        if (opts.iconCls) {
            _2ee.addClass("tabs-with-icon");
            _2ef.addClass(opts.iconCls);
        } else {
            _2ee.removeClass("tabs-with-icon");
        }
        if (_2ed != opts.title) {
            for (var i = 0; i < _2ec.length; i++) {
                if (_2ec[i] == _2ed) {
                    _2ec[i] = opts.title;
                }
            }
        }
        tab.find("span.tabs-p-tool").remove();
        if (opts.tools) {
            var _2f1 = $("<span class=\"tabs-p-tool\"></span>").insertAfter(tab.find("a.tabs-inner"));
            if (typeof opts.tools == "string") {
                $(opts.tools).children().appendTo(_2f1);
            } else {
                for (var i = 0; i < opts.tools.length; i++) {
                    var t = $("<a href=\"javascript:void(0)\"></a>").appendTo(_2f1);
                    t.addClass(opts.tools[i].iconCls);
                    if (opts.tools[i].handler) {
                        t.bind("click", {
                            handler: opts.tools[i].handler
                        }, function (e) {
                            if ($(this).parents("li").hasClass("tabs-disabled")) {
                                return;
                            }
                            e.data.handler.call(this);
                        });
                    }
                }
            }
            var pr = _2f1.children().length * 12;
            if (opts.closable) {
                pr += 8;
            } else {
                pr -= 3;
                _2f1.css("right", "5px");
            }
            _2ee.css("padding-right", pr + "px");
        }
        _2c2(_2ea);
        $.data(_2ea, "tabs").options.onUpdate.call(_2ea, opts.title, _2e4(_2ea, pp));
    };

    function _2f2(_2f3, _2f4) {
        var opts = $.data(_2f3, "tabs").options;
        var tabs = $.data(_2f3, "tabs").tabs;
        var _2f5 = $.data(_2f3, "tabs").selectHis;
        if (!_2f6(_2f3, _2f4)) {
            return;
        }
        var tab = _2f7(_2f3, _2f4);
        var _2f8 = tab.panel("options").title;
        var _2f9 = _2e4(_2f3, tab);
        if (opts.onBeforeClose.call(_2f3, _2f8, _2f9) == false) {
            return;
        }
        var tab = _2f7(_2f3, _2f4, true);
        tab.panel("options").tab.remove();
        tab.panel("destroy");
        opts.onClose.call(_2f3, _2f8, _2f9);
        _2c2(_2f3);
        for (var i = 0; i < _2f5.length; i++) {
            if (_2f5[i] == _2f8) {
                _2f5.splice(i, 1);
                i--;
            }
        }
        var _2fa = _2f5.pop();
        if (_2fa) {
            _2e8(_2f3, _2fa);
        } else {
            if (tabs.length) {
                _2e8(_2f3, 0);
            }
        }
    };

    function _2f7(_2fb, _2fc, _2fd) {
        var tabs = $.data(_2fb, "tabs").tabs;
        if (typeof _2fc == "number") {
            if (_2fc < 0 || _2fc >= tabs.length) {
                return null;
            } else {
                var tab = tabs[_2fc];
                if (_2fd) {
                    tabs.splice(_2fc, 1);
                }
                return tab;
            }
        }
        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            if (tab.panel("options").title == _2fc) {
                if (_2fd) {
                    tabs.splice(i, 1);
                }
                return tab;
            }
        }
        return null;
    };

    function _2e4(_2fe, tab) {
        var tabs = $.data(_2fe, "tabs").tabs;
        for (var i = 0; i < tabs.length; i++) {
            if (tabs[i][0] == $(tab)[0]) {
                return i;
            }
        }
        return -1;
    };

    function _2d5(_2ff) {
        var tabs = $.data(_2ff, "tabs").tabs;
        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            if (tab.panel("options").closed == false) {
                return tab;
            }
        }        
        return null;
    };

    function _300(_301) {
        var tabs = $.data(_301, "tabs").tabs;
        for (var i = 0; i < tabs.length; i++) {
            if (tabs[i].panel("options").selected) {
                _2e8(_301, i);
                return;
            }
        }
        if (tabs.length) {
            _2e8(_301, 0);
        }
    };

    function _2e8(_302, _303) {
        var opts = $.data(_302, "tabs").options;
        var tabs = $.data(_302, "tabs").tabs;
        var _304 = $.data(_302, "tabs").selectHis;
        if (tabs.length == 0) {
            return;
        }
        var _305 = _2f7(_302, _303);
        if (!_305) {
            return;
        }
        var _306 = _2d5(_302);
        if (_306) {
            _306.panel("close");
            _306.panel("options").tab.removeClass("tabs-selected");
        }
        _305.panel("open");
        var _307 = _305.panel("options").title;
        _304.push(_307);
        var tab = _305.panel("options").tab;
        tab.addClass("tabs-selected");
        var wrap = $(_302).find(">div.tabs-header>div.tabs-wrap");
        var left = tab.position().left;
        var _308 = left + tab.outerWidth();
        if (left < 0 || _308 > wrap.width()) {
            var _309 = left - (wrap.width() - tab.width()) / 2;
            $(_302).tabs("scrollBy", _309);
        } else {
            $(_302).tabs("scrollBy", 0);
        }
        _2d3(_302);
        opts.onSelect.call(_302, _307, _2e4(_302, _305));
    };

    function _2f6(_30a, _30b) {
        return _2f7(_30a, _30b) != null;
    };
    $.fn.tabs = function (_30c, _30d) {
        if (typeof _30c == "string") {
            return $.fn.tabs.methods[_30c](this, _30d);
        }
        _30c = _30c || {};
        return this.each(function () {
            var _30e = $.data(this, "tabs");
            var opts;
            if (_30e) {
                opts = $.extend(_30e.options, _30c);
                _30e.options = opts;
            } else {
                $.data(this, "tabs", {
                    options: $.extend({}, $.fn.tabs.defaults, $.fn.tabs.parseOptions(this), _30c),
                    tabs: [],
                    selectHis: []
                });
                _2d9(this);
            }
            _2c9(this);
            _2dc(this);
            _2cd(this);
            _300(this);
        });
    };
    $.fn.tabs.methods = {
        options: function (jq) {
            return $.data(jq[0], "tabs").options;
        },
        tabs: function (jq) {
            return $.data(jq[0], "tabs").tabs;
        },
        resize: function (jq) {
            return jq.each(function () {
                _2cd(this);
                _2d3(this);
            });
        },
        add: function (jq, _30f) {
            return jq.each(function () {
                _2e5(this, _30f);
            });
        },
        close: function (jq, _310) {
            return jq.each(function () {
                _2f2(this, _310);
            });
        },
        getTab: function (jq, _311) {
            return _2f7(jq[0], _311);
        },
        getTabIndex: function (jq, tab) {
            return _2e4(jq[0], tab);
        },
        getSelected: function (jq) {
            return _2d5(jq[0]);
        },
        select: function (jq, _312) {
            return jq.each(function () {
                _2e8(this, _312);
            });
        },
        exists: function (jq, _313) {
            return _2f6(jq[0], _313);
        },
        update: function (jq, _314) {
            return jq.each(function () {
                _2e9(this, _314);
            });
        },
        enableTab: function (jq, _315) {
            return jq.each(function () {
                $(this).tabs("getTab", _315).panel("options").tab.removeClass("tabs-disabled");
            });
        },
        disableTab: function (jq, _316) {
            return jq.each(function () {
                $(this).tabs("getTab", _316).panel("options").tab.addClass("tabs-disabled");
            });
        },
        scrollBy: function (jq, _317) {
            return jq.each(function () {
                var opts = $(this).tabs("options");
                var wrap = $(this).find(">div.tabs-header>div.tabs-wrap");
                var pos = Math.min(wrap._scrollLeft() + _317, _318());
                wrap.animate({
                    scrollLeft: pos
                }, opts.scrollDuration);

                function _318() {
                    var w = 0;
                    var ul = wrap.children("ul");
                    ul.children("li").each(function () {
                        w += $(this).outerWidth(true);
                    });
                    return w - wrap.width() + (ul.outerWidth() - ul.width());
                };
            });
        }
    };
    $.fn.tabs.parseOptions = function (_319) {
        return $.extend({}, $.parser.parseOptions(_319, ["width", "height", "tools", "toolPosition", "tabPosition", {
            fit: "boolean",
            border: "boolean",
            plain: "boolean",
            headerWidth: "number"
        }]));
    };
    $.fn.tabs.defaults = {
        width: "auto",
        height: "auto",
        method: "post",
        headerWidth: 150,
        plain: false,
        fit: false,
        border: true,
        tools: null,
        toolPosition: "right",
        tabPosition: "top",
        scrollIncrement: 100,
        scrollDuration: 400,
        showHeader: true,
        onLoad: function (_31a) {
    		inputResize(_31a); // input박스 넓이 조정(2020-06-15)
    		bottom_auth(_31a, "tabs"); // 버튼 권한 적용(2021-10-16)
        },
        onSelect: function (_31b, _31c) {
        	// 모든 멀티검색창을 닫는다.(2020.06.05)
    		$(".grid").each(function(){
    			$(this).tooltip('hide');
            });
    		// 그리드내 모든 멀티 필터창을 닫는다.(2020.06.05)
    		$(".icon-multi_filter").each(function(){
    			$(this).tooltip('hide');
            });
    		
        	if(this.id != "MM0001_01_tabs_01") return;
        	
        	var sid = $(this).tabs("getTab", _31c).panel("options").id;
        	var mtype = $(this).tabs("getTab", _31c).panel("options").mtype;
        	var subMenuObj = jQuery(".menu_area>li>ul>li");
			var menuArray=[];
			var i = 0;
			
			subMenuObj.each(function(){
				var item 	= {};
				item.id		= this.id;
				menuArray[i]= item;
				i++;
			});
			
			// 모든 상위 메뉴 비활성화
			jQuery(".menu_area>li").each(function(){
                jQuery(this).removeClass('on');
            });
			
			// 활성화된 하위 메뉴 비활성화
			for(var i = 0; i < subMenuObj.length; i++){
				if(jQuery("#"+subMenuObj[i].id).hasClass('on')){
					jQuery("#"+subMenuObj[i].id).removeClass('on');
				};
			}
			
			if(_31c == 0) return;
			var topMenuCnt = 8;
			
			// 대메뉴 선택
			if(mtype == "FM") {
				tabChange2('leftmenu', 1, 'tab', topMenuCnt);
			} else if(mtype == "CC") {
				tabChange2('leftmenu', 2, 'tab', topMenuCnt);
			} else if(mtype == "CU") {
				tabChange2('leftmenu', 3, 'tab', topMenuCnt);
			} else if(mtype == "PC") {
				tabChange2('leftmenu', 4, 'tab', topMenuCnt);
			} else if(mtype == "SM") {
				tabChange2('leftmenu', 5, 'tab', topMenuCnt);
			} else if(mtype == "SP") {
				tabChange2('leftmenu', 6, 'tab', topMenuCnt);
			} else if(mtype == "CR") { // 통관 리포트
                tabChange2('leftmenu', 7, 'tab', topMenuCnt);
            } else if(mtype == "RS") { // 중계서버
                tabChange2('leftmenu', 8, 'tab', topMenuCnt);
            }
			
			// text에 해당하는 명칭을 찾는다.
			var filteredMenuItems = menuArray.filter(function(item){
				return encodeURI(item.id).search(encodeURI(sid)) != -1;
		    });
			
			for(var i = 0;i<filteredMenuItems.length;i++){
				var tboj = jQuery("#"+filteredMenuItems[i].id);
				
				tboj.parents('li .depth').slideDown(0);
				
				tboj.parents('li').addClass("on"); // 상위메뉴 활성화
				tboj.addClass("on"); // 하위메뉴 활성화
	            
				break;
			}
        },
        onBeforeClose: function (_31d, _31e) {},
        onClose: function (_31f, _320) {},
        onAdd: function (_321, _322) {},
        onUpdate: function (_323, _324) {},
        onContextMenu: function (e, _325, _326) {}
    };
})(jQuery);
(function ($) {
    var _327 = false;

    function _328(_329) {
        var _32a = $.data(_329, "layout");
        var opts = _32a.options;
        var _32b = _32a.panels;
        var cc = $(_329);
        if (_329.tagName == "BODY") {
            cc._fit();
        } else {
            opts.fit ? cc.css(cc._fit()) : cc._fit(false);
        }

        function _32c(pp) {
            var opts = pp.panel("options");
            return Math.min(Math.max(opts.height, opts.minHeight), opts.maxHeight);
        };

        function _32d(pp) {
            var opts = pp.panel("options");
            return Math.min(Math.max(opts.width, opts.minWidth), opts.maxWidth);
        };
        var cpos = {
            top: 0,
            left: 0,
            width: cc.width(),
            height: cc.height()
        };

        function _32e(pp) {
            if (!pp.length) {
                return;
            }
            var _32f = _32c(pp);
            pp.panel("resize", {
                width: cc.width(),
                height: _32f,
                left: 0,
                top: 0
            });
            cpos.top += _32f;
            cpos.height -= _32f;
        };
        if (_336(_32b.expandNorth)) {
            _32e(_32b.expandNorth);
        } else {
            _32e(_32b.north);
        }

        function _330(pp) {
            if (!pp.length) {
                return;
            }
            var _331 = _32c(pp);
            pp.panel("resize", {
                width: cc.width(),
                height: _331,
                left: 0,
                top: cc.height() - _331
            });
            cpos.height -= _331;
        };
        if (_336(_32b.expandSouth)) {
            _330(_32b.expandSouth);
        } else {
            _330(_32b.south);
        }

        function _332(pp) {
            if (!pp.length) {
                return;
            }
            var _333 = _32d(pp);
            pp.panel("resize", {
                width: _333,
                height: cpos.height,
                left: cc.width() - _333,
                top: cpos.top
            });
            cpos.width -= _333;
        };
        if (_336(_32b.expandEast)) {
            _332(_32b.expandEast);
        } else {
            _332(_32b.east);
        }

        function _334(pp) {
            if (!pp.length) {
                return;
            }
            var _335 = _32d(pp);
            pp.panel("resize", {
                width: _335,
                height: cpos.height,
                left: 0,
                top: cpos.top
            });
            cpos.left += _335;
            cpos.width -= _335;
        };
        if (_336(_32b.expandWest)) {
            _334(_32b.expandWest);
        } else {
            _334(_32b.west);
        }
        _32b.center.panel("resize", cpos);
    };

    function init(_337) {
        var cc = $(_337);
        cc.addClass("layout");

        function _338(cc) {
            cc.children("div").each(function () {
                var opts = $.fn.layout.parsePanelOptions(this);
                if ("north,south,east,west,center".indexOf(opts.region) >= 0) {
                    _33a(_337, opts, this);
                }
            });
        };
        cc.children("form").length ? _338(cc.children("form")) : _338(cc);
        cc.append("<div class=\"layout-split-proxy-h\"></div><div class=\"layout-split-proxy-v\"></div>");
        cc.bind("_resize", function (e, _339) {
            var opts = $.data(_337, "layout").options;
            if (opts.fit == true || _339) {
                _328(_337);
            }
            return false;
        });
    };

    function _33a(_33b, _33c, el) {
        _33c.region = _33c.region || "center";
        var _33d = $.data(_33b, "layout").panels;
        var cc = $(_33b);
        var dir = _33c.region;
        if (_33d[dir].length) {
            return;
        }
        var pp = $(el);
        if (!pp.length) {
            pp = $("<div></div>").appendTo(cc);
        }
        var _33e = $.extend({}, $.fn.layout.paneldefaults, {
            width: (pp.length ? parseInt(pp[0].style.width) || pp.outerWidth() : "auto"),
            height: (pp.length ? parseInt(pp[0].style.height) || pp.outerHeight() : "auto"),
            doSize: false,
            collapsible: true,
            cls: ("layout-panel layout-panel-" + dir),
            bodyCls: "layout-body",
            onOpen: function () {
                var tool = $(this).panel("header").children("div.panel-tool");
                tool.children("a.panel-tool-collapse").hide();
                var _33f = {
                    north: "up",
                    south: "down",
                    east: "right",
                    west: "left"
                };
                if (!_33f[dir]) {
                    return;
                }
                var _340 = "layout-button-" + _33f[dir];
                var t = tool.children("a." + _340);
                if (!t.length) {
                    t = $("<a href=\"javascript:void(0)\"></a>").addClass(_340).appendTo(tool);
                    t.bind("click", {
                        dir: dir
                    }, function (e) {
                        _34c(_33b, e.data.dir);
                        return false;
                    });
                }
                $(this).panel("options").collapsible ? t.show() : t.hide();
            }
        }, _33c);
        pp.panel(_33e);
        _33d[dir] = pp;
        if (pp.panel("options").split) {
            var _341 = pp.panel("panel");
            _341.addClass("layout-split-" + dir);
            var _342 = "";
            if (dir == "north") {
                _342 = "s";
            }
            if (dir == "south") {
                _342 = "n";
            }
            if (dir == "east") {
                _342 = "w";
            }
            if (dir == "west") {
                _342 = "e";
            }
            _341.resizable($.extend({}, {
                handles: _342,
                onStartResize: function (e) {
                    _327 = true;
                    if (dir == "north" || dir == "south") {
                        var _343 = $(">div.layout-split-proxy-v", _33b);
                    } else {
                        var _343 = $(">div.layout-split-proxy-h", _33b);
                    }
                    var top = 0,
                        left = 0,
                        _344 = 0,
                        _345 = 0;
                    var pos = {
                        display: "block"
                    };
                    if (dir == "north") {
                        pos.top = parseInt(_341.css("top")) + _341.outerHeight() - _343.height();
                        pos.left = parseInt(_341.css("left"));
                        pos.width = _341.outerWidth();
                        pos.height = _343.height();
                    } else {
                        if (dir == "south") {
                            pos.top = parseInt(_341.css("top"));
                            pos.left = parseInt(_341.css("left"));
                            pos.width = _341.outerWidth();
                            pos.height = _343.height();
                        } else {
                            if (dir == "east") {
                                pos.top = parseInt(_341.css("top")) || 0;
                                pos.left = parseInt(_341.css("left")) || 0;
                                pos.width = _343.width();
                                pos.height = _341.outerHeight();
                            } else {
                                if (dir == "west") {
                                    pos.top = parseInt(_341.css("top")) || 0;
                                    pos.left = _341.outerWidth() - _343.width();
                                    pos.width = _343.width();
                                    pos.height = _341.outerHeight();
                                }
                            }
                        }
                    }
                    _343.css(pos);
                    $("<div class=\"layout-mask\"></div>").css({
                        left: 0,
                        top: 0,
                        width: cc.width(),
                        height: cc.height()
                    }).appendTo(cc);
                },
                onResize: function (e) {
                    if (dir == "north" || dir == "south") {
                        var _346 = $(">div.layout-split-proxy-v", _33b);
                        _346.css("top", e.pageY - $(_33b).offset().top - _346.height() / 2);
                    } else {
                        var _346 = $(">div.layout-split-proxy-h", _33b);
                        _346.css("left", e.pageX - $(_33b).offset().left - _346.width() / 2);
                    }
                    return false;
                },
                onStopResize: function (e) {
                    cc.children("div.layout-split-proxy-v,div.layout-split-proxy-h").hide();
                    pp.panel("resize", e.data);
                    _328(_33b);
                    _327 = false;
                    cc.find(">div.layout-mask").remove();
                }
            }, _33c));
        }
    };

    function _347(_348, _349) {
        var _34a = $.data(_348, "layout").panels;
        if (_34a[_349].length) {
            _34a[_349].panel("destroy");
            _34a[_349] = $();
            var _34b = "expand" + _349.substring(0, 1).toUpperCase() + _349.substring(1);
            if (_34a[_34b]) {
                _34a[_34b].panel("destroy");
                _34a[_34b] = undefined;
            }
        }
    };

    function _34c(_34d, _34e, _34f) {
        if (_34f == undefined) {
            _34f = "normal";
        }
        var _350 = $.data(_34d, "layout").panels;
        var p = _350[_34e];
        if (p.panel("options").onBeforeCollapse.call(p) == false) {
            return;
        }
        var _351 = "expand" + _34e.substring(0, 1).toUpperCase() + _34e.substring(1);
        if (!_350[_351]) {
            _350[_351] = _352(_34e);
            _350[_351].panel("panel").bind("click", function () {
                var _353 = _354();
                p.panel("expand", false).panel("open").panel("resize", _353.collapse);
                p.panel("panel").animate(_353.expand, function () {
                    $(this).unbind(".layout").bind("mouseleave.layout", {
                        region: _34e
                    }, function (e) {
                        if (_327 == true) {
                            return;
                        }
                        _34c(_34d, e.data.region);
                    });
                });
                return false;
            });
        }
        var _355 = _354();
        if (!_336(_350[_351])) {
            _350.center.panel("resize", _355.resizeC);
        }
        p.panel("panel").animate(_355.collapse, _34f, function () {
            p.panel("collapse", false).panel("close");
            _350[_351].panel("open").panel("resize", _355.expandP);
            $(this).unbind(".layout");
        });

        function _352(dir) {
            var icon;
            if (dir == "east") {
                icon = "layout-button-left";
            } else {
                if (dir == "west") {
                    icon = "layout-button-right";
                } else {
                    if (dir == "north") {
                        icon = "layout-button-down";
                    } else {
                        if (dir == "south") {
                            icon = "layout-button-up";
                        }
                    }
                }
            }
            var _356 = $.extend({}, $.fn.layout.paneldefaults, {
                cls: "layout-expand",
                title: "&nbsp;",
                closed: true,
                doSize: false,
                tools: [{
                    iconCls: icon,
                    handler: function () {
                        _35a(_34d, _34e);
                        return false;
                    }
                }]
            });
            var p = $("<div></div>").appendTo(_34d).panel(_356);
            p.panel("panel").hover(function () {
                $(this).addClass("layout-expand-over");
            }, function () {
                $(this).removeClass("layout-expand-over");
            });
            return p;
        };

        function _354() {
            var cc = $(_34d);
            var _357 = _350.center.panel("options");
            if (_34e == "east") {
                var _358 = _350["east"].panel("options");
                return {
                    resizeC: {
                        width: _357.width + _358.width - 30
                    },
                    expand: {
                        left: cc.width() - _358.width
                    },
                    expandP: {
                        top: _357.top,
                        left: cc.width() - 30,
                        width: 30,
                        height: _357.height
                    },
                    collapse: {
                        left: cc.width(),
                        top: _357.top,
                        height: _357.height
                    }
                };
            } else {
                if (_34e == "west") {
                    var _359 = _350["west"].panel("options");
                    return {
                        resizeC: {
                        	// layout을 숨길때 우측에 보이는 bar를 제거하기 위해 0으로 설정-원래 30임(YNI-Master, 2016.04.09)
                            width: _357.width + _359.width - 0,
                            left: 0
                        },
                        expand: {
                            left: 0
                        },
                        expandP: {
                            left: 0,
                            top: _357.top,
                            width: 30,
                            height: _357.height
                        },
                        collapse: {
                            left: -_359.width,
                            top: _357.top,
                            height: _357.height
                        }
                    };
                } else {
                    if (_34e == "north") {
                        var hh = cc.height() - 30;
                        if (_336(_350.expandSouth)) {
                            hh -= _350.expandSouth.panel("options").height;
                        } else {
                            if (_336(_350.south)) {
                                hh -= _350.south.panel("options").height;
                            }
                        }
                        _350.east.panel("resize", {
                            top: 30,
                            height: hh
                        });
                        _350.west.panel("resize", {
                            top: 30,
                            height: hh
                        });
                        if (_336(_350.expandEast)) {
                            _350.expandEast.panel("resize", {
                                top: 30,
                                height: hh
                            });
                        }
                        if (_336(_350.expandWest)) {
                            _350.expandWest.panel("resize", {
                                top: 30,
                                height: hh
                            });
                        }
                        return {
                            resizeC: {
                                top: 30,
                                height: hh
                            },
                            expand: {
                                top: 0
                            },
                            expandP: {
                                top: 0,
                                left: 0,
                                width: cc.width(),
                                height: 30
                            },
                            collapse: {
                                top: -_350["north"].panel("options").height,
                                width: cc.width()
                            }
                        };
                    } else {
                        if (_34e == "south") {
                            var hh = cc.height() - 30;
                            if (_336(_350.expandNorth)) {
                                hh -= _350.expandNorth.panel("options").height;
                            } else {
                                if (_336(_350.north)) {
                                    hh -= _350.north.panel("options").height;
                                }
                            }
                            _350.east.panel("resize", {
                                height: hh
                            });
                            _350.west.panel("resize", {
                                height: hh
                            });
                            if (_336(_350.expandEast)) {
                                _350.expandEast.panel("resize", {
                                    height: hh
                                });
                            }
                            if (_336(_350.expandWest)) {
                                _350.expandWest.panel("resize", {
                                    height: hh
                                });
                            }
                            return {
                                resizeC: {
                                    height: hh
                                },
                                expand: {
                                    top: cc.height() - _350["south"].panel("options").height
                                },
                                expandP: {
                                    top: cc.height() - 30,
                                    left: 0,
                                    width: cc.width(),
                                    height: 30
                                },
                                collapse: {
                                    top: cc.height(),
                                    width: cc.width()
                                }
                            };
                        }
                    }
                }
            }
        };
    };

    function _35a(_35b, _35c) {
        var _35d = $.data(_35b, "layout").panels;
        var _35e = _35f();
        var p = _35d[_35c];
        if (p.panel("options").onBeforeExpand.call(p) == false) {
            return;
        }
        var _360 = "expand" + _35c.substring(0, 1).toUpperCase() + _35c.substring(1);
        _35d[_360].panel("close");
        p.panel("panel").stop(true, true);
        p.panel("expand", false).panel("open").panel("resize", _35e.collapse);
        p.panel("panel").animate(_35e.expand, function () {
            _328(_35b);
        });

        function _35f() {
            var cc = $(_35b);
            var _361 = _35d.center.panel("options");
            if (_35c == "east" && _35d.expandEast) {
                return {
                    collapse: {
                        left: cc.width(),
                        top: _361.top,
                        height: _361.height
                    },
                    expand: {
                        left: cc.width() - _35d["east"].panel("options").width
                    }
                };
            } else {
                if (_35c == "west" && _35d.expandWest) {
                    return {
                        collapse: {
                            left: -_35d["west"].panel("options").width,
                            top: _361.top,
                            height: _361.height
                        },
                        expand: {
                            left: 0
                        }
                    };
                } else {
                    if (_35c == "north" && _35d.expandNorth) {
                        return {
                            collapse: {
                                top: -_35d["north"].panel("options").height,
                                width: cc.width()
                            },
                            expand: {
                                top: 0
                            }
                        };
                    } else {
                        if (_35c == "south" && _35d.expandSouth) {
                            return {
                                collapse: {
                                    top: cc.height(),
                                    width: cc.width()
                                },
                                expand: {
                                    top: cc.height() - _35d["south"].panel("options").height
                                }
                            };
                        }
                    }
                }
            }
        };
    };

    function _336(pp) {
        if (!pp) {
            return false;
        }
        if (pp.length) {
            return pp.panel("panel").is(":visible");
        } else {
            return false;
        }
    };

    function _362(_363) {
        var _364 = $.data(_363, "layout").panels;
        if (_364.east.length && _364.east.panel("options").collapsed) {
            _34c(_363, "east", 0);
        }
        if (_364.west.length && _364.west.panel("options").collapsed) {
            _34c(_363, "west", 0);
        }
        if (_364.north.length && _364.north.panel("options").collapsed) {
            _34c(_363, "north", 0);
        }
        if (_364.south.length && _364.south.panel("options").collapsed) {
            _34c(_363, "south", 0);
        }
    };
    $.fn.layout = function (_365, _366) {
        if (typeof _365 == "string") {
            return $.fn.layout.methods[_365](this, _366);
        }
        _365 = _365 || {};
        return this.each(function () {
            var _367 = $.data(this, "layout");
            if (_367) {
                $.extend(_367.options, _365);
            } else {
                var opts = $.extend({}, $.fn.layout.defaults, $.fn.layout.parseOptions(this), _365);
                $.data(this, "layout", {
                    options: opts,
                    panels: {
                        center: $(),
                        north: $(),
                        south: $(),
                        east: $(),
                        west: $()
                    }
                });
                init(this);
            }
            _328(this);
            _362(this);
        });
    };
    $.fn.layout.methods = {
        resize: function (jq) {
            return jq.each(function () {
                _328(this);
            });
        },
        panel: function (jq, _368) {
            return $.data(jq[0], "layout").panels[_368];
        },
        collapse: function (jq, _369) {
            return jq.each(function () {
                _34c(this, _369);
            });
        },
        expand: function (jq, _36a) {
            return jq.each(function () {
                _35a(this, _36a);
            });
        },
        add: function (jq, _36b) {
            return jq.each(function () {
                _33a(this, _36b);
                _328(this);
                if ($(this).layout("panel", _36b.region).panel("options").collapsed) {
                    _34c(this, _36b.region, 0);
                }
            });
        },
        remove: function (jq, _36c) {
            return jq.each(function () {
                _347(this, _36c);
                _328(this);
            });
        }
    };
    $.fn.layout.parseOptions = function (_36d) {
        return $.extend({}, $.parser.parseOptions(_36d, [{
            fit: "boolean"
        }]));
    };
    $.fn.layout.defaults = {
        fit: false
    };
    $.fn.layout.parsePanelOptions = function (_36e) {
        var t = $(_36e);
        return $.extend({}, $.fn.panel.parseOptions(_36e), $.parser.parseOptions(_36e, ["region", {
            split: "boolean",
            minWidth: "number",
            minHeight: "number",
            maxWidth: "number",
            maxHeight: "number"
        }]));
    };
    $.fn.layout.paneldefaults = $.extend({}, $.fn.panel.defaults, {
        region: null,
        split: false,
        minWidth: 5,
        minHeight: 5,
        maxWidth: 10000,
        maxHeight: 10000
    });
})(jQuery);
(function ($) {
    function init(_36f) {
        $(_36f).appendTo("body");
        $(_36f).addClass("menu-top");
        $(document).unbind(".menu").bind("mousedown.menu", function (e) {
            var _370 = $("body>div.menu:visible");
            var m = $(e.target).closest("div.menu", _370);
            if (m.length) {
                return;
            }
            $("body>div.menu-top:visible").menu("hide");
        });
        var _371 = _372($(_36f));
        for (var i = 0; i < _371.length; i++) {
            _373(_371[i]);
        }

        function _372(menu) {
            var _374 = [];
            menu.addClass("menu");
            _374.push(menu);
            if (!menu.hasClass("menu-content")) {
                menu.children("div").each(function () {
                    var _375 = $(this).children("div");
                    if (_375.length) {
                        _375.insertAfter(_36f);
                        this.submenu = _375;
                        var mm = _372(_375);
                        _374 = _374.concat(mm);
                    }
                });
            }
            return _374;
        };

        function _373(menu) {
            var _376 = $.parser.parseOptions(menu[0], ["width"]).width;
            if (menu.hasClass("menu-content")) {
                menu[0].originalWidth = _376 || menu._outerWidth();
            } else {
                menu[0].originalWidth = _376 || 0;
                menu.children("div").each(function () {
                    var item = $(this);
                    if (item.hasClass("menu-sep")) {} else {
                        var _377 = $.extend({}, $.parser.parseOptions(this, ["name", "iconCls", "href"]), {
                            disabled: (item.attr("disabled") ? true : undefined)
                        });
                        item.attr("name", _377.name || "").attr("href", _377.href || "");
                        var text = item.addClass("menu-item").html();
                        item.empty().append($("<div class=\"menu-text\"></div>").html(text));
                        if (_377.iconCls) {
                            $("<div class=\"menu-icon\"></div>").addClass(_377.iconCls).appendTo(item);
                        }
                        if (_377.disabled) {
                            _378(_36f, item[0], true);
                        }
                        if (item[0].submenu) {
                            $("<div class=\"menu-rightarrow\"></div>").appendTo(item);
                        }
                        _379(_36f, item);
                    }
                });
                $("<div class=\"menu-line\"></div>").prependTo(menu);
            }
            _37a(_36f, menu);
            menu.hide();
            _37b(_36f, menu);
        };
    };

    function _37a(_37c, menu) {
        var opts = $.data(_37c, "menu").options;
        var d = menu.css("display");
        menu.css({
            display: "block",
            left: -10000
        });
        menu.find("div.menu-item")._outerHeight(22);
        var _37d = 0;
        menu.find("div.menu-text").each(function () {
            if (_37d < $(this)._outerWidth()) {
                _37d = $(this)._outerWidth();
            }
        });
        _37d += 30; // 메뉴바의 우측 넓이를 조정함(2018-05-13), 원본은 65임
        menu._outerWidth(Math.max((menu[0].originalWidth || 0), _37d, opts.minWidth));
        menu.css("display", d);
    };

    function _37b(_37e, menu) {
        var _37f = $.data(_37e, "menu");
        menu.unbind(".menu").bind("mouseenter.menu", function () {
            if (_37f.timer) {
                clearTimeout(_37f.timer);
                _37f.timer = null;
            }
        }).bind("mouseleave.menu", function () {
            _37f.timer = setTimeout(function () {
                _380(_37e);
            }, 100);
        });
    };

    function _379(_381, item) {
        item.unbind(".menu");
        item.bind("click.menu", function () {
            if ($(this).hasClass("menu-item-disabled")) {
                return;
            }
            if (!this.submenu) {
                _380(_381);
                var href = $(this).attr("href");
                if (href) {
                    location.href = href;
                }
            }
            var item = $(_381).menu("getItem", this);
            $.data(_381, "menu").options.onClick.call(_381, item);
        }).bind("mouseenter.menu", function (e) {
            item.siblings().each(function () {
                if (this.submenu) {
                    _384(this.submenu);
                }
                $(this).removeClass("menu-active");
            });
            item.addClass("menu-active");
            if ($(this).hasClass("menu-item-disabled")) {
                item.addClass("menu-active-disabled");
                return;
            }
            var _382 = item[0].submenu;
            if (_382) {
                $(_381).menu("show", {
                    menu: _382,
                    parent: item
                });
            }
        }).bind("mouseleave.menu", function (e) {
            item.removeClass("menu-active menu-active-disabled");
            var _383 = item[0].submenu;
            if (_383) {
                if (e.pageX >= parseInt(_383.css("left"))) {
                    item.addClass("menu-active");
                } else {
                    _384(_383);
                }
            } else {
                item.removeClass("menu-active");
            }
        });
    };

    function _380(_385) {
        var _386 = $.data(_385, "menu");
        if (_386) {
            if ($(_385).is(":visible")) {
                _384($(_385));
                _386.options.onHide.call(_385);
            }
        }
        return false;
    };

    function _387(_388, _389) {
        var left, top;
        var menu = $(_389.menu || _388);
        if (menu.hasClass("menu-top")) {
            var opts = $.data(_388, "menu").options;
            left = opts.left;
            top = opts.top;
            if (_389.alignTo) {
                var at = $(_389.alignTo);
                left = at.offset().left;
                top = at.offset().top + at._outerHeight();
            }
            if (_389.left != undefined) {
                left = _389.left;
            }
            if (_389.top != undefined) {
                top = _389.top;
            }
            if (left + menu.outerWidth() > $(window)._outerWidth() + $(document)._scrollLeft()) {
                left = $(window)._outerWidth() + $(document).scrollLeft() - menu.outerWidth() - 5;
            }
            if (top + menu.outerHeight() > $(window)._outerHeight() + $(document).scrollTop()) {
                top -= menu.outerHeight();
            }
        } else {
            var _38a = _389.parent;
            left = _38a.offset().left + _38a.outerWidth() - 2;
            if (left + menu.outerWidth() + 5 > $(window)._outerWidth() + $(document).scrollLeft()) {
                left = _38a.offset().left - menu.outerWidth() + 2;
            }
            var top = _38a.offset().top - 3;
            if (top + menu.outerHeight() > $(window)._outerHeight() + $(document).scrollTop()) {
                top = $(window)._outerHeight() + $(document).scrollTop() - menu.outerHeight() - 5;
            }
        }
        menu.css({
            left: left,
            top: top
        });
        menu.show(0, function () {
            if (!menu[0].shadow) {
                menu[0].shadow = $("<div class=\"menu-shadow\"></div>").insertAfter(menu);
            }
            menu[0].shadow.css({
                display: "block",
                zIndex: $.fn.menu.defaults.zIndex++,
                left: menu.css("left"),
                top: menu.css("top"),
                width: menu.outerWidth(),
                height: menu.outerHeight()
            });
            menu.css("z-index", $.fn.menu.defaults.zIndex++);
            if (menu.hasClass("menu-top")) {
                $.data(menu[0], "menu").options.onShow.call(menu[0]);
            }
        });
    };

    function _384(menu) {
        if (!menu) {
            return;
        }
        _38b(menu);
        menu.find("div.menu-item").each(function () {
            if (this.submenu) {
                _384(this.submenu);
            }
            $(this).removeClass("menu-active");
        });

        function _38b(m) {
            m.stop(true, true);
            if (m[0].shadow) {
                m[0].shadow.hide();
            }
            m.hide();
        };
    };

    function _38c(_38d, text) {
        var _38e = null;
        var tmp = $("<div></div>");

        function find(menu) {
            menu.children("div.menu-item").each(function () {
                var item = $(_38d).menu("getItem", this);
                var s = tmp.empty().html(item.text).text();
                if (text == $.trim(s)) {
                    _38e = item;
                } else {
                    if (this.submenu && !_38e) {
                        find(this.submenu);
                    }
                }
            });
        };
        find($(_38d));
        tmp.remove();
        return _38e;
    };

    function _378(_38f, _390, _391) {
        var t = $(_390);
        if (_391) {
            t.addClass("menu-item-disabled");
            if (_390.onclick) {
                _390.onclick1 = _390.onclick;
                _390.onclick = null;
            }
        } else {
            t.removeClass("menu-item-disabled");
            if (_390.onclick1) {
                _390.onclick = _390.onclick1;
                _390.onclick1 = null;
            }
        }
    };

    function _392(_393, _394) {
        var menu = $(_393);
        if (_394.parent) {
            if (!_394.parent.submenu) {
                var _395 = $("<div class=\"menu\"><div class=\"menu-line\"></div></div>").appendTo("body");
                _395.hide();
                _394.parent.submenu = _395;
                $("<div class=\"menu-rightarrow\"></div>").appendTo(_394.parent);
            }
            menu = _394.parent.submenu;
        }
        var item = $("<div class=\"menu-item\"></div>").appendTo(menu);
        $("<div class=\"menu-text\"></div>").html(_394.text).appendTo(item);
        if (_394.iconCls) {
            $("<div class=\"menu-icon\"></div>").addClass(_394.iconCls).appendTo(item);
        }
        if (_394.id) {
            item.attr("id", _394.id);
        }
        if (_394.href) {
            item.attr("href", _394.href);
        }
        if (_394.name) {
            item.attr("name", _394.name);
        }
        if (_394.onclick) {
            if (typeof _394.onclick == "string") {
                item.attr("onclick", _394.onclick);
            } else {
                item[0].onclick = eval(_394.onclick);
            }
        }
        if (_394.handler) {
            item[0].onclick = eval(_394.handler);
        }
        _379(_393, item);
        if (_394.disabled) {
            _378(_393, item[0], true);
        }
        _37b(_393, menu);
        _37a(_393, menu);
    };

    function _396(_397, _398) {
        function _399(el) {
            if (el.submenu) {
                el.submenu.children("div.menu-item").each(function () {
                    _399(this);
                });
                var _39a = el.submenu[0].shadow;
                if (_39a) {
                    _39a.remove();
                }
                el.submenu.remove();
            }
            $(el).remove();
        };
        _399(_398);
    };

    function _39b(_39c) {
        $(_39c).children("div.menu-item").each(function () {
            _396(_39c, this);
        });
        if (_39c.shadow) {
            _39c.shadow.remove();
        }
        $(_39c).remove();
    };
    $.fn.menu = function (_39d, _39e) {
        if (typeof _39d == "string") {
            return $.fn.menu.methods[_39d](this, _39e);
        }
        _39d = _39d || {};
        return this.each(function () {
            var _39f = $.data(this, "menu");
            if (_39f) {
                $.extend(_39f.options, _39d);
            } else {
                _39f = $.data(this, "menu", {
                    options: $.extend({}, $.fn.menu.defaults, $.fn.menu.parseOptions(this), _39d)
                });
                init(this);
            }
            $(this).css({
                left: _39f.options.left,
                top: _39f.options.top
            });
        });
    };
    $.fn.menu.methods = {
        options: function (jq) {
            return $.data(jq[0], "menu").options;
        },
        show: function (jq, pos) {
            return jq.each(function () {
            	_387(this, pos);
            });
        },
        hide: function (jq) {
            return jq.each(function () {
                _380(this);
            });
        },
        destroy: function (jq) {
            return jq.each(function () {
                _39b(this);
            });
        },
        setText: function (jq, _3a0) {
            return jq.each(function () {
                $(_3a0.target).children("div.menu-text").html(_3a0.text);
            });
        },
        setIcon: function (jq, _3a1) {
            return jq.each(function () {
                var item = $(this).menu("getItem", _3a1.target);
                if (item.iconCls) {
                    $(item.target).children("div.menu-icon").removeClass(item.iconCls).addClass(_3a1.iconCls);
                } else {
                    $("<div class=\"menu-icon\"></div>").addClass(_3a1.iconCls).appendTo(_3a1.target);
                }
            });
        },
        getItem: function (jq, _3a2) {
            var t = $(_3a2);
            var item = {
                target: _3a2,
                id: t.attr("id"),
                text: $.trim(t.children("div.menu-text").html()),
                disabled: t.hasClass("menu-item-disabled"),
                href: t.attr("href"),
                name: t.attr("name"),
                onclick: _3a2.onclick
            };
            var icon = t.children("div.menu-icon");
            if (icon.length) {
                var cc = [];
                var aa = icon.attr("class").split(" ");
                for (var i = 0; i < aa.length; i++) {
                    if (aa[i] != "menu-icon") {
                        cc.push(aa[i]);
                    }
                }
                item.iconCls = cc.join(" ");
            }
            return item;
        },
        findItem: function (jq, text) {
            return _38c(jq[0], text);
        },
        appendItem: function (jq, _3a3) {
            return jq.each(function () {
                _392(this, _3a3);
            });
        },
        removeItem: function (jq, _3a4) {
            return jq.each(function () {
                _396(this, _3a4);
            });
        },
        enableItem: function (jq, _3a5) {
            return jq.each(function () {
                _378(this, _3a5, false);
            });
        },
        disableItem: function (jq, _3a6) {
            return jq.each(function () {
                _378(this, _3a6, true);
            });
        }
    };
    $.fn.menu.parseOptions = function (_3a7) {
        return $.extend({}, $.parser.parseOptions(_3a7, ["left", "top", {
            minWidth: "number"
        }]));
    };
    $.fn.menu.defaults = {
        zIndex: 110000,
        left: 0,
        top: 0,
        minWidth: 120,
        onShow: function () {},
        onHide: function () {},
        onClick: function (item) {}
    };
})(jQuery);
(function ($) {
    function init(_3a8) {
        var opts = $.data(_3a8, "menubutton").options;
        var btn = $(_3a8);
        //btn.removeClass("m-btn-active m-btn-plain-active").addClass("m-btn");
        btn.linkbutton($.extend({}, opts, {
            text: opts.text + "<span class=\"m-btn-downarrow\">&nbsp;</span>"
        }));
        if (opts.menu) {
            $(opts.menu).menu({
                onShow: function () {
                    ;//btn.addClass((opts.plain == true) ? "m-btn-plain-active" : "m-btn-active");
                },
                onHide: function () {
                    ;//btn.removeClass((opts.plain == true) ? "m-btn-plain-active" : "m-btn-active");
                }
            });
        }
        
        _3a9(_3a8, opts.disabled);
    };

    function _3a9(_3aa, _3ab) {
        var opts = $.data(_3aa, "menubutton").options;
        opts.disabled = _3ab;
        var btn = $(_3aa);
        if (_3ab) {
            btn.linkbutton("disable");
            btn.unbind(".menubutton");
        } else {
            btn.linkbutton("enable");
            btn.unbind(".menubutton");
            btn.bind("click.menubutton", function () {
                _3ac();
                return false;
            });
            var _3ad = null;
            btn.bind("mouseenter.menubutton", function () {
                _3ad = setTimeout(function () {
                    _3ac();
                }, opts.duration);
                return false;
            }).bind("mouseleave.menubutton", function () {
                if (_3ad) {
                    clearTimeout(_3ad);
                }
            });
        }
        
        var btn = $(_3aa);
        btn.removeClass("l-btn l-btn-small l-btn-plain");
        
        var _3c4 = btn.find("span.l-btn-left");
        _3c4.find("span.l-btn-text,span.m-btn-downarrow").css({
            //height: "16px",
            lineHeight: "16px",
            margin : "0px"
        });
        
        function _3ac() {
            if (!opts.menu) {
                return;
            }
            $("body>div.menu-top").menu("hide");
            $(opts.menu).menu("show", {
                alignTo: btn
            });
            btn.blur();
        };
    };
    $.fn.menubutton = function (_3ae, _3af) {
        if (typeof _3ae == "string") {
            return $.fn.menubutton.methods[_3ae](this, _3af);
        }
        _3ae = _3ae || {};
        return this.each(function () {
            var _3b0 = $.data(this, "menubutton");
            if (_3b0) {
                $.extend(_3b0.options, _3ae);
            } else {
                $.data(this, "menubutton", {
                    options: $.extend({}, $.fn.menubutton.defaults, $.fn.menubutton.parseOptions(this), _3ae)
                });
                $(this).removeAttr("disabled");
            }
            init(this);
        });
    };
    $.fn.menubutton.methods = {
        options: function (jq) {
            return $.data(jq[0], "menubutton").options;
        },
        enable: function (jq) {
            return jq.each(function () {
                _3a9(this, false);
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                _3a9(this, true);
            });
        },
        destroy: function (jq) {
            return jq.each(function () {
                var opts = $(this).menubutton("options");
                if (opts.menu) {
                    $(opts.menu).menu("destroy");
                }
                $(this).remove();
            });
        }
    };
    $.fn.menubutton.parseOptions = function (_3b1) {
        var t = $(_3b1);
        return $.extend({}, $.fn.linkbutton.parseOptions(_3b1), $.parser.parseOptions(_3b1, ["menu", {
            plain: "boolean",
            duration: "number"
        }]));
    };
    $.fn.menubutton.defaults = $.extend({}, $.fn.linkbutton.defaults, {
        plain: true,
        menu: null,
        duration: 100
    });
})(jQuery);
(function ($) {
    function init(_3b2) {
        var opts = $.data(_3b2, "splitbutton").options;
        var btn = $(_3b2);
        btn.removeClass("s-btn-active s-btn-plain-active").addClass("s-btn");
        btn.linkbutton($.extend({}, opts, {
            text: opts.text + "<span class=\"s-btn-downarrow\">&nbsp;</span>"
        }));
        if (opts.menu) {
            $(opts.menu).menu({
                onShow: function () {
                    btn.addClass((opts.plain == true) ? "s-btn-plain-active" : "s-btn-active");
                },
                onHide: function () {
                    btn.removeClass((opts.plain == true) ? "s-btn-plain-active" : "s-btn-active");
                }
            });
        }
        _3b3(_3b2, opts.disabled);
    };

    function _3b3(_3b4, _3b5) {
        var opts = $.data(_3b4, "splitbutton").options;
        opts.disabled = _3b5;
        var btn = $(_3b4);
        var _3b6 = btn.find(".s-btn-downarrow");
        if (_3b5) {
            btn.linkbutton("disable");
            _3b6.unbind(".splitbutton");
        } else {
            btn.linkbutton("enable");
            _3b6.unbind(".splitbutton");
            _3b6.bind("click.splitbutton", function () {
                _3b7();
                return false;
            });
            var _3b8 = null;
            _3b6.bind("mouseenter.splitbutton", function () {
                _3b8 = setTimeout(function () {
                    _3b7();
                }, opts.duration);
                return false;
            }).bind("mouseleave.splitbutton", function () {
                if (_3b8) {
                    clearTimeout(_3b8);
                }
            });
        }

        function _3b7() {
            if (!opts.menu) {
                return;
            }
            $("body>div.menu-top").menu("hide");
            $(opts.menu).menu("show", {
                alignTo: btn
            });
            btn.blur();
        };
    };
    $.fn.splitbutton = function (_3b9, _3ba) {
        if (typeof _3b9 == "string") {
            return $.fn.splitbutton.methods[_3b9](this, _3ba);
        }
        _3b9 = _3b9 || {};
        return this.each(function () {
            var _3bb = $.data(this, "splitbutton");
            if (_3bb) {
                $.extend(_3bb.options, _3b9);
            } else {
                $.data(this, "splitbutton", {
                    options: $.extend({}, $.fn.splitbutton.defaults, $.fn.splitbutton.parseOptions(this), _3b9)
                });
                $(this).removeAttr("disabled");
            }
            init(this);
        });
    };
    $.fn.splitbutton.methods = {
        options: function (jq) {
            return $.data(jq[0], "splitbutton").options;
        },
        enable: function (jq) {
            return jq.each(function () {
                _3b3(this, false);
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                _3b3(this, true);
            });
        },
        destroy: function (jq) {
            return jq.each(function () {
                var opts = $(this).splitbutton("options");
                if (opts.menu) {
                    $(opts.menu).menu("destroy");
                }
                $(this).remove();
            });
        }
    };
    $.fn.splitbutton.parseOptions = function (_3bc) {
        var t = $(_3bc);
        return $.extend({}, $.fn.linkbutton.parseOptions(_3bc), $.parser.parseOptions(_3bc, ["menu", {
            plain: "boolean",
            duration: "number"
        }]));
    };
    $.fn.splitbutton.defaults = $.extend({}, $.fn.linkbutton.defaults, {
        plain: true,
        menu: null,
        duration: 100
    });
})(jQuery);
(function ($) {
    function init(_3bd) {
        $(_3bd).hide();
        var span = $("<span class=\"searchbox\"></span>").insertAfter(_3bd);
        var _3be = $("<input type=\"text\" class=\"searchbox-text\">").appendTo(span);
        $("<span><span class=\"searchbox-button\"></span></span>").appendTo(span);
        var name = $(_3bd).attr("name");
        if (name) {
            _3be.attr("name", name);
            $(_3bd).removeAttr("name").attr("searchboxName", name);
        }
        return span;
    };

    function _3bf(_3c0, _3c1) {
        var opts = $.data(_3c0, "searchbox").options;
        var sb = $.data(_3c0, "searchbox").searchbox;
        if (_3c1) {
            opts.width = _3c1;
        }
        sb.appendTo("body");
        if (isNaN(opts.width)) {
            opts.width = sb._outerWidth();
        }
        var _3c2 = sb.find("span.searchbox-button");
        var menu = sb.find("a.searchbox-menu");
        var _3c3 = sb.find("input.searchbox-text");
        sb._outerWidth(opts.width)._outerHeight(opts.height);
        _3c3._outerWidth(sb.width() - menu._outerWidth() - _3c2._outerWidth());
        _3c3.css({
            height: sb.height() + "px",
            lineHeight: sb.height() + "px"
        });
        menu._outerHeight(sb.height());
        _3c2._outerHeight(sb.height());
        var _3c4 = menu.find("span.l-btn-left");
        _3c4._outerHeight(sb.height());
        _3c4.find("span.l-btn-text,span.m-btn-downarrow").css({
            height: _3c4.height() + "px",
            lineHeight: _3c4.height() + "px"
        });
        sb.insertAfter(_3c0);
    };

    function _3c5(_3c6) {
        var _3c7 = $.data(_3c6, "searchbox");
        var opts = _3c7.options;
        if (opts.menu) {
            _3c7.menu = $(opts.menu).menu({
                onClick: function (item) {
                    _3c8(item);
                }
            });
            var item = _3c7.menu.children("div.menu-item:first");
            _3c7.menu.children("div.menu-item").each(function () {
                var _3c9 = $.extend({}, $.parser.parseOptions(this), {
                    selected: ($(this).attr("selected") ? true : undefined)
                });
                if (_3c9.selected) {
                    item = $(this);
                    return false;
                }
            });
            item.triggerHandler("click");
        } else {
            _3c7.searchbox.find("a.searchbox-menu").remove();
            _3c7.menu = null;
        }

        function _3c8(item) {
            _3c7.searchbox.find("a.searchbox-menu").remove();
            var mb = $("<a class=\"searchbox-menu\" href=\"javascript:void(0)\"></a>").html(item.text);
            mb.prependTo(_3c7.searchbox).menubutton({
                menu: _3c7.menu,
                iconCls: item.iconCls
            });
            _3c7.searchbox.find("input.searchbox-text").attr("name", $(item.target).attr("name") || item.text);
            _3bf(_3c6);
        };
    };

    function _3ca(_3cb) {
        var _3cc = $.data(_3cb, "searchbox");
        var opts = _3cc.options;
        var _3cd = _3cc.searchbox.find("input.searchbox-text");
        var _3ce = _3cc.searchbox.find(".searchbox-button");
        _3cd.unbind(".searchbox").bind("blur.searchbox", function (e) {
            opts.value = $(this).val();
            if (opts.value == "") {
                $(this).val(opts.prompt);
                $(this).addClass("searchbox-prompt");
            } else {
                $(this).removeClass("searchbox-prompt");
            }
        }).bind("focus.searchbox", function (e) {
            if ($(this).val() != opts.value) {
                $(this).val(opts.value);
            }
            $(this).removeClass("searchbox-prompt");
        }).bind("keydown.searchbox", function (e) {
            if (e.keyCode == 13) { // enter
                e.preventDefault();
                opts.value = $(this).val();
                
//                var name = $.fn.prop ? _3cd.prop("name") : _3cd.attr("name");
//                opts.searcher.call(_3cb, opts.value, name);
                return false;
            } else {
            	opts.value = $(this).val(); // 입력값이 바로 적용될 수 있도록 추가함(2020.05.20), 이전에는 엔터를 입력하는 경우에만 적용되었음
            }
        });
        _3ce.unbind(".searchbox").bind("click.searchbox", function () {
            //var name = $.fn.prop ? _3cb.prop("name") : _3cb.attr("name");
        	//opts.searcher.call(_3cb, opts.value, name);
            var fname = opts.searcher;
            
        	if (!oUtil.isNull(fname)) {
        		var func = eval("window." + opts.pid + ".editor");
        		
                if (typeof(func[fname]) == "function") {
                	func[fname](_3cd, opts.params);
                }
            }
        }).bind("mouseenter.searchbox", function () {
            $(this).addClass("searchbox-button-hover");
        }).bind("mouseleave.searchbox", function () {
            $(this).removeClass("searchbox-button-hover");
        });
    };

    function _3cf(_3d0) {
        var _3d1 = $.data(_3d0, "searchbox");
        var opts = _3d1.options;
        var _3d2 = _3d1.searchbox.find("input.searchbox-text");
        if (opts.value == "") {
            _3d2.val(opts.prompt);
            _3d2.addClass("searchbox-prompt");
        } else {
            _3d2.val(opts.value);
            _3d2.removeClass("searchbox-prompt");
        }
    };
    $.fn.searchbox = function (_3d3, _3d4) {
        if (typeof _3d3 == "string") {
            return $.fn.searchbox.methods[_3d3](this, _3d4);
        }
        _3d3 = _3d3 || {};
        return this.each(function () {
            var _3d5 = $.data(this, "searchbox");
            if (_3d5) {
                $.extend(_3d5.options, _3d3);
            } else {
                _3d5 = $.data(this, "searchbox", {
                    options: $.extend({}, $.fn.searchbox.defaults, $.fn.searchbox.parseOptions(this), _3d3),
                    searchbox: init(this)
                });
            }
            _3c5(this);
            _3cf(this);
            _3ca(this);
            _3bf(this);
        });
    };
    $.fn.searchbox.methods = {
        options: function (jq) {
            if(oUtil.isNull($.data(jq[0], "searchbox"))) return;
            return $.data(jq[0], "searchbox").options;
        },
        menu: function (jq) {
            return $.data(jq[0], "searchbox").menu;
        },
        textbox: function (jq) {
            return $.data(jq[0], "searchbox").searchbox.find("input.searchbox-text");
        },
        getValue: function (jq) {
            return $.data(jq[0], "searchbox").options.value;
        },
        setValue: function (jq, _3d6) {
            return jq.each(function () {
            	if(oUtil.isNull($(this).searchbox("options"))) return;
                $(this).searchbox("options").value = _3d6;
                $(this).searchbox("textbox").val(_3d6);
                $(this).searchbox("textbox").blur();
            });
        },
        getName: function (jq) {
            return $.data(jq[0], "searchbox").searchbox.find("input.searchbox-text").attr("name");
        },
        selectName: function (jq, name) {
            return jq.each(function () {
                var menu = $.data(this, "searchbox").menu;
                if (menu) {
                    menu.children("div.menu-item[name=\"" + name + "\"]").triggerHandler("click");
                }
            });
        },
        destroy: function (jq) {
            return jq.each(function () {
                var menu = $(this).searchbox("menu");
                if (menu) {
                    menu.menu("destroy");
                }
                $.data(this, "searchbox").searchbox.remove();
                $(this).remove();
            });
        },
        resize: function (jq, _3d7) {
            return jq.each(function () {
                _3bf(this, _3d7);
            });
        }
    };
    $.fn.searchbox.parseOptions = function (_3d8) {
        var t = $(_3d8);
        return $.extend({}, $.parser.parseOptions(_3d8, ["width", "height", "prompt", "menu"]), {
            value: t.val(),
            searcher: (t.attr("searcher") ? eval(t.attr("searcher")) : undefined)
        });
    };
    $.fn.searchbox.defaults = {
        width: "auto",
        height: 22,
        prompt: "",
        value: "",
        menu: null,
        searcher: function (_3d9, name) {}
    };
})(jQuery);
(function ($) {
    function init(_3da) {
        $(_3da).addClass("validatebox-text");
    };

    function _3db(_3dc) {
        var _3dd = $.data(_3dc, "validatebox");
        _3dd.validating = false;
        $(_3dc).tooltip("destroy");
        $(_3dc).unbind();
        $(_3dc).remove();
    };

    function _3de(_3df) {
        var box = $(_3df);
        var _3e0 = $.data(_3df, "validatebox");
        box.unbind(".validatebox");
        if(_3e0.options.novalidate){
        	return;
        }
        
        box.bind("focus.validatebox", function () {
            _3e0.validating = true;
            _3e0.value = undefined;
            (function () {
                if (_3e0.validating) {
                    if (_3e0.value != box.val()) {
                        _3e0.value = box.val();
                        if (_3e0.timer) {
                            clearTimeout(_3e0.timer);
                        }
                        _3e0.timer = setTimeout(function () {
                            $(_3df).validatebox("validate");
                        }, _3e0.options.delay);
                    } else {
                        _3e5(_3df);
                    }
                    setTimeout(arguments.callee, 200);
                }
            })();
        }).bind("blur.validatebox", function () {
            if (_3e0.timer) {
                clearTimeout(_3e0.timer);
                _3e0.timer = undefined;
            }
            _3e0.validating = false;
            _3e1(_3df);
        }).bind("mouseenter.validatebox", function () {
        	if (box.hasClass("validatebox-invalid")) {
                _3e2(_3df);
            }
        }).bind("focusout.validatebox", function () { // 유효성 체크 시 빠르게 작성 후 이동하는 경우, 메시지 잔상이 남는 문제가 있어 추가함(2020-11-20)
        	$(this).validatebox("validate");
        }).bind("mouseleave.validatebox", function () {
	        if (!_3e0.validating) {
                _3e1(_3df);
            }
        });
    };
    
    function _3e100(_3e3){
    	var _3e4 = $.data(_3e3, "validatebox");
        var opts = _3e4.options;

		var sfunc = eval("window." + opts.search);
        if (!oUtil.isNull(sfunc)) {
        	// 그리드 ID에 해당하는 <code>function</code>이 있으면 호출된다.
            if (typeof(sfunc) == "function") {
            	sfunc();
            }
        }
    }
    
    function _3e2(_3e3) {
        var _3e4 = $.data(_3e3, "validatebox");
        var opts = _3e4.options;
        $(_3e3).tooltip($.extend({}, opts.tipOptions, {
            content: _3e4.message,
            position: opts.tipPosition,
            deltaX: opts.deltaX
        })).tooltip("show");
        _3e4.tip = true;
    };

    function _3e5(_3e6) {
        var _3e7 = $.data(_3e6, "validatebox");
        if (_3e7 && _3e7.tip) {
            $(_3e6).tooltip("reposition");
        }
    };

    function _3e1(_3e8) {
        var _3e9 = $.data(_3e8, "validatebox");
        _3e9.tip = false;
        $(_3e8).tooltip("hide");
    };

    function _3ea(_3eb) {
        var _3ec = $.data(_3eb, "validatebox");
        
        if(oUtil.isNull(_3ec)) return; // 오류를 막기 위해 예외처리함(2017.12.16, YNI-Maker)
        
        var opts = _3ec.options;
        var box = $(_3eb);
        var _3ed = box.val();
        
        function _3ee(msg) {
            _3ec.message = msg;
        };
        
        function _3ef(_3f0) {
            var _3f1 = /([a-zA-Z_]+)(.*)/.exec(_3f0);
            var rule = opts.rules[_3f1[1]];
            
            if (rule && _3ed) {
                var _3f2 = eval(_3f1[2]);
                if (!rule["validator"](_3ed, _3f2)) {
                    box.addClass("validatebox-invalid");
                    var _3f3 = rule["message"];
                    if (_3f2) {
                        for (var i = 0; i < _3f2.length; i++) {
                            _3f3 = _3f3.replace(new RegExp("\\{" + i + "\\}", "g"), _3f2[i]);
                        }
                    }
                    _3ee(opts.invalidMessage || _3f3);
                    if (_3ec.validating) {
                        _3e2(_3eb);
                    }
                    return false;
                }
            }
            return true;
        };
        
        box.removeClass("validatebox-invalid");
        _3e1(_3eb);
        
        if(opts.novalidate||box.is(":disabled")){
        	return true;
        }
        
        if (opts.required) {
        	if (oUtil.isNull(_3ed)) {
                box.addClass("validatebox-invalid");
                _3ee(opts.missingMessage);
                if (_3ec.validating) {
                    _3e2(_3eb);
                }
                return false;
            }
        }
        if (opts.validType) {
        	var valid = eval(opts.validType);
            if (typeof valid == "string") {
        	    if (!_3ef(valid)) {
                    return false;
                }
            } else {
                for (var i = 0; i < valid.length; i++) {
                    if (!_3ef(valid[i])) {
                        return false;
                    }
                }
            }
        }
        
        return true;
    };
    function _3ga(_3gb,_3gc){
    	var vbox = $.data(_3gb, "validatebox");
    	if(oUtil.isNull(vbox)) return;
    	var opts = vbox.options;
    	
    	if(!oUtil.isNull(_3gc) && _3gc){
    		opts.novalidate =_3gc;
    	}
    	if(opts.novalidate){
	    	$(_3gb).removeClass("validatebox-invalid");
	    	_3e1(_3gb);
    	}
    	
    	_3de(_3gb);
    };
    $.fn.validatebox = function (_3f4, _3f5) {
        if (typeof _3f4 == "string") {
            return $.fn.validatebox.methods[_3f4](this, _3f5);
        }
        _3f4 = _3f4 || {};
        return this.each(function () {
            var _3f6 = $.data(this, "validatebox");
            if (_3f6) {
                $.extend(_3f6.options, _3f4);
            } else {
                init(this);
                $.data(this, "validatebox", {
                    options: $.extend({}, $.fn.validatebox.defaults, $.fn.validatebox.parseOptions(this), _3f4)
                });
            }
            _3ga(this);
            _3ea(this);
        });
    };
    $.fn.validatebox.methods = {
        options: function (jq) {
            return $.data(jq[0], "validatebox").options;
        },
        destroy: function (jq) {
            return jq.each(function () {
                _3db(this);
            });
        },
        validate: function (jq) {
            return jq.each(function () {
            	_3ea(this);
            });
        },
        isValid: function (jq) {
            return _3ea(jq[0]);
        },
        enableValidation:function(jq){
        	return jq.each(function(){
        		_3ga(this,false);
        	});
        },
        disableValidation:function(jq){
        	return jq.each(function () {
        		_3ga(this,true);
            });
        },
        resetValidation:function(jq){
        	return jq.each(function(){
	    		var opts=$(this).validatebox("options");
	    		opts._validateOnCreate=opts.validateOnCreate;
	    		_4cf(this);
    		});
		},
		enable:function(jq){
    		return jq.each(function(){
	    		return;
    		});
		},
		disable:function(jq){
    		return jq.each(function(){
    			return;
    		});
		},
		readonly:function(jq,mode){
    		return jq.each(function(){
    			return;
    		});
		}
    };
    $.fn.validatebox.parseOptions = function (_3f7) {
        var t = $(_3f7);
        return $.extend({},
        $.parser.parseOptions(_3f7, ["validType", "missingMessage", "invalidMessage", "tipPosition", {
            delay: "number",
            deltaX: "number"
        }]), {
            required: (t.attr("required") ? true : undefined),
            novalidate:(t.attr("novalidate") != undefined ? true : undefined),
            search: (t.attr("search") != null ? t.attr("search") : undefined)
        });
    };
    $.fn.validatebox.defaults = {
        required: false,
        validType: null,
        delay: 200,
        missingMessage: resource.getMessage("MSG_REQUIRED_COLUMN"),
        invalidMessage: null,
        tipPosition: "bottom",
        validateOnCreate: false,
        validateOnBlur: true,
        search : null,
        deltaX: 0,
        novalidate:false,
        tipOptions: {
            showEvent: "none",
            hideEvent: "none",
            showDelay: 0,
            hideDelay: 0,
            zIndex: "",
            onShow: function () {
                $(this).tooltip("tip").css({
                    color: "#000",
                    borderColor: "#CC9933",
                    backgroundColor: "#FFFFCC"
                });
            },
            onHide: function () {
                $(this).tooltip("destroy");
            }
        },
        rules: {
            email: {
                validator: function (_3f8) {
                    return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(_3f8);
                },
                message: resource.getMessage("MSG_EMAIL_ENTER")
            },
            url: {
                validator: function (_3f9) {
                    return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(_3f9);
                },
                message: "Please enter a valid URL."
            },
            length: {
                validator: function (_3fa, _3fb) {
                    var len = $.trim(_3fa).length;
                    return len >= _3fb[0] && len <= _3fb[1];
                },
                message: "Please enter a value between {0} and {1}."
            },
            remote: {
                validator: function (_3fc, _3fd) {
                    var data = {};
                    data[_3fd[1]] = _3fc;
                    var _3fe = $.ajax({
                        url: _3fd[0],
                        dataType: "json",
                        data: data,
                        async: false,
                        cache: false,
                        type: "post"
                    }).responseText;
                    return _3fe == "true";
                },
                message: "Please fix this field."
            }
        }
    };
})(jQuery);
(function ($) {
    function _3ff(_400, _401) {
    	_401 = _401 || {};
        var _402 = {};
        if (_401.onSubmit) {
            if (_401.onSubmit.call(_400, _402) == false) {
                return;
            }
        }
        var form = $(_400);
        if (_401.url) {
            form.attr("action", _401.url);
        }
        var _403 = "easyui_frame_" + (new Date().getTime());
        var _404 = $("<iframe id=" + _403 + " name=" + _403 + "></iframe>").attr("src", window.ActiveXObject ? "javascript:false" : "about:blank").css({
            position: "absolute",
            top: -1000,
            left: -1000
        });
        var t = form.attr("target"),
            a = form.attr("action");
        form.attr("target", _403);
        var _405 = $();
        try {
            _404.appendTo("body");
            _404.bind("load", cb);
            for (var n in _402) {
            	var f = $("<input type=\"hidden\" name=\"" + n + "\">").val(_402[n]).appendTo(form);
            	_405 = _405.add(f);
            }
            
            form[0].submit();
        } finally {
            form.attr("action", a);
            t ? form.attr("target", t) : form.removeAttr("target");
            _405.remove();
        }
        var _406 = 10;

        function cb() {
            _404.unbind();
            var body = $("#" + _403).contents().find("body");
            var data = body.html();
            if (data == "") {
                if (--_406) {
                    setTimeout(cb, 100);
                    return;
                }
                return;
            }
            var ta = body.find(">textarea");
            if (ta.length) {
                data = ta.val();
            } else {
                var pre = body.find(">pre");
                if (pre.length) {
                    data = pre.html();
                }
            }
            
            data = unescape(data); // rows를 제외한 모든 값을 복원함(YNI-Master, 2014.12.05)
            
            if (_401.success) {
                _401.success(data);
            }
            setTimeout(function () {
                _404.unbind();
                _404.remove();
            }, 100);
        };
    };

    function load(_407, data) {
        if (!$.data(_407, "form")) {
            $.data(_407, "form", {
                options: $.extend({}, $.fn.form.defaults)
            });
        }
        var opts = $.data(_407, "form").options;
        if (typeof data == "string") {
            var _408 = {};
            if (opts.onBeforeLoad.call(_407, _408) == false) {
                return;
            }
            $.ajax({
                url: data,
                data: _408,
                dataType: "json",
                success: function (data) {
                	_409(data);
                },
                error: function () {
                    opts.onLoadError.apply(_407, arguments);
                }
            });
        } else {
            _409(data);
        }

        function _409(data) {
        	var form = $(_407);
            for (var name in data) {
                var val = data[name];

                val = unescape(val);   // 디코딩(YNI-Master 2014.02.03)
                var rr = _40a(name, val);
                if (!rr.length) {
                    var f = form.find("input[numberboxName=\"" + name + "\"]");
                    if (f.length) {
                        f.numberbox("setValue", val);
                    } else {
                        $("input[name=\"" + name + "\"]", form).val(val);
                        $("textarea[name=\"" + name + "\"]", form).val(val);
                        $("select[name=\"" + name + "\"]", form).val(val);
                    }
                }
                _40b(name, val);
            }
            opts.onLoadSuccess.call(_407, data);
            _40e(_407);
        };

        function _40a(name, val) {
            var rr = $(_407).find("input[name=\"" + name + "\"][type=radio], input[name=\"" + name + "\"][type=checkbox]");
            rr._propAttr("checked", false);
            rr.each(function () {
                var f = $(this);
                if (oUtil.isNull(val)) {
                    return false;
                }
                if (f.val() == String(val) || $.inArray(f.val(), val) >= 0) {
                    f._propAttr("checked", true);
                }
            });
            return rr;
        };

        function _40b(name, val) {
            var form = $(_407);
            var cc = ["combobox", "combotree", "combogrid", "datetimebox", "datebox", "combo"];
            var c = form.find("[comboName=\"" + name + "\"]");
            
            if (c.length) {
                for (var i = 0; i < cc.length; i++) {
                    var type = cc[i];
                    
                    if(type == "datebox" && oUtil.isNull(val)) val = ""; // 날짜 타입인 경우에는 공백문자없이 리턴시킴(2021.03.04)
                    else if(type == "combobox" && oUtil.isNull(val)) val = " "; // 콤보박스의 값이 없는 항목이 선택되도록 공백문자로 값을 변환시킴(2020.06.17)
                    
                    if (c.hasClass(type + "-f")) {
                        if (c[type]("options").multiple) {
                            c[type]("setValues", val);
                        } else {
                            c[type]("setValue", val);
                        }
                        
                        return;
                    }
                }
            }
        };
    };

    function _40c(_40d) {
        $("input,select,textarea", _40d).each(function () {
            var t = this.type,
                tag = this.tagName.toLowerCase();
            if (t == "text" || t == "hidden" || t == "password" || tag == "textarea") {
                this.value = "";
            } else {
                if (t == "file") {
                    var file = $(this);
                    file.after(file.clone().val(""));
                    file.remove();
                } else {
                    if (t == "checkbox" || t == "radio") {
                        this.checked = false;
                    } else {
                        if (tag == "select") {
                            this.selectedIndex = -1;
                        }
                    }
                }
            }
        });
        if ($.fn.combo) {
            $(".combo-f", _40d).combo("clear");
        }
        if ($.fn.combobox) {
            $(".combobox-f", _40d).combobox("clear");
        }
        if ($.fn.combotree) {
            $(".combotree-f", _40d).combotree("clear");
        }
        if ($.fn.combogrid) {
            $(".combogrid-f", _40d).combogrid("clear");
        }
        _40e(_40d);
    };

    function _40f(_410) {
        _410.reset();
        var t = $(_410);
        if ($.fn.combo) {
            t.find(".combo-f").combo("reset");
        }
        if ($.fn.combobox) {
            t.find(".combobox-f").combobox("reset");
        }
        if ($.fn.combotree) {
            t.find(".combotree-f").combotree("reset");
        }
        if ($.fn.combogrid) {
            t.find(".combogrid-f").combogrid("reset");
        }
        if ($.fn.datebox) {
            t.find(".datebox-f").datebox("reset");
        }
        if ($.fn.datetimebox) {
            t.find(".datetimebox-f").datetimebox("reset");
        }
        if ($.fn.spinner) {
            t.find(".spinner-f").spinner("reset");
        }
        if ($.fn.timespinner) {
            t.find(".timespinner-f").timespinner("reset");
        }
        if ($.fn.numberbox) {
            t.find(".numberbox-f").numberbox("reset");
        }
        if ($.fn.numberspinner) {
            t.find(".numberspinner-f").numberspinner("reset");
        }
        _40e(_410);
    };

    function _411(_412) {
        var _413 = $.data(_412, "form").options;
        var form = $(_412);
        form.unbind(".form").bind("submit.form", function () {
            setTimeout(function () {
                _3ff(_412, _413);
            }, 0);
            return false;
        });
    };

    function _40e(_414) {
        if ($.fn.validatebox) {
            var t = $(_414);
            t.find(".validatebox-text:not(:disabled)").validatebox("validate");
            var _415 = t.find(".validatebox-invalid");
            _415.filter(":not(:disabled):first").focus();
            return _415.length == 0;
        }
        return true;
    };
    function _46g(_46b,_46c){
    	$(_46b).find(".validatebox-text:not(:disabled)").validatebox(_46c?"disableValidation":"enableValidation");
    };
    $.fn.form = function (_416, _417) {
        if (typeof _416 == "string") {
            return $.fn.form.methods[_416](this, _417);
        }
        _416 = _416 || {};
        return this.each(function () {
            if (!$.data(this, "form")) {
                $.data(this, "form", {
                    options: $.extend({}, $.fn.form.defaults, _416)
                });
            }
            _411(this);
        });
    };
    $.fn.form.methods = {
        submit: function (jq, _418) {
            return jq.each(function () {
                _3ff(this, $.extend({}, $.fn.form.defaults, _418 || {}));
            });
        },
        load: function (jq, data) {
        	return jq.each(function () {
                load(this, data);
            });
        },
        clear: function (jq) {
            return jq.each(function () {
                _40c(this);
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                _40f(this);
            });
        },
        validate: function (jq) {
            return _40e(jq[0]);
        },
        disableValidation:function(jq){
        	return jq.each(function(){
        		_46g(this,true);
        	});
        },
        enableValidation:function(jq){
        	return jq.each(function(){
        		_46g(this,false);
        	});
        }
    };
    $.fn.form.defaults = {
        url: null,
        onSubmit: function (_419) {
            return $(this).form("validate");
        },
        success: function (data) {},
        onBeforeLoad: function (_41a) {},
        onLoadSuccess: function (data) {},
        onLoadError: function () {}
    };
})(jQuery);
(function ($) {
    function init(_41b) {
        $(_41b).addClass("numberbox-f");
        var v = $("<input type=\"hidden\">").insertAfter(_41b);
        var name = $(_41b).attr("name");
        if (name) {
            v.attr("name", name);
            $(_41b).removeAttr("name").attr("numberboxName", name);
            $(_41b).css("text-align", "right");
        }
        
        return v;
    };

    function _41c(_41d) {
        var opts = $.data(_41d, "numberbox").options;
        var fn = opts.onChange;
        opts.onChange = function () {};
        _41e(_41d, opts.parser.call(_41d, opts.value));
        opts.onChange = fn;
        opts.originalValue = _41f(_41d);
    };

    function _41f(_420) {
        return $.data(_420, "numberbox").field.val();
    };

    function _41e(_421, _422t) {
        var _423 = $.data(_421, "numberbox");
        var opts = _423.options;
        var _424 = _41f(_421);
        var _422 = replaceAll(_422t, ",", "");  // YNI-Maker(입력 시 숫자에 콤마가 표시된 경우에 원상태로 복원함, 2017.07.06)
        _422 = opts.parser.call(_421, _422);
        opts.value = _422;
        _423.field.val(_422);
        $(_421).val(opts.formatter.call(_421, _422));
        if (_424 != _422) {
            opts.onChange.call(_421, _422, _424);
        }
    };

    function _425(_426, init) {
        var opts = $.data(_426, "numberbox").options;
        
        $(_426).unbind(".numberbox").bind("keypress.numberbox", function (e) {
            return opts.filter.call(_426, e);
        }).bind("blur.numberbox", function () {
            _41e(_426, $(this).val());
            $(this).val(opts.formatter.call(_426, _41f(_426)));
        }).bind("focus.numberbox", function () {
            var vv = _41f(_426);
            if (vv != opts.parser.call(_426, $(this).val())) {
                $(this).val(opts.formatter.call(_426, vv));
            }
            if(!oUtil.isNull(vv)) {
                $(this).select(); //값을 모두 선택(2019.07.06)
            }
        }).bind("keypress.numberbox", function (e) {
            if (e.which == 13) {
	            _41e(_426, $(this).val());
	            $(this).val(opts.formatter.call(_426, _41f(_426)));
	            
	            $(this).next().focus();  // 입력이 완료되면 자동으로 다음으로 이동시킨다.
            }
        });
    };

    function _427(_428) {
        if ($.fn.validatebox) {
            var opts = $.data(_428, "numberbox").options;
            $(_428).validatebox(opts);
        }
    };

    function _429(_42a, _42b) {
        var opts = $.data(_42a, "numberbox").options;
        if (_42b) {
            opts.disabled = true;
            $(_42a).attr("disabled", true);
        } else {
            opts.disabled = false;
            $(_42a).removeAttr("disabled");
        }
    };
    $.fn.numberbox = function (_42c, _42d) {
        if (typeof _42c == "string") {
            var _42e = $.fn.numberbox.methods[_42c];
            if (_42e) {
                return _42e(this, _42d);
            } else {
                return this.validatebox(_42c, _42d);
            }
        }
        _42c = _42c || {};
        return this.each(function () {
            var _42f = $.data(this, "numberbox");
            if (_42f) {
                $.extend(_42f.options, _42c);
            } else {
                _42f = $.data(this, "numberbox", {
                    options: $.extend({}, $.fn.numberbox.defaults, $.fn.numberbox.parseOptions(this), _42c),
                    field: init(this)
                });
                $(this).removeAttr("disabled");
                $(this).css({
                    imeMode: "disabled"
                });
            }
            _429(this, _42f.options.disabled);
            _425(this, true);
            _427(this);
            _41c(this);
        });
    };
    $.fn.numberbox.methods = {
        options: function (jq) {
            return $.data(jq[0], "numberbox").options;
        },
        destroy: function (jq) {
            return jq.each(function () {
                $.data(this, "numberbox").field.remove();
                $(this).validatebox("destroy");
                $(this).remove();
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                _429(this, true);
            });
        },
        enable: function (jq) {
            return jq.each(function () {
                _429(this, false);
            });
        },
        fix: function (jq) {
            return jq.each(function () {
                _41e(this, $(this).val());
            });
        },
        setValue: function (jq, _430) {
            return jq.each(function () {
                _41e(this, _430);
            });
        },
        getValue: function (jq) {
            return _41f(jq[0]);
        },
        clear: function (jq) {
            return jq.each(function () {
                var _431 = $.data(this, "numberbox");
                _431.field.val("");
                $(this).val("");
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $(this).numberbox("options");
                $(this).numberbox("setValue", opts.originalValue);
            });
        }
    };
    $.fn.numberbox.parseOptions = function (_432) {
        var t = $(_432);
        return $.extend({}, $.fn.validatebox.parseOptions(_432), $.parser.parseOptions(_432, ["decimalSeparator", "groupSeparator", "suffix", {
            min: "number",
            max: "number",
            precision: "number"
        }]), {
            prefix: (t.attr("prefix") ? t.attr("prefix") : undefined),
            disabled: (t.attr("disabled") ? true : undefined),
            value: (t.val() || undefined)
        });
    };
    $.fn.numberbox.defaults = $.extend({}, $.fn.validatebox.defaults, {
        disabled: false,
        value: "",
        min: null,
        max: null,
        precision: 0,
        decimalSeparator: ".",
        groupSeparator: ",",
        prefix: "",
        suffix: "",
        filter: function (e) {
            var opts = $(this).numberbox("options");
            if (e.which == 45) {
                return ($(this).val().indexOf("-") == -1 ? true : false);
            }
            var c = String.fromCharCode(e.which);
            if (c == opts.decimalSeparator) {
                return ($(this).val().indexOf(c) == -1 ? true : false);
            } else {
                if (c == opts.groupSeparator) {
                    return true;
                } else {
                    if ((e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false) || e.which == 0 || e.which == 8) {
                        return true;
                    } else {
                        if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                }
            }
        },
        formatter: function (_433) {
            if (!_433) {
                return _433;
            }
            _433 = _433 + "";
            var opts = $(this).numberbox("options");
            var s1 = _433,
                s2 = "";
            var dpos = _433.indexOf(".");
            if (dpos >= 0) {
                s1 = _433.substring(0, dpos);
                s2 = _433.substring(dpos + 1, _433.length);
            }
            if (opts.groupSeparator) {
                var p = /(\d+)(\d{3})/;
                while (p.test(s1)) {
                    s1 = s1.replace(p, "$1" + opts.groupSeparator + "$2");
                }
            }
            if (s2) {
                return opts.prefix + s1 + opts.decimalSeparator + s2 + opts.suffix;
            } else {
                return opts.prefix + s1 + opts.suffix;
            }
        },
        parser: function (s) {
            s = s + "";
            var opts = $(this).numberbox("options");
            
            var slen = s.split(".");
            if(slen.length > 1) {
                opts.precision = slen[1].length;
            }
            
            if (parseFloat(s) != s) {
                if (opts.prefix) {
                    s = $.trim(s.replace(new RegExp("\\" + $.trim(opts.prefix), "g"), ""));
                }
                if (opts.suffix) {
                    s = $.trim(s.replace(new RegExp("\\" + $.trim(opts.suffix), "g"), ""));
                }
                if (opts.groupSeparator) {
                    s = $.trim(s.replace(new RegExp("\\" + opts.groupSeparator, "g"), ""));
                }
                if (opts.decimalSeparator) {
                    s = $.trim(s.replace(new RegExp("\\" + opts.decimalSeparator, "g"), "."));
                }
                s = s.replace(/\s/g, "");
            }
            var val = parseFloat(s).toFixed(opts.precision);
            if (isNaN(val)) {
                val = "";
            } else {
                if (typeof (opts.min) == "number" && val < opts.min) {
                    val = opts.min.toFixed(opts.precision);
                } else {
                    if (typeof (opts.max) == "number" && val > opts.max) {
                        val = opts.max.toFixed(opts.precision);
                    }
                }
            }
            
            return oUtil.toFloat(val); // 마지막 소숫점에 필요없는 0은 제거 후 리턴하도록 수정(2020-11-19)
//            return val;
        },
        onChange: function (_434, _435) {}
    });
})(jQuery);
(function ($) {
    function _436(_437) {
        var opts = $.data(_437, "calendar").options;
        var t = $(_437);
        if (opts.fit == true) {
            var p = t.parent();
            opts.width = p.width();
            opts.height = p.height();
        }
        var _438 = t.find(".calendar-header");
        t._outerWidth(opts.width);
        t._outerHeight(opts.height);
        t.find(".calendar-body")._outerHeight(t.height() - _438._outerHeight());
    };

    function init(_439) {
        $(_439).addClass("calendar").html("<div class=\"calendar-header\">" + "<div class=\"calendar-prevmonth\"></div>" + "<div class=\"calendar-nextmonth\"></div>" + "<div class=\"calendar-prevyear\"></div>" + "<div class=\"calendar-nextyear\"></div>" + "<div class=\"calendar-title\">" + "<span>Aprial 2010</span>" + "</div>" + "</div>" + "<div class=\"calendar-body\">" + "<div class=\"calendar-menu\">" + "<div class=\"calendar-menu-year-inner\">" + "<span class=\"calendar-menu-prev\"></span>" + "<span><input class=\"calendar-menu-year\" type=\"text\"></input></span>" + "<span class=\"calendar-menu-next\"></span>" + "</div>" + "<div class=\"calendar-menu-month-inner\">" + "</div>" + "</div>" + "</div>");
        $(_439).find(".calendar-title span").hover(function () {
            $(this).addClass("calendar-menu-hover");
        }, function () {
            $(this).removeClass("calendar-menu-hover");
        }).click(function () {
            var menu = $(_439).find(".calendar-menu");
            if (menu.is(":visible")) {
                menu.hide();
            } else {
                _440(_439);
            }
        });
        $(".calendar-prevmonth,.calendar-nextmonth,.calendar-prevyear,.calendar-nextyear", _439).hover(function () {
            $(this).addClass("calendar-nav-hover");
        }, function () {
            $(this).removeClass("calendar-nav-hover");
        });
        $(_439).find(".calendar-nextmonth").click(function () {
            _43a(_439, 1);
        });
        $(_439).find(".calendar-prevmonth").click(function () {
            _43a(_439, -1);
        });
        $(_439).find(".calendar-nextyear").click(function () {
            _43d(_439, 1);
        });
        $(_439).find(".calendar-prevyear").click(function () {
            _43d(_439, -1);
        });
        $(_439).bind("_resize", function () {
            var opts = $.data(_439, "calendar").options;
            if (opts.fit == true) {
                _436(_439);
            }
            return false;
        });
    };

    function _43a(_43b, _43c) {
        var opts = $.data(_43b, "calendar").options;
        opts.month += _43c;
        if (opts.month > 12) {
            opts.year++;
            opts.month = 1;
        } else {
            if (opts.month < 1) {
                opts.year--;
                opts.month = 12;
            }
        }
        show(_43b);
        var menu = $(_43b).find(".calendar-menu-month-inner");
        menu.find("td.calendar-selected").removeClass("calendar-selected");
        menu.find("td:eq(" + (opts.month - 1) + ")").addClass("calendar-selected");
    };

    function _43d(_43e, _43f) {
        var opts = $.data(_43e, "calendar").options;
        opts.year += _43f;
        show(_43e);
        var menu = $(_43e).find(".calendar-menu-year");
        menu.val(opts.year);
    };

    function _440(_441) {
        var opts = $.data(_441, "calendar").options;
        $(_441).find(".calendar-menu").show();
        if ($(_441).find(".calendar-menu-month-inner").is(":empty")) {
            $(_441).find(".calendar-menu-month-inner").empty();
            var t = $("<table></table>").appendTo($(_441).find(".calendar-menu-month-inner"));
            var idx = 0;
            for (var i = 0; i < 3; i++) {
                var tr = $("<tr></tr>").appendTo(t);
                for (var j = 0; j < 4; j++) {
                    $("<td class=\"calendar-menu-month\"></td>").html(opts.months[idx++]).attr("abbr", idx).appendTo(tr);
                }
            }
            $(_441).find(".calendar-menu-prev,.calendar-menu-next").hover(function () {
                $(this).addClass("calendar-menu-hover");
            }, function () {
                $(this).removeClass("calendar-menu-hover");
            });
            $(_441).find(".calendar-menu-next").click(function () {
                var y = $(_441).find(".calendar-menu-year");
                if (!isNaN(y.val())) {
                    y.val(parseInt(y.val()) + 1);
                }
            });
            $(_441).find(".calendar-menu-prev").click(function () {
                var y = $(_441).find(".calendar-menu-year");
                if (!isNaN(y.val())) {
                    y.val(parseInt(y.val() - 1));
                }
            });
            $(_441).find(".calendar-menu-year").keypress(function (e) {
                if (e.keyCode == 13) {
                    _442();
                }
            });
            $(_441).find(".calendar-menu-month").hover(function () {
                $(this).addClass("calendar-menu-hover");
            }, function () {
                $(this).removeClass("calendar-menu-hover");
            }).click(function () {
                var menu = $(_441).find(".calendar-menu");
                menu.find(".calendar-selected").removeClass("calendar-selected");
                $(this).addClass("calendar-selected");
                _442();
            });
        }

        function _442() {
            var menu = $(_441).find(".calendar-menu");
            var year = menu.find(".calendar-menu-year").val();
            var _443 = menu.find(".calendar-selected").attr("abbr");
            if (!isNaN(year)) {
                opts.year = parseInt(year);
                opts.month = parseInt(_443);
                show(_441);
            }
            menu.hide();
        };
        var body = $(_441).find(".calendar-body");
        var sele = $(_441).find(".calendar-menu");
        var _444 = sele.find(".calendar-menu-year-inner");
        var _445 = sele.find(".calendar-menu-month-inner");
        
        _444.find("input").val(opts.year).focus();
        _445.find("td.calendar-selected").removeClass("calendar-selected");
        _445.find("td:eq(" + (opts.month - 1) + ")").addClass("calendar-selected");
        sele._outerWidth(body._outerWidth());
        sele._outerHeight(body._outerHeight());
        _445._outerHeight(sele.height() - _444._outerHeight());
    };

    function _446(_447, year, _448) {
        var opts = $.data(_447, "calendar").options;
        var _449 = [];
        var _44a = new Date(year, _448, 0).getDate();
        for (var i = 1; i <= _44a; i++) {
            _449.push([year, _448, i]);
        }
        var _44b = [],
            week = [];
        var _44c = -1;
        while (_449.length > 0) {
            var date = _449.shift();
            week.push(date);
            var day = new Date(date[0], date[1] - 1, date[2]).getDay();
            if (_44c == day) {
                day = 0;
            } else {
                if (day == (opts.firstDay == 0 ? 7 : opts.firstDay) - 1) {
                    _44b.push(week);
                    week = [];
                }
            }
            _44c = day;
        }
        if (week.length) {
            _44b.push(week);
        }
        var _44d = _44b[0];
        if (_44d.length < 7) {
            while (_44d.length < 7) {
                var _44e = _44d[0];
                var date = new Date(_44e[0], _44e[1] - 1, _44e[2] - 1);
                _44d.unshift([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
            }
        } else {
            var _44e = _44d[0];
            var week = [];
            for (var i = 1; i <= 7; i++) {
                var date = new Date(_44e[0], _44e[1] - 1, _44e[2] - i);
                week.unshift([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
            }
            _44b.unshift(week);
        }
        var _44f = _44b[_44b.length - 1];
        while (_44f.length < 7) {
            var _450 = _44f[_44f.length - 1];
            var date = new Date(_450[0], _450[1] - 1, _450[2] + 1);
            _44f.push([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
        }
        if (_44b.length < 6) {
            var _450 = _44f[_44f.length - 1];
            var week = [];
            for (var i = 1; i <= 7; i++) {
                var date = new Date(_450[0], _450[1] - 1, _450[2] + i);
                week.push([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
            }
            _44b.push(week);
        }
        return _44b;
    };

    function show(_451) {
        var opts = $.data(_451, "calendar").options;
        $(_451).find(".calendar-title span").html(opts.months[opts.month - 1] + " " + opts.year);
        var body = $(_451).find("div.calendar-body");
        body.find(">table").remove();
        var t = $("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><thead></thead><tbody></tbody></table>").prependTo(body);
        var tr = $("<tr></tr>").appendTo(t.find("thead"));
        for (var i = opts.firstDay; i < opts.weeks.length; i++) {
            tr.append("<th>" + opts.weeks[i] + "</th>");
        }
        for (var i = 0; i < opts.firstDay; i++) {
            tr.append("<th>" + opts.weeks[i] + "</th>");
        }
        var _452 = _446(_451, opts.year, opts.month);
        for (var i = 0; i < _452.length; i++) {
            var week = _452[i];
            var tr = $("<tr></tr>").appendTo(t.find("tbody"));
            for (var j = 0; j < week.length; j++) {
                var day = week[j];
                $("<td class=\"calendar-day calendar-other-month\"></td>").attr("abbr", day[0] + "," + day[1] + "," + day[2]).html(day[2]).appendTo(tr);
            }
        }
        t.find("td[abbr^=\"" + opts.year + "," + opts.month + "\"]").removeClass("calendar-other-month");
        var now = new Date();
        var _453 = now.getFullYear() + "," + (now.getMonth() + 1) + "," + now.getDate();
        t.find("td[abbr=\"" + _453 + "\"]").addClass("calendar-today");
        if (opts.current) {
            t.find(".calendar-selected").removeClass("calendar-selected");
            var _454 = opts.current.getFullYear() + "," + (opts.current.getMonth() + 1) + "," + opts.current.getDate();
            t.find("td[abbr=\"" + _454 + "\"]").addClass("calendar-selected");
        }
        var _455 = 6 - opts.firstDay;
        var _456 = _455 + 1;
        if (_455 >= 7) {
            _455 -= 7;
        }
        if (_456 >= 7) {
            _456 -= 7;
        }
        t.find("tr").find("td:eq(" + _455 + ")").addClass("calendar-saturday");
        t.find("tr").find("td:eq(" + _456 + ")").addClass("calendar-sunday");
        t.find("td").hover(function () {
            $(this).addClass("calendar-hover");
        }, function () {
            $(this).removeClass("calendar-hover");
        }).click(function () {
            t.find(".calendar-selected").removeClass("calendar-selected");
            $(this).addClass("calendar-selected");
            var _457 = $(this).attr("abbr").split(",");
            opts.current = new Date(_457[0], parseInt(_457[1]) - 1, _457[2]);
//            console.log(">>>> textVal_ current = "+opts.current);
            opts.onSelect.call(_451, opts.current);
        });
    };
    $.fn.calendar = function (_458, _459) {
        if (typeof _458 == "string") {
            return $.fn.calendar.methods[_458](this, _459);
        }
        _458 = _458 || {};
        return this.each(function () {
            var _45a = $.data(this, "calendar");
            if (_45a) {
                $.extend(_45a.options, _458);
            } else {
                _45a = $.data(this, "calendar", {
                    options: $.extend({}, $.fn.calendar.defaults, $.fn.calendar.parseOptions(this), _458)
                });
                init(this);
            }
            if (_45a.options.border == false) {
                $(this).addClass("calendar-noborder");
            }
            _436(this);
            show(this);
            $(this).find("div.calendar-menu").hide();
        });
    };
    $.fn.calendar.methods = {
        options: function (jq) {
            return $.data(jq[0], "calendar").options;
        },
        resize: function (jq) {
            return jq.each(function () {
                _436(this);
            });
        },
        moveTo: function (jq, date) {
            return jq.each(function () {
                $(this).calendar({
                    year: date.getFullYear(),
                    month: date.getMonth() + 1,
                    current: date
                });
            });
        }
    };
    $.fn.calendar.parseOptions = function (_45b) {
        var t = $(_45b);
        return $.extend({}, $.parser.parseOptions(_45b, ["width", "height", {
            firstDay: "number",
            fit: "boolean",
            border: "boolean"
        }]));
    };
    $.fn.calendar.defaults = {
        width: 200,
        height: 180,
        fit: false,
        border: true,
        firstDay: 0,
        weeks: ["S", "M", "T", "W", "T", "F", "S"],
        months: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        year: new Date().getFullYear(),
        month: new Date().getMonth() + 1,
        current: new Date(),
        onSelect: function (date) {}
    };
})(jQuery);
(function ($) {
    function init(_45c) {
        var _45d = $("<span class=\"spinner\">" + "<span class=\"spinner-arrow\">" + "<span class=\"spinner-arrow-up\"></span>" + "<span class=\"spinner-arrow-down\"></span>" + "</span>" + "</span>").insertAfter(_45c);
        $(_45c).addClass("spinner-text spinner-f").prependTo(_45d);
        return _45d;
    };

    function _45e(_45f, _460) {
        var opts = $.data(_45f, "spinner").options;
        var _461 = $.data(_45f, "spinner").spinner;
        if (_460) {
            opts.width = _460;
        }
        var _462 = $("<div style=\"display:none\"></div>").insertBefore(_461);
        _461.appendTo("body");
        if (isNaN(opts.width)) {
            opts.width = $(_45f).outerWidth();
        }
        var _463 = _461.find(".spinner-arrow");
        _461._outerWidth(opts.width)._outerHeight(opts.height);
        $(_45f)._outerWidth(_461.width() - _463.outerWidth());
        $(_45f).css({
            height: _461.height() + "px",
            lineHeight: _461.height() + "px"
        });
        _463._outerHeight(_461.height());
        _463.find("span")._outerHeight(_463.height() / 2);
        _461.insertAfter(_462);
        _462.remove();
    };

    function _464(_465) {
        var opts = $.data(_465, "spinner").options;
        var _466 = $.data(_465, "spinner").spinner;
        _466.find(".spinner-arrow-up,.spinner-arrow-down").unbind(".spinner");
        if (!opts.disabled) {
            _466.find(".spinner-arrow-up").bind("mouseenter.spinner", function () {
                $(this).addClass("spinner-arrow-hover");
            }).bind("mouseleave.spinner", function () {
                $(this).removeClass("spinner-arrow-hover");
            }).bind("click.spinner", function () {
                opts.spin.call(_465, false);
                opts.onSpinUp.call(_465);
                $(_465).validatebox("validate");
            });
            _466.find(".spinner-arrow-down").bind("mouseenter.spinner", function () {
                $(this).addClass("spinner-arrow-hover");
            }).bind("mouseleave.spinner", function () {
                $(this).removeClass("spinner-arrow-hover");
            }).bind("click.spinner", function () {
                opts.spin.call(_465, true);
                opts.onSpinDown.call(_465);
                $(_465).validatebox("validate");
            });
        }
    };

    function _467(_468, _469) {
        var opts = $.data(_468, "spinner").options;
        if (_469) {
            opts.disabled = true;
            $(_468).attr("disabled", true);
        } else {
            opts.disabled = false;
            $(_468).removeAttr("disabled");
        }
    };
    function _59h(_59i, mode) {
    	var _59j = $.data(_59i, "spinner");
    	
    	if(oUtil.isNull(_59j)) return;  // jong
    	
    	var opts = _59j.options;
        opts.readonly = mode == undefined ? false : mode;
        
        // readonly시 combo와 caledar의 css를 변경함(YNI-Maker, 2017-04-05) 
        if(opts.readonly) {
            _59j.spinner.find(".spinner-text").attr("readonly", opts.readonly ? true : (!opts.editable));
        	_59j.spinner.css("border-color", "#fff");
        	_59j.spinner.find(".spinner-arrow-up").hide();
        	_59j.spinner.find(".spinner-arrow-down").hide();
        } else if(!opts.readonly) {
        	_59j.spinner.find(".spinner-text").attr("readonly", opts.readonly ? true : (!opts.editable));
        	_59j.spinner.css("border-color", "");
        	_59j.spinner.find(".spinner-arrow-up").show();
        	_59j.spinner.find(".spinner-arrow-down").show();
        }
    };
    $.fn.spinner = function (_46a, _46b) {
        if (typeof _46a == "string") {
            var _46c = $.fn.spinner.methods[_46a];
            if (_46c) {
                return _46c(this, _46b);
            } else {
                return this.validatebox(_46a, _46b);
            }
        }
        _46a = _46a || {};
        return this.each(function () {
            var _46d = $.data(this, "spinner");
            if (_46d) {
                $.extend(_46d.options, _46a);
            } else {
                _46d = $.data(this, "spinner", {
                    options: $.extend({}, $.fn.spinner.defaults, $.fn.spinner.parseOptions(this), _46a),
                    spinner: init(this)
                });
                $(this).removeAttr("disabled");
            }
            _46d.options.originalValue = _46d.options.value;
            $(this).val(_46d.options.value);
            $(this).attr("readonly", !_46d.options.editable);
            _467(this, _46d.options.disabled);
            _59h(this, _46d.options.readonly);
            _45e(this);
            $(this).validatebox(_46d.options);
            _464(this);
        });
    };
    $.fn.spinner.methods = {
        options: function (jq) {
            var opts = $.data(jq[0], "spinner").options;
            return $.extend(opts, {
                value: jq.val()
            });
        },
        destroy: function (jq) {
            return jq.each(function () {
                var _46e = $.data(this, "spinner").spinner;
                $(this).validatebox("destroy");
                _46e.remove();
            });
        },
        resize: function (jq, _46f) {
            return jq.each(function () {
                _45e(this, _46f);
            });
        },
        enable: function (jq) {
            return jq.each(function () {
                _467(this, false);
                _464(this);
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                _467(this, true);
                _464(this);
            });
        },
        readonly: function(jq, mode) {
            return jq.each(function () {
                _59h(this, mode);
            });
        },
        getValue: function (jq) {
            return jq.val();
        },
        setValue: function (jq, _470) {
            return jq.each(function () {
                var opts = $.data(this, "spinner").options;
                opts.value = _470;
                $(this).val(_470);
            });
        },
        clear: function (jq) {
            return jq.each(function () {
                var opts = $.data(this, "spinner").options;
                opts.value = "";
                $(this).val("");
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $(this).spinner("options");
                $(this).spinner("setValue", opts.originalValue);
            });
        }
    };
    $.fn.spinner.parseOptions = function (_471) {
        var t = $(_471);
        return $.extend({}, $.fn.validatebox.parseOptions(_471), $.parser.parseOptions(_471, ["width", "height", "min", "max", {
            increment: "number",
            editable: "boolean"
        }]), {
            value: (t.val() || undefined),
            disabled: (t.attr("disabled") ? true : undefined),
            readonly: (t.attr("readonly") ? true : undefined)
        });
    };
    $.fn.spinner.defaults = $.extend({}, $.fn.validatebox.defaults, {
        width: "auto",
        height: 22,
        deltaX: 19,
        value: "",
        min: null,
        max: null,
        increment: 1,
        editable: true,
        disabled: false,
        readonly: false,
        spin: function (down) {},
        onSpinUp: function () {},
        onSpinDown: function () {}
    });
})(jQuery);
(function ($) {
    function _472(_473) {
        $(_473).addClass("numberspinner-f");
        var opts = $.data(_473, "numberspinner").options;
        $(_473).spinner(opts).numberbox(opts);
    };

    function _474(_475, down) {
        var opts = $.data(_475, "numberspinner").options;
        var v = parseFloat($(_475).numberbox("getValue") || opts.value) || 0;
        if (down == true) {
            v -= opts.increment;
        } else {
            v += opts.increment;
        }
        $(_475).numberbox("setValue", v);
    };
    $.fn.numberspinner = function (_476, _477) {
        if (typeof _476 == "string") {
            var _478 = $.fn.numberspinner.methods[_476];
            if (_478) {
                return _478(this, _477);
            } else {
                return this.spinner(_476, _477);
            }
        }
        _476 = _476 || {};
        return this.each(function () {
            var _479 = $.data(this, "numberspinner");
            if (_479) {
                $.extend(_479.options, _476);
            } else {
                $.data(this, "numberspinner", {
                    options: $.extend({}, $.fn.numberspinner.defaults, $.fn.numberspinner.parseOptions(this), _476)
                });
            }
            _472(this);
        });
    };
    $.fn.numberspinner.methods = {
        options: function (jq) {
            var opts = $.data(jq[0], "numberspinner").options;
            return $.extend(opts, {
                value: jq.numberbox("getValue"),
                originalValue: jq.numberbox("options").originalValue
            });
        },
        setValue: function (jq, _47a) {
            return jq.each(function () {
                $(this).numberbox("setValue", _47a);
            });
        },
        getValue: function (jq) {
            return jq.numberbox("getValue");
        },
        clear: function (jq) {
            return jq.each(function () {
                $(this).spinner("clear");
                $(this).numberbox("clear");
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $(this).numberspinner("options");
                $(this).numberspinner("setValue", opts.originalValue);
            });
        }
    };
    $.fn.numberspinner.parseOptions = function (_47b) {
        return $.extend({}, $.fn.spinner.parseOptions(_47b), $.fn.numberbox.parseOptions(_47b), {});
    };
    $.fn.numberspinner.defaults = $.extend({}, $.fn.spinner.defaults, $.fn.numberbox.defaults, {
        spin: function (down) {
            _474(this, down);
        }
    });
})(jQuery);
(function ($) {
    function _47c(_47d) {
        var opts = $.data(_47d, "timespinner").options;
        $(_47d).addClass("timespinner-f");
        $(_47d).spinner(opts);
        
        var _548 = opts.formatter.call(_47d, opts.parser.call(_47d, opts.value));  // 표준시간 조회
        if(!oUtil.isNull(_548)) {
        	if(!oUtil.isNull(opts.value)) $(_47d).val(opts.value);
        	else $(_47d).val(_548);
	        _480(_47d);  // 초기 셋팅
        }
        
        $(_47d).unbind(".timespinner");
        $(_47d).bind("click.timespinner", function () {
            var _47e = 0;
            if (this.selectionStart != null) {
                _47e = this.selectionStart;
            } else {
                if (this.createTextRange) {
                    var _47f = _47d.createTextRange();
                    var s = document.selection.createRange();
                    s.setEndPoint("StartToStart", _47f);
                    _47e = s.text.length;
                }
            }
            
            if (_47e >= 0 && _47e <= 2) {
                opts.highlight = 0;
            } else {
                if (_47e >= 3 && _47e <= 5) {
                    opts.highlight = 1;
                } else {
                    if (_47e >= 6 && _47e <= 8) {
                        opts.highlight = 2;
                    }
                }
            }
            _481(_47d);
        }).bind("blur.timespinner", function () {
            _480(_47d);
        });
    };

    function _481(_482) {
        var opts = $.data(_482, "timespinner").options;
        var _483 = 0, end = 0;
        var nat = opts.nation;
        
        if(opts.dateType == "month") {
        	if(nat == "US" || nat == "MX") { // 월:2자리 + 년도:4자리
	        	if (opts.highlight == 0) {
		            _483 = 0;
		            end = 2;
		        } else {
		            if (opts.highlight == 1 || opts.highlight == 2) {
		                _483 = 3;
		                end = 7;
		            }
		        }
        	} else {  // 년도:4자리 + 월:2자리
        		if(opts.highlight == 0) {
		            _483 = 0;
		            end = 4;
		        } else {
		            if (opts.highlight == 1 || opts.highlight == 2) {
		                _483 = 5;
		                end = 7;
		            }
		        }
        	}
        } else {
	        if (opts.highlight == 0) {
	            _483 = 0;
	            end = 2;
	        } else {
	            if (opts.highlight == 1) {
	                _483 = 3;
	                end = 5;
	            } else {
	                if (opts.highlight == 2) {
	                    _483 = 6;
	                    end = 8;
	                }
	            }
	        }
        }
         
        if (_482.selectionStart != null) {
            _482.setSelectionRange(_483, end);
        } else {
        	if (_482.createTextRange) {
                var _484 = _482.createTextRange();
                _484.collapse();
                _484.moveEnd("character", end);
                _484.moveStart("character", _483);
                _484.select();
            }
        }
        
        $(_482).focus();
    };

    function _485(_486, _487) {
        var opts = $.data(_486, "timespinner").options;
        if (!_487) {
            return null;
        }
        
        if(opts.dateType == "month") {
        	var seperator = opts.separator;
    		var nation = opts.nation;
    		var date = _487;
    		
        	if(oUtil.isNull(date)) return;
        	
    		var value = replaceAll(date, seperator, "");
    		var dateAry = null;
    		
    		try {
	    		value = formatDate(value, seperator, nation);
	    		dateAry = value.split(seperator);
    		} catch(e) {
                return null;
    		}
    		var y = "";
            var m = "";
            var d = "";
            
    		if(nation == "US") {
	            m = parseInt(dateAry[0], 10);
	            d = parseInt(dateAry[1], 10);
	            y = parseInt(dateAry[2], 10);
        	} else if(nation == "MX") {
	            d = parseInt(dateAry[0], 10);
	            m = parseInt(dateAry[1], 10);
	            y = parseInt(dateAry[2], 10);
        	} else {
        		y = parseInt(dateAry[0], 10);
	            m = parseInt(dateAry[1], 10);
	            d = parseInt(dateAry[2], 10);
        	}
    		
    		if (!isNaN(y) && !isNaN(m) && !isNaN(d)) {
            	if(nation == "US") {
            		return new Date(m,d,y);
            	} else if(nation == "MX") {
            		return new Date(d,m,y);
            	} else {
            		return new Date(y,m,d);
            	}
            } else {
                return new Date();
            }
        } else {
            var vv = _487.split(opts.separator);
            for (var i = 0; i < vv.length; i++) {
                if (isNaN(vv[i])) {
                    return null;
                }
            }

            while (vv.length < 3) {
                vv.push(0);
            }
            
            return new Date(1900, 0, 0, vv[0], vv[1], vv[2]);
        }
    };

    function _480(_488) {
    	var opts = $.data(_488, "timespinner").options;
        var _489 = $(_488).val();
        var time = _485(_488, _489);
        if (!time) {
            time = _485(_488, opts.value);
        }
        if (!time) {
            opts.value = "";
            $(_488).val("");
            return;
        }
        var _48a = _485(_488, opts.min);
        var _48b = _485(_488, opts.max);
        
        if (_48a && _48a > time) {
            time = _48a;
        }
        if (_48b && _48b < time) {
            time = _48b;
        }
        
        var tt;
        if(opts.dateType == "month") {
        	var nat = opts.nation;
        	if(nat == "US" || nat == "MX") {
        		tt = [_48c(time.getMonth()), _48c(time.getFullYear())];
        		if(parseInt(tt[0]) == 0) {
        			tt[0] = "12";
        			tt[1] = tt[1] - 1;
        		}
        	} else {
        		tt = [_48c(time.getFullYear()), _48c(time.getMonth())];
        		if(parseInt(tt[1]) == 0) {
        			tt[0] = tt[0] - 1;
        			tt[1] = "12";
        		}
        	}
        } else {
        	tt = [_48c(time.getHours()), _48c(time.getMinutes())];
        	
        	if (opts.showSeconds) {
                tt.push(_48c(time.getSeconds()));
            }
        }
        var val = tt.join(opts.separator);
        opts.value = val;
        $(_488).val(val);

        function _48c(_48d) {
        	if(isNaN(_48d)) return "";
            return (_48d < 10 ? "0" : "") + _48d;
        };
    };

    function _48e(_48f, down) {
        var opts = $.data(_48f, "timespinner").options;
        var val = $(_48f).val();
        if (val == "") {
            val = [0, 0, 0].join(opts.separator);
        }
        var vv = val.split(opts.separator);
        for (var i = 0; i < vv.length; i++) {
        	vv[i] = parseInt(vv[i], 10);
        }
        
        if(opts.dateType == "month" && opts.highlight == 2) {
        	opts.highlight = 1;
        }
        
        if (down == true) {
        	vv[opts.highlight] -= opts.increment;
        } else {
            vv[opts.highlight] += opts.increment;
        }
        
        if(opts.dateType == "month") {
	        for (var i = 0; i < vv.length; i++) {
	            vv[i] = (vv[i] < 10 ? "0" : "") + vv[i];
	        }
        }
        
        $(_48f).val(vv.join(opts.separator));
        
        _480(_48f);
        _481(_48f);
    };
    $.fn.timespinner = function (_490, _491) {
        if (typeof _490 == "string") {
            var _492 = $.fn.timespinner.methods[_490];
            if (_492) {
                return _492(this, _491);
            } else {
                return this.spinner(_490, _491);
            }
        }
        _490 = _490 || {};
        return this.each(function () {
            var _493 = $.data(this, "timespinner");
            if (_493) {
                $.extend(_493.options, _490);
            } else {
                $.data(this, "timespinner", {
                    options: $.extend({}, $.fn.timespinner.defaults, $.fn.timespinner.parseOptions(this), _490)
                });
                _47c(this);
            }
        });
    };
    $.fn.timespinner.methods = {
        options: function (jq) {
        	var opts = jq.data("spinner") ? jq.spinner("options") : {};
			return $.extend($.data(jq[0], "timespinner").options, {
				width : opts.width,
				value : opts.value,
				originalValue : opts.originalValue,
				disabled : opts.disabled,
				readonly : opts.readonly
			});
        },
        setValue: function (jq, _494) {
            return jq.each(function () {
                $(this).val(_494);
                _480(this);
            });
        },
        getHours: function (jq) {
            var opts = $.data(jq[0], "timespinner").options;
            var vv = jq.val().split(opts.separator);
            return parseInt(vv[0], 10);
        },
        getMinutes: function (jq) {
            var opts = $.data(jq[0], "timespinner").options;
            var vv = jq.val().split(opts.separator);
            return parseInt(vv[1], 10);
        },
        getSeconds: function (jq) {
            var opts = $.data(jq[0], "timespinner").options;
            var vv = jq.val().split(opts.separator);
            return parseInt(vv[2], 10) || 0;
        }
    };
    $.fn.timespinner.parseOptions = function (_495) {
        return $.extend({}, $.fn.spinner.parseOptions(_495), $.parser.parseOptions(_495, ["separator", {
            showSeconds: "boolean",
            highlight: "number"
        }]));
    };
    $.fn.timespinner.defaults = $.extend({}, $.fn.spinner.defaults, {
		nation : "KR",
		dateType : "month",
        separator: "-",
        showSeconds: false,
        highlight: 0,
        spin: function (down) {
            _48e(this, down);
        }
    });
})(jQuery);
(function($) {
	function _560(_561) {
		var opts = $.data(_561, "datetimespinner").options;
		$(_561).addClass("datetimespinner-f").timespinner(opts);
	};
	$.fn.datetimespinner = function(_562, _563) {
        if (typeof _562 == "string") {
			var _564 = $.fn.datetimespinner.methods[_562];
			if (_564) {
				return _564(this, _563);
			} else {
                return this.timespinner(_562, _563);
			}
		}
		_562 = _562 || {};
		return this.each(function() {
			var _565 = $.data(this, "datetimespinner");
			if (_565) {
				$.extend(_565.options, _562);
			} else {
				$.data(this, "datetimespinner", {
					options : $.extend({}, $.fn.datetimespinner.defaults, $.fn.datetimespinner.parseOptions(this), _562)
				});
			}
			_560(this);
		});
	};
	$.fn.datetimespinner.methods = {
		options : function(jq) {
			var opts = jq.timespinner("options");
			return $.extend($.data(jq[0], "datetimespinner").options, {
				width : opts.width,
				value : opts.value,
				originalValue : opts.originalValue,
				disabled : opts.disabled,
				readonly : opts.readonly
			});
		}
	};
	$.fn.datetimespinner.parseOptions = function(_566) {
		return $.extend({}, $.fn.timespinner.parseOptions(_566), $.parser.parseOptions(_566, []));
	};
	$.fn.datetimespinner.defaults = $.extend({}, $.fn.timespinner.defaults, {
		formatter : function(date) {
			if (!date) {
				return "";
			}
			
			return $.fn.datebox.defaults.formatter.call(this, date) + " "
					+ $.fn.timespinner.defaults.formatter.call(this, date);
		},
		parser : function(s) {
			s = $.trim(s);
			if (!s) {
				return null;
			}
			var dt = s.split(" ");
			var _567 = $.fn.datebox.defaults.parser.call(this, dt[0]);
			if (dt.length < 2) {
				return _567;
			}
			var _568 = $.fn.timespinner.defaults.parser.call(this, dt[1]);
			return new Date(_567.getFullYear(), _567.getMonth(),
					_567.getDate(), _568.getHours(), _568.getMinutes(), _568.getSeconds());
		},
		selections : [ [ 0, 2 ], [ 3, 5 ], [ 6, 10 ], [ 11, 13 ], [ 14, 16 ], [ 17, 19 ] ]
	});
})(jQuery);
(function ($) {
    var _496 = 0;

    function _497(a, o) {
        for (var i = 0, len = a.length; i < len; i++) {
            if (a[i] == o) {
                return i;
            }
        }
        return -1;
    };

    function _498(a, o, id) {
        if (typeof o == "string") {
            for (var i = 0, len = a.length; i < len; i++) {
                if (a[i][o] == id) {
                    a.splice(i, 1);
                    return;
                }
            }
        } else {
            var _499 = _497(a, o);
            if (_499 != -1) {
                a.splice(_499, 1);
            }
        }
    };

    function _49a(a, o, r) {
        for (var i = 0, len = a.length; i < len; i++) {
            if (a[i][o] == r[o]) {
                return;
            }
        }
        a.push(r);
    };

    function _49b(_49c) {
        var cc = _49c || $("head");
        var _49d = $.data(cc[0], "ss");
        if (!_49d) {
            _49d = $.data(cc[0], "ss", {
                cache: {},
                dirty: []
            });
        }
        return {
            add: function (_49e) {
                var ss = ["<style type=\"text/css\">"];
                for (var i = 0; i < _49e.length; i++) {
                    _49d.cache[_49e[i][0]] = {
                        width: _49e[i][1]
                    };
                }
                var _49f = 0;
                for (var s in _49d.cache) {
                    var item = _49d.cache[s];
                    item.index = _49f++;
                    ss.push(s + "{width:" + item.width + "}");
                }
                ss.push("</style>");
                $(ss.join("\n")).appendTo(cc);
                setTimeout(function () {
                    cc.children("style:not(:last)").remove();
                }, 0);
            },
            getRule: function (_4a0) {
                var _4a1 = cc.children("style:last")[0];
                var _4a2 = _4a1.styleSheet ? _4a1.styleSheet : (_4a1.sheet || document.styleSheets[document.styleSheets.length - 1]);
                var _4a3 = _4a2.cssRules || _4a2.rules;
                return _4a3[_4a0];
            },
            set: function (_4a4, _4a5) {
                var item = _49d.cache[_4a4];
                if (item) {
                    item.width = _4a5;
                    var rule = this.getRule(item.index);
                    if (rule) {
                        rule.style["width"] = _4a5;
                    }
                }
            },
            remove: function (_4a6) {
                var tmp = [];
                for (var s in _49d.cache) {
                    if (s.indexOf(_4a6) == -1) {
                        tmp.push([s, _49d.cache[s].width]);
                    }
                }
                _49d.cache = {};
                this.add(tmp);
            },
            dirty: function (_4a7) {
                if (_4a7) {
                    _49d.dirty.push(_4a7);
                }
            },
            clean: function () {
                for (var i = 0; i < _49d.dirty.length; i++) {
                    this.remove(_49d.dirty[i]);
                }
                _49d.dirty = [];
            }
        };
    };

    function _4a8(_4a9, _4aa) {
        var opts = $.data(_4a9, "datagrid").options;
        var _4ab = $.data(_4a9, "datagrid").panel;
        if (_4aa) {
            if (_4aa.width) {
                opts.width = _4aa.width;
            }
            if (_4aa.height) {
                opts.height = _4aa.height;
            }
        }
        if (opts.fit == true) {
            var p = _4ab.panel("panel").parent();
            opts.width = p.width();
            opts.height = p.height();
        }
        _4ab.panel("resize", {
            width: opts.width,
            height: opts.height
        });
    };

    function _4ac(_4ad) {
        var opts = $.data(_4ad, "datagrid").options;
        var dc = $.data(_4ad, "datagrid").dc;
        var wrap = $.data(_4ad, "datagrid").panel;
        var _4ae = wrap.width();
        var _4af = wrap.height();
        var view = dc.view;
        var _4b0 = dc.view1;
        var _4b1 = dc.view2;
        var _4b2 = _4b0.children("div.datagrid-header");
        var _4b3 = _4b1.children("div.datagrid-header");
        var _4b4 = _4b2.find("table");
        var _4b5 = _4b3.find("table");
        view.width(_4ae);
        var _4b6 = _4b2.children("div.datagrid-header-inner").show();
        _4b0.width(_4b6.find("table").width());
        if (!opts.showHeader) {
            _4b6.hide();
        }
        _4b1.width(_4ae - _4b0._outerWidth());
        _4b0.children("div.datagrid-header,div.datagrid-body,div.datagrid-footer").width(_4b0.width());
        _4b1.children("div.datagrid-header,div.datagrid-body,div.datagrid-footer").width(_4b1.width());
        var hh;
        _4b2.css("height", "");
        _4b3.css("height", "");
        _4b4.css("height", "");
        _4b5.css("height", "");
        hh = Math.max(_4b4.height(), _4b5.height());
        _4b4.height(hh);
        _4b5.height(hh);
        _4b2.add(_4b3)._outerHeight(hh);
        if (opts.height != "auto") {
            var _4b7 = _4af - _4b1.children("div.datagrid-header")._outerHeight() - _4b1.children("div.datagrid-footer")._outerHeight() - wrap.children("div.datagrid-toolbar")._outerHeight();
            wrap.children("div.datagrid-pager").each(function () {
                _4b7 -= $(this)._outerHeight();
            });
            dc.body1.add(dc.body2).children("table.datagrid-btable-frozen").css({
                position: "absolute",
                top: dc.header2._outerHeight()
            });
            var _4b8 = dc.body2.children("table.datagrid-btable-frozen")._outerHeight();
            _4b0.add(_4b1).children("div.datagrid-body").css({
                marginTop: _4b8,
                height: (_4b7 - _4b8)
            });
        }
        view.height(_4b1.height());
    };

    function _4b9(_4ba, _4bb, _4bc) {
    	if(oUtil.isNull($.data(_4ba, "datagrid"))) return;
        var rows = $.data(_4ba, "datagrid").data.rows;
        var opts = $.data(_4ba, "datagrid").options;
        var dc = $.data(_4ba, "datagrid").dc;
        if (!dc.body1.is(":empty") && (!opts.nowrap || opts.autoRowHeight || _4bc)) {
            if (_4bb != undefined) {
                var tr1 = opts.finder.getTr(_4ba, _4bb, "body", 1);
                var tr2 = opts.finder.getTr(_4ba, _4bb, "body", 2);
                _4bd(tr1, tr2);
            } else {
                var tr1 = opts.finder.getTr(_4ba, 0, "allbody", 1);
                var tr2 = opts.finder.getTr(_4ba, 0, "allbody", 2);
                _4bd(tr1, tr2);
                if (opts.showFooter) {
                    var tr1 = opts.finder.getTr(_4ba, 0, "allfooter", 1);
                    var tr2 = opts.finder.getTr(_4ba, 0, "allfooter", 2);
                    _4bd(tr1, tr2);
                }
            }
        }
        _4ac(_4ba);
        if (opts.height == "auto") {
            var _4be = dc.body1.parent();
            var _4bf = dc.body2;
            var _4c0 = _4c1(_4bf);
            var _4c2 = _4c0.height;
            if (_4c0.width > _4bf.width()) {
                _4c2 += 18;
            }
            _4be.height(_4c2);
            _4bf.height(_4c2);
            dc.view.height(dc.view2.height());
        }
        dc.body2.triggerHandler("scroll");

        function _4bd(trs1, trs2) {
            for (var i = 0; i < trs2.length; i++) {
                var tr1 = $(trs1[i]);
                var tr2 = $(trs2[i]);
                tr1.css("height", "");
                tr2.css("height", "");
                var _4c3 = Math.max(tr1.height(), tr2.height());
                tr1.css("height", _4c3);
                tr2.css("height", _4c3);
            }
        };

        function _4c1(cc) {
            var _4c4 = 0;
            var _4c5 = 0;
            $(cc).children().each(function () {
                var c = $(this);
                if (c.is(":visible")) {
                    _4c5 += c._outerHeight();
                    if (_4c4 < c._outerWidth()) {
                        _4c4 = c._outerWidth();
                    }
                }
            });
            return {
                width: _4c4,
                height: _4c5
            };
        };
    };

    function _4c6(_4c7, _4c8) {
        var _4c9 = $.data(_4c7, "datagrid");
        var opts = _4c9.options;
        var dc = _4c9.dc;
        if (!dc.body2.children("table.datagrid-btable-frozen").length) {
            dc.body1.add(dc.body2).prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
        }
        _4ca(true);
        _4ca(false);
        _4ac(_4c7);

        function _4ca(_4cb) {
            var _4cc = _4cb ? 1 : 2;
            var tr = opts.finder.getTr(_4c7, _4c8, "body", _4cc);
            (_4cb ? dc.body1 : dc.body2).children("table.datagrid-btable-frozen").append(tr);
        };
    };

    function _4cd(_4ce, _4cf) {
        function _4d0() {
            var _4d1 = [];
            var _4d2 = [];
            $(_4ce).children("thead").each(function () {
                var opt = $.parser.parseOptions(this, [{
                    frozen: "boolean"
                }]);
                $(this).find("tr").each(function () {
                    var cols = [];
                    $(this).find("th").each(function () {
                        var th = $(this);
                        var col = $.extend({}, $.parser.parseOptions(this, ["field", "align", "halign", "order", {
                            sortable: "boolean",
                            checkbox: "boolean",
                            resizable: "boolean",
                            fixed: "boolean"
                        }, {
                            rowspan: "number",
                            colspan: "number",
                            width: "number"
                        }]), {
                            title: (th.html() || undefined),
                            hidden: (th.attr("hidden") ? true : undefined),
                            formatter: (th.attr("formatter") ? eval(th.attr("formatter")) : undefined),
                            styler: (th.attr("styler") ? eval(th.attr("styler")) : undefined),
                            sorter: (th.attr("sorter") ? eval(th.attr("sorter")) : undefined),
                            session: (th.attr("session") ? eval(th.attr("session")) : undefined) // YNI-Master
                        });
                        if (th.attr("editor")) {
                            var s = $.trim(th.attr("editor"));
                            if (s.substr(0, 1) == "{") {
                                col.editor = eval("(" + s + ")");
                            } else {
                                col.editor = s;
                            }
                        }
                        cols.push(col);
                    });
                    opt.frozen ? _4d1.push(cols) : _4d2.push(cols);
                });
            });
            return [_4d1, _4d2];
        };
        var _4d3 = $("<div class=\"datagrid-wrap\">" + "<div class=\"datagrid-view\">" + "<div class=\"datagrid-view1\">" + "<div class=\"datagrid-header\">" + "<div class=\"datagrid-header-inner\"></div>" + "</div>" + "<div class=\"datagrid-body\">" + "<div class=\"datagrid-body-inner\"></div>" + "</div>" + "<div class=\"datagrid-footer\">" + "<div class=\"datagrid-footer-inner\"></div>" + "</div>" + "</div>" + "<div class=\"datagrid-view2\">" + "<div class=\"datagrid-header\">" + "<div class=\"datagrid-header-inner\"></div>" + "</div>" + "<div class=\"datagrid-body\"></div>" + "<div class=\"datagrid-footer\">" + "<div class=\"datagrid-footer-inner\"></div>" + "</div>" + "</div>" + "</div>" + "</div>").insertAfter(_4ce);
        _4d3.panel({
            doSize: false
        });
        _4d3.panel("panel").addClass("datagrid").bind("_resize", function (e, _4d4) {
            var opts = $.data(_4ce, "datagrid").options;
            if (opts.fit == true || _4d4) {
                _4a8(_4ce);
                setTimeout(function () {
                    if ($.data(_4ce, "datagrid")) {
                        _4d5(_4ce);
                    }
                }, 0);
            }
            return false;
        });
        $(_4ce).hide().appendTo(_4d3.children("div.datagrid-view"));
        var cc = _4d0();
        var view = _4d3.children("div.datagrid-view");
        var _4d6 = view.children("div.datagrid-view1");
        var _4d7 = view.children("div.datagrid-view2");
        var _4d8 = _4d3.closest("div.datagrid-view");
        if (!_4d8.length) {
            _4d8 = view;
        }
        var ss = _49b(_4d8);
        return {
            panel: _4d3,
            frozenColumns: cc[0],
            columns: cc[1],
            dc: {
                view: view,
                view1: _4d6,
                view2: _4d7,
                header1: _4d6.children("div.datagrid-header").children("div.datagrid-header-inner"),
                header2: _4d7.children("div.datagrid-header").children("div.datagrid-header-inner"),
                body1: _4d6.children("div.datagrid-body").children("div.datagrid-body-inner"),
                body2: _4d7.children("div.datagrid-body"),
                footer1: _4d6.children("div.datagrid-footer").children("div.datagrid-footer-inner"),
                footer2: _4d7.children("div.datagrid-footer").children("div.datagrid-footer-inner")
            },
            ss: ss
        };
    };

    function _4d9(_4da) {
        var _4db = $.data(_4da, "datagrid");
        var opts = _4db.options;
        var dc = _4db.dc;
        var _4dc = _4db.panel;
        _4dc.panel($.extend({}, opts, {
            id: null,
            doSize: false,
            onResize: function (_4dd, _4de) {
                setTimeout(function () {
                    if ($.data(_4da, "datagrid")) {
                        _4ac(_4da);
                        _505(_4da);
                        opts.onResize.call(_4dc, _4dd, _4de);
                    }
                }, 0);
            },
            onExpand: function () {
                _4b9(_4da);
                opts.onExpand.call(_4dc);
            }
        }));
        _4db.rowIdPrefix = "datagrid-row-r" + (++_496);
        _4db.cellClassPrefix = "datagrid-cell-c" + _496;
        _4df(dc.header1, opts.frozenColumns, true);
        _4df(dc.header2, opts.columns, false);
        _4e0();
        dc.header1.add(dc.header2).css("display", opts.showHeader ? "block" : "none");
        dc.footer1.add(dc.footer2).css("display", opts.showFooter ? "block" : "none");
        if (opts.toolbar) {
            if (typeof opts.toolbar == "string") {
                $(opts.toolbar).addClass("datagrid-toolbar").prependTo(_4dc);
                $(opts.toolbar).show();
            } else {
                $("div.datagrid-toolbar", _4dc).remove();
                var tb = $("<div class=\"datagrid-toolbar\"><table cellspacing=\"0\" cellpadding=\"0\"><tr></tr></table></div>").prependTo(_4dc);
                var tr = tb.find("tr");
                for (var i = 0; i < opts.toolbar.length; i++) {
                    var btn = opts.toolbar[i];
                    if (btn == "-") {
                        $("<td><div class=\"datagrid-btn-separator\"></div></td>").appendTo(tr);
                    } else {
                        var td = $("<td></td>").appendTo(tr);
                        var tool = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
                        tool[0].onclick = eval(btn.handler || function () {});
                        tool.linkbutton($.extend({}, btn, {
                            plain: true
                        }));
                    }
                }
            }
        } else {
            $("div.datagrid-toolbar", _4dc).remove();
        }
        $("div.datagrid-pager", _4dc).remove();
        if (opts.pagination) {
            var _4e1 = $("<div class=\"datagrid-pager\"></div>");
            if (opts.pagePosition == "bottom") {
            	_4e1.appendTo(_4dc);
            } else {
                if (opts.pagePosition == "top") {
                    _4e1.addClass("datagrid-pager-top").prependTo(_4dc);
                } else {
                    var ptop = $("<div class=\"datagrid-pager datagrid-pager-top\"></div>").prependTo(_4dc);
                    _4e1.appendTo(_4dc);
                    _4e1 = _4e1.add(ptop);
                }
            }
            
            _4e1.pagination({ 
            	total: (opts.pageNumber*opts.pageSize),
            	pageNumber: opts.pageNumber,  // 초기 페이지 번호
                pageSize: opts.pageSize, // 하단에 보여 줄 페이지 번호 수
                pageList: opts.pageList, // 페이지 row수
                viewNumber : opts.viewNumber, // 버퍼 페이지뷰에 표시된 row수(2020.06.06)
                layout: opts.pageLayout, // 그리드에서 설정한 페이지 레이아웃이 적용되도록 추가(2020-03-23)
                onSelectPage: function (_4e2, _4e3) {
                	opts.pageNumber = _4e2||1;
        			opts.pageSize = _4e3;
        			_4e1.pagination("refresh",{pageNumber:_4e2,pageSize:_4e3});
        			_5c8(_4da);
                },
                onSettingPopup : function(_4e2, _4e3) { // 그리드를 설정하는 팝업 띄우기(2020-03-23)
                    var pid = grid.handle.getProgramID(opts.id);
                	var dg_1 = dialog.getObject("MMA034_02_dailog_01");
                    
		            dialog.init.setTitle(resource.getMessage("MMA034_02"));
		            dialog.init.setURL("/mm/pop/mmA034_02");
		            dialog.init.setQueryParams({GRID_ID:opts.id, PID:pid});
                    dialog.init.setWidth(800);
                    dialog.init.setHeight(600);
                    dialog.init.setResizable(true);
                    dialog.init.setModal(false);
                    dialog.init.setMaximizable(false);
                    dialog.init.setClosable(false);
                    
		            dialog.open(dg_1);
                },
                onManagementPopup : function(_4e2, _4e3) { // 그리드를 생성하는 팝업 띄우기(2020-03-23)
                	var pid = grid.handle.getProgramID(opts.id);
                	var dg_1 = dialog.getObject("MMA034_03_dailog_01");
                    
		            dialog.init.setTitle(resource.getMessage("MMA034_03"));
		            dialog.init.setURL("/mm/pop/mmA034_03");
		            dialog.init.setQueryParams({GRID_ID:opts.id, PID:pid});
                    dialog.init.setWidth(1500);
                    dialog.init.setHeight(700);
                    dialog.init.setResizable(true);
                    dialog.init.setModal(false);
                    dialog.init.setMaximizable(true);
                    dialog.init.setClosable(true);
                    
		            dialog.open(dg_1);
                	//alert("onManagementPopup = " + opts.id);
                },
                onResizeColumn : function(_4e2, _4e3) { // 컬럼 넓이 조정(2020-12-30)
                    var dg = grid.getObject(opts.id);
                    grid.handle.autoResizeColumn(dg);
                }
            });
            
            opts.pageSize = _4e1.pagination("options").pageSize;
        }

        function _4df(_4e4, _4e5, _4e6, _4_6) {
            if (!_4e5) {
                return;
            }
            $(_4e4).show();
            $(_4e4).empty();
            var _4e7 = [];
            var _4e8 = [];
            var _4e5_len = _4e5.length+1;
            if (opts.sortName) {
                _4e7 = opts.sortName.split(",");
                _4e8 = opts.sortOrder.split(",");
            }
            var hwsize = 0;
            var t = $("<table class=\"datagrid-htable\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody></tbody></table>").appendTo(_4e4); // datagrid header start
            for (var i = 0; i < _4e5.length; i++) {
                var tr = $("<tr class=\"datagrid-header-row\"></tr>").appendTo($("tbody", t));
                var cols = _4e5[i];
                for (var j = 0; j < cols.length; j++) {
                    var col = cols[j];
                    var attr = "";
                    // 필터가 보이도록 두번째 라인에서는 rowspan은 빼야함(2020.05.29)
                    if (col.rowspan && i == 0) {
                        attr += "rowspan=\"" + col.rowspan + "\" ";
                    }
                    if (col.colspan) {
                        attr += "colspan=\"" + col.colspan + "\" ";
                    }
                    var td;
                    if (col.checkbox) {  // 체크박스(checkbox) 추가
                        td = $("<td rowspan=\"" + _4e5_len + "\"></td>").appendTo(tr); // 2020.06.23
                        td.attr("field", col.field);
                        $("<div class=\"datagrid-header-check\"></div>").html("<input type=\"checkbox\"/>").appendTo(td);
                    } else {
                        td = $("<td " + attr + "></td>").appendTo(tr);
                        if (col.field) {
                            td.attr("field", col.field);
                            // edit모드인 경우 그리드 해더에 아이콘으로 표시(2020-07-27)
                            if(opts.editMode == true && col.editor) td.addClass("point3");
                            // 그리드 해더에 말풍선 추가(2020-03-03)
                            // 해더정보에 버튼 및 이벤트 추가(2020-10-15)
                            if(oUtil.isNull(col.hstyle)) {
                            	td.append("<div class=\"datagrid-cell\" id=\""+(opts.id+"_"+col.field)+"\" title=\""+replaceAll(col.title, "<br>", " ")+"\"><span></span><span class=\"datagrid-sort-icon\"></span></div>");
                        	} else {
                        		td.append("<div class=\"datagrid-cell\" id=\""+(opts.id+"_"+col.field)+"\" title=\""+replaceAll(col.title, "<br>", " ")+"\"><span></span><span class=\"datagrid-sort-icon\"></span>"+col.hstyle+"</div>");
                        	}
                            td.find("span:first").html(col.title);
                            //$("span", td).html(col.title);
                            //$("span.datagrid-sort-icon", td).html("&nbsp;"); // header title
                            var cell = td.find("div.datagrid-cell");
                            var pos = _497(_4e7, col.field);
                            if (pos >= 0) {
                                cell.addClass("datagrid-sort-" + _4e8[pos]);
                            }
                            if(col.sortable){
							    cell.addClass("datagrid-sort");
							}
                            if (col.resizable == false) {
                                cell.attr("resizable", "false");
                            }
                            if (col.width) {
                                cell._outerWidth(col.width);
                                col.boxWidth = parseInt(cell[0].style.width);
                            } else {
                                col.auto = true;
                            }
                            
                            if(!col.hidden) hwsize += (col.width+1);
                            
                            cell.css("text-align", (col.halign || col.align || ""));
                            col.cellClass = _4db.cellClassPrefix + "-" + col.field.replace(/[\.|\s]/g, "-");
                        } else {
                            $("<div class=\"datagrid-cell-group\" title=\""+replaceAll(col.title, "<br>", " ")+"\"></div>").html(col.title).appendTo(td);
                        }
                    }
                    if (col.hidden) {
                        td.hide();
                    }
                }                
            }
    		
    		opts.headerWidthSize = hwsize; // 해더의 총넓이 구하기(2021.11.19)
    		 
            if (_4e6 && opts.rownumbers) {  // show header row number 칸
                var td;
                if(_4e5_len > 1) { // 2020.06.23
                    td = $("<td rowspan=\"" + _4e5_len + "\"><div class=\"datagrid-header-rownumber\"></div></td>");
                } else { // 2020.06.23
                    td = $("<td rowspan=\"" + opts.frozenColumns.length + "\"><div class=\"datagrid-header-rownumber\"></div></td>");
                }
                if ($("tr", t).length == 0) {
                    td.wrap("<tr class=\"datagrid-header-row\"></tr>").parent().appendTo($("tbody", t));
                } else {
                    td.prependTo($("tr:first", t));
                }
            }
        };

        function _4e0() {
            var _4e9 = [];
            var _4ea = _4eb(_4da, true).concat(_4eb(_4da));
            for (var i = 0; i < _4ea.length; i++) {
                var col = _4ec(_4da, _4ea[i]);
                if (col && !col.checkbox) {
                    _4e9.push(["." + col.cellClass, col.boxWidth ? col.boxWidth + "px" : "auto"]);
                }
            }
            _4db.ss.add(_4e9);
            _4db.ss.dirty(_4db.cellSelectorPrefix);
            _4db.cellSelectorPrefix = "." + _4db.cellClassPrefix;
        };
    };

    function _4ed(_4ee) {
        var _4ef = $.data(_4ee, "datagrid");
        var _4f0 = _4ef.panel;
        var opts = _4ef.options;
        var dc = _4ef.dc;
        var _4f1 = dc.header1.add(dc.header2);
        _4f1.find("input[type=checkbox]").unbind(".datagrid").bind("click.datagrid", function (e) {
            if (opts.singleSelect && opts.selectOnCheck) {
                return false;
            }
            if ($(this).is(":checked")) {
                _563(_4ee);
            } else {
                _569(_4ee);
            }
            e.stopPropagation();
        });
        var _4f2 = _4f1.find("div.datagrid-cell"); // _4f1.find("div.datagrid-cell");
        _4f2.closest("td").unbind(".datagrid").bind("mouseenter.datagrid", function () {
            if (_4ef.resizing) {
                return;
            }
            $(this).addClass("datagrid-header-over");
        }).bind("mouseleave.datagrid", function () {
            $(this).removeClass("datagrid-header-over");
        }).bind("contextmenu.datagrid", function (e) {
            var _4f3 = $(this).attr("field");
            opts.onHeaderContextMenu.call(_4ee, e, _4f3);
        });
        
        _4f2.unbind(".datagrid").bind("click.datagrid", function (e) {
            var p1 = $(this).offset().left + 5; // 원본 너비
            var p2 = $(this).offset().left + $(this)._outerWidth() - 5; // 조정된 너비
            
            if (e.pageX < p2 && e.pageX > p1) {
                var _4f4 = $(this).parent().attr("field");
                var col = _4ec(_4ee, _4f4);
                if (!col.sortable || _4ef.resizing) {
                    return;
                }
                var _4f5 = [];
                var _4f6 = [];
                if (opts.sortName) {
                    _4f5 = opts.sortName.split(",");
                    _4f6 = opts.sortOrder.split(",");
                }
                var pos = _497(_4f5, _4f4);
                var _4f7 = col.order || "asc";
                if (pos >= 0) {
                    $(this).removeClass("datagrid-sort-asc datagrid-sort-desc");
                    var _4f8 = _4f6[pos] == "asc" ? "desc" : "asc";
                    if (opts.multiSort && _4f8 == _4f7) {
                        _4f5.splice(pos, 1);
                        _4f6.splice(pos, 1);
                    } else {
                        _4f6[pos] = _4f8;
                        $(this).addClass("datagrid-sort-" + _4f8);
                    }
                } else {
                    if (opts.multiSort) {
                        _4f5.push(_4f4);
                        _4f6.push(_4f7);
                    } else {
                        _4f5 = [_4f4];
                        _4f6 = [_4f7];
                        _4f2.removeClass("datagrid-sort-asc datagrid-sort-desc");
                    }
                    $(this).addClass("datagrid-sort-" + _4f7);
                }
                opts.sortName = _4f5.join(",");
                opts.sortOrder = _4f6.join(",");
                if (opts.remoteSort) {
                    _5c8(_4ee);
                } else {
                    var data = $.data(_4ee, "datagrid").data;
                    _531(_4ee, data);
                }
                opts.onSortColumn.call(_4ee, opts.sortName, opts.sortOrder);
            }
        }).bind("dblclick.datagrid", function (e) {
            var p1 = $(this).offset().left + 5;
            var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
            var cond = opts.resizeHandle == "right" ? (e.pageX > p2) : (opts.resizeHandle == "left" ? (e.pageX < p1) : (e.pageX < p1 || e.pageX > p2));
            if (cond) {
                var _4f9 = $(this).parent().attr("field");
                var col = _4ec(_4ee, _4f9);
                if (col.resizable == false) {
                    return;
                }
                $(_4ee).datagrid("autoSizeColumn", _4f9);
                col.auto = false;
            }
        });
        
        var _4fa = opts.resizeHandle == "right" ? "e" : (opts.resizeHandle == "left" ? "w" : "e,w");
        _4f2.each(function () {
            $(this).resizable({
                handles: _4fa,
                edge:opts.resizeEdge,
                disabled: ($(this).attr("resizable") ? $(this).attr("resizable") == "false" : false),
                minWidth: 25,
                onStartResize: function (e) {
                    _4ef.resizing = true;
                    _4f1.css("cursor", $("body").css("cursor"));
                    if (!_4ef.proxy) {
                        _4ef.proxy = $("<div class=\"datagrid-resize-proxy\"></div>").appendTo(dc.view);
                    }
                    if(e.data.dir == "e") {
                        e.data.deltaEdge = $(this)._outerWidth()-(e.pageX-$(this).offset().left);
					} else {
                    	e.data.deltaEdge = $(this).offset().left-e.pageX-1;
					}
                    _4ef.proxy.css({
                        left: e.pageX - $(_4f0).offset().left - 1+e.data.deltaEdge,
                        display: "none"
                    });
                    setTimeout(function () {
                        if (_4ef.proxy) {
                            _4ef.proxy.show();
                        }
                    }, 500);
                },
                onResize: function (e) {
                    _4ef.proxy.css({
                        left: e.pageX - $(_4f0).offset().left - 1+e.data.deltaEdge,
                        display: "block"
                    });
                    return false;
                },
                onStopResize: function (e) {
                    _4f1.css("cursor", "");
                    $(this).css("height", "");
                    var _4fb = $(this).parent().attr("field");
                    var col = _4ec(_4ee, _4fb);
                    col.width = $(this)._outerWidth();
                    col.boxWidth = parseInt(this.style.width);
                    col.auto = undefined;
                    _4d5(_4ee, _4fb);
                    _4ef.proxy.remove();
                    _4ef.proxy = null;
                    if ($(this).parents("div:first.datagrid-header").parent().hasClass("datagrid-view1")) {
                        _4ac(_4ee);
                    }
                    _505(_4ee);
                    opts.onResizeColumn.call(_4ee, _4fb, col.width);
                    setTimeout(function () {
                        _4ef.resizing = false;
                    }, 0);
                }
            });
        });
        dc.body1.add(dc.body2).unbind().bind("mouseover", function (e) {
            if (_4ef.resizing) {
                return;
            }
            var tr = $(e.target).closest("tr.datagrid-row");
            if (!_4fc(tr)) {
                return;
            }
            var _4fd = _4fe(tr);
            _54b(_4ee, _4fd);
            e.stopPropagation();
        }).bind("mouseout", function (e) {
            var tr = $(e.target).closest("tr.datagrid-row");
            if (!_4fc(tr)) {
                return;
            }
            var _4ff = _4fe(tr);
            opts.finder.getTr(_4ee, _4ff).removeClass("datagrid-row-over");
            e.stopPropagation();
        }).bind("click", function (e) { // 우측 마우스 클릭시에도 동일한 이벤트를 실행하도록 click이벤트에서 mousedown으로 변경(2022-04-27)
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!_4fc(tr)) {
                return;
            }
            var _500 = _4fe(tr);
            if (tt.parent().hasClass("datagrid-cell-check")) {
                if (opts.singleSelect && opts.selectOnCheck) {
                    if (!opts.checkOnSelect) {
                        _569(_4ee, true);
                    }
                    _556(_4ee, _500);
                } else {
                    if (tt.is(":checked")) {
                        _556(_4ee, _500);
                    } else {
                        _55d(_4ee, _500);
                    }
                }
            } else {
                var row = opts.finder.getRow(_4ee, _500);
                var td = tt.closest("td[field]", tr);
                if (td.length) {
                    var _501 = td.attr("field");
                    opts.onClickCell.call(_4ee, _500, _501, row[_501]);
                }
                if (opts.singleSelect == true) {
                    _54f(_4ee, _500);
                } else {
                    if (tr.hasClass("datagrid-row-selected")) {
                        _557(_4ee, _500);
                    } else {
                        _54f(_4ee, _500);
                    }
                }
                opts.onClickRow.call(_4ee, _500, row);
            }
            e.stopPropagation();
        }).bind("dblclick", function (e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!_4fc(tr)) {
                return;
            }
            var _502 = _4fe(tr);
            var row = opts.finder.getRow(_4ee, _502);
            var td = tt.closest("td[field]", tr);
            if (td.length) {
                var _503 = td.attr("field");
                opts.onDblClickCell.call(_4ee, _502, _503, row[_503]);
            }
            opts.onDblClickRow.call(_4ee, _502, row);
            e.stopPropagation();
        }).bind("contextmenu", function (e) {
            var tr = $(e.target).closest("tr.datagrid-row");
            if (!_4fc(tr)) {
                return;
            }
            var _504 = _4fe(tr);
            var row = opts.finder.getRow(_4ee, _504);
            opts.onRowContextMenu.call(_4ee, e, _504, row);
            e.stopPropagation();
        });
        dc.body2.bind("scroll", function (e) {
            var b1 = dc.view1.children("div.datagrid-body");
            b1.scrollTop($(this).scrollTop());
            var c1 = dc.body1.children(":first");
            var c2 = dc.body2.children(":first");
            if (c1.length && c2.length) {
                var top1 = c1.offset().top;
                var top2 = c2.offset().top;
                if (top1 != top2) {
                    b1.scrollTop(b1.scrollTop() + top1 - top2);
                }
            }
            dc.view2.children("div.datagrid-header,div.datagrid-footer")._scrollLeft($(this)._scrollLeft());
            dc.body2.children("table.datagrid-btable-frozen").css("left", -$(this)._scrollLeft());
            
            var leftPoint = e.currentTarget.scrollLeft;
            
            if(leftPoint > 0 && opts.currentScrollLeft != leftPoint) {
	            // 그리드내 모든 멀티 필터창을 닫는다.(2020.06.25)
	    		$(".icon-multi_filter").each(function(){
	    			$(this).tooltip('hide');
	            });
	            
	            opts.currentScrollLeft = leftPoint;
            }
        });

        function _4fe(tr) {
            if (tr.attr("datagrid-row-index")) {
                return parseInt(tr.attr("datagrid-row-index"));
            } else {
                return tr.attr("node-id");
            }
        };

        function _4fc(tr) {
            return tr.length && tr.parent().length;
        };
    };

    function _505(_506) {
        var opts = $.data(_506, "datagrid").options;
        var dc = $.data(_506, "datagrid").dc;
        dc.body2.css("overflow-x", opts.fitColumns ? "hidden" : "");
        if (!opts.fitColumns) {
            return;
        }
        var _507 = dc.view2.children("div.datagrid-header");
        var _508 = 0;
        var _509;
        var _50a = _4eb(_506, false);
        for (var i = 0; i < _50a.length; i++) {
            var col = _4ec(_506, _50a[i]);
            if (_50b(col)) {
                _508 += col.width;
                _509 = col;
            }
        }
        var _50c = _507.children("div.datagrid-header-inner").show();
        var _50d = _507.width() - _507.find("table").width() - opts.scrollbarSize;
        var rate = _50d / _508;
        if (!opts.showHeader) {
            _50c.hide();
        }
        for (var i = 0; i < _50a.length; i++) {
            var col = _4ec(_506, _50a[i]);
            if (_50b(col)) {
                var _50e = Math.floor(col.width * rate);
                _50f(col, _50e);
                _50d -= _50e;
            }
        }
        if (_50d && _509) {
            _50f(_509, _50d);
        }
        _4d5(_506);

        function _50f(col, _510) {
            col.width += _510;
            col.boxWidth += _510;
            _507.find("td[field=\"" + col.field + "\"] div.datagrid-cell").width(col.boxWidth);
        };

        function _50b(col) {
            if (!col.hidden && !col.checkbox && !col.auto && !col.fixed) {
                return true;
            }
        };
    };

    function _511(_512, _513) {
        var opts = $.data(_512, "datagrid").options;
        var dc = $.data(_512, "datagrid").dc;
        if (_513) {
            _4a8(_513);
            if (opts.fitColumns) {
                _4ac(_512);
                _505(_512);
            }
        } else {
            var _514 = false;
            var _515 = _4eb(_512, true).concat(_4eb(_512, false));
            for (var i = 0; i < _515.length; i++) {
                var _513 = _515[i];
                var col = _4ec(_512, _513);
                if (col.auto) {
                    _4a8(_513);
                    _514 = true;
                }
            }
            if (_514 && opts.fitColumns) {
                _4ac(_512);
                _505(_512);
            }
        }

        function _4a8(_516) {
            var _517 = dc.view.find("div.datagrid-header td[field=\"" + _516 + "\"] div.datagrid-cell");
            _517.css("width", "");
            var col = $(_512).datagrid("getColumnOption", _516);
            col.width = undefined;
            col.boxWidth = undefined;
            col.auto = true;
            $(_512).datagrid("fixColumnSize", _516);
            var _518 = Math.max(_517._outerWidth(), _519("allbody"), _519("allfooter"));
            
            // 셀자동 맞춤 후 넓이가 너무 작으면 화면이 찍어져 보이는 현상으로 최소 넓이를 40로 고정함(2022-03-21) 
            if(_518 < 40) _518 = 40;
            
            _517._outerWidth(_518);
            col.width = _518;
            
            try { 
                col.boxWidth = parseInt(_517[0].style.width);
            } catch(e) {
                col.boxWidth = 160;
            }
            $(_512).datagrid("fixColumnSize", _516);
            opts.onResizeColumn.call(_512, _516, col.width);

            function _519(type) {
                var _51a = 0;
                opts.finder.getTr(_512, 0, type).find("td[field=\"" + _516 + "\"] div.datagrid-cell").each(function () {
                    var w = $(this)._outerWidth();
                    if (_51a < w) {
                        _51a = w;
                    }
                });
                return _51a;
            };
        };
    };

    function _4d5(_51b, _51c) {
        var _51d = $.data(_51b, "datagrid");
        var opts = _51d.options;
        var dc = _51d.dc;
        var _51e = dc.view.find("table.datagrid-btable,table.datagrid-ftable");
        _51e.css("table-layout", "fixed");
        if (_51c) {
            fix(_51c);
        } else {
            var ff = _4eb(_51b, true).concat(_4eb(_51b, false));
            for (var i = 0; i < ff.length; i++) {
                fix(ff[i]);
            }
        }
        _51e.css("table-layout", "auto");
        _51f(_51b);
        setTimeout(function () {
            _4b9(_51b);
            _524(_51b);
        }, 0);

        function fix(_520) {
            var col = _4ec(_51b, _520);
            if (!col.checkbox) {
                _51d.ss.set("." + col.cellClass, col.boxWidth ? col.boxWidth + "px" : "auto");
            }
        };
    };

    function _51f(_521) {
        var dc = $.data(_521, "datagrid").dc;
        dc.body1.add(dc.body2).find("td.datagrid-td-merged").each(function () {
            var td = $(this);
            var _522 = td.attr("colspan") || 1;
            var _523 = _4ec(_521, td.attr("field")).width;
            for (var i = 1; i < _522; i++) {
                td = td.next();
                _523 += _4ec(_521, td.attr("field")).width + 1;
            }
            $(this).children("div.datagrid-cell")._outerWidth(_523);
        });
    };

    function _524(_525) {
        if(oUtil.isNull($.data(_525, "datagrid"))) {
            return;
        }
        
        var dc = $.data(_525, "datagrid").dc;
        dc.view.find("div.datagrid-editable").each(function () {
            var cell = $(this);
            var _526 = cell.parent().attr("field");
            var col = $(_525).datagrid("getColumnOption", _526);
            cell._outerWidth(col.width);
            var ed = $.data(this, "datagrid.editor");
            if (ed.actions.resize) {
                ed.actions.resize(ed.target, cell.width());
            }
        });
    };

    function _4ec(_527, _528) {
        function find(_529) {
            if (_529) {
                for (var i = 0; i < _529.length; i++) {
                    var cc = _529[i];
                    for (var j = 0; j < cc.length; j++) {
                        var c = cc[j];
                        if (c.field == _528) {
                            return c;
                        }
                    }
                }
            }
            return null;
        };
        var opts = $.data(_527, "datagrid").options;
        var col = find(opts.columns);
        if (!col) {
            col = find(opts.frozenColumns);
        }
        return col;
    };

    function _4eb(_52a, _52b) {
        var opts = $.data(_52a, "datagrid").options;
        var _52c = (_52b == true) ? (opts.frozenColumns || [
            []
        ]) : opts.columns;
        if (_52c.length == 0) {
            return [];
        }
        var _52d = [];

        function _52e(_52f) {
            var c = 0;
            var i = 0;
            while (true) {
                if (_52d[i] == undefined) {
                    if (c == _52f) {
                        return i;
                    }
                    c++;
                }
                i++;
            }
        };

        function _530(r) {
            var ff = [];
            var c = 0;
            for (var i = 0; i < _52c[r].length; i++) {
                var col = _52c[r][i];
                if (col.field) {
                    ff.push([c, col.field]);
                }
                c += parseInt(col.colspan || "1");
            }
            for (var i = 0; i < ff.length; i++) {
                ff[i][0] = _52e(ff[i][0]);
            }
            for (var i = 0; i < ff.length; i++) {
                var f = ff[i];
                _52d[f[0]] = f[1];
            }
        };
        for (var i = 0; i < _52c.length; i++) {
            _530(i);
        }
        return _52d;
    };

    function _531(_532, data) {
        var _533 = $.data(_532, "datagrid");
        if(oUtil.isNull(_533)) {
            return;
        }
        
        var ftdata = clone(data.footer); // 필터 기능 추가로 footer가 사라지는 문제가 있어 별도 처리하도록 수정(2021-02-05)
        var opts = _533.options;
        var dc = _533.dc;
        data = opts.loadFilter.call(_532, data); // loadFilter 함수 실행 후 data에서 footer가 사라지는 문제임 
        data.total = parseInt(data.total);
        _533.data = data;
        if (ftdata) {
            _533.footer = ftdata;
        }
        if (!opts.remoteSort && opts.sortName) {
            var _534 = opts.sortName.split(",");
            var _535 = opts.sortOrder.split(",");
            data.rows.sort(function (r1, r2) {
                var r = 0;
                for (var i = 0; i < _534.length; i++) {
                    var sn = _534[i];
                    var so = _535[i];
                    var col = _4ec(_532, sn);
                    var _536;
                    try {
                        _536 = col.sorter || function (a, b) {
	                        return a == b ? 0 : (a > b ? 1 : -1);
	                    };
                    } catch(e) {
	                    _536 = function (a, b) {
	                        return a == b ? 0 : (a > b ? 1 : -1);
	                    };
                    }
                    
                    r = _536(r1[sn], r2[sn]) * (so == "asc" ? 1 : -1);
                    if (r != 0) {
                        return r;
                    }
                }
                return r;
            });
        }
        if (opts.view.onBeforeRender) {
            opts.view.onBeforeRender.call(opts.view, _532, data.rows);
        }
        opts.view.render.call(opts.view, _532, dc.body2, false);
        opts.view.render.call(opts.view, _532, dc.body1, true);
        if (opts.showFooter) {
            opts.view.renderFooter.call(opts.view, _532, dc.footer2, false);
            opts.view.renderFooter.call(opts.view, _532, dc.footer1, true);
        }
        if (opts.view.onAfterRender) {
            opts.view.onAfterRender.call(opts.view, _532);
        }
        _533.ss.clean();
        opts.onLoadSuccess.call(_532, data);
        var _537 = $(_532).datagrid("getPager");
        if (_537.length) {
            if (_537.pagination("options").total != data.total) {
                _537.pagination("refresh", {
                    total: data.total
                });
            }
        }
        _4b9(_532);
        dc.body2.triggerHandler("scroll");
        _538();
        $(_532).datagrid("autoSizeColumn");

        function _538() {
            if (opts.idField) {
                for (var i = 0; i < data.rows.length; i++) {
                    var row = data.rows[i];
                    if (_539(_533.selectedRows, row)) {
                        opts.finder.getTr(_532, i).addClass("datagrid-row-selected");
                    }
                    if (_539(_533.checkedRows, row)) {
                        opts.finder.getTr(_532, i).find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
                    }
                }
            }

            function _539(a, r) {
                for (var i = 0; i < a.length; i++) {
                    if (a[i][opts.idField] == r[opts.idField]) {
                        a[i] = r;
                        return true;
                    }
                }
                return false;
            };
        };
    };

    function _53a(_53b, row) {
        var _53c = $.data(_53b, "datagrid");
        var opts = _53c.options;
        var rows = _53c.data.rows;
        if (typeof row == "object") {
            return _497(rows, row);
        } else {
            for (var i = 0; i < rows.length; i++) {
                if (rows[i][opts.idField] == row) {
                    return i;
                }
            }
            return -1;
        }
    };

    function _53d(_53e) {
        var rows = [];
        var _53f = $.data(_53e, "datagrid");
        if(oUtil.isNull(_53f)) {
            return rows;
        }
        var opts = _53f.options;
        var data = _53f.data;
        if (opts.idField) {
            return _53f.selectedRows;
        } else {
            opts.finder.getTr(_53e, "", "selected", 2).each(function () {
                var _540 = parseInt($(this).attr("datagrid-row-index"));
                rows.push(data.rows[_540]);
            });
            return rows;
        }
    };

    function _541(_542) {
        var _543 = $.data(_542, "datagrid");
        var rows = [];
        if(oUtil.isNull(_543)) {
            return rows;
        }
        var opts = _543.options;
        if (opts.idField) {
            return _543.checkedRows;
        } else {
            opts.finder.getTr(_542, "", "checked").each(function () {
                rows.push(opts.finder.getRow(_542, $(this)));
            });
            return rows;
        }
    };

    function _544(_545, _546) {
        var _547 = $.data(_545, "datagrid");
        var dc = _547.dc;
        var opts = _547.options;
        var tr = opts.finder.getTr(_545, _546);
        if (tr.length) {
            if (tr.closest("table").hasClass("datagrid-btable-frozen")) {
                return;
            }
            var _548 = dc.view2.children("div.datagrid-header")._outerHeight();
            var _549 = dc.body2;
            var _54a = _549.outerHeight(true) - _549.outerHeight();
            var top = tr.position().top - _548 - _54a;
            if (top < 0) {
                _549.scrollTop(_549.scrollTop() + top);
            } else {
                if (top + tr._outerHeight() > _549.height() - 18) {
                    _549.scrollTop(_549.scrollTop() + top + tr._outerHeight() - _549.height() + 18);
                }
            }
        }
    };

    function _54b(_54c, _54d) {
        var _54e = $.data(_54c, "datagrid");
        var opts = _54e.options;
        opts.finder.getTr(_54c, _54e.highlightIndex).removeClass("datagrid-row-over");
        opts.finder.getTr(_54c, _54d).addClass("datagrid-row-over");
        _54e.highlightIndex = _54d;
    };

    function _54f(_550, _551, _552) {
        var _553 = $.data(_550, "datagrid");
        var dc = _553.dc;
        var opts = _553.options;
        var _554 = _553.selectedRows;
        if (opts.singleSelect) {
            _555(_550);
            _554.splice(0, _554.length);
        }
        if (!_552 && opts.checkOnSelect) {
            _556(_550, _551, true);
        }
        var row = opts.finder.getRow(_550, _551);
        if (opts.idField) {
            _49a(_554, opts.idField, row);
        }
        opts.finder.getTr(_550, _551).addClass("datagrid-row-selected");
        opts.onSelect.call(_550, _551, row);
        _544(_550, _551);
    };

    function _557(_558, _559, _55a) {
        var _55b = $.data(_558, "datagrid");
        var dc = _55b.dc;
        var opts = _55b.options;
        var _55c = $.data(_558, "datagrid").selectedRows;
        if (!_55a && opts.checkOnSelect) {
            _55d(_558, _559, true);
        }
        opts.finder.getTr(_558, _559).removeClass("datagrid-row-selected");
        var row = opts.finder.getRow(_558, _559);
        if (opts.idField) {
            _498(_55c, opts.idField, row[opts.idField]);
        }
        opts.onUnselect.call(_558, _559, row);
    };

    function _55e(_55f, _560) {
        var _561 = $.data(_55f, "datagrid");
        var opts = _561.options;
        var rows = _561.data.rows;
        var _562 = $.data(_55f, "datagrid").selectedRows;
        if (!_560 && opts.checkOnSelect) {
            _563(_55f, true);
        }
        opts.finder.getTr(_55f, "", "allbody").addClass("datagrid-row-selected");
        if (opts.idField) {
            for (var _564 = 0; _564 < rows.length; _564++) {
                _49a(_562, opts.idField, rows[_564]);
            }
        }
        opts.onSelectAll.call(_55f, rows);
    };

    function _555(_565, _566) {
        var _567 = $.data(_565, "datagrid");
        var opts = _567.options;
        var rows = _567.data.rows;
        var _568 = $.data(_565, "datagrid").selectedRows;
        if (!_566 && opts.checkOnSelect) {
            _569(_565, true);
        }
        opts.finder.getTr(_565, "", "selected").removeClass("datagrid-row-selected");
        if (opts.idField) {
            for (var _56a = 0; _56a < rows.length; _56a++) {
                _498(_568, opts.idField, rows[_56a][opts.idField]);
            }
        }
        opts.onUnselectAll.call(_565, rows);
    };

    function _556(_56b, _56c, _56d) {
        var _56e = $.data(_56b, "datagrid");
        var opts = _56e.options;
        if (!_56d && opts.selectOnCheck) {
            _54f(_56b, _56c, true);
        }
        var ck = opts.finder.getTr(_56b, _56c).find("div.datagrid-cell-check input[type=checkbox]");
        ck._propAttr("checked", true);
        ck = opts.finder.getTr(_56b, "", "checked");
        if (ck.length == _56e.data.rows.length) {
            var dc = _56e.dc;
            var _56f = dc.header1.add(dc.header2);
            _56f.find("input[type=checkbox]")._propAttr("checked", true);
        }
        var row = opts.finder.getRow(_56b, _56c);
        if (opts.idField) {
            _49a(_56e.checkedRows, opts.idField, row);
        }
        opts.onCheck.call(_56b, _56c, row);
    };

    function _55d(_570, _571, _572) {
        var _573 = $.data(_570, "datagrid");
        var opts = _573.options;
        if (!_572 && opts.selectOnCheck) {
            _557(_570, _571, true);
        }
        var ck = opts.finder.getTr(_570, _571).find("div.datagrid-cell-check input[type=checkbox]");
        ck._propAttr("checked", false);
        var dc = _573.dc;
        var _574 = dc.header1.add(dc.header2);
        _574.find("input[type=checkbox]")._propAttr("checked", false);
        var row = opts.finder.getRow(_570, _571);
        if (opts.idField) {
            _498(_573.checkedRows, opts.idField, row[opts.idField]);
        }
        opts.onUncheck.call(_570, _571, row);
    };

    function _563(_575, _576) {
        var _577 = $.data(_575, "datagrid");
        var opts = _577.options;
        var rows = _577.data.rows;
        if (!_576 && opts.selectOnCheck) {
            _55e(_575, true);
        }
        var dc = _577.dc;
        var hck = dc.header1.add(dc.header2).find("input[type=checkbox]");
        var bck = opts.finder.getTr(_575, "", "allbody").find("div.datagrid-cell-check input[type=checkbox]");
        hck.add(bck)._propAttr("checked", true);
        if (opts.idField) {
            for (var i = 0; i < rows.length; i++) {
                _49a(_577.checkedRows, opts.idField, rows[i]);
            }
        }
        opts.onCheckAll.call(_575, rows);
    };

    function _569(_578, _579) {
        var _57a = $.data(_578, "datagrid");
        var opts = _57a.options;
        var rows = _57a.data.rows;
        if (!_579 && opts.selectOnCheck) {
            _555(_578, true);
        }
        var dc = _57a.dc;
        var hck = dc.header1.add(dc.header2).find("input[type=checkbox]");
        var bck = opts.finder.getTr(_578, "", "allbody").find("div.datagrid-cell-check input[type=checkbox]");
        hck.add(bck)._propAttr("checked", false);
        if (opts.idField) {
            for (var i = 0; i < rows.length; i++) {
                _498(_57a.checkedRows, opts.idField, rows[i][opts.idField]);
            }
        }
        opts.onUncheckAll.call(_578, rows);
    };

    function _57b(_57c, _57d) {
        var opts = $.data(_57c, "datagrid").options;
        var tr = opts.finder.getTr(_57c, _57d);
        var row = opts.finder.getRow(_57c, _57d);
        if (tr.hasClass("datagrid-row-editing")) {
            return;
        }
        if (opts.onBeforeEdit.call(_57c, _57d, row) == false) {
            return;
        }
        tr.addClass("datagrid-row-editing");
        _57e(_57c, _57d);
        _524(_57c);
        tr.find("div.datagrid-editable").each(function () {
            var _57f = $(this).parent().attr("field");
            var ed = $.data(this, "datagrid.editor");
            ed.actions.setValue(ed.target, row[_57f]);
        });
        _580(_57c, _57d);
    };

    function _581(_582, _583, _584) {
        var opts = $.data(_582, "datagrid").options;
        var _585 = $.data(_582, "datagrid").updatedRows;
        var _586 = $.data(_582, "datagrid").insertedRows;
        var tr = opts.finder.getTr(_582, _583);
        var row = opts.finder.getRow(_582, _583);
        if (!tr.hasClass("datagrid-row-editing")) {
            return;
        }
        if (!_584) {
            if (!_580(_582, _583)) {
                return;
            }
            var _587 = false;
            var _588 = {};
            tr.find("div.datagrid-editable").each(function () {
                var _589 = $(this).parent().attr("field");
                var ed = $.data(this, "datagrid.editor");
                var _58a = ed.actions.getValue(ed.target);
                if (row[_589] != _58a) {
                    row[_589] = _58a;
                    _587 = true;
                    _588[_589] = _58a;
                }
            });
            if (_587) {
                if (_497(_586, row) == -1) {
                    if (_497(_585, row) == -1) {
                        _585.push(row);
                    }
                }
            }
        }
        tr.removeClass("datagrid-row-editing");
        _58b(_582, _583);
        $(_582).datagrid("refreshRow", _583);
        if (!_584) {
            opts.onAfterEdit.call(_582, _583, row, _588);
        } else {
            opts.onCancelEdit.call(_582, _583, row);
        }
    };

    function _58c(_58d, _58e) {
        var opts = $.data(_58d, "datagrid").options;
        var tr = opts.finder.getTr(_58d, _58e);
        var _58f = [];
        tr.children("td").each(function () {
            var cell = $(this).find("div.datagrid-editable");
            if (cell.length) {
                var ed = $.data(cell[0], "datagrid.editor");
                _58f.push(ed);
            }
        });
        return _58f;
    };

    function _590(_591, _592) {
        var _593 = _58c(_591, _592.index);
        for (var i = 0; i < _593.length; i++) {
            if (_593[i].field == _592.field) {
                return _593[i];
            }
        }
        return null;
    };

    function _57e(_594, _595) {
        var opts = $.data(_594, "datagrid").options;
        var tr = opts.finder.getTr(_594, _595);
        tr.children("td").each(function () {
            var cell = $(this).find("div.datagrid-cell");
            var _596 = $(this).attr("field");
            var col = _4ec(_594, _596);
            if (col && col.editor) {
                var _597, _598;
                if (typeof col.editor == "string") {
                    _597 = col.editor;
                } else {
                    _597 = col.editor.type;
                    _598 = col.editor.options;
                }
                var _599 = opts.editors[_597];
                if (_599) {
                    var _59a = cell.html();
                    var _59b = cell._outerWidth();
                    cell.addClass("datagrid-editable");
                    cell._outerWidth(_59b);
                    cell.html("<table border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td></td></tr></table>");
                    cell.children("table").bind("click dblclick contextmenu", function (e) {
                        e.stopPropagation();
                    });
                    $.data(cell[0], "datagrid.editor", {
                        actions: _599,
                        target: _599.init(cell.find("td"), _598),
                        field: _596,
                        type: _597,
                        oldHtml: _59a
                    });
                }
            }
        });
        _4b9(_594, _595, true);
    };

    function _58b(_59c, _59d) {
        var opts = $.data(_59c, "datagrid").options;
        var tr = opts.finder.getTr(_59c, _59d);
        tr.children("td").each(function () {
            var cell = $(this).find("div.datagrid-editable");
            if (cell.length) {
                var ed = $.data(cell[0], "datagrid.editor");
                if (ed.actions.destroy) {
                    ed.actions.destroy(ed.target);
                }
                cell.html(ed.oldHtml);
                $.removeData(cell[0], "datagrid.editor");
                cell.removeClass("datagrid-editable");
                cell.css("width", "");
            }
        });
    };

    function _580(_59e, _59f) {
        var tr = $.data(_59e, "datagrid").options.finder.getTr(_59e, _59f);
        if (!tr.hasClass("datagrid-row-editing")) {
            return true;
        }
        var vbox = tr.find(".validatebox-text");
        vbox.validatebox("validate");
        vbox.trigger("mouseleave");
        var _5a0 = tr.find(".validatebox-invalid");
        return _5a0.length == 0;
    };

    function _5a1(_5a2, _5a3) {
        var _5a4 = $.data(_5a2, "datagrid").insertedRows;
        var _5a5 = $.data(_5a2, "datagrid").deletedRows;
        var _5a6 = $.data(_5a2, "datagrid").updatedRows;
        if (!_5a3) {
            var rows = [];
            
            rows = rows.concat(_5a4);
            rows = rows.concat(_5a5);
            rows = rows.concat(_5a6);
            
            return rows;
        } else {
            if (_5a3 == "inserted") {
                return _5a4;
            } else {
                if (_5a3 == "deleted") {
                    return _5a5;
                } else {
                    if (_5a3 == "updated") {
                        return _5a6;
                    }
                }
            }
        }
        return [];
    };

    function _5a7(_5a8, _5a9) {
        var _5aa = $.data(_5a8, "datagrid");
        var opts = _5aa.options;
        var data = _5aa.data;
        var _5ab = _5aa.insertedRows;
        var _5ac = _5aa.deletedRows;
        $(_5a8).datagrid("cancelEdit", _5a9);
        var row = data.rows[_5a9];
        if (_497(_5ab, row) >= 0) {
            _498(_5ab, row);
        } else {
            _5ac.push(row);
        }
        _498(_5aa.selectedRows, opts.idField, data.rows[_5a9][opts.idField]);
        _498(_5aa.checkedRows, opts.idField, data.rows[_5a9][opts.idField]);
        opts.view.deleteRow.call(opts.view, _5a8, _5a9);
        if (opts.height == "auto") {
            _4b9(_5a8);
        }
        $(_5a8).datagrid("getPager").pagination("refresh", {
            total: data.total
        });
    };

    function _5ad(_5ae, _5af) {
        var data = $.data(_5ae, "datagrid").data;
        var view = $.data(_5ae, "datagrid").options.view;
        var _5b0 = $.data(_5ae, "datagrid").insertedRows;
        view.insertRow.call(view, _5ae, _5af.index, _5af.row);
        _5b0.push(_5af.row);
        $(_5ae).datagrid("getPager").pagination("refresh", {
            total: data.total
        });
    };

    function _5b1(_5b2, row) {
        var data = $.data(_5b2, "datagrid").data;
        var view = $.data(_5b2, "datagrid").options.view;
        var _5b3 = $.data(_5b2, "datagrid").insertedRows;
        view.insertRow.call(view, _5b2, null, row);
        _5b3.push(row);
        $(_5b2).datagrid("getPager").pagination("refresh", {
            total: data.total
        });
    };

    function _5b4(_5b5) {
        var _5b6 = $.data(_5b5, "datagrid");
        if(oUtil.isNull(_5b6)) return;
        var data = _5b6.data;
        var rows = data.rows;
        var _5b7 = [];
        for (var i = 0; i < rows.length; i++) {
            _5b7.push($.extend({}, rows[i]));
        }
        _5b6.originalRows = _5b7;
        _5b6.updatedRows = [];
        _5b6.insertedRows = [];
        _5b6.deletedRows = [];
    };

    function _5b8(_5b9) {
        var data = $.data(_5b9, "datagrid").data;
        var ok = true;
        for (var i = 0, len = data.rows.length; i < len; i++) {
            if (_580(_5b9, i)) {
                _581(_5b9, i, false);
            } else {
                ok = false;
            }
        }
        if (ok) {
            _5b4(_5b9);
        }
    };

    function _5ba(_5bb) {
        var _5bc = $.data(_5bb, "datagrid");
        var opts = _5bc.options;
        var _5bd = _5bc.originalRows;
        var _5be = _5bc.insertedRows;
        var _5bf = _5bc.deletedRows;
        var _5c0 = _5bc.selectedRows;
        var _5c1 = _5bc.checkedRows;
        var data = _5bc.data;

        function _5c2(a) {
            var ids = [];
            for (var i = 0; i < a.length; i++) {
                ids.push(a[i][opts.idField]);
            }
            return ids;
        };

        function _5c3(ids, _5c4) {
            for (var i = 0; i < ids.length; i++) {
                var _5c5 = _53a(_5bb, ids[i]);
                if (_5c5 >= 0) {
                    (_5c4 == "s" ? _54f : _556)(_5bb, _5c5, true);
                }
            }
        };
        for (var i = 0; i < data.rows.length; i++) {
            _581(_5bb, i, true);
        }
        var _5c6 = _5c2(_5c0);
        var _5c7 = _5c2(_5c1);
        _5c0.splice(0, _5c0.length);
        _5c1.splice(0, _5c1.length);
        data.total += _5bf.length - _5be.length;
        data.rows = _5bd;
        _531(_5bb, data);
        _5c3(_5c6, "s");
        _5c3(_5c7, "c");
        _5b4(_5bb);
    };

    function _5c8(_5c9, _5ca) {
        var opts = $.data(_5c9, "datagrid").options;
        if (_5ca) { 
            opts.queryParams = _5ca;
        }
        var _5cb = $.extend({}, opts.queryParams);
        
        if (opts.pagination) {
            $.extend(_5cb, {
                page: opts.pageNumber,
                rows: opts.pageSize
            });
        }
        if (opts.sortName) {
            $.extend(_5cb, {
                sort: opts.sortName,
                order: opts.sortOrder
            });
        }
        if (opts.onBeforeLoad.call(_5c9, _5cb) == false) {
            return;
        }
        $(_5c9).datagrid("loading");
        setTimeout(function () {
            _5cc();
        }, 0);

        function _5cc() {
            var _5cd = opts.loader.call(_5c9, _5cb, function (data) {
                setTimeout(function () {
                    $(_5c9).datagrid("loaded");
                }, 0);
                _531(_5c9, data);
                setTimeout(function () {
                    _5b4(_5c9);
                }, 0);
            }, function () {
                setTimeout(function () {
                    $(_5c9).datagrid("loaded");
                }, 0);
                opts.onLoadError.apply(_5c9, arguments);
            });
            if (_5cd == false) {
                $(_5c9).datagrid("loaded");
            }
        };
    };

    function _5ce(_5cf, _5d0) {
        var opts = $.data(_5cf, "datagrid").options;
        _5d0.rowspan = _5d0.rowspan || 1;
        _5d0.colspan = _5d0.colspan || 1;
        if (_5d0.rowspan == 1 && _5d0.colspan == 1) {
            return;
        }
        var tr = opts.finder.getTr(_5cf, (_5d0.index != undefined ? _5d0.index : _5d0.id));
        if (!tr.length) {
            return;
        }
        var row = opts.finder.getRow(_5cf, tr);
        var _5d1 = row[_5d0.field];
        var td = tr.find("td[field=\"" + _5d0.field + "\"]");
        td.attr("rowspan", _5d0.rowspan).attr("colspan", _5d0.colspan);
        td.addClass("datagrid-td-merged");
        for (var i = 1; i < _5d0.colspan; i++) {
            td = td.next();
            td.hide();
            row[td.attr("field")] = _5d1;
        }
        for (var i = 1; i < _5d0.rowspan; i++) {
            tr = tr.next();
            if (!tr.length) {
                break;
            }
            var row = opts.finder.getRow(_5cf, tr);
            var td = tr.find("td[field=\"" + _5d0.field + "\"]").hide();
            row[td.attr("field")] = _5d1;
            for (var j = 1; j < _5d0.colspan; j++) {
                td = td.next();
                td.hide();
                row[td.attr("field")] = _5d1;
            }
        }
        //_51f(_5cf);  // YNI-Master(**** 중요 **** kcm은 열병합만 지원하므로 행병행은 사용하지 않는다.)
    };
    $.fn.datagrid = function (_5d2, _5d3) {
        if (typeof _5d2 == "string") {
            return $.fn.datagrid.methods[_5d2](this, _5d3);
        }
        _5d2 = _5d2 || {};
        return this.each(function () {
            var _5d4 = $.data(this, "datagrid");
            var opts;
            if (_5d4) {
                opts = $.extend(_5d4.options, _5d2);
                _5d4.options = opts;
            } else {
                opts = $.extend({}, $.extend({}, $.fn.datagrid.defaults, {
                    queryParams: {}
                }), $.fn.datagrid.parseOptions(this), _5d2);
                $(this).css("width", "").css("height", "");
                var _5d5 = _4cd(this, opts.rownumbers);
                if (!opts.columns) {
                    opts.columns = _5d5.columns;
                }
                if (!opts.frozenColumns) {
                    opts.frozenColumns = _5d5.frozenColumns;
                }
                opts.columns = $.extend(true, [], opts.columns);
                opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
                opts.view = $.extend({}, opts.view);
                $.data(this, "datagrid", {
                    options: opts,
                    panel: _5d5.panel,
                    dc: _5d5.dc,
                    ss: _5d5.ss,
                    selectedRows: [],
                    checkedRows: [],
                    data: {
                        total: 0,
                        rows: []
                    },
                    originalRows: [],
                    updatedRows: [],
                    insertedRows: [],
                    deletedRows: []
                });
            }
            _4d9(this);
            if (opts.data) {
                _531(this, opts.data);
                _5b4(this);
            } else {
                var data = $.fn.datagrid.parseData(this);
                if (data.total > 0) {
                    _531(this, data);
                    _5b4(this);
                } else {
                    _531(this, data); // 값이 없는 경우에는 해더가 모두 보일 수 있게 수평스크롤을 보여주는 함수 호출(2021.11.19)
                }
            }
            _4a8(this);
            _5c8(this);
            _4ed(this);
        });
    };
    var _5d6 = {  // create editor component
        text: {
            init: function (_5d7, _5d8) {
                var _5d9 = $("<input type=\"text\" class=\"datagrid-editable-input\">").appendTo(_5d7);
                return _5d9;
            },
            getValue: function (_5da) {
                return $(_5da).val();
            },
            setValue: function (_5db, _5dc) {
                $(_5db).val(_5dc);
            },
            resize: function (_5dd, _5de) {
                $(_5dd)._outerWidth(_5de-8)._outerHeight(22); // 필터 input박스가 셀조절시 깨지는 문제가 있어 -8만큼 크기를 줄임(2020-05-30)
            }
        },
        readonly: {
            init: function (_5d7, _5d8) {
                var _5d9 = $("<input type=\"text\" readonly class=\"input_readonly\">").appendTo(_5d7);
                return _5d9;
            },
            getValue: function (_5da) {
                return $(_5da).val();
            },
            setValue: function (_5db, _5dc) {
                $(_5db).val(_5dc);
            },
            resize: function (_5dd, _5de) {
                $(_5dd)._outerWidth(_5de)._outerHeight(22);
            }
        },
        textarea: {
            init: function (_5df, _5e0) {
                var _5e1 = $("<textarea class=\"datagrid-editable-input\"></textarea>").appendTo(_5df);
                return _5e1;
            },
            getValue: function (_5e2) {
                return $(_5e2).val();
            },
            setValue: function (_5e3, _5e4) {
                $(_5e3).val(_5e4);
            },
            resize: function (_5e5, _5e6) {
                $(_5e5)._outerWidth(_5e6);
            }
        },
        checkbox: {
            init: function (_5e7, _5e8) {
                var _5e9 = $("<input type=\"checkbox\">").appendTo(_5e7);
                _5e9.val(_5e8.on);
                _5e9.attr("offval", _5e8.off);
                return _5e9;
            },
            getValue: function (_5ea) {
                if ($(_5ea).is(":checked")) {
                    return $(_5ea).val();
                } else {
                    return $(_5ea).attr("offval");
                }
            },
            setValue: function (_5eb, _5ec) {
                var _5ed = false;
                if ($(_5eb).val() == _5ec) {
                    _5ed = true;
                }
                $(_5eb)._propAttr("checked", _5ed);
            }
        },
        numberbox: {
            init: function (_5ee, _5ef) {
                // 숫자입력시 자동으로 콤마가 찍히도록 기능 추가(YNI-Maker, 2017.07.01)
                var _5f0 = $("<input type=\"text\" class=\"datagrid-editable-input numberComma\">").appendTo(_5ee);
                _5f0.numberbox(_5ef);
                return _5f0;
            },
            destroy: function (_5f1) {
                $(_5f1).numberbox("destroy");
            },
            getValue: function (_5f2) {
                $(_5f2).blur();
                return $(_5f2).numberbox("getValue");
            },
            setValue: function (_5f3, _5f4) {
                $(_5f3).numberbox("setValue", _5f4);
            },
            resize: function (_5f5, _5f6) {
                $(_5f5)._outerWidth(_5f6)._outerHeight(22);
            }
        },
        validatebox: {
            init: function (_5f7, _5f8) {
                var _5f9 = $("<input type=\"text\" class=\"datagrid-editable-input\">").appendTo(_5f7);
                _5f9.validatebox(_5f8);
                return _5f9;
            },
            destroy: function (_5fa) {
                $(_5fa).validatebox("destroy");
            },
            getValue: function (_5fb) {
                return $(_5fb).val();
            },
            setValue: function (_5fc, _5fd) {
                $(_5fc).val(_5fd);
            },
            resize: function (_5fe, _5ff) {
                $(_5fe)._outerWidth(_5ff)._outerHeight(22);
            }
        },
        datebox: {
            init: function (_600, _601) {
                var _602 = $("<input type=\"text\">").appendTo(_600);
                _602.datebox(_601);
                return _602;
            },
            destroy: function (_603) {
                $(_603).datebox("destroy");
            },
            getValue: function (_604) {
                return $(_604).datebox('getValue');
            },
            setValue: function (_605, _606) {
                $(_605).datebox('setValue', _606);
            },
            resize: function (_607, _608) {
                $(_607).datebox("resize", _608);
            }
        },
        searchbox: { // 검색 input박스 추가(2020.05.20)
            init: function (_600, _601) {
                var _602 = $("<input type=\"text\" class=\"datagrid-editable-input\">").appendTo(_600);
                _602.searchbox(_601);
                return _602;
            },
            destroy: function (_603) {
                $(_603).searchbox("destroy");
            },
            getValue: function (_604) {
                return $(_604).searchbox("getValue");
            },
            setValue: function (_605, _606) {
                $(_605).searchbox("setValue", _606);
            },
            resize: function (_607, _608) {
                $(_607).searchbox("resize", _608);
            }
        },
        combobox: {
            init: function (_609, _60a) {
                var _60b = $("<input type=\"text\">").appendTo(_609);
                _60b.combobox(_60a || {});
                return _60b;
            },
            destroy: function (_60c) {
                $(_60c).combobox("destroy");
            },
            // Multi 선택 시 선택된 값이 모두 입력되도록 수정(YNI-Master, 2014.03.28)
            getValue: function(target){
				if ($(target).combobox('options').multiple){
					return $(target).combobox('getValues');
				} else {
					return $(target).combobox('getValue');
				}
			},
			setValue: function(target, value){
				if ($(target).combobox('options').multiple){
					// Multi 설정 시 값이 여러개 선택될 수 있도록 배열로 치환(YNI-Master, 2016.01.18)
					var val_array = new Array();
					
					if(!oUtil.isNull(value)) {
						if(!$.isArray(value)) {
							var sep = $(target).combobox('options').separator; // 값을 구분짓는 문자(설정된 값이 없으면 쉼표(,)가 적용됨)
							var ss = value.split(sep);
							
							for(var idx = 0; idx < ss.length; idx++){
								val_array[idx] = ss[idx];
							}
						}
					}
					
					$(target).combobox('setValues', val_array);
				} else {
					$(target).combobox('setValue', value);
				}
			}, // 종료
			resize: function (_610, _611) {
                $(_610).combobox("resize", _611);
            }
        },
        combotree: {
            init: function (_612, _613) {
                var _614 = $("<input type=\"text\">").appendTo(_612);
                _614.combotree(_613);
                return _614;
            },
            destroy: function (_615) {
                $(_615).combotree("destroy");
            },
            getValue: function (_616) {
                return $(_616).combotree("getValue");
            },
            setValue: function (_617, _618) {
                $(_617).combotree("setValue", _618);
            },
            resize: function (_619, _61a) {
                $(_619).combotree("resize", _61a);
            }
        }
    };
    $.fn.datagrid.methods = {
        options: function (jq) {
            if(oUtil.isNull($.data(jq[0], "datagrid"))) {
                return;
            }
            var _61b = $.data(jq[0], "datagrid").options;
            var _61c = $.data(jq[0], "datagrid").panel.panel("options");
            var opts = $.extend(_61b, {
                width: _61c.width,
                height: _61c.height,
                closed: _61c.closed,
                collapsed: _61c.collapsed,
                minimized: _61c.minimized,
                maximized: _61c.maximized
            });
            return opts;
        },
        getPanel: function (jq) {
        	if(oUtil.isNull($.data(jq[0], "datagrid"))) return;
            return $.data(jq[0], "datagrid").panel;
        },
        getPager: function (jq) {
        	if(oUtil.isNull($.data(jq[0], "datagrid"))) return;
            return $.data(jq[0], "datagrid").panel.children("div.datagrid-pager");
        },
        getColumnFields: function (jq, _61d) {
            return _4eb(jq[0], _61d);
        },
        getColumnOption: function (jq, _61e) {
            return _4ec(jq[0], _61e);
        },
        resize: function (jq, _61f) {
            return jq.each(function () {
                _4a8(this, _61f);
            });
        },
        load: function (jq, _620) {
            return jq.each(function () {
                var opts = $(this).datagrid("options");
                opts.pageNumber = 1;
                var _621 = $(this).datagrid("getPager");
                _621.pagination({
                    pageNumber: 1
                });
                _5c8(this, _620);
            });
        },
        reload: function (jq, _622) {
            return jq.each(function () {
                var _621 = $(this).datagrid("getPager");
                var opts = $(this).datagrid("options");
                _621.pagination({
                    pageNumber: opts.pageNumber
                });
                _5c8(this, _622);
            });
        },
        reloadFooter: function (jq, _623) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                var dc = $.data(this, "datagrid").dc;
                if (_623) {
                    $.data(this, "datagrid").footer = _623;
                }
                if (opts.showFooter) {
                    opts.view.renderFooter.call(opts.view, this, dc.footer2, false);
                    opts.view.renderFooter.call(opts.view, this, dc.footer1, true);
                    if (opts.view.onAfterRender) {
                        opts.view.onAfterRender.call(opts.view, this);
                    }
                    $(this).datagrid("fixRowHeight");
                }
            });
        },
        loading: function (jq) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                $(this).datagrid("getPager").pagination("loading");
                if (opts.loadMsg) {
                    var _624 = $(this).datagrid("getPanel");
                    $("<div class=\"datagrid-mask\" style=\"display:block\"></div>").appendTo(_624);
                    var msg = $("<div class=\"datagrid-mask-msg\" style=\"display:block;left:50%\"></div>").html(opts.loadMsg).appendTo(_624);
                    msg.css("marginLeft", -msg.outerWidth() / 2);
                }
            });
        },
        loaded: function (jq) {
            return jq.each(function () {
                //$(this).datagrid("getPager").pagination("loaded");
                var _625 = $(this).datagrid("getPanel");
                if(!oUtil.isNull(_625)) {
	                _625.children("div.datagrid-mask-msg").remove();
	                _625.children("div.datagrid-mask").remove();
                }
            });
        },
        fitColumns: function (jq) {
            return jq.each(function () {
                _505(this);
            });
        },
        fixColumnSize: function (jq, _626) {
            return jq.each(function () {
                _4d5(this, _626);
            });
        },
        fixRowHeight: function (jq, _627) {
            return jq.each(function () {
                _4b9(this, _627);
            });
        },
        freezeRow: function (jq, _628) {
            return jq.each(function () {
                _4c6(this, _628);
            });
        },
        autoSizeColumn: function (jq, _629) {
            return jq.each(function () {
                _511(this, _629);
            });
        },
        loadData: function (jq, data) {
            return jq.each(function () {
                _531(this, data);
                _5b4(this);
            });
        },
        getData: function (jq) {
            return $.data(jq[0], "datagrid").data;
        },
        getRows: function (jq) {
            return $.data(jq[0], "datagrid").data.rows;
        },
        getFooterRows: function (jq) {
            return $.data(jq[0], "datagrid").footer;
        },
        getRowIndex: function (jq, id) {
            return _53a(jq[0], id);
        },
        getChecked: function (jq) {
            return _541(jq[0]);
        },
        getSelected: function (jq) {
            var rows = _53d(jq[0]);
            return rows.length > 0 ? rows[0] : null;
        },
        getSelections: function (jq) {
            return _53d(jq[0]);
        },
        clearSelections: function (jq) {
            return jq.each(function () {
                var _62a = $.data(this, "datagrid").selectedRows;
                _62a.splice(0, _62a.length);
                _555(this);
            });
        },
        clearChecked: function (jq) {
            return jq.each(function () {
                var _62b = $.data(this, "datagrid").checkedRows;
                _62b.splice(0, _62b.length);
                _569(this);
            });
        },
        scrollTo: function (jq, _62c) {
            return jq.each(function () {
                _544(this, _62c);
            });
        },
        highlightRow: function (jq, _62d) {
            return jq.each(function () {
                _54b(this, _62d);
                _544(this, _62d);
            });
        },
        selectAll: function (jq) {
            return jq.each(function () {
                _55e(this);
            });
        },
        unselectAll: function (jq) {
            return jq.each(function () {
                _555(this);
            });
        },
        selectRow: function (jq, _62e) {
            return jq.each(function () {
                _54f(this, _62e);
            });
        },
        selectRecord: function (jq, id) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                if (opts.idField) {
                    var _62f = _53a(this, id);
                    if (_62f >= 0) {
                        $(this).datagrid("selectRow", _62f);
                    }
                }
            });
        },
        unselectRow: function (jq, _630) {
            return jq.each(function () {
                _557(this, _630);
            });
        },
        checkRow: function (jq, _631) {
            return jq.each(function () {
                _556(this, _631);
            });
        },
        uncheckRow: function (jq, _632) {
            return jq.each(function () {
                _55d(this, _632);
            });
        },
        checkAll: function (jq) {
            return jq.each(function () {
                _563(this);
            });
        },
        uncheckAll: function (jq) {
            return jq.each(function () {
                _569(this);
            });
        },
        beginEdit: function (jq, _633) {
            return jq.each(function () {
                _57b(this, _633);
            });
        },
        endEdit: function (jq, _634) {
            return jq.each(function () {
                _581(this, _634, false);
            });
        },
        cancelEdit: function (jq, _635) {
            return jq.each(function () {
                _581(this, _635, true);
            });
        },
        getEditors: function (jq, _636) {
            return _58c(jq[0], _636);
        },
        getEditor: function (jq, _637) {
            return _590(jq[0], _637);
        },
        refreshRow: function (jq, _638) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                opts.view.refreshRow.call(opts.view, this, _638);
            });
        },
        validateRow: function (jq, _639) {
            return _580(jq[0], _639);
        },
        updateRow: function (jq, _63a) {
            return jq.each(function () {
                var opts = $.data(this, "datagrid").options;
                opts.view.updateRow.call(opts.view, this, _63a.index, _63a.row);
            });
        },
        appendRow: function (jq, row) {
            return jq.each(function () {
                _5b1(this, row);
            });
        },
        insertRow: function (jq, _63b) {
            return jq.each(function () {
                _5ad(this, _63b);
            });
        },
        deleteRow: function (jq, _63c) {
            return jq.each(function () {
                _5a7(this, _63c);
            });
        },
        getChanges: function (jq, _63d) {
            return _5a1(jq[0], _63d);
        },
        acceptChanges: function (jq) {
            return jq.each(function () {
                _5b8(this);
            });
        },
        rejectChanges: function (jq) {
            return jq.each(function () {
                _5ba(this);
            });
        },
        mergeCells: function (jq, _63e) {
            return jq.each(function () {
                _5ce(this, _63e);
            });
        },
        showColumn: function (jq, _63f) {
            return jq.each(function () {
                var _640 = $(this).datagrid("getPanel");
                _640.find("td[field=\"" + _63f + "\"]").show();
                $(this).datagrid("getColumnOption", _63f).hidden = false;
                $(this).datagrid("fitColumns");
            });
        },
        hideColumn: function (jq, _641) {
            return jq.each(function () {
                var _642 = $(this).datagrid("getPanel");
                _642.find("td[field=\"" + _641 + "\"]").hide();
                $(this).datagrid("getColumnOption", _641).hidden = true;
                $(this).datagrid("fitColumns");
            });
        }
    };
    $.fn.datagrid.parseOptions = function (_643) {
        var t = $(_643);
        return $.extend({}, $.fn.panel.parseOptions(_643), $.parser.parseOptions(_643, ["url", "toolbar", "idField", "sortName", "sortOrder", "pagePosition", "resizeHandle", {
            fitColumns: "boolean",
            autoRowHeight: "boolean",
            striped: "boolean",
            nowrap: "boolean"
        }, {
            rownumbers: "boolean",
            singleSelect: "boolean",
            checkOnSelect: "boolean",
            selectOnCheck: "boolean"
        }, {
            pagination: "boolean",
            pageSize: "number",
            pageNumber: "number",
            viewNumber: "number"
        }, {
            multiSort: "boolean",
            remoteSort: "boolean",
            showHeader: "boolean",
            showFooter: "boolean"
        }, {
            scrollbarSize: "number"
        }]), {
            pageList: (t.attr("pageList") ? eval(t.attr("pageList")) : undefined),
            loadMsg: (t.attr("loadMsg") != undefined ? t.attr("loadMsg") : undefined),
            rowStyler: (t.attr("rowStyler") ? eval(t.attr("rowStyler")) : undefined)
        });
    };
    $.fn.datagrid.parseData = function (_644) {
        var t = $(_644);
        var data = {
            total: 0,
            rows: []
        };
        var _645 = t.datagrid("getColumnFields", true).concat(t.datagrid("getColumnFields", false));
        t.find("tbody tr").each(function () {
            data.total++;
            var row = {};
            $.extend(row, $.parser.parseOptions(this, ["iconCls", "state"]));
            for (var i = 0; i < _645.length; i++) {
                row[_645[i]] = $(this).find("td:eq(" + i + ")").html();
            }
            data.rows.push(row);
        });
        return data;
    };
    var _646 = {
        render: function (_647, _648, _649) {
            var _64a = $.data(_647, "datagrid");
            var opts = _64a.options;
            var rows = _64a.data.rows;
            var _64b = $(_647).datagrid("getColumnFields", _649);
            if (_649) {
                if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))) {
                    return;
                }
            }
            var _64c;
            var emptmsg;
            
            // 조회된 결과가 있는지 체크한다.
            try {
                emptmsg = rows[0].empty;
            } catch(e) {
                emptmsg = null;
            }
            
            // 조회결과에 데이터가 있다면 데이터를 출력하고, 없으면 빈 테이블을 생성한다.
            if(rows.length > 0 && oUtil.isNull(emptmsg)) {
                _64c = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            } else {
                var hwsize;
                try {
                    hwsize = (opts.headerWidthSize > 0)?opts.headerWidthSize:10000;
                } catch(e) {
                    hwsize = 10000;
                } 
				_64c = ["<table style=\"width:"+hwsize+"px;height:1px;\" border=\"0\">"]; // 값이 없는 경우에는 전체 해더를 보여주기 위해 임의로 table를 생성함(2021.11.19)
            }
            for (var i = 0; i < rows.length; i++) {
                var cls = (i % 2 && opts.striped) ? "class=\"datagrid-row datagrid-row-alt\"" : "class=\"datagrid-row\"";
                var _64d = opts.rowStyler ? opts.rowStyler.call(_647, i, rows[i]) : "";
                var _64e = _64d ? "style=\"" + _64d + "\"" : "";
                var _64f = _64a.rowIdPrefix + "-" + (_649 ? 1 : 2) + "-" + i;
                _64c.push("<tr id=\"" + _64f + "\" datagrid-row-index=\"" + i + "\" " + cls + " " + _64e + ">");
                _64c.push(this.renderRow.call(this, _647, _64b, _649, i, rows[i]));
                _64c.push("</tr>");
            }
            if(rows.length > 0) {
                _64c.push("</tbody></table>");
            } else {
                _64c.push("</table>");
            }
            $(_648).html(_64c.join(""));
        },
        renderFooter: function (_650, _651, _652) {
            var opts = $.data(_650, "datagrid").options;
            var rows = $.data(_650, "datagrid").footer || [];
            var _653 = $(_650).datagrid("getColumnFields", _652);
            var _654 = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            
            for (var i = 0; i < rows.length; i++) {
                _654.push("<tr class=\"datagrid-row\" datagrid-row-index=\"" + i + "\">");
                _654.push(this.renderRow.call(this, _650, _653, _652, i, rows[i]));
                _654.push("</tr>");
            }
            _654.push("</tbody></table>");
            $(_651).html(_654.join(""));
        },
        renderRow: function (_655, _656, _657, _658, _659) {
            var opts = $.data(_655, "datagrid").options;
            var cc = [];
            if (_657 && opts.rownumbers) {
                var _65a = _658 + 1;
                if (opts.pagination) {
                    _65a += (opts.pageNumber - 1) * opts.pageSize;
                }
                cc.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">" + _65a + "</div></td>"); // display row number
                
                //return cc.join("");
            }
            for (var i = 0; i < _656.length; i++) {
                var _65b = _656[i];
                var col = $(_655).datagrid("getColumnOption", _65b);
                if (col) {
                    var _65c = _659[_65b];
                    var _65d = col.styler ? (col.styler(_65c, _659, _658) || "") : "";
                    var bor_color = "";
                    if(!oUtil.isNull(opts.rowcolor)) { // 열을 라인색상을 지정함(2021-05-23)
                        bor_color = "style=\"border-color:"+opts.rowcolor+";\"";
                    }
                    var _65e = col.hidden ? "style=\"display:none;" + _65d + "\"" : (_65d ? "style=\"" + _65d + "\"" : bor_color);
                    cc.push("<td field=\"" + _65b + "\" " + _65e + ">");
                    
                    if (col.checkbox) {
                        var _65e = "";
                    } else {
                        var _65e = _65d;
                        if (col.align) {
                            _65e += ";text-align:" + col.align + ";";
                        }
                        if (!opts.nowrap) {
                            _65e += ";white-space:normal;height:auto;";
                        } else {
                            if (opts.autoRowHeight) {
                                _65e += ";height:auto;";
                            }
                        }
                    }
                    cc.push("<div style=\"" + _65e + "\" ");
                    if (col.checkbox) {
                        cc.push("class=\"datagrid-cell-check ");
                    } else {
                        cc.push("class=\"datagrid-cell " + col.cellClass);
                    }
                    cc.push("\">");
                    if (col.checkbox) {
                        cc.push("<input type=\"checkbox\" name=\"" + _65b + "\" value=\"" + (_65c != undefined ? _65c : "") + "\"/>");
                    } else {
                        if (col.formatter) {
                            cc.push(col.formatter(_65c, _659, _658));
                        } else {
                        	if(oUtil.isNull(_65c)) {
                        		cc.push(_65c);
                        	} else {
                        		cc.push("<div title=\"" + replaceAll(_65c, "<br>", " ") + "\">" + _65c + "</div>"); // row data를 도움말(말품선) 추가(YNI-Master 추가, 20150522)
                        	}
                        }
                    }
                    cc.push("</div>");
                    cc.push("</td>");
                }
            }
            return cc.join("");
        },
        refreshRow: function (_65f, _660) {
            this.updateRow.call(this, _65f, _660, {});
        },
        updateRow: function (_661, _662, row) {
            var opts = $.data(_661, "datagrid").options;
            var rows = $(_661).datagrid("getRows");
            $.extend(rows[_662], row);
            var _663 = opts.rowStyler ? opts.rowStyler.call(_661, _662, rows[_662]) : "";

            function _664(_665) {
                var _666 = $(_661).datagrid("getColumnFields", _665);
                var tr = opts.finder.getTr(_661, _662, "body", (_665 ? 1 : 2));
                var _667 = tr.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
                tr.html(this.renderRow.call(this, _661, _666, _665, _662, rows[_662]));
                tr.attr("style", _663 || "");
                if (_667) {
                    tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
                }
            };
            _664.call(this, true);
            _664.call(this, false);
            $(_661).datagrid("fixRowHeight", _662);
        },
        insertRow: function (_668, _669, row) {
            var _66a = $.data(_668, "datagrid");
            var opts = _66a.options;
            var dc = _66a.dc;
            var data = _66a.data;
            if (_669 == undefined || _669 == null) {
                _669 = data.rows.length;
            }
            if (_669 > data.rows.length) {
                _669 = data.rows.length;
            }

            function _66b(_66c) {
                var _66d = _66c ? 1 : 2;
                for (var i = data.rows.length - 1; i >= _669; i--) {
                    var tr = opts.finder.getTr(_668, i, "body", _66d);
                    tr.attr("datagrid-row-index", i + 1);
                    tr.attr("id", _66a.rowIdPrefix + "-" + _66d + "-" + (i + 1));
                    if (_66c && opts.rownumbers) {
                        var _66e = i + 2;
                        if (opts.pagination) {
                            _66e += (opts.pageNumber - 1) * opts.pageSize;
                        }
                        tr.find("div.datagrid-cell-rownumber").html(_66e);
                    }
                }
            };

            function _66f(_670) {
                var _671 = _670 ? 1 : 2;
                var _672 = $(_668).datagrid("getColumnFields", _670);
                var _673 = _66a.rowIdPrefix + "-" + _671 + "-" + _669;
                var tr = "<tr id=\"" + _673 + "\" class=\"datagrid-row\" datagrid-row-index=\"" + _669 + "\"></tr>";
                if (_669 >= data.rows.length) {
                    if (data.rows.length) {
                        opts.finder.getTr(_668, "", "last", _671).after(tr);
                    } else {
                        var cc = _670 ? dc.body1 : dc.body2;
                        cc.html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>" + tr + "</tbody></table>");
                    }
                } else {
                    opts.finder.getTr(_668, _669 + 1, "body", _671).before(tr);
                }
            };
            _66b.call(this, true);
            _66b.call(this, false);
            _66f.call(this, true);
            _66f.call(this, false);
            data.total += 1;
            data.rows.splice(_669, 0, row);
            this.refreshRow.call(this, _668, _669);
        },
        deleteRow: function (_674, _675) {
            var _676 = $.data(_674, "datagrid");
            var opts = _676.options;
            var data = _676.data;

            function _677(_678) {
                var _679 = _678 ? 1 : 2;
                for (var i = _675 + 1; i < data.rows.length; i++) {
                    var tr = opts.finder.getTr(_674, i, "body", _679);
                    tr.attr("datagrid-row-index", i - 1);
                    tr.attr("id", _676.rowIdPrefix + "-" + _679 + "-" + (i - 1));
                    if (_678 && opts.rownumbers) {
                        var _67a = i;
                        if (opts.pagination) {
                            _67a += (opts.pageNumber - 1) * opts.pageSize;
                        }
                        tr.find("div.datagrid-cell-rownumber").html(_67a);
                    }
                }
            };
            opts.finder.getTr(_674, _675).remove();
            _677.call(this, true);
            _677.call(this, false);
            data.total -= 1;
            data.rows.splice(_675, 1);
        },
        onBeforeRender: function (_67b, rows) {},
        onAfterRender: function (_67c) {
            var opts = $.data(_67c, "datagrid").options;
            if (opts.showFooter) {
                var _67d = $(_67c).datagrid("getPanel").find("div.datagrid-footer");
                _67d.find("div.datagrid-cell-rownumber,div.datagrid-cell-check").css("visibility", "hidden");
            }
        }
    };
    $.fn.datagrid.defaults = $.extend({}, $.fn.panel.defaults, {
        frozenColumns: undefined,
        columns: undefined,
        fitColumns: false,
        resizeHandle: "right",
        resizeEdge:8,
        autoRowHeight: true,
        toolbar: null,
        striped: false,
        scope: "row",
        method: "post",
        nowrap: true,
        idField: null,
        url: null,
        data: null,
        loadMsg: "Processing...",
        rownumbers: false,
        rowcolor: null,
        singleSelect: false,
        selectOnCheck: true,
        checkOnSelect: true,
        pagination: false,
        pagePosition: "bottom",
        pageNumber: 1,
        pageSize: 1000000000,
        viewNumber: 0,
        pageList: [100, 200, 500],
        pageLayout: null, // 페이지 없이 읽기 위해 추가함(2020-03-23)
        queryParams: {},
        sortName: null,
        sortOrder: "asc",
        multiSort: false,
        remoteSort: true,
        showHeader: true,
        showFooter: false,
        scrollbarSize: 18,
        autoAddRow : true,
        nextFocus : null, // 그리드 에디팅 모드에서 빠져나갈 때 이동할 포커스를 지정(2020-02-29)
        currentScrollLeft: 0, // 수평 스크롤 위치를 기억하고 있도록 추가(2020-06-26)
        hstyle: null, // 해더 우측에 표시할 내용정의
        rowStyler: function (_67e, _67f) {},
        loader: function (_680, _681, _682) {
            var opts = $(this).datagrid("options");
            if (oUtil.isNull(opts) || !opts.url) {
                return false;
            }
            $.ajax({
                type: opts.method,
                url: opts.url,
                data: _680,
                dataType: "json",
                success: function (data) {
                    _681(data);
                },
                error: function () {
                    _682.apply(this, arguments);
                }
            });
        },
        loadFilter: function (data) {
            if (typeof data.length == "number" && typeof data.splice == "function") {
                return {
                    total: data.length,
                    rows: data
                };
            } else {
                return data;
            }
        },
        editors: _5d6,
        finder: {
            getTr: function (_683, _684, type, _685) {
                type = type || "body";
                _685 = _685 || 0;
                var _686 = $.data(_683, "datagrid");
                var opts = _686.options;
                if (_685 == 0) {
                    var tr1 = opts.finder.getTr(_683, _684, type, 1);
                    var tr2 = opts.finder.getTr(_683, _684, type, 2);
                    
                    return tr1.add(tr2);
                } else {
                    var dc = _686.dc;
                    
                    if (type == "body") {
                        var tr = $("#" + _686.rowIdPrefix + "-" + _685 + "-" + _684);
                        if (!tr.length) {
                            tr = (_685 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index=" + _684 + "]");
                        }
                        return tr;
                    } else {
                        if (type == "footer") {
                            return (_685 == 1 ? dc.footer1 : dc.footer2).find(">table>tbody>tr[datagrid-row-index=" + _684 + "]");
                        } else {
                            if (type == "selected") {
                            	return (_685 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-selected");
                            } else {
                                if (type == "highlight") {
                                    return (_685 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row-over");
                                } else {
                                    if (type == "checked") {
                                        return (_685 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr.datagrid-row:has(div.datagrid-cell-check input:checked)");
                                    } else {
                                        if (type == "last") {
                                            return (_685 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index]:last");
                                        } else {
                                            if (type == "allbody") {
                                                return (_685 == 1 ? dc.body1 : dc.body2).find(">table>tbody>tr[datagrid-row-index]");
                                            } else {
                                                if (type == "allfooter") {
                                                    return (_685 == 1 ? dc.footer1 : dc.footer2).find(">table>tbody>tr[datagrid-row-index]");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            getRow: function (_687, p) {
                var _688 = (typeof p == "object") ? p.attr("datagrid-row-index") : p;
                return $.data(_687, "datagrid").data.rows[parseInt(_688)];
            }
        },
        view: _646,
        onBeforeLoad: function (_689) {},
        onLoadSuccess: function () {},
        onLoadError: function () {},
        onClickRow: function (_68a, _68b) {},
        onDblClickRow: function (_68c, _68d) {},
        onClickCell: function (_68e, _68f, _690) {},
        onDblClickCell: function (_691, _692, _693) {},
        onSortColumn: function (sort, _694) {},
        onResizeColumn: function (_695, _696) {},
        onSelect: function (_697, _698) {},
        onUnselect: function (_699, _69a) {},
        onSelectAll: function (rows) {},
        onUnselectAll: function (rows) {},
        onCheck: function (_69b, _69c) {},
        onUncheck: function (_69d, _69e) {},
        onCheckAll: function (rows) {},
        onUncheckAll: function (rows) {},
        onBeforeEdit: function (_69f, _6a0) {},
        onAfterEdit: function (_6a1, _6a2, _6a3) {},
        onCancelEdit: function (_6a4, _6a5) {},
        onHeaderContextMenu: function (e, _6a6) {},
        onRowContextMenu: function (e, _6a7, _6a8) {}
    });
})(jQuery);
(function ($) {
    var _6a9;

    function _6aa(_6ab) {
        var _6ac = $.data(_6ab, "propertygrid");
        var opts = $.data(_6ab, "propertygrid").options;
        $(_6ab).datagrid($.extend({}, opts, {
            cls: "propertygrid",
            view: (opts.showGroup ? _6ad : undefined),
            onClickRow: function (_6ae, row) {
                if (_6a9 != this) {
                    _6af(_6a9);
                    _6a9 = this;
                }
                if (opts.editIndex != _6ae && row.editor) {
                    var col = $(this).datagrid("getColumnOption", "value");
                    col.editor = row.editor;
                    _6af(_6a9);
                    $(this).datagrid("beginEdit", _6ae);
                    $(this).datagrid("getEditors", _6ae)[0].target.focus();
                    opts.editIndex = _6ae;
                }
                opts.onClickRow.call(_6ab, _6ae, row);
            },
            loadFilter: function (data) {
                _6af(this);
                return opts.loadFilter.call(this, data);
            },
            onLoadSuccess: function (data) {
                $(_6ab).datagrid("getPanel").find("div.datagrid-group").attr("style", "");
                opts.onLoadSuccess.call(_6ab, data);
            }
        }));
        $(document).unbind(".propertygrid").bind("mousedown.propertygrid", function (e) {
            var p = $(e.target).closest("div.datagrid-view,div.combo-panel");
            if (p.length) {
                return;
            }
            _6af(_6a9);
            _6a9 = undefined;
        });
    };

    function _6af(_6b0) {
        var t = $(_6b0);
        if (!t.length) {
            return;
        }
        var opts = $.data(_6b0, "propertygrid").options;
        var _6b1 = opts.editIndex;
        if (_6b1 == undefined) {
            return;
        }
        var ed = t.datagrid("getEditors", _6b1)[0];
        if (ed) {
            ed.target.blur();
            if (t.datagrid("validateRow", _6b1)) {
                t.datagrid("endEdit", _6b1);
            } else {
                t.datagrid("cancelEdit", _6b1);
            }
        }
        opts.editIndex = undefined;
    };
    $.fn.propertygrid = function (_6b2, _6b3) {
        if (typeof _6b2 == "string") {
            var _6b4 = $.fn.propertygrid.methods[_6b2];
            if (_6b4) {
                return _6b4(this, _6b3);
            } else {
                return this.datagrid(_6b2, _6b3);
            }
        }
        _6b2 = _6b2 || {};
        return this.each(function () {
            var _6b5 = $.data(this, "propertygrid");
            if (_6b5) {
                $.extend(_6b5.options, _6b2);
            } else {
                var opts = $.extend({}, $.fn.propertygrid.defaults, $.fn.propertygrid.parseOptions(this), _6b2);
                opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
                opts.columns = $.extend(true, [], opts.columns);
                $.data(this, "propertygrid", {
                    options: opts
                });
            }
            _6aa(this);
        });
    };
    $.fn.propertygrid.methods = {
        options: function (jq) {
            return $.data(jq[0], "propertygrid").options;
        }
    };
    $.fn.propertygrid.parseOptions = function (_6b6) {
        var t = $(_6b6);
        return $.extend({}, $.fn.datagrid.parseOptions(_6b6), $.parser.parseOptions(_6b6, [{
            showGroup: "boolean"
        }]));
    };
    var _6ad = $.extend({}, $.fn.datagrid.defaults.view, {
        render: function (_6b7, _6b8, _6b9) {
            var _6ba = $.data(_6b7, "datagrid");
            var opts = _6ba.options;
            var rows = _6ba.data.rows;
            var _6bb = $(_6b7).datagrid("getColumnFields", _6b9);
            var _6bc = [];
            var _6bd = 0;
            var _6be = this.groups;
            for (var i = 0; i < _6be.length; i++) {
                var _6bf = _6be[i];
                _6bc.push("<div class=\"datagrid-group\" group-index=" + i + " style=\"height:25px;overflow:hidden;border-bottom:1px solid #ccc;\">");
                _6bc.push("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"height:100%\"><tbody>");
                _6bc.push("<tr>");
                _6bc.push("<td style=\"border:0;\">");
                if (!_6b9) {
                    _6bc.push("<span style=\"color:#666;font-weight:bold;\">");
                    _6bc.push(opts.groupFormatter.call(_6b7, _6bf.fvalue, _6bf.rows)); // YNI-Master
                    _6bc.push("</span>");
                }
                _6bc.push("</td>");
                _6bc.push("</tr>");
                _6bc.push("</tbody></table>");
                _6bc.push("</div>");
                _6bc.push("<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>");
                for (var j = 0; j < _6bf.rows.length; j++) {
                    var cls = (_6bd % 2 && opts.striped) ? "class=\"datagrid-row datagrid-row-alt\"" : "class=\"datagrid-row\"";
                    var _6c0 = opts.rowStyler ? opts.rowStyler.call(_6b7, _6bd, _6bf.rows[j]) : "";
                    var _6c1 = _6c0 ? "style=\"" + _6c0 + "\"" : "";
                    var _6c2 = _6ba.rowIdPrefix + "-" + (_6b9 ? 1 : 2) + "-" + _6bd;
                    _6bc.push("<tr id=\"" + _6c2 + "\" datagrid-row-index=\"" + _6bd + "\" " + cls + " " + _6c1 + ">");
                    _6bc.push(this.renderRow.call(this, _6b7, _6bb, _6b9, _6bd, _6bf.rows[j]));
                    _6bc.push("</tr>");
                    _6bd++;
                }
                _6bc.push("</tbody></table>");
            }
            $(_6b8).html(_6bc.join(""));
        },
        onAfterRender: function (_6c3) {
            var opts = $.data(_6c3, "datagrid").options;
            var dc = $.data(_6c3, "datagrid").dc;
            var view = dc.view;
            var _6c4 = dc.view1;
            var _6c5 = dc.view2;
            $.fn.datagrid.defaults.view.onAfterRender.call(this, _6c3);
            if (opts.rownumbers || opts.frozenColumns.length) {
                var _6c6 = _6c4.find("div.datagrid-group");
            } else {
                var _6c6 = _6c5.find("div.datagrid-group");
            }
            $("<td style=\"border:0;text-align:center;width:25px\"><span class=\"datagrid-row-expander datagrid-row-collapse\" style=\"display:inline-block;width:16px;height:16px;cursor:pointer\">&nbsp;</span></td>").insertBefore(_6c6.find("td"));
            view.find("div.datagrid-group").each(function () {
                var _6c7 = $(this).attr("group-index");
                $(this).find("span.datagrid-row-expander").bind("click", {
                    groupIndex: _6c7
                }, function (e) {
                    if ($(this).hasClass("datagrid-row-collapse")) {
                        $(_6c3).datagrid("collapseGroup", e.data.groupIndex);
                    } else {
                        $(_6c3).datagrid("expandGroup", e.data.groupIndex);
                    }
                });
            });
        },
        onBeforeRender: function (_6c8, rows) {
            var opts = $.data(_6c8, "datagrid").options;
            var _6c9 = [];
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                var _6ca = _6cb(row[opts.groupField]);
                if (!_6ca) {
                    _6ca = {
                        fvalue: row[opts.groupField],
                        rows: [row],
                        startRow: i
                    };
                    _6c9.push(_6ca);
                } else {
                    _6ca.rows.push(row);
                }
            }

            function _6cb(_6cc) {
                for (var i = 0; i < _6c9.length; i++) {
                    var _6cd = _6c9[i];
                    if (_6cd.fvalue == _6cc) {
                        return _6cd;
                    }
                }
                return null;
            };
            this.groups = _6c9;
            var _6ce = [];
            for (var i = 0; i < _6c9.length; i++) {
                var _6ca = _6c9[i];
                for (var j = 0; j < _6ca.rows.length; j++) {
                    _6ce.push(_6ca.rows[j]);
                }
            }
            $.data(_6c8, "datagrid").data.rows = _6ce;
        }
    });
    $.extend($.fn.datagrid.methods, {
        expandGroup: function (jq, _6cf) {
            return jq.each(function () {
                var view = $.data(this, "datagrid").dc.view;
                if (_6cf != undefined) {
                    var _6d0 = view.find("div.datagrid-group[group-index=\"" + _6cf + "\"]");
                } else {
                    var _6d0 = view.find("div.datagrid-group");
                }
                var _6d1 = _6d0.find("span.datagrid-row-expander");
                if (_6d1.hasClass("datagrid-row-expand")) {
                    _6d1.removeClass("datagrid-row-expand").addClass("datagrid-row-collapse");
                    _6d0.next("table").show();
                }
                $(this).datagrid("fixRowHeight");
            });
        },
        collapseGroup: function (jq, _6d2) {
            return jq.each(function () {
                var view = $.data(this, "datagrid").dc.view;
                if (_6d2 != undefined) {
                    var _6d3 = view.find("div.datagrid-group[group-index=\"" + _6d2 + "\"]");
                } else {
                    var _6d3 = view.find("div.datagrid-group");
                }
                var _6d4 = _6d3.find("span.datagrid-row-expander");
                if (_6d4.hasClass("datagrid-row-collapse")) {
                    _6d4.removeClass("datagrid-row-collapse").addClass("datagrid-row-expand");
                    _6d3.next("table").hide();
                }
                $(this).datagrid("fixRowHeight");
            });
        }
    });
    $.fn.propertygrid.defaults = $.extend({}, $.fn.datagrid.defaults, {
        singleSelect: true,
        remoteSort: false,
        fitColumns: true,
        loadMsg: "",
        frozenColumns: [
            [{
                field: "f",
                width: 16,
                resizable: false
            }]
        ],
        columns: [
            [{
                field: "name",
                title: "Name",
                width: 100,
                sortable: true
            }, {
                field: "value",
                title: "Value",
                width: 100,
                resizable: false
            }]
        ],
        showGroup: false,
        groupField: "group",
        groupFormatter: function (_6d5, rows) {
            return _6d5;
        }
    });
})(jQuery);
(function ($) {
    function _6d6(_6d7) {
        var _6d8 = $.data(_6d7, "treegrid");
        var opts = _6d8.options;
        $(_6d7).datagrid($.extend({}, opts, {
            url: null,
            data: null,
            loader: function () {
                return false;
            },
            onBeforeLoad: function () {},
            onLoadSuccess: function () {},
            onResizeColumn: function (_6d9, _6da) {
                _6f0(_6d7);
                opts.onResizeColumn.call(_6d7, _6d9, _6da);
            },
            onSortColumn: function (sort, _6db) {
                opts.sortName = sort;
                opts.sortOrder = _6db;
                if (opts.remoteSort) {
                    _6ef(_6d7);
                } else {
                    var data = $(_6d7).treegrid("getData");
                    _705(_6d7, 0, data);
                }
                opts.onSortColumn.call(_6d7, sort, _6db);
            },
            onBeforeEdit: function (_6dc, row) {
                if (opts.onBeforeEdit.call(_6d7, row) == false) {
                    return false;
                }
            },
            onAfterEdit: function (_6dd, row, _6de) {
                opts.onAfterEdit.call(_6d7, row, _6de);
            },
            onCancelEdit: function (_6df, row) {
                opts.onCancelEdit.call(_6d7, row);
            },
            onSelect: function (_6e0) {
                opts.onSelect.call(_6d7, find(_6d7, _6e0));
            },
            onUnselect: function (_6e1) {
                opts.onUnselect.call(_6d7, find(_6d7, _6e1));
            },
            onSelectAll: function () {
                opts.onSelectAll.call(_6d7, $.data(_6d7, "treegrid").data);
            },
            onUnselectAll: function () {
                opts.onUnselectAll.call(_6d7, $.data(_6d7, "treegrid").data);
            },
            onCheck: function (_6e2) {
                opts.onCheck.call(_6d7, find(_6d7, _6e2));
            },
            onUncheck: function (_6e3) {
                opts.onUncheck.call(_6d7, find(_6d7, _6e3));
            },
            onCheckAll: function () {
                opts.onCheckAll.call(_6d7, $.data(_6d7, "treegrid").data);
            },
            onUncheckAll: function () {
                opts.onUncheckAll.call(_6d7, $.data(_6d7, "treegrid").data);
            },
            onClickRow: function (_6e4) {
                opts.onClickRow.call(_6d7, find(_6d7, _6e4));
            },
            onDblClickRow: function (_6e5) {
                opts.onDblClickRow.call(_6d7, find(_6d7, _6e5));
            },
            onClickCell: function (_6e6, _6e7) {
                opts.onClickCell.call(_6d7, _6e7, find(_6d7, _6e6));
            },
            onDblClickCell: function (_6e8, _6e9) {
                opts.onDblClickCell.call(_6d7, _6e9, find(_6d7, _6e8));
            },
            onRowContextMenu: function (e, _6ea) {
                opts.onContextMenu.call(_6d7, e, find(_6d7, _6ea));
            }
        }));
        if (!opts.columns) {
            var _6eb = $.data(_6d7, "datagrid").options;
            opts.columns = _6eb.columns;
            opts.frozenColumns = _6eb.frozenColumns;
        }
        _6d8.dc = $.data(_6d7, "datagrid").dc;
        if (opts.pagination) {
            var _6ec = $(_6d7).datagrid("getPager");
            _6ec.pagination({
                pageNumber: opts.pageNumber,
                pageSize: opts.pageSize,
                pageList: opts.pageList,
                viewNumber: opts.viewNumber,
                onSelectPage: function (_6ed, _6ee) {
                    opts.pageNumber = _6ed;
                    opts.pageSize = _6ee;
                    _6ef(_6d7);
                }
            });
            opts.pageSize = _6ec.pagination("options").pageSize;
        }
    };

    function _6f0(_6f1, _6f2) {
        var opts = $.data(_6f1, "datagrid").options;
        var dc = $.data(_6f1, "datagrid").dc;
        if (!dc.body1.is(":empty") && (!opts.nowrap || opts.autoRowHeight)) {
            if (_6f2 != undefined) {
                var _6f3 = _6f4(_6f1, _6f2);
                for (var i = 0; i < _6f3.length; i++) {
                    _6f5(_6f3[i][opts.idField]);
                }
            }
        }
        $(_6f1).datagrid("fixRowHeight", _6f2);

        function _6f5(_6f6) {
            var tr1 = opts.finder.getTr(_6f1, _6f6, "body", 1);
            var tr2 = opts.finder.getTr(_6f1, _6f6, "body", 2);
            tr1.css("height", "");
            tr2.css("height", "");
            var _6f7 = Math.max(tr1.height(), tr2.height());
            tr1.css("height", _6f7);
            tr2.css("height", _6f7);
        };
    };

    function _6f8(_6f9) {
        var dc = $.data(_6f9, "datagrid").dc;
        var opts = $.data(_6f9, "treegrid").options;
        if (!opts.rownumbers) {
            return;
        }
        dc.body1.find("div.datagrid-cell-rownumber").each(function (i) {
            $(this).html(i + 1);
        });
    };

    function _6fa(_6fb) {
        var dc = $.data(_6fb, "datagrid").dc;
        var body = dc.body1.add(dc.body2);
        var _6fc = ($.data(body[0], "events") || $._data(body[0], "events")).click[0].handler;
        dc.body1.add(dc.body2).bind("mouseover", function (e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!tr.length) {
                return;
            }
            if (tt.hasClass("tree-hit")) {
                tt.hasClass("tree-expanded") ? tt.addClass("tree-expanded-hover") : tt.addClass("tree-collapsed-hover");
            }
            e.stopPropagation();
        }).bind("mouseout", function (e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!tr.length) {
                return;
            }
            if (tt.hasClass("tree-hit")) {
                tt.hasClass("tree-expanded") ? tt.removeClass("tree-expanded-hover") : tt.removeClass("tree-collapsed-hover");
            }
            e.stopPropagation();
        }).unbind("click").bind("click", function (e) {
            var tt = $(e.target);
            var tr = tt.closest("tr.datagrid-row");
            if (!tr.length) {
                return;
            }
            if (tt.hasClass("tree-hit")) {
                _6fd(_6fb, tr.attr("node-id"));
            } else {
                _6fc(e);
            }
            e.stopPropagation();
        });
    };

    function _6fe(_6ff, _700) {
        var opts = $.data(_6ff, "treegrid").options;
        var tr1 = opts.finder.getTr(_6ff, _700, "body", 1);
        var tr2 = opts.finder.getTr(_6ff, _700, "body", 2);
        var _701 = $(_6ff).datagrid("getColumnFields", true).length + (opts.rownumbers ? 1 : 0);
        var _702 = $(_6ff).datagrid("getColumnFields", false).length;
        _703(tr1, _701);
        _703(tr2, _702);

        function _703(tr, _704) {
            $("<tr class=\"treegrid-tr-tree\">" + "<td style=\"border:0px\" colspan=\"" + _704 + "\">" + "<div></div>" + "</td>" + "</tr>").insertAfter(tr);
        };
    };

    function _705(_706, _707, data, _708) {
        var _709 = $.data(_706, "treegrid");
        var opts = _709.options;
        var dc = _709.dc;
        data = opts.loadFilter.call(_706, data, _707);
        var node = find(_706, _707);
        if (node) {
            var _70a = opts.finder.getTr(_706, _707, "body", 1);
            var _70b = opts.finder.getTr(_706, _707, "body", 2);
            var cc1 = _70a.next("tr.treegrid-tr-tree").children("td").children("div");
            var cc2 = _70b.next("tr.treegrid-tr-tree").children("td").children("div");
            if (!_708) {
                node.children = [];
            }
        } else {
            var cc1 = dc.body1;
            var cc2 = dc.body2;
            if (!_708) {
                _709.data = [];
            }
        }
        if (!_708) {
            cc1.empty();
            cc2.empty();
        }
        if (opts.view.onBeforeRender) {
            opts.view.onBeforeRender.call(opts.view, _706, _707, data);
        }
        opts.view.render.call(opts.view, _706, cc1, true);
        opts.view.render.call(opts.view, _706, cc2, false);
        if (opts.showFooter) {
            opts.view.renderFooter.call(opts.view, _706, dc.footer1, true);
            opts.view.renderFooter.call(opts.view, _706, dc.footer2, false);
        }
        if (opts.view.onAfterRender) {
            opts.view.onAfterRender.call(opts.view, _706);
        }
        opts.onLoadSuccess.call(_706, node, data);
        if (!_707 && opts.pagination) {
            var _70c = $.data(_706, "treegrid").total;
            var _70d = $(_706).datagrid("getPager");
            if (_70d.pagination("options").total != _70c) {
                _70d.pagination({
                    total: _70c
                });
            }
        }
        _6f0(_706);
        _6f8(_706);
        $(_706).treegrid("autoSizeColumn");
    };

    function _6ef(_70e, _70f, _710, _711, _712) {
        var opts = $.data(_70e, "treegrid").options;
        var body = $(_70e).datagrid("getPanel").find("div.datagrid-body");
        if (_710) {
            opts.queryParams = _710;
        }
        var _713 = $.extend({}, opts.queryParams);
        if (opts.pagination) {
            $.extend(_713, {
                page: opts.pageNumber,
                rows: opts.pageSize
            });
        }
        if (opts.sortName) {
            $.extend(_713, {
                sort: opts.sortName,
                order: opts.sortOrder
            });
        }
        var row = find(_70e, _70f);
        if (opts.onBeforeLoad.call(_70e, row, _713) == false) {
            return;
        }
        var _714 = body.find("tr[node-id=" + _70f + "] span.tree-folder");
        _714.addClass("tree-loading");
        $(_70e).treegrid("loading");
        var _715 = opts.loader.call(_70e, _713, function (data) {
            _714.removeClass("tree-loading");
            $(_70e).treegrid("loaded");
            _705(_70e, _70f, data, _711);
            if (_712) {
                _712();
            }
        }, function () {
            _714.removeClass("tree-loading");
            $(_70e).treegrid("loaded");
            opts.onLoadError.apply(_70e, arguments);
            if (_712) {
                _712();
            }
        });
        if (_715 == false) {
            _714.removeClass("tree-loading");
            $(_70e).treegrid("loaded");
        }
    };

    function _716(_717) {
        var rows = _718(_717);
        if (rows.length) {
            return rows[0];
        } else {
            return null;
        }
    };

    function _718(_719) {
        return $.data(_719, "treegrid").data;
    };

    function _71a(_71b, _71c) {
        var row = find(_71b, _71c);
        if (row._parentId) {
            return find(_71b, row._parentId);
        } else {
            return null;
        }
    };

    function _6f4(_71d, _71e) {
        var opts = $.data(_71d, "treegrid").options;
        var body = $(_71d).datagrid("getPanel").find("div.datagrid-view2 div.datagrid-body");
        var _71f = [];
        if (_71e) {
            _720(_71e);
        } else {
            var _721 = _718(_71d);
            for (var i = 0; i < _721.length; i++) {
                _71f.push(_721[i]);
                _720(_721[i][opts.idField]);
            }
        }

        function _720(_722) {
            var _723 = find(_71d, _722);
            if (_723 && _723.children) {
                for (var i = 0, len = _723.children.length; i < len; i++) {
                    var _724 = _723.children[i];
                    _71f.push(_724);
                    _720(_724[opts.idField]);
                }
            }
        };
        return _71f;
    };

    function _725(_726) {
        var rows = _727(_726);
        if (rows.length) {
            return rows[0];
        } else {
            return null;
        }
    };

    function _727(_728) {
        var rows = [];
        var _729 = $(_728).datagrid("getPanel");
        _729.find("div.datagrid-view2 div.datagrid-body tr.datagrid-row-selected").each(function () {
            var id = $(this).attr("node-id");
            rows.push(find(_728, id));
        });
        return rows;
    };

    function _72a(_72b, _72c) {
        if (!_72c) {
            return 0;
        }
        var opts = $.data(_72b, "treegrid").options;
        var view = $(_72b).datagrid("getPanel").children("div.datagrid-view");
        var node = view.find("div.datagrid-body tr[node-id=" + _72c + "]").children("td[field=" + opts.treeField + "]");
        return node.find("span.tree-indent,span.tree-hit").length;
    };

    function find(_72d, _72e) {
        var opts = $.data(_72d, "treegrid").options;
        var data = $.data(_72d, "treegrid").data;
        var cc = [data];
        while (cc.length) {
            var c = cc.shift();
            for (var i = 0; i < c.length; i++) {
                var node = c[i];
                if (node[opts.idField] == _72e) {
                    return node;
                } else {
                    if (node["children"]) {
                        cc.push(node["children"]);
                    }
                }
            }
        }
        return null;
    };

    function _72f(_730, _731) {
        var opts = $.data(_730, "treegrid").options;
        var row = find(_730, _731);
        var tr = opts.finder.getTr(_730, _731);
        var hit = tr.find("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-collapsed")) {
            return;
        }
        if (opts.onBeforeCollapse.call(_730, row) == false) {
            return;
        }
        hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
        hit.next().removeClass("tree-folder-open");
        row.state = "closed";
        tr = tr.next("tr.treegrid-tr-tree");
        var cc = tr.children("td").children("div");
        if (opts.animate) {
            cc.slideUp("normal", function () {
                $(_730).treegrid("autoSizeColumn");
                _6f0(_730, _731);
                opts.onCollapse.call(_730, row);
            });
        } else {
            cc.hide();
            $(_730).treegrid("autoSizeColumn");
            _6f0(_730, _731);
            opts.onCollapse.call(_730, row);
        }
    };

    function _732(_733, _734) {
        var opts = $.data(_733, "treegrid").options;
        var tr = opts.finder.getTr(_733, _734);
        var hit = tr.find("span.tree-hit");
        var row = find(_733, _734);
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-expanded")) {
            return;
        }
        if (opts.onBeforeExpand.call(_733, row) == false) {
            return;
        }
        hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
        hit.next().addClass("tree-folder-open");
        var _735 = tr.next("tr.treegrid-tr-tree");
        if (_735.length) {
            var cc = _735.children("td").children("div");
            _736(cc);
        } else {
            _6fe(_733, row[opts.idField]);
            var _735 = tr.next("tr.treegrid-tr-tree");
            var cc = _735.children("td").children("div");
            cc.hide();
            var _737 = opts.queryParams || {};
            _737.id = row[opts.idField];
            _6ef(_733, row[opts.idField], _737, true, function () {
                if (cc.is(":empty")) {
                    _735.remove();
                } else {
                    _736(cc);
                }
            });
        }

        function _736(cc) {
            row.state = "open";
            if (opts.animate) {
                cc.slideDown("normal", function () {
                    $(_733).treegrid("autoSizeColumn");
                    _6f0(_733, _734);
                    opts.onExpand.call(_733, row);
                });
            } else {
                cc.show();
                $(_733).treegrid("autoSizeColumn");
                _6f0(_733, _734);
                opts.onExpand.call(_733, row);
            }
        };
    };

    function _6fd(_738, _739) {
        var opts = $.data(_738, "treegrid").options;
        var tr = opts.finder.getTr(_738, _739);
        var hit = tr.find("span.tree-hit");
        if (hit.hasClass("tree-expanded")) {
            _72f(_738, _739);
        } else {
            _732(_738, _739);
        }
    };

    function _73a(_73b, _73c) {
        var opts = $.data(_73b, "treegrid").options;
        var _73d = _6f4(_73b, _73c);
        if (_73c) {
            _73d.unshift(find(_73b, _73c));
        }
        for (var i = 0; i < _73d.length; i++) {
            _72f(_73b, _73d[i][opts.idField]);
        }
    };

    function _73e(_73f, _740) {
        var opts = $.data(_73f, "treegrid").options;
        var _741 = _6f4(_73f, _740);
        if (_740) {
            _741.unshift(find(_73f, _740));
        }
        for (var i = 0; i < _741.length; i++) {
            _732(_73f, _741[i][opts.idField]);
        }
    };

    function _742(_743, _744) {
        var opts = $.data(_743, "treegrid").options;
        var ids = [];
        var p = _71a(_743, _744);
        while (p) {
            var id = p[opts.idField];
            ids.unshift(id);
            p = _71a(_743, id);
        }
        for (var i = 0; i < ids.length; i++) {
            _732(_743, ids[i]);
        }
    };

    function _745(_746, _747) {
        var opts = $.data(_746, "treegrid").options;
        if (_747.parent) {
            var tr = opts.finder.getTr(_746, _747.parent);
            if (tr.next("tr.treegrid-tr-tree").length == 0) {
                _6fe(_746, _747.parent);
            }
            var cell = tr.children("td[field=" + opts.treeField + "]").children("div.datagrid-cell");
            var _748 = cell.children("span.tree-icon");
            if (_748.hasClass("tree-file")) {
                _748.removeClass("tree-file").addClass("tree-folder tree-folder-open");
                var hit = $("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(_748);
                if (hit.prev().length) {
                    hit.prev().remove();
                }
            }
        }
        _705(_746, _747.parent, _747.data, true);
    };

    function _749(_74a, _74b) {
        var ref = _74b.before || _74b.after;
        var opts = $.data(_74a, "treegrid").options;
        var _74c = _71a(_74a, ref);
        _745(_74a, {
            parent: (_74c ? _74c[opts.idField] : null),
            data: [_74b.data]
        });
        _74d(true);
        _74d(false);
        _6f8(_74a);

        function _74d(_74e) {
            var _74f = _74e ? 1 : 2;
            var tr = opts.finder.getTr(_74a, _74b.data[opts.idField], "body", _74f);
            var _750 = tr.closest("table.datagrid-btable");
            tr = tr.parent().children();
            var dest = opts.finder.getTr(_74a, ref, "body", _74f);
            if (_74b.before) {
                tr.insertBefore(dest);
            } else {
                var sub = dest.next("tr.treegrid-tr-tree");
                tr.insertAfter(sub.length ? sub : dest);
            }
            _750.remove();
        };
    };

    function _751(_752, _753) {
        var opts = $.data(_752, "treegrid").options;
        var tr = opts.finder.getTr(_752, _753);
        tr.next("tr.treegrid-tr-tree").remove();
        tr.remove();
        var _754 = del(_753);
        if (_754) {
            if (_754.children.length == 0) {
                tr = opts.finder.getTr(_752, _754[opts.idField]);
                tr.next("tr.treegrid-tr-tree").remove();
                var cell = tr.children("td[field=" + opts.treeField + "]").children("div.datagrid-cell");
                cell.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
                cell.find(".tree-hit").remove();
                $("<span class=\"tree-indent\"></span>").prependTo(cell);
            }
        }
        _6f8(_752);

        function del(id) {
            var cc;
            var _755 = _71a(_752, _753);
            if (_755) {
                cc = _755.children;
            } else {
                cc = $(_752).treegrid("getData");
            }
            for (var i = 0; i < cc.length; i++) {
                if (cc[i][opts.idField] == id) {
                    cc.splice(i, 1);
                    break;
                }
            }
            return _755;
        };
    };
    $.fn.treegrid = function (_756, _757) {
        if (typeof _756 == "string") {
            var _758 = $.fn.treegrid.methods[_756];
            if (_758) {
                return _758(this, _757);
            } else {
                return this.datagrid(_756, _757);
            }
        }
        _756 = _756 || {};
        return this.each(function () {
            var _759 = $.data(this, "treegrid");
            if (_759) {
                $.extend(_759.options, _756);
            } else {
                _759 = $.data(this, "treegrid", {
                    options: $.extend({}, $.fn.treegrid.defaults, $.fn.treegrid.parseOptions(this), _756),
                    data: []
                });
            }
            _6d6(this);
            if (_759.options.data) {
                $(this).treegrid("loadData", _759.options.data);
            }
            _6ef(this);
            _6fa(this);
        });
    };
    $.fn.treegrid.methods = {
        options: function (jq) {
            return $.data(jq[0], "treegrid").options;
        },
        resize: function (jq, _75a) {
            return jq.each(function () {
                $(this).datagrid("resize", _75a);
            });
        },
        fixRowHeight: function (jq, _75b) {
            return jq.each(function () {
                _6f0(this, _75b);
            });
        },
        loadData: function (jq, data) {
            return jq.each(function () {
                _705(this, data.parent, data);
            });
        },
        load: function (jq, _75c) {
            return jq.each(function () {
                $(this).treegrid("options").pageNumber = 1;
                $(this).treegrid("getPager").pagination({
                    pageNumber: 1
                });
                $(this).treegrid("reload", _75c);
            });
        },
        reload: function (jq, id) {
            return jq.each(function () {
                var opts = $(this).treegrid("options");
                var _75d = typeof id == "object" ? id : $.extend({}, opts.queryParams, {
                    id: id
                });
                if (_75d.id) {
                    var node = $(this).treegrid("find", _75d.id);
                    if (node.children) {
                        node.children.splice(0, node.children.length);
                    }
                    opts.queryParams = _75d;
                    var tr = opts.finder.getTr(this, _75d.id);
                    tr.next("tr.treegrid-tr-tree").remove();
                    tr.find("span.tree-hit").removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
                    _732(this, _75d.id);
                } else {
                    _6ef(this, null, _75d);
                }
            });
        },
        reloadFooter: function (jq, _75e) {
            return jq.each(function () {
                var opts = $.data(this, "treegrid").options;
                var dc = $.data(this, "datagrid").dc;
                if (_75e) {
                    $.data(this, "treegrid").footer = _75e;
                }
                if (opts.showFooter) {
                    opts.view.renderFooter.call(opts.view, this, dc.footer1, true);
                    opts.view.renderFooter.call(opts.view, this, dc.footer2, false);
                    if (opts.view.onAfterRender) {
                        opts.view.onAfterRender.call(opts.view, this);
                    }
                    $(this).treegrid("fixRowHeight");
                }
            });
        },
        getData: function (jq) {
            return $.data(jq[0], "treegrid").data;
        },
        getFooterRows: function (jq) {
            return $.data(jq[0], "treegrid").footer;
        },
        getRoot: function (jq) {
            return _716(jq[0]);
        },
        getRoots: function (jq) {
            return _718(jq[0]);
        },
        getParent: function (jq, id) {
            return _71a(jq[0], id);
        },
        getChildren: function (jq, id) {
            return _6f4(jq[0], id);
        },
        getSelected: function (jq) {
            return _725(jq[0]);
        },
        getSelections: function (jq) {
            return _727(jq[0]);
        },
        getLevel: function (jq, id) {
            return _72a(jq[0], id);
        },
        find: function (jq, id) {
            return find(jq[0], id);
        },
        isLeaf: function (jq, id) {
            var opts = $.data(jq[0], "treegrid").options;
            var tr = opts.finder.getTr(jq[0], id);
            var hit = tr.find("span.tree-hit");
            return hit.length == 0;
        },
        select: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("selectRow", id);
            });
        },
        unselect: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("unselectRow", id);
            });
        },
        collapse: function (jq, id) {
            return jq.each(function () {
                _72f(this, id);
            });
        },
        expand: function (jq, id) {
            return jq.each(function () {
                _732(this, id);
            });
        },
        toggle: function (jq, id) {
            return jq.each(function () {
                _6fd(this, id);
            });
        },
        collapseAll: function (jq, id) {
            return jq.each(function () {
                _73a(this, id);
            });
        },
        expandAll: function (jq, id) {
            return jq.each(function () {
                _73e(this, id);
            });
        },
        expandTo: function (jq, id) {
            return jq.each(function () {
                _742(this, id);
            });
        },
        append: function (jq, _75f) {
            return jq.each(function () {
                _745(this, _75f);
            });
        },
        insert: function (jq, _760) {
            return jq.each(function () {
                _749(this, _760);
            });
        },
        remove: function (jq, id) {
            return jq.each(function () {
                _751(this, id);
            });
        },
        pop: function (jq, id) {
            var row = jq.treegrid("find", id);
            jq.treegrid("remove", id);
            return row;
        },
        refresh: function (jq, id) {
            return jq.each(function () {
                var opts = $.data(this, "treegrid").options;
                opts.view.refreshRow.call(opts.view, this, id);
            });
        },
        update: function (jq, _761) {
            return jq.each(function () {
                var opts = $.data(this, "treegrid").options;
                opts.view.updateRow.call(opts.view, this, _761.id, _761.row);
            });
        },
        beginEdit: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("beginEdit", id);
                $(this).treegrid("fixRowHeight", id);
            });
        },
        endEdit: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("endEdit", id);
            });
        },
        cancelEdit: function (jq, id) {
            return jq.each(function () {
                $(this).datagrid("cancelEdit", id);
            });
        }
    };
    $.fn.treegrid.parseOptions = function (_762) {
        return $.extend({}, $.fn.datagrid.parseOptions(_762), $.parser.parseOptions(_762, ["treeField", {
            animate: "boolean"
        }]));
    };
    var _763 = $.extend({}, $.fn.datagrid.defaults.view, {
        render: function (_764, _765, _766) {
            var opts = $.data(_764, "treegrid").options;
            var _767 = $(_764).datagrid("getColumnFields", _766);
            var _768 = $.data(_764, "datagrid").rowIdPrefix;
            if (_766) {
                if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))) {
                    return;
                }
            }
            var _769 = 0;
            var view = this;
            var _76a = _76b(_766, this.treeLevel, this.treeNodes);
            $(_765).append(_76a.join(""));

            function _76b(_76c, _76d, _76e) {
                var _76f = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
                for (var i = 0; i < _76e.length; i++) {
                    var row = _76e[i];
                    if (row.state != "open" && row.state != "closed") {
                        row.state = "open";
                    }
                    var cls = (_769++ % 2 && opts.striped) ? "class=\"datagrid-row datagrid-row-alt\"" : "class=\"datagrid-row\"";
                    var _770 = opts.rowStyler ? opts.rowStyler.call(_764, row) : "";
                    var _771 = _770 ? "style=\"" + _770 + "\"" : "";
                    var _772 = _768 + "-" + (_76c ? 1 : 2) + "-" + row[opts.idField];
                    _76f.push("<tr id=\"" + _772 + "\" node-id=\"" + row[opts.idField] + "\" " + cls + " " + _771 + ">");
                    _76f = _76f.concat(view.renderRow.call(view, _764, _767, _76c, _76d, row));
                    _76f.push("</tr>");
                    if (row.children && row.children.length) {
                        var tt = _76b(_76c, _76d + 1, row.children);
                        var v = row.state == "closed" ? "none" : "block";
                        _76f.push("<tr class=\"treegrid-tr-tree\"><td style=\"border:0px\" colspan=" + (_767.length + (opts.rownumbers ? 1 : 0)) + "><div style=\"display:" + v + "\">");
                        _76f = _76f.concat(tt);
                        _76f.push("</div></td></tr>");
                    }
                }
                _76f.push("</tbody></table>");
                return _76f;
            };
        },
        renderFooter: function (_773, _774, _775) {
            var opts = $.data(_773, "treegrid").options;
            var rows = $.data(_773, "treegrid").footer || [];
            var _776 = $(_773).datagrid("getColumnFields", _775);
            var _777 = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                row[opts.idField] = row[opts.idField] || ("foot-row-id" + i);
                _777.push("<tr class=\"datagrid-row\" node-id=" + row[opts.idField] + ">");
                _777.push(this.renderRow.call(this, _773, _776, _775, 0, row));
                _777.push("</tr>");
            }
            _777.push("</tbody></table>");
            $(_774).html(_777.join(""));
        },
        renderRow: function (_778, _779, _77a, _77b, row) {
            var opts = $.data(_778, "treegrid").options;
            var cc = [];
            if (_77a && opts.rownumbers) {
                cc.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">0</div></td>");
            }
            for (var i = 0; i < _779.length; i++) {
                var _77c = _779[i];
                var col = $(_778).datagrid("getColumnOption", _77c);
                if (col) {
                    var _77d = col.styler ? (col.styler(row[_77c], row) || "") : "";
                    var _77e = col.hidden ? "style=\"display:none;" + _77d + "\"" : (_77d ? "style=\"" + _77d + "\"" : "");
                    cc.push("<td field=\"" + _77c + "\" " + _77e + ">");
                    if (col.checkbox) {
                        var _77e = "";
                    } else {
                        var _77e = _77d;
                        if (col.align) {
                            _77e += ";text-align:" + col.align + ";";
                        }
                        if (!opts.nowrap) {
                            _77e += ";white-space:normal;height:auto;";
                        } else {
                            if (opts.autoRowHeight) {
                                _77e += ";height:auto;";
                            }
                        }
                    }
                    cc.push("<div style=\"" + _77e + "\" ");
                    if (col.checkbox) {
                        cc.push("class=\"datagrid-cell-check ");
                    } else {
                        cc.push("class=\"datagrid-cell " + col.cellClass);
                    }
                    cc.push("\">");
                    if (col.checkbox) {
                        if (row.checked) {
                            cc.push("<input type=\"checkbox\" checked=\"checked\"");
                        } else {
                            cc.push("<input type=\"checkbox\"");
                        }
                        cc.push(" name=\"" + _77c + "\" value=\"" + (row[_77c] != undefined ? row[_77c] : "") + "\"/>");
                    } else {
                        var val = null;
                        if (col.formatter) {
                            val = col.formatter(row[_77c], row);
                        } else {
                            val = row[_77c];
                        }
                        if (_77c == opts.treeField) {
                            for (var j = 0; j < _77b; j++) {
                                cc.push("<span class=\"tree-indent\"></span>");
                            }
                            if (row.state == "closed") {
                                cc.push("<span class=\"tree-hit tree-collapsed\"></span>");
                                cc.push("<span class=\"tree-icon tree-folder " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                            } else {
                                if (row.children && row.children.length) {
                                    cc.push("<span class=\"tree-hit tree-expanded\"></span>");
                                    cc.push("<span class=\"tree-icon tree-folder tree-folder-open " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                                } else {
                                    cc.push("<span class=\"tree-indent\"></span>");
                                    cc.push("<span class=\"tree-icon tree-file " + (row.iconCls ? row.iconCls : "") + "\"></span>");
                                }
                            }
                            cc.push("<span class=\"tree-title\">" + val + "</span>");
                        } else {
                            cc.push(val);
                        }
                    }
                    cc.push("</div>");
                    cc.push("</td>");
                }
            }
            return cc.join("");
        },
        refreshRow: function (_77f, id) {
            this.updateRow.call(this, _77f, id, {});
        },
        updateRow: function (_780, id, row) {
            var opts = $.data(_780, "treegrid").options;
            var _781 = $(_780).treegrid("find", id);
            $.extend(_781, row);
            var _782 = $(_780).treegrid("getLevel", id) - 1;
            var _783 = opts.rowStyler ? opts.rowStyler.call(_780, _781) : "";

            function _784(_785) {
                var _786 = $(_780).treegrid("getColumnFields", _785);
                var tr = opts.finder.getTr(_780, id, "body", (_785 ? 1 : 2));
                var _787 = tr.find("div.datagrid-cell-rownumber").html();
                var _788 = tr.find("div.datagrid-cell-check input[type=checkbox]").is(":checked");
                tr.html(this.renderRow(_780, _786, _785, _782, _781));
                tr.attr("style", _783 || "");
                tr.find("div.datagrid-cell-rownumber").html(_787);
                if (_788) {
                    tr.find("div.datagrid-cell-check input[type=checkbox]")._propAttr("checked", true);
                }
            };
            _784.call(this, true);
            _784.call(this, false);
            $(_780).treegrid("fixRowHeight", id);
        },
        onBeforeRender: function (_789, _78a, data) {
            if ($.isArray(_78a)) {
                data = {
                    total: _78a.length,
                    rows: _78a
                };
                _78a = null;
            }
            if (!data) {
                return false;
            }
            var _78b = $.data(_789, "treegrid");
            var opts = _78b.options;
            if (data.length == undefined) {
                if (data.footer) {
                    _78b.footer = data.footer;
                }
                if (data.total) {
                    _78b.total = data.total;
                }
                data = this.transfer(_789, _78a, data.rows);
            } else {
                function _78c(_78d, _78e) {
                    for (var i = 0; i < _78d.length; i++) {
                        var row = _78d[i];
                        row._parentId = _78e;
                        if (row.children && row.children.length) {
                            _78c(row.children, row[opts.idField]);
                        }
                    }
                };
                _78c(data, _78a);
            }
            var node = find(_789, _78a);
            if (node) {
                if (node.children) {
                    node.children = node.children.concat(data);
                } else {
                    node.children = data;
                }
            } else {
                _78b.data = _78b.data.concat(data);
            }
            this.sort(_789, data);
            this.treeNodes = data;
            this.treeLevel = $(_789).treegrid("getLevel", _78a);
        },
        sort: function (_78f, data) {
            var opts = $.data(_78f, "treegrid").options;
            if (!opts.remoteSort && opts.sortName) {
                var _790 = opts.sortName.split(",");
                var _791 = opts.sortOrder.split(",");
                _792(data);
            }

            function _792(rows) {
                rows.sort(function (r1, r2) {
                    var r = 0;
                    for (var i = 0; i < _790.length; i++) {
                        var sn = _790[i];
                        var so = _791[i];
                        var col = $(_78f).treegrid("getColumnOption", sn);
                        var _793;
	                    try {
	                        _793 = col.sorter || function (a, b) {
		                        return a == b ? 0 : (a > b ? 1 : -1);
		                    };
	                    } catch(e) {
		                    _793 = function (a, b) {
		                        return a == b ? 0 : (a > b ? 1 : -1);
		                    };
	                    }
	                    
                        r = _793(r1[sn], r2[sn]) * (so == "asc" ? 1 : -1);
                        if (r != 0) {
                            return r;
                        }
                    }
                    return r;
                });
                for (var i = 0; i < rows.length; i++) {
                    var _794 = rows[i].children;
                    if (_794 && _794.length) {
                        _792(_794);
                    }
                }
            };
        },
        transfer: function (_795, _796, data) {
            var opts = $.data(_795, "treegrid").options;
            var rows = [];
            for (var i = 0; i < data.length; i++) {
                rows.push(data[i]);
            }
            var _797 = [];
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                if (!_796) {
                    if (!row._parentId) {
                        _797.push(row);
                        rows.splice(i, 1);
                        i--;
                    }
                } else {
                    if (row._parentId == _796) {
                        _797.push(row);
                        rows.splice(i, 1);
                        i--;
                    }
                }
            }
            var toDo = [];
            for (var i = 0; i < _797.length; i++) {
                toDo.push(_797[i]);
            }
            while (toDo.length) {
                var node = toDo.shift();
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    if (row._parentId == node[opts.idField]) {
                        if (node.children) {
                            node.children.push(row);
                        } else {
                            node.children = [row];
                        }
                        toDo.push(row);
                        rows.splice(i, 1);
                        i--;
                    }
                }
            }
            return _797;
        }
    });
    $.fn.treegrid.defaults = $.extend({}, $.fn.datagrid.defaults, {
        treeField: null,
        animate: false,
        singleSelect: true,
        view: _763,
        loader: function (_798, _799, _79a) {
            var opts = $(this).treegrid("options");
            if (!opts.url) {
                return false;
            }
            $.ajax({
                type: opts.method,
                url: opts.url,
                data: _798,
                dataType: "json",
                success: function (data) {
                    _799(data);
                },
                error: function () {
                    _79a.apply(this, arguments);
                }
            });
        },
        loadFilter: function (data, _79b) {
            return data;
        },
        finder: {
            getTr: function (_79c, id, type, _79d) {
                type = type || "body";
                _79d = _79d || 0;
                var dc = $.data(_79c, "datagrid").dc;
                if (_79d == 0) {
                    var opts = $.data(_79c, "treegrid").options;
                    var tr1 = opts.finder.getTr(_79c, id, type, 1);
                    var tr2 = opts.finder.getTr(_79c, id, type, 2);
                    return tr1.add(tr2);
                } else {
                    if (type == "body") {
                        var tr = $("#" + $.data(_79c, "datagrid").rowIdPrefix + "-" + _79d + "-" + id);
                        if (!tr.length) {
                            tr = (_79d == 1 ? dc.body1 : dc.body2).find("tr[node-id=\"" + id + "\"]");
                        }
                        return tr;
                    } else {
                        if (type == "footer") {
                            return (_79d == 1 ? dc.footer1 : dc.footer2).find("tr[node-id=" + id + "]");
                        } else {
                            if (type == "selected") {
                                return (_79d == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-selected");
                            } else {
                                if (type == "highlight") {
                                    return (_79d == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row-over");
                                } else {
                                    if (type == "checked") {
                                        return (_79d == 1 ? dc.body1 : dc.body2).find("tr.datagrid-row:has(div.datagrid-cell-check input:checked)");
                                    } else {
                                        if (type == "last") {
                                            return (_79d == 1 ? dc.body1 : dc.body2).find("tr:last[node-id]");
                                        } else {
                                            if (type == "allbody") {
                                                return (_79d == 1 ? dc.body1 : dc.body2).find("tr[node-id]");
                                            } else {
                                                if (type == "allfooter") {
                                                    return (_79d == 1 ? dc.footer1 : dc.footer2).find("tr[node-id]");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            getRow: function (_79e, p) {
                var id = (typeof p == "object") ? p.attr("node-id") : p;
                return $(_79e).treegrid("find", id);
            }
        },
        onBeforeLoad: function (row, _79f) {},
        onLoadSuccess: function (row, data) {},
        onLoadError: function () {},
        onBeforeCollapse: function (row) {},
        onCollapse: function (row) {},
        onBeforeExpand: function (row) {},
        onExpand: function (row) {},
        onClickRow: function (row) {},
        onDblClickRow: function (row) {},
        onClickCell: function (_7a0, row) {},
        onDblClickCell: function (_7a1, row) {},
        onContextMenu: function (e, row) {},
        onBeforeEdit: function (row) {},
        onAfterEdit: function (row, _7a2) {},
        onCancelEdit: function (row) {}
    });
})(jQuery);
(function ($) {
    function _7a3(_7a4, _7a5) {
        var opts = $.data(_7a4, "combo").options;
        var _7a6 = $.data(_7a4, "combo").combo;
        var _7a7 = $.data(_7a4, "combo").panel;
        if (_7a5) {
            opts.width = _7a5;
        }
        if (isNaN(opts.width)) {
            var c = $(_7a4).clone();
            c.css("visibility", "hidden");
            c.appendTo("body");
            opts.width = c.outerWidth();
            c.remove();
        }
        _7a6.appendTo("body");
        var _7a8 = _7a6.find("input.combo-text");
        var _7a9 = _7a6.find(".combo-arrow");
        var _7aa = opts.hasDownArrow ? _7a9._outerWidth() : 0;
        _7a6._outerWidth(opts.width)._outerHeight(opts.height);
        _7a8._outerWidth(_7a6.width() - _7aa);
        _7a8.css({
            height: _7a6.height() + "px",
            lineHeight: _7a6.height() + "px"
        });
        _7a9._outerHeight(_7a6.height());
        _7a7.panel("resize", {
            width: (opts.panelWidth ? opts.panelWidth : _7a6.outerWidth()),
            height: opts.panelHeight
        });
        _7a6.insertAfter(_7a4);
    };

    function init(_7ab) {
        $(_7ab).addClass("combo-f").hide();
        var span = $("<span class=\"combo\">" + "<input type=\"text\" class=\"combo-text\" autocomplete=\"off\">" + "<span><span class=\"combo-arrow\"></span></span>" + "<input type=\"hidden\" class=\"combo-value\">" + "</span>").insertAfter(_7ab);
        var _7ac = $("<div class=\"combo-panel\"></div>").appendTo("body");
        _7ac.panel({
            doSize: false,
            closed: true,
            cls: "combo-p",
            style: {
                position: "absolute",
                zIndex: 10
            },
            onOpen: function () {
                $(this).panel("resize");
            },
            onClose: function () {
                var _7ad = $.data(_7ab, "combo");
                if (_7ad) {
                    _7ad.options.onHidePanel.call(_7ab);
                }
            }
        });
        var name = $(_7ab).attr("name");
        if (name) {
            span.find("input.combo-value").attr("name", name);
            $(_7ab).removeAttr("name").attr("comboName", name);
        }
        return {
            combo: span,
            panel: _7ac
        };
    };

    function _7ae(_7af) {
        var _7b0 = $.data(_7af, "combo");
        var opts = _7b0.options;
        var _7b1 = _7b0.combo;
        if (opts.hasDownArrow) {
            _7b1.find(".combo-arrow").show();
        } else {
            _7b1.find(".combo-arrow").hide();
        }
        _7b2(_7af, opts.disabled);
        _7b3(_7af, opts.readonly);
    };

    function _7b4(_7b5) {
        var _7b6 = $.data(_7b5, "combo");
        
        if(oUtil.isNull(_7b6)) return;
        
        var _7b7 = _7b6.combo.find("input.combo-text");
        _7b7.validatebox("destroy");
        _7b6.panel.panel("destroy");
        _7b6.combo.remove();
        $(_7b5).remove();
    };

    function _7b8(_7b9) {
        var _7ba = $.data(_7b9, "combo");
        if(oUtil.isNull(_7ba)) return;
        var opts = _7ba.options;
        var _7bb = _7ba.panel;
        var _7bc = _7ba.combo;
        var _7bd = _7bc.find(".combo-text");
        var _7be = _7bc.find(".combo-arrow");
        $(document).unbind(".combo").bind("mousedown.combo", function (e) {
            var p = $(e.target).closest("span.combo,div.combo-panel");
            if (p.length) {
                return;
            }
            $("body>div.combo-p>div.combo-panel:visible").panel("close");
        });
        _7bd.unbind(".combo");
        _7be.unbind(".combo");
        if (!opts.disabled && !opts.readonly) {
            _7bd.bind("mousedown.combo", function (e) {
                var p = $(this).closest("div.combo-panel");
                $("div.combo-panel").not(_7bb).not(p).panel("close");
                e.stopPropagation();
            }).bind("keydown.combo", function (e) {
                switch (e.keyCode) {
                case 38:
                    opts.keyHandler.up.call(_7b9);
                    break;
                case 40:
                    opts.keyHandler.down.call(_7b9);
                    break;
                case 13:
                    e.preventDefault();
                    opts.keyHandler.enter.call(_7b9);
                    return false;
                case 9:
                case 27:
                    _7c5(_7b9);
                    break;
                default:
                    if (opts.editable) {
                        if (_7ba.timer) {
                            clearTimeout(_7ba.timer);
                        }
                        _7ba.timer = setTimeout(function () {
                            var q = _7bd.val();
                            if (_7ba.previousValue != q) {
                                _7ba.previousValue = q;
                                $(_7b9).combo("showPanel");
                                opts.keyHandler.query.call(_7b9, _7bd.val());
                                _7c8(_7b9, true);
                            }
                        }, opts.delay);
                    }
                }
            });
            _7be.bind("click.combo", function () {
                if (_7bb.is(":visible")) {
                    _7c5(_7b9);
                } else {
                    var p = $(this).closest("div.combo-panel");
                    $("div.combo-panel:visible").not(p).panel("close");
                    $(_7b9).combo("showPanel");
                }
                _7bd.focus();
            }).bind("mouseenter.combo", function () {
                $(this).addClass("combo-arrow-hover");
            }).bind("mouseleave.combo", function () {
                $(this).removeClass("combo-arrow-hover");
            });
        }
    };

    function _7bf(_7c0) {
        var opts = $.data(_7c0, "combo").options;
        var _7c1 = $.data(_7c0, "combo").combo;
        var _7c2 = $.data(_7c0, "combo").panel;
        
        if ($.fn.window) {
            _7c2.panel("panel").css("z-index", $.fn.window.defaults.zIndex++);
        }
        _7c2.panel("move", {
            left: _7c1.offset().left,
            top: _7c3()
        });
        if (_7c2.panel("options").closed) {
            _7c2.panel("open");
            opts.onShowPanel.call(_7c0);
        }
        (function () {
            if (_7c2.is(":visible")) {
                _7c2.panel("move", {
                    left: _7c4(),
                    top: _7c3()
                });
                setTimeout(arguments.callee, 200);
            }
        })();

        function _7c4() {
            var left = _7c1.offset().left;
            if (left + _7c2._outerWidth() > $(window)._outerWidth() + $(document).scrollLeft()) {
                left = $(window)._outerWidth() + $(document).scrollLeft() - _7c2._outerWidth();
            }
            if (left < 0) {
                left = 0;
            }
            return left;
        };

        function _7c3() {
            var top = _7c1.offset().top + _7c1._outerHeight();
            if (top + _7c2._outerHeight() > $(window)._outerHeight() + $(document).scrollTop()) {
                top = _7c1.offset().top - _7c2._outerHeight();
            }
            if (top < $(document).scrollTop()) {
                top = _7c1.offset().top + _7c1._outerHeight();
            }
            return top;
        };
        
        _7c1.find(".combo-text").focus(); // 콤보박스 panel이 보일때 text박스에 커서가 위치하도록 추가(YNI-Maker, 2017.07.18)
    };

    function _7c5(_7c6) {
        var _7c7 = $.data(_7c6, "combo").panel;
        _7c7.panel("close");
    };

    function _7c8(_7c9, doit) {
        var opts = $.data(_7c9, "combo").options;
        var _7ca = $.data(_7c9, "combo").combo.find("input.combo-text");
        _7ca.validatebox($.extend({}, opts, {
            deltaX: (opts.hasDownArrow ? opts.deltaX : (opts.deltaX > 0 ? 1 : -1))
        }));
        
        if (doit) {
            _7ca.validatebox("validate");
        }
    };

    function _7b2(_7cb, _7cc) {
        var _7cd = $.data(_7cb, "combo");
        var opts = _7cd.options;
        var _7ce = _7cd.combo;
        if (_7cc) {
            opts.disabled = true;
            $(_7cb).attr("disabled", true);
            _7ce.find(".combo-value").attr("disabled", true);
            _7ce.find(".combo-text").attr("disabled", true);
            _7ce.closest("span.combo").css("border-color", "#d2d2d2");
        } else {
            opts.disabled = false;
            $(_7cb).removeAttr("disabled");
            _7ce.find(".combo-value").removeAttr("disabled");
            _7ce.find(".combo-text").removeAttr("disabled");
            _7ce.closest("span.combo").css("border-color", "#767676");
        }
    };

    function _7b3(_7cf, mode) {
    	var _7d0 = $.data(_7cf, "combo");
    	
    	if(oUtil.isNull(_7d0)) return;  // jong
    	
    	var opts = _7d0.options;
        opts.readonly = mode == undefined ? false : mode;
        
        // readonly시 combo와 caledar의 css를 변경함(YNI-Maker, 2016-05-04) 
        if(opts.readonly) {
        	_7d0.combo.find(".combo-text").attr("readonly", opts.readonly ? true : (!opts.editable));
        	_7d0.combo.css("border-color", "#fff");
        	_7d0.combo.find(".combo-arrow").hide();
        } else if(!opts.readonly) {
        	_7d0.combo.find(".combo-text").attr("readonly", opts.readonly ? true : (!opts.editable));
        	_7d0.combo.css("border-color", "");
        	_7d0.combo.find(".combo-arrow").show();
        }
    };

    function _7d1(_7d2) {
        var _7d3 = $.data(_7d2, "combo");
        var opts = _7d3.options;
        var _7d4 = _7d3.combo;	
        if (opts.multiple) {
            _7d4.find("input.combo-value").remove();
        } else {
            _7d4.find("input.combo-value").val("");
        }
        _7d4.find("input.combo-text").val("");
    };

    function _7d5(_7d6) {
        var _7d7 = $.data(_7d6, "combo").combo;
        return _7d7.find("input.combo-text").val();
    };

    function _7d8(_7d9, text) {
        var _7da = $.data(_7d9, "combo").combo;
        _7da.find("input.combo-text").val(text);
        _7c8(_7d9, true);
        $.data(_7d9, "combo").previousValue = text;
    };

    function _7db(_7dc) {
        var _7dd = [];
        var _7de = $.data(_7dc, "combo").combo;
        _7de.find("input.combo-value").each(function () {
            _7dd.push($(this).val());
        });
        return _7dd;
    };

    function _7df(_7e0, _7e1) {
        var opts = $.data(_7e0, "combo").options;
        var _7e2 = _7db(_7e0);
        var _7e3 = $.data(_7e0, "combo").combo;
        _7e3.find("input.combo-value").remove();
        var name = $(_7e0).attr("comboName");
        for (var i = 0; i < _7e1.length; i++) {
            var _7e4 = $("<input type=\"hidden\" class=\"combo-value\">").appendTo(_7e3);
            if (name) {
                _7e4.attr("name", name);
            }
            _7e4.val(_7e1[i]);
        }
        var tmp = [];
        for (var i = 0; i < _7e2.length; i++) {
            tmp[i] = _7e2[i];
        }
        var aa = [];
        for (var i = 0; i < _7e1.length; i++) {
            for (var j = 0; j < tmp.length; j++) {
                if (_7e1[i] == tmp[j]) {
                    aa.push(_7e1[i]);
                    tmp.splice(j, 1);
                    break;
                }
            }
        }
        if (aa.length != _7e1.length || _7e1.length != _7e2.length) {
            if (opts.multiple) {
                opts.onChange.call(_7e0, _7e1, _7e2);
            } else {
                opts.onChange.call(_7e0, _7e1[0], _7e2[0]);
            }
        }
    };

    function _7e5(_7e6) {
        var _7e7 = _7db(_7e6);
        return _7e7[0];
    };

    function _7e8(_7e9, _7ea) {
        _7df(_7e9, [_7ea]);
    };

    function _7eb(_7ec) {
        var opts = $.data(_7ec, "combo").options;
        var fn = opts.onChange;
        opts.onChange = function () {};
        if (opts.multiple) {
            if (opts.value) {
                if (typeof opts.value == "object") {
                    _7df(_7ec, opts.value);
                } else {
                    _7e8(_7ec, opts.value);
                }
            } else {
                _7df(_7ec, []);
            }
            opts.originalValue = _7db(_7ec);
        } else {
            _7e8(_7ec, opts.value);
            opts.originalValue = opts.value;
        }
		opts.onChange = fn;
    };
    $.fn.combo = function (_7ed, _7ee) {
        if (typeof _7ed == "string") {
            return $.fn.combo.methods[_7ed](this, _7ee);
        }
        _7ed = _7ed || {};
        return this.each(function () {
            var _7ef = $.data(this, "combo");
            if (_7ef) {
                $.extend(_7ef.options, _7ed);
            } else {
                var r = init(this);
                _7ef = $.data(this, "combo", {
                    options: $.extend({}, $.fn.combo.defaults, $.fn.combo.parseOptions(this), _7ed),
                    combo: r.combo,
                    panel: r.panel,
                    previousValue: null
                });
                $(this).removeAttr("disabled");
            }
        	_7ae(this);
            _7a3(this);
            _7b8(this);
            _7c8(this);
            _7eb(this);
        });
    };
    $.fn.combo.methods = {
        options: function (jq) {
            return $.data(jq[0], "combo").options;
        },
        panel: function (jq) {
            return $.data(jq[0], "combo").panel;
        },
        textbox: function (jq) {
            return $.data(jq[0], "combo").combo.find("input.combo-text");
        },
        destroy: function (jq) {
            return jq.each(function () {
                _7b4(this);
            });
        },
        resize: function (jq, _7f0) {
            return jq.each(function () {
                _7a3(this, _7f0);
            });
        },
        showPanel: function (jq) {
            return jq.each(function () {
                _7bf(this);
            });
        },
        hidePanel: function (jq) {
            return jq.each(function () {
                _7c5(this);
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                _7b2(this, true);
                _7b8(this);
            });
        },
        enable: function (jq) {
            return jq.each(function () {
                _7b2(this, false);
                _7b8(this);
            });
        },
        readonly: function (jq, mode) {
            return jq.each(function () {
                _7b3(this, mode);
                _7b8(this);
            });
        },
        validate: function (jq) {
            return jq.each(function () {
                _7c8(this, true);
            });
        },
        isValid: function (jq) {
            var _7f1 = $.data(jq[0], "combo").combo.find("input.combo-text");
            return _7f1.validatebox("isValid");
        },
        clear: function (jq) {
            return jq.each(function () {
                _7d1(this);
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $.data(this, "combo").options;
                if (opts.multiple) {
                    $(this).combo("setValues", opts.originalValue);
                } else {
                	$(this).combo("setValue", opts.originalValue);
                }
            });
        },
        getText: function (jq) {
            return _7d5(jq[0]);
        },
        setText: function (jq, text) {
            return jq.each(function () {
                _7d8(this, text);
            });
        },
        getValues: function (jq) {
            return _7db(jq[0]);
        },
        setValues: function (jq, _7f2) {
            return jq.each(function () {
                _7df(this, _7f2);
            });
        },
        getValue: function (jq) {
            return _7e5(jq[0]);
        },
        setValue: function (jq, _7f3) {
            return jq.each(function () {
                _7e8(this, _7f3);
            });
        }
    };
    $.fn.combo.parseOptions = function (_7f4) {
        var t = $(_7f4);
        return $.extend({}, $.fn.validatebox.parseOptions(_7f4), $.parser.parseOptions(_7f4, ["width", "height", "separator", {
            panelWidth: "number",
            editable: "boolean",
            hasDownArrow: "boolean",
            delay: "number",
            selectOnNavigation: "boolean"
        }]), {
            panelHeight: (t.attr("panelHeight") == "auto" ? "auto" : parseInt(t.attr("panelHeight")) || undefined),
            multiple: (t.attr("multiple") ? true : undefined),
            disabled: (t.attr("disabled") ? true : undefined),
            readonly: (t.attr("readonly") ? true : undefined),
            value: (t.val() || undefined)
        });
    };
    $.fn.combo.defaults = $.extend({}, $.fn.validatebox.defaults, {
        width: "auto",
        height: 20, // 콤보박스 높이 설정
        panelWidth: null,
        panelHeight: 200,
        multiple: false,
        selectOnNavigation: true,
        separator: ",",
        editable: true,
        disabled: false,
        readonly: false,
        hasDownArrow: true,
        value: "",
        delay: 200,
        deltaX: 19,
        keyHandler: {
            up: function (e) {},
            down: function (e) {},
            enter: function (e) {},
            query: function (q) {}
        },
        onShowPanel: function () {},
        onHidePanel: function () {},
        onChange: function (_7f5, _7f6) {}
    });
})(jQuery);
(function ($) {
    function _7f7(data, key, _7f8) {
        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            if (item[key] == _7f8) {
                return item;
            }
        }
        return null;
    };

    function _7f9(_7fa, _7fb) {
        var _7fc = $(_7fa).combo("panel");
        var item = _7fc.find("div.combobox-item[value=\"" + _7fb + "\"]");
        if (item.length) {
            if (item.position().top <= 0) {
                var h = _7fc.scrollTop() + item.position().top;
                _7fc.scrollTop(h);
            } else {
                if (item.position().top + item.outerHeight() > _7fc.height()) {
                    var h = _7fc.scrollTop() + item.position().top + item.outerHeight() - _7fc.height();
                    _7fc.scrollTop(h);
                }
            }
        }
    };

    function nav(_7fd, dir) {
        var opts = $(_7fd).combobox("options");
        var _7fe = $(_7fd).combobox("panel");
        var item = _7fe.children("div.combobox-item-hover");
        if (!item.length) {
            item = _7fe.children("div.combobox-item-selected");
        }
        item.removeClass("combobox-item-hover");
        if (!item.length) {
            item = _7fe.children("div.combobox-item:visible:" + (dir == "next" ? "first" : "last"));
        } else {
            if (dir == "next") {
                item = item.nextAll("div.combobox-item:visible:first");
                if (!item.length) {
                    item = _7fe.children("div.combobox-item:visible:first");
                }
            } else {
                item = item.prevAll("div.combobox-item:visible:first");
                if (!item.length) {
                    item = _7fe.children("div.combobox-item:visible:last");
                }
            }
        }
        if (item.length) {
            item.addClass("combobox-item-hover");
            _7f9(_7fd, item.attr("value"));
            if (opts.selectOnNavigation) {
                _7ff(_7fd, item.attr("value"));
            }
        }
    };

    function _7ff(_800, _801) {
        if(oUtil.isNull($.data(_800, "combobox"))) return;
        var opts = $.data(_800, "combobox").options;
        var data = $.data(_800, "combobox").data;
        if (opts.multiple) {
            var _802 = $(_800).combo("getValues");
            for (var i = 0; i < _802.length; i++) {
                if (_802[i] == _801) {
                    return;
                }
            }
            _802.push(_801);
            _803(_800, _802);
        } else {
            _803(_800, [_801]);
        }
        
        var item = _7f7(data, opts.valueField, _801);
        if (item) {
            opts.onSelect.call(_800, item);
        }
    };

    function _804(_805, _806) {
        var _807 = $.data(_805, "combobox");
        var opts = _807.options;
        var _808 = $(_805).combo("getValues");
        var _809 = -1;
        
        // Multi 선택 시 기 선택된 것이 선택되면 선택이 해제될 수 있도록 변경(YNI-Master, 2014.03.28)
        if (opts.multiple) {
        	var spt = new String(opts.separator);
        	var _808_array = new String(_808).split(spt);
        	
        	for(var i = 0; i < _808_array.length; i++) {
        		if(_808_array[i] == _806) {
        			_809 = i;
        		}
        	}
        } else {
        	_809 = _808.indexOf(_806 + "");
        } // 종료
        
        if (_809 >= 0) {
            _808.splice(_809, 1);
            _803(_805, _808);
        }
        var item = _7f7(_807.data, opts.valueField, _806);
        if (item) {
            opts.onUnselect.call(_805, item);
        }
    };

    function _803(_80a, _80b, _80c) {
        var opts = $.data(_80a, "combobox").options;
        var data = $.data(_80a, "combobox").data;
        var _80d = $(_80a).combo("panel");
        _80d.find("div.combobox-item-selected").removeClass("combobox-item-selected");
        var vv = [],
            ss = [];
        for (var i = 0; i < _80b.length; i++) {
            var v = _80b[i];
            var s = v;
            var item = _7f7(data, opts.valueField, v);
            if (item) {
                s = item[opts.textField];
            }
            vv.push(v);
            ss.push(s);
            _80d.find("div.combobox-item[value=\"" + v + "\"]").addClass("combobox-item-selected");
        }
        
        $(_80a).combo("setValues", vv);
        if (!_80c) {
            $(_80a).combo("setText", ss.join(opts.separator));
        }
    };

    function _80e(_80f, data, _810) {
        var _811 = $.data(_80f, "combobox");
        if(oUtil.isNull(_811) || oUtil.isNull(_811.options)) return;
        var opts = _811.options;
        _811.data = opts.loadFilter.call(_80f, data);
        data = _811.data;
        var _812 = $(_80f).combobox("getValues");
        var dd = [];
        var _813 = undefined;
        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            var v = item[opts.valueField];
            var s = item[opts.textField];
            var g = item[opts.groupField];
            if (g) {
                if (_813 != g) {
                    _813 = g;
                    dd.push("<div class=\"combobox-group\" value=\"" + g + "\">");
                    dd.push(opts.groupFormatter ? opts.groupFormatter.call(_80f, g) : g);
                    dd.push("</div>");
                }
            } else {
                _813 = undefined;
            }
            dd.push("<div class=\"combobox-item" + (g ? " combobox-gitem" : "") + "\" value=\"" + v + "\"" + (g ? " group=\"" + g + "\"" : "") + ">");
            dd.push(opts.formatter ? opts.formatter.call(_80f, item) : s);
            dd.push("</div>");
            if (item["selected"]) {
                (function () {
                    for (var i = 0; i < _812.length; i++) {
                        if (v == _812[i]) {
                            return;
                        }
                    }
                    _812.push(v);
                })();
            }
        }
        $(_80f).combo("panel").html(dd.join(""));
        if (opts.multiple) {
            _803(_80f, _812, _810);
        } else {
            if (_812.length) {
                _803(_80f, [_812[_812.length - 1]], _810);
            } else {
                _803(_80f, [], _810);
            }
        }
        opts.onLoadSuccess.call(_80f, data);
    };

    function _814(_815, url, _816, _817) {
    	if(oUtil.isNull($.data(_815, "combobox"))) return;
        var opts = $.data(_815, "combobox").options;
        if (url) {
            if(typeof url == "string") {
            	opts.url = url;
            } else {
            	opts.url = url.url;
            	opts.queryParams = url.queryParams[0];
            }
        }
        var _8f6 = $.extend({}, opts.queryParams);   // 추가(YNI-Master, 2015.12.23)
        _816 = _816 || _8f6; // 추가(YNI-Master, 2015.12.23)
        //_816 = _816 || {};
        if (opts.onBeforeLoad.call(_815, _816) == false) {  // POST방식를 적용할 경우 call함수의 두번째 값에 파라메터를 넘겨줘야 함 
            return;
        }
        opts.loader.call(_815, _816, function (data) {
            _80e(_815, data, _817);
        }, function () {
            opts.onLoadError.apply(this, arguments);
        });
    };

    function _818(_819, q) {
        var _81a = $.data(_819, "combobox");
        var opts = _81a.options;
        if (opts.multiple && !q) {
            _803(_819, [], true);
        } else {
            _803(_819, [q], true);
        }
        if (opts.mode == "remote") {
            _814(_819, null, {
                q: q
            }, true);
        } else {
            var _81b = $(_819).combo("panel");
            _81b.find("div.combobox-item,div.combobox-group").hide();
            var data = _81a.data;
            var _81c = undefined;
            for (var i = 0; i < data.length; i++) {
                var item = data[i];
                if (opts.filter.call(_819, q, item)) {
                    var v = item[opts.valueField];
                    var s = item[opts.textField];
                    var g = item[opts.groupField];
                    var item = _81b.find("div.combobox-item[value=\"" + v + "\"]");
                    item.show();
                    if (s == q) {
                        _803(_819, [v], true);
                        item.addClass("combobox-item-selected");
                    }
                    if (opts.groupField && _81c != g) {
                        _81b.find("div.combobox-group[value=\"" + g + "\"]").show();
                        _81c = g;
                    }
                }
            }
        }
    };

    function _81d(_81e, ev) {
        var t = $(_81e);
        var _81f = t.combobox("panel");
        var opts = t.combobox("options");
        var data = t.combobox("getData");
        var item = _81f.children("div.combobox-item-hover");
        if (!item.length) {
            item = _81f.children("div.combobox-item-selected");
        }
        
        // 선택된 항목이 없는 경우에는 edit모드일 때를 처리하도록 수정함(YNI-Master, 2017.07.20)
        if (item.length) {
	        if (opts.multiple) {
	            if (item.hasClass("combobox-item-selected")) {
	                t.combobox("unselect", item.attr("value"));
	            } else {
	                t.combobox("select", item.attr("value"));
	            }
	        } else {
	            t.combobox("select", item.attr("value"));
	            
	            //console.log(opts.viewField + " / " + opts.gridId + " / " + opts.fieldId + " / " + item.attr("value"));
	            
	            // enter키를 누르면 판넬을 보이거나 숨김(YNI-Master, 2017.07.18)
	            if(_81f.panel('options').closed) {
	                t.combobox("showPanel");
	            } else {
	                t.combobox("hidePanel");
	            }
	        }
	        var vv = [];
	        var _820 = t.combobox("getValues");
	        for (var i = 0; i < _820.length; i++) {
	            if (_7f7(data, opts.valueField, _820[i])) {
	                vv.push(_820[i]);
	            }
	        }
	        t.combobox("setValues", vv);
        } else {
            t.combobox("hidePanel");
        }
        
        // edit모드에 적용된 combobox인 경우에는 panel이 닫힐 때 edit모드를 끝내게 한다.(YNI-Master, 2017.07.18)
        if(!opts.multiple && !oUtil.isNull(opts.gridId)) {
            if(_81f.panel('options').closed) {
                var dg = grid.getObject(opts.gridId);
                
				dg.datagrid('endCellEdit');
            }
        }
    };

    function _821(_822) {
        var opts = $.data(_822, "combobox").options;
        $(_822).addClass("combobox-f");
        $(_822).combo($.extend({}, opts, {
            onShowPanel: function () {
                $(_822).combo("panel").find("div.combobox-item").show();
                _7f9(_822, $(_822).combobox("getValue"));
                opts.onShowPanel.call(_822);
            }
        }));
        $(_822).combo("panel").unbind().bind("mouseover", function (e) {
            $(this).children("div.combobox-item-hover").removeClass("combobox-item-hover");
            $(e.target).closest("div.combobox-item").addClass("combobox-item-hover");
            e.stopPropagation();
        }).bind("mouseout", function (e) {
            $(e.target).closest("div.combobox-item").removeClass("combobox-item-hover");
            e.stopPropagation();
        }).bind("click", function (e) {
            var item = $(e.target).closest("div.combobox-item");
            if (!item.length) {
                return;
            }
            var _823 = item.attr("value");
            if (opts.multiple) {
                if (item.hasClass("combobox-item-selected")) {
                    _804(_822, _823);
                } else {
                    _7ff(_822, _823);
                }
            } else {
                _7ff(_822, _823);
                $(_822).combo("hidePanel");
            }
            e.stopPropagation();
        });
    };
    $.fn.combobox = function (_824, _825) {
        if (typeof _824 == "string") {
            var _826 = $.fn.combobox.methods[_824];
            if (_826) {
                return _826(this, _825);
            } else {
                return this.combo(_824, _825);
            }
        }
        _824 = _824 || {};
        return this.each(function () {
            var _827 = $.data(this, "combobox");
            if (_827) {
                $.extend(_827.options, _824);
                _821(this);
            } else {
                _827 = $.data(this, "combobox", {
                    options: $.extend({}, $.fn.combobox.defaults, $.fn.combobox.parseOptions(this), _824),
                    data: []
                });
                _821(this);
                var data = $.fn.combobox.parseData(this);
                if (data.length) {
                    _80e(this, data);
                }
            }
            if (_827.options.data) {
                _80e(this, _827.options.data);
            }
            _814(this);
        });
    };
    $.fn.combobox.methods = {
        options: function (jq) {
            var _828 = jq.combo("options");
            return $.extend($.data(jq[0], "combobox").options, {
                originalValue: _828.originalValue,
                disabled: _828.disabled,
                readonly: _828.readonly
            });
        },
        getData: function (jq) {
            return $.data(jq[0], "combobox").data;
        },
        setValues: function (jq, _829) {
            return jq.each(function () {
                _803(this, _829);
            });
        },
        setValue: function (jq, _82a) {
            return jq.each(function () {
                _803(this, [_82a]);
            });
        },
        clear: function (jq) {
            return jq.each(function () {
                $(this).combo("clear");
                var _82b = $(this).combo("panel");
                _82b.find("div.combobox-item-selected").removeClass("combobox-item-selected");
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $(this).combobox("options");
                if (opts.multiple) {
                    $(this).combobox("setValues", opts.originalValue);
                } else {
                    $(this).combobox("setValue", opts.originalValue);
                }
            });
        },
        loadData: function (jq, data) {
            return jq.each(function () {
                _80e(this, data);
            });
        },
        reload: function (jq, url, param) {
            return jq.each(function () {
                _814(this, url);
            });
        },
        select: function (jq, _82c) {
            return jq.each(function () {
                _7ff(this, _82c);
            });
        },
        unselect: function (jq, _82d) {
            return jq.each(function () {
                _804(this, _82d);
            });
        }
    };
    $.fn.combobox.parseOptions = function (_82e) {
        var t = $(_82e);
        return $.extend({}, $.fn.combo.parseOptions(_82e), $.parser.parseOptions(_82e, ["valueField", "textField", "groupField", "mode", "method", "url"]));
    };
    $.fn.combobox.parseData = function (_82f) {
        var data = [];
        var opts = $(_82f).combobox("options");
        $(_82f).children().each(function () {
            if (this.tagName.toLowerCase() == "optgroup") {
                var _830 = $(this).attr("label");
                $(this).children().each(function () {
                    _831(this, _830);
                });
            } else {
                _831(this);
            }
        });
        return data;

        function _831(el, _832) {
            var t = $(el);
            var item = {};
            item[opts.valueField] = t.attr("value") != undefined ? t.attr("value") : t.html();
            item[opts.textField] = t.html();
            item["selected"] = t.is(":selected");
            if (_832) {
                opts.groupField = opts.groupField || "group";
                item[opts.groupField] = _832;
            }
            data.push(item);
        };
    };
    $.fn.combobox.defaults = $.extend({}, $.fn.combo.defaults, {
        valueField: "value",
        textField: "text",
        groupField: null,
        groupFormatter: function (_833) {
            return _833;
        },
        mode: "local",
        method: "post",
        queryParams : {}, // POST방식 추가(YNI-Master, 2015.12.23)
        url: null,
        data: null,
        keyHandler: {
            up: function (e) {
                var _81f = $(this).combobox("panel");
                if(_81f.panel('options').closed) { // 키보드 up키를 누르면 판넬이 보이도록 추가(YNI-Master, 2017.07.18)
                    $(this).combobox("showPanel"); 
                } else {
                    nav(this, "prev");
                }
            },
            down: function (e) {
                var _81f = $(this).combobox("panel");
                if(_81f.panel('options').closed) { // 키보드 down키를 누르면 판넬이 보이도록 추가(YNI-Master, 2017.07.18)
                    $(this).combobox("showPanel"); 
                } else {
                    nav(this, "next");
                }
            },
            enter: function (e) {
                _81d(this, e);
            },
            query: function (q) {
                _818(this, q);
            }
        },
        filter: function (q, row) {
            var opts = $(this).combobox("options");
            return row[opts.textField.toUpperCase()].indexOf(q.toUpperCase()) >= 0; // 콤보박스 text검색조건을 %like%검색으로 변경(기존은 앞자부터 비교했음)
        },
        formatter: function (row) {
            var opts = $(this).combobox("options");
            return row[opts.textField];
        },
        loader: function (_834, _835, _836) {
            var opts = $(this).combobox("options");
            if (!opts.url) {
                return false;
            }
            $.ajax({
                type: opts.method,
                url: opts.url,
                queryParams : opts.queryParams, // POST방식 추가(YNI-Master, 2015.12.23)
        		method : opts.method, // POST방식 추가(YNI-Master, 2015.12.23)
                data: _834,
                dataType: "json",
                success: function (data) {
                    _835(data);
                },
                error: function () {
                    _836.apply(this, arguments);
                }
            });
        },
        loadFilter: function (data) {
            return data;
        },
        onBeforeLoad: function (_837) {},
        onLoadSuccess: function () {},
        onLoadError: function () {},
        onSelect: function (_838) {},
        onUnselect: function (_839) {}
    });
})(jQuery);
(function ($) {
    function _83a(_83b) {
        var opts = $.data(_83b, "combotree").options;
        var tree = $.data(_83b, "combotree").tree;
        $(_83b).addClass("combotree-f");
        $(_83b).combo(opts);
        var _83c = $(_83b).combo("panel");
        if (!tree) {
            tree = $("<ul></ul>").appendTo(_83c);
            $.data(_83b, "combotree").tree = tree;
        }
        tree.tree($.extend({}, opts, {
            checkbox: opts.multiple,
            onLoadSuccess: function (node, data) {
                var _83d = $(_83b).combotree("getValues");
                if (opts.multiple) {
                    var _83e = tree.tree("getChecked");
                    for (var i = 0; i < _83e.length; i++) {
                        var id = _83e[i].id;
                        (function () {
                            for (var i = 0; i < _83d.length; i++) {
                                if (id == _83d[i]) {
                                    return;
                                }
                            }
                            _83d.push(id);
                        })();
                    }
                }
                $(_83b).combotree("setValues", _83d);
                opts.onLoadSuccess.call(this, node, data);
            },
            onClick: function (node) {
                _840(_83b);
                $(_83b).combo("hidePanel");
                opts.onClick.call(this, node);
            },
            onCheck: function (node, _83f) {
                _840(_83b);
                opts.onCheck.call(this, node, _83f);
            }
        }));
    };

    function _840(_841) {
        var opts = $.data(_841, "combotree").options;
        var tree = $.data(_841, "combotree").tree;
        var vv = [],
            ss = [];
        if (opts.multiple) {
            var _842 = tree.tree("getChecked");
            for (var i = 0; i < _842.length; i++) {
                vv.push(_842[i].id);
                ss.push(_842[i].text);
            }
        } else {
            var node = tree.tree("getSelected");
            if (node) {
                vv.push(node.id);
                ss.push(node.text);
            }
        }
        $(_841).combo("setValues", vv).combo("setText", ss.join(opts.separator));
    };

    function _843(_844, _845) {
        var opts = $.data(_844, "combotree").options;
        var tree = $.data(_844, "combotree").tree;
        tree.find("span.tree-checkbox").addClass("tree-checkbox0").removeClass("tree-checkbox1 tree-checkbox2");
        var vv = [],
            ss = [];
        for (var i = 0; i < _845.length; i++) {
            var v = _845[i];
            var s = v;
            var node = tree.tree("find", v);
            if (node) {
                s = node.text;
                tree.tree("check", node.target);
                tree.tree("select", node.target);
            }
            vv.push(v);
            ss.push(s);
        }
        $(_844).combo("setValues", vv).combo("setText", ss.join(opts.separator));
    };
    $.fn.combotree = function (_846, _847) {
        if (typeof _846 == "string") {
            var _848 = $.fn.combotree.methods[_846];
            if (_848) {
                return _848(this, _847);
            } else {
                return this.combo(_846, _847);
            }
        }
        _846 = _846 || {};
        return this.each(function () {
            var _849 = $.data(this, "combotree");
            if (_849) {
                $.extend(_849.options, _846);
            } else {
                $.data(this, "combotree", {
                    options: $.extend({}, $.fn.combotree.defaults, $.fn.combotree.parseOptions(this), _846)
                });
            }
            _83a(this);
        });
    };
    $.fn.combotree.methods = {
        options: function (jq) {
            var _84a = jq.combo("options");
            return $.extend($.data(jq[0], "combotree").options, {
                originalValue: _84a.originalValue,
                disabled: _84a.disabled,
                readonly: _84a.readonly
            });
        },
        tree: function (jq) {
            return $.data(jq[0], "combotree").tree;
        },
        loadData: function (jq, data) {
            return jq.each(function () {
                var opts = $.data(this, "combotree").options;
                opts.data = data;
                var tree = $.data(this, "combotree").tree;
                tree.tree("loadData", data);
            });
        },
        reload: function (jq, url) {
            return jq.each(function () {
                var opts = $.data(this, "combotree").options;
                var tree = $.data(this, "combotree").tree;
                if (url) {
                    opts.url = url;
                }
                tree.tree({
                    url: opts.url
                });
            });
        },
        setValues: function (jq, _84b) {
            return jq.each(function () {
                _843(this, _84b);
            });
        },
        setValue: function (jq, _84c) {
            return jq.each(function () {
                _843(this, [_84c]);
            });
        },
        clear: function (jq) {
            return jq.each(function () {
                var tree = $.data(this, "combotree").tree;
                tree.find("div.tree-node-selected").removeClass("tree-node-selected");
                var cc = tree.tree("getChecked");
                for (var i = 0; i < cc.length; i++) {
                    tree.tree("uncheck", cc[i].target);
                }
                $(this).combo("clear");
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $(this).combotree("options");
                if (opts.multiple) {
                    $(this).combotree("setValues", opts.originalValue);
                } else {
                    $(this).combotree("setValue", opts.originalValue);
                }
            });
        }
    };
    $.fn.combotree.parseOptions = function (_84d) {
        return $.extend({}, $.fn.combo.parseOptions(_84d), $.fn.tree.parseOptions(_84d));
    };
    $.fn.combotree.defaults = $.extend({}, $.fn.combo.defaults, $.fn.tree.defaults, {
        editable: false
    });
})(jQuery);
(function ($) {
    function _84e(_84f) {
        var _850 = $.data(_84f, "combogrid");
        var opts = _850.options;
        var grid = _850.grid;
        $(_84f).addClass("combogrid-f").combo(opts);
        var _851 = $(_84f).combo("panel");
        if (!grid) {
            grid = $("<table></table>").appendTo(_851);
            _850.grid = grid;
        }
        grid.datagrid($.extend({}, opts, {
            border: false,
            fit: true,
            singleSelect: (!opts.multiple),
            onLoadSuccess: function (data) {
                var _852 = $(_84f).combo("getValues");
                var _853 = opts.onSelect;
                opts.onSelect = function () {};
                _85d(_84f, _852, _850.remainText);
                opts.onSelect = _853;
                opts.onLoadSuccess.apply(_84f, arguments);
            },
            onClickRow: _854,
            onSelect: function (_855, row) {
                _856();
                opts.onSelect.call(this, _855, row);
            },
            onUnselect: function (_857, row) {
                _856();
                opts.onUnselect.call(this, _857, row);
            },
            onSelectAll: function (rows) {
                _856();
                opts.onSelectAll.call(this, rows);
            },
            onUnselectAll: function (rows) {
                if (opts.multiple) {
                    _856();
                }
                opts.onUnselectAll.call(this, rows);
            }
        }));

        function _854(_858, row) {
            _850.remainText = false;
            _856();
            if (!opts.multiple) {
                $(_84f).combo("hidePanel");
            }
            opts.onClickRow.call(this, _858, row);
        };

        function _856() {
            var rows = grid.datagrid("getSelections");
            var vv = [],
                ss = [];
            for (var i = 0; i < rows.length; i++) {
                vv.push(rows[i][opts.idField]);
                ss.push(rows[i][opts.textField]);
            }
            if (!opts.ple) {
                $(_84f).combo("setValues", (vv.length ? vv : [""]));
            } else {
                $(_84f).combo("setValues", vv);
            }
            if (!_850.remainText) {
                $(_84f).combo("setText", ss.join(opts.separator));
            }
        };
    };

    function nav(_859, dir) {
        var _85a = $.data(_859, "combogrid");
        var opts = _85a.options;
        var grid = _85a.grid;
        var _85b = grid.datagrid("getRows").length;
        if (!_85b) {
            return;
        }
        var tr = opts.finder.getTr(grid[0], null, "highlight");
        if (!tr.length) {
            tr = opts.finder.getTr(grid[0], null, "selected");
        }
        var _85c;
        if (!tr.length) {
            _85c = (dir == "next" ? 0 : _85b - 1);
        } else {
            var _85c = parseInt(tr.attr("datagrid-row-index"));
            _85c += (dir == "next" ? 1 : -1);
            if (_85c < 0) {
                _85c = _85b - 1;
            }
            if (_85c >= _85b) {
                _85c = 0;
            }
        }
        grid.datagrid("highlightRow", _85c);
        if (opts.selectOnNavigation) {
            _85a.remainText = false;
            grid.datagrid("selectRow", _85c);
        }
    };

    function _85d(_85e, _85f, _860) {
        var _861 = $.data(_85e, "combogrid");
        var opts = _861.options;
        var grid = _861.grid;
        var rows = grid.datagrid("getRows");
        var ss = [];
        var _862 = $(_85e).combo("getValues");
        var _863 = $(_85e).combo("options");
        var _864 = _863.onChange;
        _863.onChange = function () {};
        grid.datagrid("clearSelections");
        for (var i = 0; i < _85f.length; i++) {
            var _865 = grid.datagrid("getRowIndex", _85f[i]);
            if (_865 >= 0) {
                grid.datagrid("selectRow", _865);
                ss.push(rows[_865][opts.textField]);
            } else {
                ss.push(_85f[i]);
            }
        }
        $(_85e).combo("setValues", _862);
        _863.onChange = _864;
        $(_85e).combo("setValues", _85f);
        if (!_860) {
            var s = ss.join(opts.separator);
            if ($(_85e).combo("getText") != s) {
                $(_85e).combo("setText", s);
            }
        }
    };

    function _866(_867, q) {
        var _868 = $.data(_867, "combogrid");
        var opts = _868.options;
        var grid = _868.grid;
        _868.remainText = true;
        if (opts.multiple && !q) {
            _85d(_867, [], true);
        } else {
            _85d(_867, [q], true);
        }
        if (opts.mode == "remote") {
            grid.datagrid("clearSelections");
            grid.datagrid("load", $.extend({}, opts.queryParams, {
                q: q
            }));
        } else {
            if (!q) {
                return;
            }
            var rows = grid.datagrid("getRows");
            for (var i = 0; i < rows.length; i++) {
                if (opts.filter.call(_867, q, rows[i])) {
                    grid.datagrid("clearSelections");
                    grid.datagrid("selectRow", i);
                    return;
                }
            }
        }
    };

    function _869(_86a) {
        var _86b = $.data(_86a, "combogrid");
        var opts = _86b.options;
        var grid = _86b.grid;
        var tr = opts.finder.getTr(grid[0], null, "highlight");
        if (!tr.length) {
            tr = opts.finder.getTr(grid[0], null, "selected");
        }
        if (!tr.length) {
            return;
        }
        _86b.remainText = false;
        var _86c = parseInt(tr.attr("datagrid-row-index"));
        if (opts.multiple) {
            if (tr.hasClass("datagrid-row-selected")) {
                grid.datagrid("unselectRow", _86c);
            } else {
                grid.datagrid("selectRow", _86c);
            }
        } else {
            grid.datagrid("selectRow", _86c);
            $(_86a).combogrid("hidePanel");
        }
    };
    $.fn.combogrid = function (_86d, _86e) {
        if (typeof _86d == "string") {
            var _86f = $.fn.combogrid.methods[_86d];
            if (_86f) {
                return _86f(this, _86e);
            } else {
                return $.fn.combo.methods[_86d](this, _86e);
            }
        }
        _86d = _86d || {};
        return this.each(function () {
            var _870 = $.data(this, "combogrid");
            if (_870) {
                $.extend(_870.options, _86d);
            } else {
                _870 = $.data(this, "combogrid", {
                    options: $.extend({}, $.fn.combogrid.defaults, $.fn.combogrid.parseOptions(this), _86d)
                });
            }
            _84e(this);
        });
    };
    $.fn.combogrid.methods = {
        options: function (jq) {
            var _871 = jq.combo("options");
            return $.extend($.data(jq[0], "combogrid").options, {
                originalValue: _871.originalValue,
                disabled: _871.disabled,
                readonly: _871.readonly
            });
        },
        grid: function (jq) {
            return $.data(jq[0], "combogrid").grid;
        },
        setValues: function (jq, _872) {
            return jq.each(function () {
                _85d(this, _872);
            });
        },
        setValue: function (jq, _873) {
            return jq.each(function () {
                _85d(this, [_873]);
            });
        },
        clear: function (jq) {
            return jq.each(function () {
                $(this).combogrid("grid").datagrid("clearSelections");
                $(this).combo("clear");
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $(this).combogrid("options");
                if (opts.multiple) {
                    $(this).combogrid("setValues", opts.originalValue);
                } else {
                    $(this).combogrid("setValue", opts.originalValue);
                }
            });
        }
    };
    $.fn.combogrid.parseOptions = function (_874) {
        var t = $(_874);
        return $.extend({}, $.fn.combo.parseOptions(_874), $.fn.datagrid.parseOptions(_874), $.parser.parseOptions(_874, ["idField", "textField", "mode"]));
    };
    $.fn.combogrid.defaults = $.extend({}, $.fn.combo.defaults, $.fn.datagrid.defaults, {
        loadMsg: null,
        idField: null,
        textField: null,
        mode: "local",
        keyHandler: {
            up: function () {
                nav(this, "prev");
            },
            down: function () {
                nav(this, "next");
            },
            enter: function () {
                _869(this);
            },
            query: function (q) {
                _866(this, q);
            }
        },
        filter: function (q, row) {
            var opts = $(this).combogrid("options");
            return row[opts.textField].indexOf(q) == 0;
        }
    });
})(jQuery);
(function ($) {
    function _875(_876) {
        var _877 = $.data(_876, "datebox");
        var opts = _877.options;
        $(_876).addClass("datebox-f");
        $(_876).combo($.extend({}, opts, {
            onShowPanel: function () {
                _877.calendar.calendar("resize");
                opts.onShowPanel.call(_876);
            }
        }));
        $(_876).combo("textbox").parent().addClass("datebox");
        if (!_877.calendar) {
            _878();
        }

        function _878() {
            var _879 = $(_876).combo("panel");
            _877.calendar = $("<div></div>").appendTo(_879).wrap("<div class=\"datebox-calendar-inner\"></div>");
            _877.calendar.calendar({
                fit: true,
                border: false,
                onSelect: function (date) {
                    var _87a = opts.formatter(date);
                    _87e(_876, _87a);
                    $(_876).combo("hidePanel");
                    opts.onSelect.call(_876, date);
                }
            });
            
            _87e(_876, opts.value);
            
            var _87b = $("<div class=\"datebox-button\"></div>").appendTo(_879);
            $("<a href=\"javascript:void(0)\" class=\"datebox-current\"></a>").html(opts.currentText).appendTo(_87b);
            $("<a href=\"javascript:void(0)\" class=\"datebox-close\"></a>").html(opts.closeText).appendTo(_87b);
            _87b.find(".datebox-current,.datebox-close").hover(function () {
                $(this).addClass("datebox-button-hover");
            }, function () {
                $(this).removeClass("datebox-button-hover");
            });
            _87b.find(".datebox-current").click(function () {
                _877.calendar.calendar({
                    year: new Date().getFullYear(),
                    month: new Date().getMonth() + 1,
                    current: new Date()
                });
            });
            _87b.find(".datebox-close").click(function () {
                $(_876).combo("hidePanel");
            });
        };
    };

    function _87c(_87d, q) {
    	_87e(_87d, q);
    };

    function _87f(_880) {
        var opts = $.data(_880, "datebox").options;
        var c = $.data(_880, "datebox").calendar;
        var _881 = opts.formatter(c.calendar("options").current);
        
        _87e(_880, _881);
        
        $(_880).combo("hidePanel");
    };

    function _87e(_882, _883) {
        var _884 = $.data(_882, "datebox"); 
        
        if(oUtil.isNull(_884)) return;
        
        var opts = _884.options;
        var textVal = replaceAll(_883, opts.seperator, "");
        
        if(!oUtil.isNull(textVal)) {
	        if(textVal.length == 8) {
		        var formatNation = calendar.util.getLocale(textVal);
		    	
		    	var textVal2 = calendar.util.getDate2String(textVal, opts.seperator, formatNation);
		    	 
		    	if(opts.nation != formatNation) {	
//		    		console.log(formatNation + " >>>>>>> _883 = "+_883+", replaceAll = " + replaceAll(textVal2, "-", "") + ", textVal2 = " + textVal2);
	    			$(_882).combo("setValue", replaceAll(textVal2, "-", "")).combo("setText", textVal2);
		        	_884.calendar.calendar("moveTo", opts.parser(textVal2));
		        	
		        	return;
		    	} else {
//		        	console.log("_883 = "+_883+", textVal = " + textVal + ", textVal2 = " + textVal2);
		        	$(_882).combo("setValue", replaceAll(textVal2, "-", "")).combo("setText", textVal2);
		        	_884.calendar.calendar("moveTo", opts.parser(textVal2));
		        	
		        	return;
		    	}
	        }
	    }
    	
    	$(_882).combo("setValue", _883).combo("setText", _883);
    	_884.calendar.calendar("moveTo", opts.parser(_883));
    };
    $.fn.datebox = function (_885, _886) {
        if (typeof _885 == "string") {
            var _887 = $.fn.datebox.methods[_885];
            if (_887) {
                return _887(this, _886);
            } else {
                return this.combo(_885, _886);
            }
        }
        _885 = _885 || {};
        return this.each(function () {
            var _888 = $.data(this, "datebox");
            if (_888) {
                $.extend(_888.options, _885);
            } else {
                $.data(this, "datebox", {
                    options: $.extend({}, $.fn.datebox.defaults, $.fn.datebox.parseOptions(this), _885)
                });
            }
            _875(this);
        });
    };
    $.fn.datebox.methods = {
        options: function (jq) {
            var _889 = jq.combo("options");
            return $.extend($.data(jq[0], "datebox").options, {
                originalValue: _889.originalValue,
                disabled: _889.disabled,
                readonly: _889.readonly
            });
        },
        calendar: function (jq) {
            return $.data(jq[0], "datebox").calendar;
        },
        setValue: function (jq, _88a) {
            return jq.each(function () {
                _87e(this, _88a);
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $(this).datebox("options");
                $(this).datebox("setValue", opts.originalValue);
            });
        }
    };
    $.fn.datebox.parseOptions = function (_88b) {
        var t = $(_88b);
        return $.extend({}, $.fn.combo.parseOptions(_88b), {});
    };
    $.fn.datebox.defaults = $.extend({}, $.fn.combo.defaults, {
        panelWidth: 180,
        panelHeight: "auto",
        keyHandler: {
            up: function () {},
            down: function () {},
            enter: function () {
                _87f(this);
            },
            query: function (q) {
            	_87c(this, q);
            }
        },
        currentText: "Today",
        closeText: "Close",
        okText: "Ok",
        formatter: function (date) {
            var y = date.getFullYear();
            var m = date.getMonth() + 1;
            var d = date.getDate();
            return d + "-" + m + "-" + y;
        },
        parser: function (s) {
            var t = Date.parse(s);
            if (!isNaN(t)) {
                return new Date(t);
            } else {
                return new Date();
            }
        },
        onSelect: function (date) {}
    });
})(jQuery);
(function ($) {
    function _88c(_88d) {
        var _88e = $.data(_88d, "datetimebox");
        var opts = _88e.options;
        $(_88d).datebox($.extend({}, opts, {
            onShowPanel: function () {
                var _88f = $(_88d).datetimebox("getValue");
                _892(_88d, _88f, true);
                opts.onShowPanel.call(_88d);
            },
            formatter: $.fn.datebox.defaults.formatter,
            parser: $.fn.datebox.defaults.parser
        }));
        $(_88d).removeClass("datebox-f").addClass("datetimebox-f");
        $(_88d).datebox("calendar").calendar({
            onSelect: function (date) {
                opts.onSelect.call(_88d, date);
            }
        });
        var _890 = $(_88d).datebox("panel");
        if (!_88e.spinner) {
            var p = $("<div style=\"padding:2px\"><input style=\"width:80px\"></div>").insertAfter(_890.children("div.datebox-calendar-inner"));
            _88e.spinner = p.children("input");
            var _891 = _890.children("div.datebox-button");
            var ok = $("<a href=\"javascript:void(0)\" class=\"datebox-ok\"></a>").html(opts.okText).appendTo(_891);
            ok.hover(function () {
                $(this).addClass("datebox-button-hover");
            }, function () {
                $(this).removeClass("datebox-button-hover");
            }).click(function () {
                _897(_88d);
            });
        }
        _88e.spinner.timespinner({
            showSeconds: opts.showSeconds,
            separator: opts.timeSeparator
        }).unbind(".datetimebox").bind("mousedown.datetimebox", function (e) {
            e.stopPropagation();
        });
        _892(_88d, opts.value);
    };

    function _893(_894) {
        var c = $(_894).datetimebox("calendar");
        var t = $(_894).datetimebox("spinner");
        var date = c.calendar("options").current;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), t.timespinner("getHours"), t.timespinner("getMinutes"), t.timespinner("getSeconds"));
    };

    function _895(_896, q) {
        _892(_896, q, true);
    };

    function _897(_898) {
        var opts = $.data(_898, "datetimebox").options;
        var date = _893(_898);
        _892(_898, opts.formatter.call(_898, date));
        $(_898).combo("hidePanel");
    };

    function _892(_899, _89a, _89b) {
        var opts = $.data(_899, "datetimebox").options;
        $(_899).combo("setValue", _89a);
        if (!_89b) {
            if (_89a) {
                var date = opts.parser.call(_899, _89a);
                $(_899).combo("setValue", opts.formatter.call(_899, date));
                $(_899).combo("setText", opts.formatter.call(_899, date));
            } else {
                $(_899).combo("setText", _89a);
            }
        }
        var date = opts.parser.call(_899, _89a);
        $(_899).datetimebox("calendar").calendar("moveTo", date);
        $(_899).datetimebox("spinner").timespinner("setValue", _89c(date));

        function _89c(date) {
            function _89d(_89e) {
                return (_89e < 10 ? "0" : "") + _89e;
            };
            var tt = [_89d(date.getHours()), _89d(date.getMinutes())];
            if (opts.showSeconds) {
                tt.push(_89d(date.getSeconds()));
            }
            return tt.join($(_899).datetimebox("spinner").timespinner("options").separator);
        };
    };
    $.fn.datetimebox = function (_89f, _8a0) {
        if (typeof _89f == "string") {
            var _8a1 = $.fn.datetimebox.methods[_89f];
            if (_8a1) {
                return _8a1(this, _8a0);
            } else {
                return this.datebox(_89f, _8a0);
            }
        }
        _89f = _89f || {};
        return this.each(function () {
            var _8a2 = $.data(this, "datetimebox");
            if (_8a2) {
                $.extend(_8a2.options, _89f);
            } else {
                $.data(this, "datetimebox", {
                    options: $.extend({}, $.fn.datetimebox.defaults, $.fn.datetimebox.parseOptions(this), _89f)
                });
            }
            _88c(this);
        });
    };
    $.fn.datetimebox.methods = {
        options: function (jq) {
            var _8a3 = jq.datebox("options");
            return $.extend($.data(jq[0], "datetimebox").options, {
                originalValue: _8a3.originalValue,
                disabled: _8a3.disabled,
                readonly: _8a3.readonly
            });
        },
        spinner: function (jq) {
            return $.data(jq[0], "datetimebox").spinner;
        },
        setValue: function (jq, _8a4) {
            return jq.each(function () {
                _892(this, _8a4);
            });
        },
        reset: function (jq) {
            return jq.each(function () {
                var opts = $(this).datetimebox("options");
                $(this).datetimebox("setValue", opts.originalValue);
            });
        }
    };
    $.fn.datetimebox.parseOptions = function (_8a5) {
        var t = $(_8a5);
        return $.extend({}, $.fn.datebox.parseOptions(_8a5), $.parser.parseOptions(_8a5, ["timeSeparator", {
            showSeconds: "boolean"
        }]));
    };
    $.fn.datetimebox.defaults = $.extend({}, $.fn.datebox.defaults, {
        showSeconds: true,
        timeSeparator: ":",
        keyHandler: {
            up: function () {},
            down: function () {},
            enter: function () {
                _897(this);
            },
            query: function (q) {
                _895(this, q);
            }
        },
        formatter: function (date) {
            var h = date.getHours();
            var M = date.getMinutes();
            var s = date.getSeconds();

            function _8a6(_8a7) {
                return (_8a7 < 10 ? "0" : "") + _8a7;
            };
            var _8a8 = $(this).datetimebox("spinner").timespinner("options").separator;
            var r = $.fn.datebox.defaults.formatter(date) + " " + _8a6(h) + _8a8 + _8a6(M);
            if ($(this).datetimebox("options").showSeconds) {
                r += _8a8 + _8a6(s);
            }
            return r;
        },
        parser: function (s) {
            if ($.trim(s) == "") {
                return new Date();
            }
            var dt = s.split(" ");
            var d = $.fn.datebox.defaults.parser(dt[0]);
            if (dt.length < 2) {
                return d;
            }
            var _8a9 = $(this).datetimebox("spinner").timespinner("options").separator;
            var tt = dt[1].split(_8a9);
            var hour = parseInt(tt[0], 10) || 0;
            var _8aa = parseInt(tt[1], 10) || 0;
            var _8ab = parseInt(tt[2], 10) || 0;
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hour, _8aa, _8ab);
        }
    });
})(jQuery);
(function ($) {
    function init(_8ac) {
        var _8ad = $("<div class=\"slider\">" + "<div class=\"slider-inner\">" + "<a href=\"javascript:void(0)\" class=\"slider-handle\"></a>" + "<span class=\"slider-tip\"></span>" + "</div>" + "<div class=\"slider-rule\"></div>" + "<div class=\"slider-rulelabel\"></div>" + "<div style=\"clear:both\"></div>" + "<input type=\"hidden\" class=\"slider-value\">" + "</div>").insertAfter(_8ac);
        var name = $(_8ac).hide().attr("name");
        if (name) {
            _8ad.find("input.slider-value").attr("name", name);
            $(_8ac).removeAttr("name").attr("sliderName", name);
        }
        return _8ad;
    };

    function _8ae(_8af, _8b0) {
        var _8b1 = $.data(_8af, "slider");
        var opts = _8b1.options;
        var _8b2 = _8b1.slider;
        if (_8b0) {
            if (_8b0.width) {
                opts.width = _8b0.width;
            }
            if (_8b0.height) {
                opts.height = _8b0.height;
            }
        }
        if (opts.mode == "h") {
            _8b2.css("height", "");
            _8b2.children("div").css("height", "");
            if (!isNaN(opts.width)) {
                _8b2.width(opts.width);
            }
        } else {
            _8b2.css("width", "");
            _8b2.children("div").css("width", "");
            if (!isNaN(opts.height)) {
                _8b2.height(opts.height);
                _8b2.find("div.slider-rule").height(opts.height);
                _8b2.find("div.slider-rulelabel").height(opts.height);
                _8b2.find("div.slider-inner")._outerHeight(opts.height);
            }
        }
        _8b3(_8af);
    };

    function _8b4(_8b5) {
        var _8b6 = $.data(_8b5, "slider");
        var opts = _8b6.options;
        var _8b7 = _8b6.slider;
        var aa = opts.mode == "h" ? opts.rule : opts.rule.slice(0).reverse();
        if (opts.reversed) {
            aa = aa.slice(0).reverse();
        }
        _8b8(aa);

        function _8b8(aa) {
            var rule = _8b7.find("div.slider-rule");
            var _8b9 = _8b7.find("div.slider-rulelabel");
            rule.empty();
            _8b9.empty();
            for (var i = 0; i < aa.length; i++) {
                var _8ba = i * 100 / (aa.length - 1) + "%";
                var span = $("<span></span>").appendTo(rule);
                span.css((opts.mode == "h" ? "left" : "top"), _8ba);
                if (aa[i] != "|") {
                    span = $("<span></span>").appendTo(_8b9);
                    span.html(aa[i]);
                    if (opts.mode == "h") {
                        span.css({
                            left: _8ba,
                            marginLeft: -Math.round(span.outerWidth() / 2)
                        });
                    } else {
                        span.css({
                            top: _8ba,
                            marginTop: -Math.round(span.outerHeight() / 2)
                        });
                    }
                }
            }
        };
    };

    function _8bb(_8bc) {
        var _8bd = $.data(_8bc, "slider");
        var opts = _8bd.options;
        var _8be = _8bd.slider;
        _8be.removeClass("slider-h slider-v slider-disabled");
        _8be.addClass(opts.mode == "h" ? "slider-h" : "slider-v");
        _8be.addClass(opts.disabled ? "slider-disabled" : "");
        _8be.find("a.slider-handle").draggable({
            axis: opts.mode,
            cursor: "pointer",
            disabled: opts.disabled,
            onDrag: function (e) {
                var left = e.data.left;
                var _8bf = _8be.width();
                if (opts.mode != "h") {
                    left = e.data.top;
                    _8bf = _8be.height();
                }
                if (left < 0 || left > _8bf) {
                    return false;
                } else {
                    var _8c0 = _8d1(_8bc, left);
                    _8c1(_8c0);
                    return false;
                }
            },
            onStartDrag: function () {
                opts.onSlideStart.call(_8bc, opts.value);
            },
            onStopDrag: function (e) {
                var _8c2 = _8d1(_8bc, (opts.mode == "h" ? e.data.left : e.data.top));
                _8c1(_8c2);
                opts.onSlideEnd.call(_8bc, opts.value);
            }
        });

        function _8c1(_8c3) {
            var s = Math.abs(_8c3 % opts.step);
            if (s < opts.step / 2) {
                _8c3 -= s;
            } else {
                _8c3 = _8c3 - s + opts.step;
            }
            _8c4(_8bc, _8c3);
        };
    };

    function _8c4(_8c5, _8c6) {
        var _8c7 = $.data(_8c5, "slider");
        var opts = _8c7.options;
        var _8c8 = _8c7.slider;
        var _8c9 = opts.value;
        if (_8c6 < opts.min) {
            _8c6 = opts.min;
        }
        if (_8c6 > opts.max) {
            _8c6 = opts.max;
        }
        opts.value = _8c6;
        $(_8c5).val(_8c6);
        _8c8.find("input.slider-value").val(_8c6);
        var pos = _8ca(_8c5, _8c6);
        var tip = _8c8.find(".slider-tip");
        if (opts.showTip) {
            tip.show();
            tip.html(opts.tipFormatter.call(_8c5, opts.value));
        } else {
            tip.hide();
        }
        if (opts.mode == "h") {
            var _8cb = "left:" + pos + "px;";
            _8c8.find(".slider-handle").attr("style", _8cb);
            tip.attr("style", _8cb + "margin-left:" + (-Math.round(tip.outerWidth() / 2)) + "px");
        } else {
            var _8cb = "top:" + pos + "px;";
            _8c8.find(".slider-handle").attr("style", _8cb);
            tip.attr("style", _8cb + "margin-left:" + (-Math.round(tip.outerWidth())) + "px");
        }
        if (_8c9 != _8c6) {
            opts.onChange.call(_8c5, _8c6, _8c9);
        }
    };

    function _8b3(_8cc) {
        var opts = $.data(_8cc, "slider").options;
        var fn = opts.onChange;
        opts.onChange = function () {};
        _8c4(_8cc, opts.value);
        opts.onChange = fn;
    };

    function _8ca(_8cd, _8ce) {
        var _8cf = $.data(_8cd, "slider");
        var opts = _8cf.options;
        var _8d0 = _8cf.slider;
        if (opts.mode == "h") {
            var pos = (_8ce - opts.min) / (opts.max - opts.min) * _8d0.width();
            if (opts.reversed) {
                pos = _8d0.width() - pos;
            }
        } else {
            var pos = _8d0.height() - (_8ce - opts.min) / (opts.max - opts.min) * _8d0.height();
            if (opts.reversed) {
                pos = _8d0.height() - pos;
            }
        }
        return pos.toFixed(0);
    };

    function _8d1(_8d2, pos) {
        var _8d3 = $.data(_8d2, "slider");
        var opts = _8d3.options;
        var _8d4 = _8d3.slider;
        if (opts.mode == "h") {
            var _8d5 = opts.min + (opts.max - opts.min) * (pos / _8d4.width());
        } else {
            var _8d5 = opts.min + (opts.max - opts.min) * ((_8d4.height() - pos) / _8d4.height());
        }
        return opts.reversed ? opts.max - _8d5.toFixed(0) : _8d5.toFixed(0);
    };
    $.fn.slider = function (_8d6, _8d7) {
        if (typeof _8d6 == "string") {
            return $.fn.slider.methods[_8d6](this, _8d7);
        }
        _8d6 = _8d6 || {};
        return this.each(function () {
            var _8d8 = $.data(this, "slider");
            if (_8d8) {
                $.extend(_8d8.options, _8d6);
            } else {
                _8d8 = $.data(this, "slider", {
                    options: $.extend({}, $.fn.slider.defaults, $.fn.slider.parseOptions(this), _8d6),
                    slider: init(this)
                });
                $(this).removeAttr("disabled");
            }
            var opts = _8d8.options;
            opts.min = parseFloat(opts.min);
            opts.max = parseFloat(opts.max);
            opts.value = parseFloat(opts.value);
            opts.step = parseFloat(opts.step);
            _8bb(this);
            _8b4(this);
            _8ae(this);
        });
    };
    $.fn.slider.methods = {
        options: function (jq) {
            return $.data(jq[0], "slider").options;
        },
        destroy: function (jq) {
            return jq.each(function () {
                $.data(this, "slider").slider.remove();
                $(this).remove();
            });
        },
        resize: function (jq, _8d9) {
            return jq.each(function () {
                _8ae(this, _8d9);
            });
        },
        getValue: function (jq) {
            return jq.slider("options").value;
        },
        setValue: function (jq, _8da) {
            return jq.each(function () {
                _8c4(this, _8da);
            });
        },
        enable: function (jq) {
            return jq.each(function () {
                $.data(this, "slider").options.disabled = false;
                _8bb(this);
            });
        },
        disable: function (jq) {
            return jq.each(function () {
                $.data(this, "slider").options.disabled = true;
                _8bb(this);
            });
        }
    };
    $.fn.slider.parseOptions = function (_8db) {
        var t = $(_8db);
        return $.extend({}, $.parser.parseOptions(_8db, ["width", "height", "mode", {
            reversed: "boolean",
            showTip: "boolean",
            min: "number",
            max: "number",
            step: "number"
        }]), {
            value: (t.val() || undefined),
            disabled: (t.attr("disabled") ? true : undefined),
            rule: (t.attr("rule") ? eval(t.attr("rule")) : undefined)
        });
    };
    $.fn.slider.defaults = {
        width: "auto",
        height: "auto",
        mode: "h",
        reversed: false,
        showTip: false,
        disabled: false,
        value: 0,
        min: 0,
        max: 100,
        step: 1,
        rule: [],
        tipFormatter: function (_8dc) {
            return _8dc;
        },
        onChange: function (_8dd, _8de) {},
        onSlideStart: function (_8df) {},
        onSlideEnd: function (_8e0) {}
    };
})(jQuery);

(function($){
	$.extend($.fn.datagrid.defaults, {
		clickToEdit: false,
		dblclickToEdit: true,
		navHandler: {
			'37': function(e){ // left
				var opts = $(this).datagrid('options');
				return navHandler.call(this, e, opts.isRtl?'right':'left');
			},
			'39': function(e){ // right
				var opts = $(this).datagrid('options');
				return navHandler.call(this, e, opts.isRtl?'left':'right');
			},
			'38': function(e){ // up
			    var dg = $(this);
				var param = dg.datagrid('cell');	// current cell information
				if (!param){return;}
				
                var ed = dg.datagrid('getEditor', {index:param.index, field:param.field});
        	    
    			if(!oUtil.isNull(ed)) {
    	            var tg = $(ed.target);
    	            
    	            if(tg.hasClass("combo-f")) {
    	                 return;
    	        	}
    	        }
    	        
				var input = dg.datagrid('input', param);
    	        
				if(input){
		            enterHandler.call(this, e);
		        }
		        
				var idx = param.index-1;
				
				if(idx > -1) {
                    dg.datagrid("selectRow", idx);
                    navHandler.call(this, e, 'up');
				}
				
				if(input) {
                    return enterHandler.call(this, e);
				} else {
				    return;
				}
			},
			'40': function(e){ // down
                var dg = $(this);
				var param = dg.datagrid('cell');	// current cell information
				if (!param){return;}
				
				var ed = dg.datagrid('getEditor', {index:param.index, field:param.field});
        	    
    			if(!oUtil.isNull(ed)) {
    	            var tg = $(ed.target);
    	            
    	            if(tg.hasClass("combo-f")) {
    	                 return;
    	        	}
    	        }
    	        
				var input = dg.datagrid('input', param);
				
				if(input){
		            enterHandler.call(this, e);
		        }
		        
				var idx = param.index+1;
				
				if(dg.datagrid("getRows").length > idx) {
				    dg.datagrid("selectRow", idx);
				    navHandler.call(this, e, 'down');
				}
				
				if(input) {
                    return enterHandler.call(this, e);
				} else {
				    return;
				}
			},
			'9' : function(e) { // tab
                return nextCellHandler.call(this, e);
			},
			'13': function(e){ // enter
                return enterHandler.call(this, e, 'y');
			},
            '113': function(e){ // enter
                return enterHandler.call(this, e, 'y');
            },
			'27': function(e){ // esc
                // 만약 에디팅 모드라면 모드를 끝내고, 아니라면 포커스를 이용함(2020-02-29)
                var dg = $(this);
				var cell = dg.datagrid('cell');
				if (!cell){return;}
				var input = dg.datagrid('input', cell);
				
				if(input) {
				    return enterHandler.call(this, e, 'n');
				} else {
                    unselectAllCells(this);
                    var opts = $(this).datagrid('options');
                    if(opts.nextFocus) opts.nextFocus.focus();
                    return;
				}
			},
			'8': function(e){ // backspace
				return clearHandler.call(this, e);
			},
			'46': function(e){ // del
				return clearHandler.call(this, e);
			},
			'keypress': function(e){
                if (e.metaKey || e.ctrlKey){
					return;
				}
				var dg = $(this);
				var param = dg.datagrid('cell');	// current cell information
				if (!param){return;}
				var input = dg.datagrid('input', param);
				if (!input){
					var tmp = $('<span></span>');
					tmp.html(String.fromCharCode(e.which));
					var c = tmp.text();
					tmp.remove();
					if (c){
						dg.datagrid('editCell', {
							index: param.index,
							field: param.field,
							value: c
						});
						return false;					
					}
				}
			}
		},
		onBeforeCellEdit: function(index, field){},
		onCellEdit: function(index, field, value){// 삭제(2020-02-28)
			var input = $(this).datagrid('input', {index:index, field:field});
			
			if (input){
				if (value != undefined){
					input.val(value);
				}
			}
		},
		onSelectCell: function(index, field){},
		onUnselectCell: function(index, field){}
	});
    
    function nextCellHandler(e) {
        var dg = $(this);
		var cell = dg.datagrid('cell');
		if (!cell){return;}
		var input = dg.datagrid('input', cell);
		
		if(input){
            enterHandler.call(this, e, "y");
        }
        
        var opts = $(this).datagrid('options');
		navHandler.call(this, e, opts.isRtl?'left':'right');
		
		return enterHandler.call(this, e, "n");
	}
				
	function navHandler(e, dir){
		var dg = $(this);
		var opts = dg.datagrid('options');
		var param = dg.datagrid('cell');
		var input = dg.datagrid('input', param);
		
		if(!input) {
            if(e.keyCode != "9") {
                dg.datagrid('gotoCell', dir);
                return;
            }
            
            var fields = dg.datagrid('getColumnFields',true).concat(dg.datagrid('getColumnFields'));
            var rowsCnt = dg.datagrid("getRows").length;
		    
		    var idx = param.index;
		    var fid = param.field;
		    var startEditId;
		    var endEditId;
		    
		    for(var j = 0; j < fields.length; j++) {
                var col = dg.datagrid('getColumnOption', fields[j]);
                
                // 에디팅 첫 필드
                if(!oUtil.isNull(col.editor) && oUtil.isNull(startEditId)) {
                    startEditId = col.field;
                }
                // 에디팅 마지막 필드
                if(!oUtil.isNull(col.editor)) {
                    endEditId = col.field;
                }
            }
            
		    var aryidx;
		    
		    if(dir == "right") {
                if(fid == endEditId) {
                    if((rowsCnt-1) > idx) {
                		fid = startEditId;
                        idx = idx + 1;
                    } else {
                        // 에디팅된는 마지막 셀인 경우 row를 하나 추가한다.(2017.12.16, YNI-Maker)
                        if(opts.autoAddRow == true) {
                    		dg.datagrid('appendRow', {FIELD_STATE: 'I'});
                    	}
                    }
                    dg.datagrid("selectRow", idx);
                } else {
	                for(var i = 0; i < fields.length; i++) {
	                    var col1 = dg.datagrid('getColumnOption', fields[i]);
	                    
	                    if(fid == col1.field) {
	                        for(var j = i+1; j < fields.length; j++) {
	                            var col2 = dg.datagrid('getColumnOption', fields[j]);
	                            
	                            if(!oUtil.isNull(col2.editor)) {
	                                fid = col2.field;
	                                
	                                break;
	                            }
	                        }
	                        
	                        break;
	                    }
	                }
                }
            } else if(dir == "left") {
                if(fid == startEditId) {
                    if(idx != 0) {
                        fid = endEditId;
                        idx = idx - 1;
                    }
                    dg.datagrid("selectRow", idx);
                } else { 
	                for(var i = fields.length-1; i >= 0; i--) {
	                    var col1 = dg.datagrid('getColumnOption', fields[i]);
	                    
	                    if(fid == col1.field) {
	                        for(var j = i-1; j >= 0; j--) {
	                            var col2 = dg.datagrid('getColumnOption', fields[j]);
	                            
	                            if(!oUtil.isNull(col2.editor)) {
	                                fid = col2.field;
	                                
	                                break;
	                            }
	                        }
	                        
	                        break;
	                    }
	                }
	            }
            }
            
	        if(dir == "left" || dir == "right") {
                dg.datagrid('gotoCell', {
	                index: idx,
	                field: fid
		        });
            } else {
                dg.datagrid('gotoCell', dir);
            }
            
			return false;
		}
	}

	function enterHandler(e, flag){
		var dg = $(this);
		var cell = dg.datagrid('cell');
		if (!cell){return;}
		var input = dg.datagrid('input', cell);
		
		if(input) {
			if (input[0].tagName.toLowerCase() == 'textarea'){
				return;
			}
			
			endCellEdit(this, true, flag);
		} else {
			dg.datagrid('editCell', cell);
		}
		
		var pid = grid.handle.getProgramID(dg);
		var gridId = grid.handle.getGridID(dg);
		var conf = grid.getInitConfig(gridId);
    	var cfunc = conf.cellEnterCallBackFunction;
    	var fieldId = cell.field;
    	var cellIdx = cell.index;
    	var gridRow = dg.datagrid("getData").rows[cellIdx];
    	
    	if(!oUtil.isNull(cfunc)) {
	    	var pro_id = eval("window." + pid + ".event");
	        
	        if (!oUtil.isNull(pro_id)) {
	            if (typeof(pro_id[cfunc]) == "function") {
	                pro_id[cfunc](gridRow, cellIdx, fieldId);
	            }
	        }
	    }
	    
		return false;
	}

	function escHandler(e){
		endCellEdit(this, false, "n");
		return false;
	}

	function clearHandler(e){
		var dg = $(this);
		var param = dg.datagrid('cell');
		if (!param){return;}
		var input = dg.datagrid('input', param);
		if (!input){
			dg.datagrid('editCell', {
				index: param.index,
				field: param.field,
				value: ''
			});
			return false;
		}		
	}

	function getCurrCell(target){
		var cell = $(target).datagrid('getPanel').find('td.datagrid-row-selected');
		if (cell.length){
			return {
				index: parseInt(cell.closest('tr.datagrid-row').attr('datagrid-row-index')),
				field: cell.attr('field')
			};
		} else {
			return null;
		}
	}

	function unselectCell(target, p){
		var opts = $(target).datagrid('options');
		var cell = opts.finder.getTr(target, p.index).find('td[field="'+p.field+'"]');
		cell.removeClass('datagrid-row-selected');
		opts.onUnselectCell.call(target, p.index, p.field);
	}

	function unselectAllCells(target){
		var panel = $(target).datagrid('getPanel');
		var cell = panel.find('td.datagrid-row-selected');
		
		cell.removeClass('datagrid-row-selected');
	}

	function selectCell(target, p){
		var opts = $(target).datagrid('options');
		
		if (opts.singleSelect){
			unselectAllCells(target);
		}
		
		var cell = opts.finder.getTr(target, p.index).find('td[field="'+p.field+'"]');
		cell.css("background", "");
		cell.addClass('datagrid-row-selected');
		
		opts.onSelectCell.call(target, p.index, p.field);
	}

	function getSelectedCells(target){
		var cells = [];
		var panel = $(target).datagrid('getPanel');
		panel.find('td.datagrid-row-selected').each(function(){
			var td = $(this);
			cells.push({
				index: parseInt(td.closest('tr.datagrid-row').attr('datagrid-row-index')),
				field: td.attr('field')
			});
		});
		return cells;
	}

	function gotoCell(target, p){
		var dg = $(target);
		var opts = dg.datagrid('options');
		var panel = dg.datagrid('getPanel').focus();
        var cparam = dg.datagrid('cell');
        
        if (cparam){
			var input = dg.datagrid('input', cparam);
			if (input){
				input.focus();
				return;
			}
		}

		if (typeof p == 'object'){
			_go(p);
			return;
		}
		
		var cell = panel.find('td.datagrid-row-selected');
		if (!cell){return;}
        var fields = dg.datagrid('getColumnFields',true).concat(dg.datagrid('getColumnFields'));
		var field = cell.attr('field');
		var tr = cell.closest('tr.datagrid-row');
		var rowIndex = parseInt(tr.attr('datagrid-row-index'));
		var colIndex = $.inArray(field, fields);

		if (p == 'up' && rowIndex > 0){
			rowIndex--;
		} else if (p == 'down'){
			if (opts.finder.getRow(target, rowIndex+1)){
				rowIndex++;
			}
		} else if (p == 'left'){
			var i = colIndex - 1;
			while(i >= 0){
				var col = dg.datagrid('getColumnOption', fields[i]);
				if (!col.hidden){
					colIndex = i;
					break;
				}
				i--;
			}
		} else if (p == 'right'){
			var i = colIndex + 1;
			while(i <= fields.length-1){
				var col = dg.datagrid('getColumnOption', fields[i]);
				if (!col.hidden){
					colIndex = i;
					break;
				}
				i++;
			}
		}

		field = fields[colIndex];

		_go({index:rowIndex, field:field});

		function _go(p){
			dg.datagrid('scrollTo', p.index);
			unselectAllCells(target);
			selectCell(target, p);
			var td = opts.finder.getTr(target, p.index, 'body', 2).find('td[field="'+p.field+'"]');
			if (td.length){
				var body2 = dg.data('datagrid').dc.body2;
				var left = td.position().left;
				if (left < 0){
					body2._scrollLeft(body2._scrollLeft() + left*(opts.isRtl?-1:1));
				} else if (left+td._outerWidth()>body2.width()){
					body2._scrollLeft(body2._scrollLeft() + (left+td._outerWidth()-body2.width())*(opts.isRtl?-1:1));
				}
			}
		}
	}

	// end the current cell editing
	function endCellEdit(target, accepted, flag){
		var dg = $(target);
		var cell = dg.datagrid('cell');
		
		// 콤보박스인 경우 text를 화면에 표시하기 위해 값을 set함(YNI-Maker, 2017.07.17)
		try {
	        var ed = dg.datagrid('getEditor', {index:cell.index, field:cell.field});
			
			if(!oUtil.isNull(ed)) {
	            var tg = $(ed.target);
	            
	            if(tg.hasClass("combo-f")) {
	                var copts = tg.combobox('options');
	                var cdata = tg.combobox("getData");
	                var data = dg.datagrid('getSelected');
	                var ctext = tg.combobox("getText");
	                
	          		//console.log("cell.index = " + cell.index + ", " + cell.field + ", object text = " + tg.combobox("getText") + ", length = " + cdata.length);
	                
	                var nodata = true;
	                for(var k = 0; k < cdata.length; k++) {
	                    if(ctext == cdata[k][copts.textField]) {
		                    nodata = false;
		                    break;
		                }
		            }
	                
	                if(nodata) {
//	                    $.messager.show({
//			                title:resource.getMessage("ERROR"),
//			                msg:resource.getMessage("MSG_NO_SELECT"),
//			                showType:null,
//			                timeout:1000,
//			                style:{
//			                    right:'',
//			                    bottom:''
//			                }
//			            });
			            
	                    return false;
	                } else {
	                    data[copts.viewField] = tg.combobox("getText");
	                    flag = "y";
	                }
	        	}
	        }
        } catch(e) { }
        
		if (cell){
			var input = dg.datagrid('input', cell);
			
			if (input){
				if (accepted){
				    
					if (dg.datagrid('validateRow', cell.index)){
						dg.datagrid('endEdit', cell.index);
						dg.datagrid('gotoCell', cell);
					} else {
						dg.datagrid('gotoCell', cell);
						input.focus();
						return false;
					}
				} else {
					dg.datagrid('cancelEdit', cell.index);
					dg.datagrid('gotoCell', cell);
				}
			}
		}
		
		// 값이 입력된 후 callbeck함수를 호출한다.
		if(flag == "y") {
			var pid = grid.handle.getProgramID(dg);
			var gridId = grid.handle.getGridID(dg);
	    	var conf = grid.getInitConfig(gridId);
	    	var cfunc = conf.cellEditCallBackFunction;
	    	var fieldId = cell.field;
	    	var cellIdx = cell.index;
	    	var gridRow = dg.datagrid("getData").rows[cellIdx];
	    	
	    	if(!oUtil.isNull(cfunc)) {
		    	var pro_id = eval("window." + pid + ".event");
		        
		        if (!oUtil.isNull(pro_id)) {
		            if (typeof(pro_id[cfunc]) == "function") {
		                pro_id[cfunc](gridRow, cellIdx, fieldId);
		            }
		        }
		    }
    	}
    	
		return true;
	}

	function editCell(target, param){
		var dg = $(target);
		var opts = dg.datagrid('options');
		var input = dg.datagrid('input', param);
		
		var passyn = true;
		var pid = grid.handle.getProgramID(dg);
        var gridId = grid.handle.getGridID(dg);
		var pro_id = eval("window." + pid + ".event");
		
		// 셀 에디팅 전 이벤트 처리(true:에디팅 가능, false:에디팅 불가) - (2021.01.24)
		if (!oUtil.isNull(pro_id)) {
            if (typeof(pro_id["onEditCell_"+gridId]) == "function") {
                passyn = pro_id["onEditCell_"+gridId](dg, param.index, param.field);
            }
        }
        
        if(passyn == false) {
    		return;
        }
        
		if (input){
			dg.datagrid('gotoCell', param);
			input.focus();
			return;
		}
		
		if (!endCellEdit(target, true)){return;}
		if (opts.onBeforeCellEdit.call(target, param.index, param.field) == false){
			return;
		}

		var fields = dg.datagrid('getColumnFields',true).concat(dg.datagrid('getColumnFields'));
		
		$.map(fields, function(field){
			var col = dg.datagrid('getColumnOption', field);
			col.editor1 = col.editor;
			if (field != param.field){
				col.editor = null;
			}
		});

		var col = dg.datagrid('getColumnOption', param.field);
		if (col.editor){
			dg.datagrid('beginEdit', param.index);
			var input = dg.datagrid('input', param);
			
			if (input){
				dg.datagrid('gotoCell', param);
				
				setTimeout(function(){
					input.unbind('.cellediting').bind('keydown.cellediting', function(e){
						if (e.keyCode == 13){
							return opts.navHandler['13'].call(target, e);
							// return false;
						}
					});
					
                   input.focus();
				}, 0);
				
				var ed = dg.datagrid('getEditor', {index:param.index, field:param.field});
				
    			if(!oUtil.isNull(ed)) {
    	            var tg = $(ed.target);
    	                
    	            // 콤보박스는 제외하고 key를 누를 때, 첫 입력되는 값을 input box에 입력하도록 함(2020-02-28)
    	            if(tg.hasClass("combo-f")) {
    	                opts.onCellEdit.call(target, param.index, param.field, param.value);
    	            } else {
						if(param.value != undefined) {
		                    var valin = input.val() + param.value;
							
							if(!oUtil.isNull($(ed.target).searchbox("options"))) { // 검색입력바 추가(2020.05.20), 추후 컴포넌트 추가시에 이 부분을 먼저 추가하면 됨
	                    		$(ed.target).searchbox("setValue", valin);
							} else {
								try {
			                    	input.numberbox("setValue", valin);
			                    } catch(e) {
			                    	input.val(valin);
			                    }
			                }
						}
						
						if(input.val()) {
						    // 블럭을 지정함(2020-02-28)
						    if(input.val().length > 0) input.select();
		                }
    	        	}
    	        }
			} else {
				dg.datagrid('cancelEdit', param.index);
				dg.datagrid('gotoCell', param);
			}
		} else {
			dg.datagrid('gotoCell', param);
		}

		$.map(fields, function(field){
			var col = dg.datagrid('getColumnOption', field);
			col.editor = col.editor1;
		});
	}

	function enableCellSelecting(target){
		var dg = $(target);
		var state = dg.data('datagrid');
		var panel = dg.datagrid('getPanel');
		var opts = state.options;
		var dc = state.dc;
		
		panel.attr('tabindex',1).css('outline-style','none').unbind('.cellediting').bind('keydown.cellediting', function(e){
			var h = opts.navHandler[e.keyCode];
			if (h){
				return h.call(target, e);
			}
		});
		dc.body1.add(dc.body2).unbind('.cellediting').bind('click.cellediting', function(e){
			var tr = $(e.target).closest('.datagrid-row');
			if (tr.length && tr.parent().length){
				var td = $(e.target).closest('td[field]', tr);
				if (td.length){
					var index = parseInt(tr.attr('datagrid-row-index'));
					var field = td.attr('field');
					var p = {
						index: index,
						field: field
					};
					if (opts.singleSelect){
						selectCell(target, p);
					} else {
						if (opts.ctrlSelect){
							if (e.ctrlKey){
								if (td.hasClass('datagrid-row-selected')){
									unselectCell(target, p);
								} else {
									selectCell(target, p);
								}
							} else {
								unselectAllCells(target);
								selectCell(target, p);
							}
						} else {
							if (td.hasClass('datagrid-row-selected')){
								unselectCell(target, p);
							} else {
								selectCell(target, p);
							}
						}
					}
				}
			}
		}).bind('mouseover.cellediting', function(e){
			var td = $(e.target).closest('td[field]');
			if (td.length){
				td.addClass('datagrid-row-over');
				td.closest('tr.datagrid-row').removeClass('datagrid-row-over');
			}
		}).bind('mouseout.cellediting', function(e){
			var td = $(e.target).closest('td[field]');
			td.removeClass('datagrid-row-over');
		});

		opts.isRtl = dg.datagrid('getPanel').css('direction').toLowerCase()=='rtl';
		opts.OldOnBeforeSelect = opts.onBeforeSelect;
		opts.onBeforeSelect = function(){
			return false;
		};
		dg.datagrid('clearSelections');
	}

	function disableCellSelecting(target){
		var dg = $(target);
		var state = dg.data('datagrid');
		var panel = dg.datagrid('getPanel');
		var opts = state.options;
		
		opts.onBeforeSelect = opts.OldOnBeforeSelect || opts.onBeforeSelect;
		panel.unbind('.cellediting').find('td.datagrid-row-selected').removeClass('datagrid-row-selected');
		
		var dc = state.dc;
		
		dc.body1.add(dc.body2).unbind('.cellediting');
	}

	function enableCellEditing(target){
		var dg = $(target);
		var opts = dg.datagrid('options');
		var panel = dg.datagrid('getPanel');
		
		panel.attr('tabindex',1).css('outline-style','none').unbind('.cellediting').bind('keydown.cellediting', function(e){
			var h = opts.navHandler[e.keyCode];
			if (h){
				return h.call(target, e);
			}
		}).bind('keypress.cellediting', function(e){
			return opts.navHandler['keypress'].call(target, e);
		});
		panel.panel('panel').unbind('.cellediting').bind('keydown.cellediting', function(e){
			e.stopPropagation();
		}).bind('keypress.cellediting', function(e){
			e.stopPropagation();
		}).bind('mouseover.cellediting', function(e){
			var td = $(e.target).closest('td[field]');
			if (td.length){
				td.addClass('datagrid-row-over');
				td.closest('tr.datagrid-row').removeClass('datagrid-row-over');
			}
		}).bind('mouseout.cellediting', function(e){
			var td = $(e.target).closest('td[field]');
			td.removeClass('datagrid-row-over');
		});

		opts.isRtl = dg.datagrid('getPanel').css('direction').toLowerCase()=='rtl';
		opts.oldOnClickCell = opts.onClickCell;
		opts.oldOnDblClickCell = opts.onDblClickCell;
		opts.onClickCell = function(index, field, value){
			if (opts.clickToEdit){
				$(this).datagrid('editCell', {index:index,field:field});
			} else {
				if (endCellEdit(this, true)){
					$(this).datagrid('gotoCell', {
						index: index,
						field: field
					});
				}
			}
			//opts.oldOnClickCell.call(this, index, field, value);
		}
		if (opts.dblclickToEdit){
			opts.onDblClickCell = function(index, field, value){
				$(this).datagrid('editCell', {index:index,field:field});
				opts.oldOnDblClickCell.call(this, index, field, value);
			}
		}
		opts.OldOnBeforeSelect = opts.onBeforeSelect;
		opts.onBeforeSelect = function(){
			return false;
		};
		
		dg.datagrid('clearSelections');
	}

	function disableCellEditing(target){
		var dg = $(target);
		var panel = dg.datagrid('getPanel');
		var opts = dg.datagrid('options');
		
		opts.onClickCell = opts.oldOnClickCell || opts.onClickCell;
		opts.onDblClickCell = opts.oldOnDblClickCell || opts.onDblClickCell;
		opts.onBeforeSelect = opts.OldOnBeforeSelect || opts.onBeforeSelect;
		
		panel.unbind('.cellediting').find('td.datagrid-row-selected').removeClass('datagrid-row-selected');
		panel.panel('panel').unbind('.cellediting');
	}


	$.extend($.fn.datagrid.methods, {
		editCell: function(jq, param){
			return jq.each(function(){
				editCell(this, param);
			});
		},
		endCellEdit : function(jq){
			return jq.each(function(){
				endCellEdit(this, true);
			});
		},
		isEditing: function(jq, index){
			var opts = $.data(jq[0], 'datagrid').options;
			var tr = opts.finder.getTr(jq[0], index);
			return tr.length && tr.hasClass('datagrid-row-editing');
		},
		gotoCell: function(jq, param){
			return jq.each(function(){
				gotoCell(this, param);
			});
		},
		enableCellEditing: function(jq){
			return jq.each(function(){
				enableCellEditing(this);
			});
		},
		disableCellEditing: function(jq){
			return jq.each(function(){
				disableCellEditing(this);
			});
		},
		enableCellSelecting: function(jq){
			return jq.each(function(){
				enableCellSelecting(this);
			});
		},
		disableCellSelecting: function(jq){
			return jq.each(function(){
				disableCellSelecting(this);
			});
		},
		input: function(jq, param){
			if (!param){return null;}
			var ed = jq.datagrid('getEditor', param);
			if (ed){
				var t = $(ed.target);
				
				if (t.hasClass('textbox-f')){
					t = t.textbox('textbox');
				} else if(!oUtil.isNull($(ed.target).searchbox("options"))) { // 검색입력바 추가(2020.05.20), 추후 컴포넌트 추가시에 이 부분을 먼저 추가하면 됨
					t = t.searchbox('textbox');
				}
				
				return t;
			} else {
				return null;
			}
		},
		cell: function(jq){		// get current cell info {index,field}
			return getCurrCell(jq[0]);
		},
		getSelectedCells: function(jq){
			return getSelectedCells(jq[0]);
		},
		selectCell : function(jq, param){
			return jq.each(function(){
				selectCell(this, param);
			});
		}
	});

})(jQuery);
