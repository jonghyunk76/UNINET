<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="mmPop">

    <!-- MMA001 START : 메인화면 -->
    <select id="MMA001.selectClosingInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT TO_CHAR(IH.TRANS_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CLOSING_DATE
              ,FN_GET_COMMON_CD(IH.COMPANY_CD, 'TRANS_STATUS',
               (CASE WHEN IH.BATCH_STATUS = 'E' THEN '2' ELSE '1' END), 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS CLOSING_STATUS 
          FROM INTERFACE_HISTORY IH
         WHERE IH.COMPANY_CD = #COMPANY_CD#
           AND IH.SCHEDULE_CD = #SCHEDULE_CD#
           AND IH.INTERFACE_HISTORY_ID = (SELECT MAX(IHT.INTERFACE_HISTORY_ID)
                                            FROM INTERFACE_HISTORY IHT
                                           WHERE IHT.COMPANY_CD = #COMPANY_CD#
                                             AND IHT.SCHEDULE_CD = #SCHEDULE_CD#
                                             AND IHT.FROM_DATE BETWEEN #YYYYMM#||'01' AND #YYYYMM#||'31'
                                          )
    </select>

    <select id="MMA001.selectDataInterfaceCount" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COALESCE(MAX(IF_ITEM_PO), 0) AS IF_ITEM_PO
              ,COALESCE(MAX(IF_ITEM_INV), 0) AS IF_ITEM_INV
              ,COALESCE(MAX(IF_ITEM_BOM), 0) AS IF_ITEM_BOM
              ,COALESCE(MAX(IF_ITEM_SALES), 0) AS IF_ITEM_SALES
          FROM (
                SELECT (CASE WHEN IIM.IF_CD IN('RPT_PP_001', 'RPT_PP_003') THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM M_BOM A 
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.YYYYMM = CM.YYYYMM)
                             WHEN IIM.IF_CD IN('RPT_PP_002', 'RPT_PP_004') THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM S_BOM A
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND CM.YYYYMM||'01' BETWEEN A.START_DATE AND A.END_DATE)
                             WHEN IIM.IF_CD = 'RPT_PP_003' THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM ST_M_BOM A
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.YYYYMM = CM.YYYYMM)
                             WHEN IIM.IF_CD = 'RPT_PP_004' THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM ST_S_BOM A
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND CM.YYYYMM||'01' BETWEEN A.START_DATE AND A.END_DATE)
                             WHEN IIM.IF_CD = 'RPT_PP_006' THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM R_BOM A
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND CM.YYYYMM||'01' BETWEEN A.START_DATE AND A.END_DATE)
                             ELSE 0
                         END) AS IF_ITEM_BOM
                      ,(CASE WHEN IIM.IF_CD = 'RPT_MM_004' THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM PROCUREMENT A 
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.TXN_DATE BETWEEN #YYYYMM#||'01' AND #YYYYMM#||'31')
                             ELSE 0
                        END) AS IF_ITEM_PO
                      ,(CASE WHEN IIM.IF_CD = 'RPT_CO_001' THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM INVENTORY_CLOSING_MONTHLY A 
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.YYYYMM = CM.YYYYMM)
                             WHEN IIM.IF_CD = 'RPT_CO_005' THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM INV_DAILY_PROD A 
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.CLOSING_DATE BETWEEN #YYYYMM#||'01' AND #YYYYMM#||'31')
                             ELSE 0
                        END) AS IF_ITEM_INV
                       ,(CASE WHEN IIM.IF_CD = 'RPT_SD_004' OR IIM.IF_CD = 'RPT_SD_005' OR IIM.IF_CD = 'RPT_SD_008' THEN
                                  (SELECT COUNT(A.COMPANY_CD) FROM SALES A 
                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND SUBSTRING(A.INVOICE_DATE, 1, 6) = CM.YYYYMM)
                              ELSE 0
                        END) AS IF_ITEM_SALES
                  FROM INTERFACE_SCHEDULE_MAPPING ISM
                       INNER JOIN INTERFACE_ITEM_MST IIM
                          ON IIM.COMPANY_CD = ISM.COMPANY_CD
                         AND IIM.IF_CD = ISM.IF_CD
                         AND IIM.USING_YN = 'Y'
                         AND IIM.ITEM_TYPE != 'P'
                       INNER JOIN (SELECT #YYYYMM# AS YYYYMM ) CM
                          ON 1 = 1
                 WHERE ISM.COMPANY_CD = #COMPANY_CD#
                   AND ISM.SCHEDULE_CD = #SCHEDULE_CD#
                   AND ISM.IF_CD IN('RPT_PP_002', 'RPT_MM_004', 'RPT_CO_001', 'RPT_PP_001', 'RPT_SD_005', 'RPT_SD_008', 'RPT_PP_003', 'RPT_PP_004', 'RPT_PP_006', 'RPT_CO_005')
              ) I
    </select>

    <select id="MMA001.selectVendorCoCount" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT P.COMPANY_CD
              ,P.YYYYMM
              ,P.CO_RECEPT_TOT
              ,P.CO_DECLARE_CNT
              ,P.CO_RECEPT_CNT
              ,ROUND((CASE WHEN P.CO_RECEPT_TOT > 0 THEN (P.CO_RECEPT_CNT/P.CO_RECEPT_TOT::NUMERIC) ELSE 0 END) *100, 2) AS CO_RECEPT_RATE
              ,P.CN_RECEPT_TOT
              ,P.CN_DECLARE_CNT
              ,P.CN_RECEPT_CNT
              ,ROUND((CASE WHEN P.CN_RECEPT_TOT > 0 THEN (P.CN_RECEPT_CNT/P.CN_RECEPT_TOT::NUMERIC) ELSE 0 END)*100, 2) AS CN_RECEPT_RATE
              ,(P.CO_RECEPT_TOT+P.CN_RECEPT_TOT) AS TCO_RECEPT_TOT
              ,(P.CO_DECLARE_CNT+P.CN_DECLARE_CNT) AS TCO_DECLARE_CNT
              ,(P.CO_RECEPT_CNT+P.CN_RECEPT_CNT) AS TCO_RECEPT_CNT
              ,(P.CO_RECEPT_TOT+P.CN_RECEPT_TOT)-(P.CO_RECEPT_CNT+P.CN_RECEPT_CNT) AS TCO_NORECEPT_CNT
              ,ROUND((CASE WHEN (P.CO_RECEPT_TOT+P.CN_RECEPT_TOT) > 0 THEN ((P.CO_RECEPT_CNT+P.CN_RECEPT_CNT)/(P.CO_RECEPT_TOT+P.CN_RECEPT_TOT)::NUMERIC) ELSE 0 END)*100, 2) AS TCO_RECEPT_RATE
          FROM (
                SELECT P.COMPANY_CD
                      ,P.YYYYMM
                      ,SUM(CASE WHEN P.TXN_TYPE = 'D' OR P.TXN_TYPE IS NULL THEN 1 ELSE 0 END) AS CO_RECEPT_TOT
                      ,SUM(CASE WHEN (P.TXN_TYPE = 'D' OR P.TXN_TYPE IS NULL) AND (P.CO_DOC_NO IS NOT NULL OR P.CO_DOC_NO != '') THEN 1 ELSE 0 END) AS CO_RECEPT_CNT
                      ,SUM(CASE WHEN (P.TXN_TYPE = 'D' OR P.TXN_TYPE IS NULL) AND (P.INVOICE_NO IS NOT NULL OR P.INVOICE_NO != '') THEN 1 ELSE 0 END) AS CO_DECLARE_CNT
                      ,SUM(CASE WHEN P.TXN_TYPE = 'I' THEN 1 ELSE 0 END) AS CN_RECEPT_TOT
                      ,SUM(CASE WHEN P.TXN_TYPE = 'I' AND (P.CO_DOC_NO IS NOT NULL OR P.CO_DOC_NO != '') THEN 1 ELSE 0 END) AS CN_RECEPT_CNT
                      ,SUM(CASE WHEN (P.TXN_TYPE = 'I' OR P.TXN_TYPE IS NULL) AND (P.INVOICE_NO IS NOT NULL OR P.INVOICE_NO != '') THEN 1 ELSE 0 END) AS CN_DECLARE_CNT
                  FROM (
                        SELECT P.COMPANY_CD, P.DIVISION_CD, P.VENDOR_CD, P.ITEM_CD, VI.FTA_GROUP_CD, P.TXN_TYPE, MAX(RCCM.CO_DOC_NO) AS CO_DOC_NO
                        <isNotEqual property="SESSION_FTA_NATION" compareValue="VN">
                              ,NULL AS INVOICE_NO
                              ,P.TXN_YYYYMM AS YYYYMM
                          FROM DW_PROCUREMENT P
                        </isNotEqual>
                        <isEqual property="SESSION_FTA_NATION" compareValue="VN">
                              ,P.INVOICE_NO
                              ,SUBSTR(P.TXN_DATE, 1, 6) AS YYYYMM
                          FROM PROCUREMENT P
                        </isEqual>
                               INNER JOIN VENDOR_ITEM VI
                                  ON P.COMPANY_CD = VI.COMPANY_CD
                                 AND P.DIVISION_CD = VI.DIVISION_CD
                                 AND P.VENDOR_CD = VI.VENDOR_CD
                                 AND P.ITEM_CD = VI.ITEM_CD
                                 AND VI.CO_DOC_TYPE != 'X'
                               <isNotEmpty property="SESSION_VENDOR_CO_TARGET">
                                 <isEqual property="SESSION_VENDOR_CO_TARGET" compareValue="1">
                                   AND VI.INPUT_TYPE IN('P', 'K')
                                 </isEqual>
                                 <isEqual property="SESSION_VENDOR_CO_TARGET" compareValue="2">
                                   AND VI.CO_TARGET_YN = 'Y'
                                 </isEqual>
                               </isNotEmpty>
                               LEFT OUTER JOIN RCV_CO_CERTIFICATE_DTL ECCD
                                 ON ECCD.COMPANY_CD = VI.COMPANY_CD
                                AND ECCD.DIVISION_CD = VI.DIVISION_CD
                                AND ECCD.VENDOR_CD = VI.VENDOR_CD
                                AND ECCD.ITEM_CD = VI.ITEM_CD
                                AND ECCD.FTA_GROUP_CD = VI.FTA_GROUP_CD
                             <isNotEqual property="SESSION_FTA_NATION" compareValue="VN">
                               <isNotEmpty property="CO_FTA_LIST">
	                             <iterate open=" ECCD.FTA_CD IN(" close=")" property="CO_FTA_LIST" conjunction=" , " prepend="AND">
	                               #CO_FTA_LIST[].FTA_CD#
	                             </iterate>
	                           </isNotEmpty>
	                         </isNotEqual>
                               LEFT OUTER JOIN RCV_CO_CERTIFICATE_MST RCCM
                                 ON RCCM.COMPANY_CD = ECCD.COMPANY_CD
                                AND RCCM.DIVISION_CD = ECCD.DIVISION_CD
                                AND RCCM.CO_DOC_NO = ECCD.CO_DOC_NO
                                AND RCCM.CO_DOC_TYPE IN('C', 'N')
                                AND RCCM.CO_ISSUE_STATUS = '2'
                              <isNotEqual property="SESSION_FTA_NATION" compareValue="VN">
                                AND P.TXN_YYYYMM BETWEEN SUBSTRING(RCCM.APPLY_DATE, 1, 6) AND SUBSTRING(RCCM.END_DATE, 1, 6)
                              </isNotEqual>
                              <isEqual property="SESSION_FTA_NATION" compareValue="VN">
                                AND RCCM.INVOICE_NO = P.INVOICE_NO
                              </isEqual>
                         WHERE P.COMPANY_CD = #COMPANY_CD#
                         <isNotEqual property="SESSION_FTA_NATION" compareValue="VN">
                           AND P.TXN_YYYYMM BETWEEN #START_YYYYMM# AND #YYYYMM#
                         </isNotEqual>
                         <isEqual property="SESSION_FTA_NATION" compareValue="VN">
                           AND P.TXN_DATE BETWEEN #START_YYYYMM#||'01' AND #YYYYMM#||'31'
                         </isEqual>
                           AND NOT EXISTS(SELECT 1
                                            FROM VENDOR V
                                           WHERE V.COMPANY_CD = P.COMPANY_CD
                                             AND V.VENDOR_CD = P.VENDOR_CD
                                             AND V.CO_DOC_TYPE = 'X')
                       <isNotEqual property="SESSION_FTA_NATION" compareValue="VN">
                         GROUP BY P.COMPANY_CD, P.DIVISION_CD, P.TXN_YYYYMM, P.VENDOR_CD, P.ITEM_CD, VI.FTA_GROUP_CD, P.TXN_TYPE
                       </isNotEqual>
                       <isEqual property="SESSION_FTA_NATION" compareValue="VN">
                         GROUP BY P.COMPANY_CD, P.DIVISION_CD, P.TXN_DATE, P.VENDOR_CD, P.ITEM_CD, VI.FTA_GROUP_CD, P.TXN_TYPE, P.INVOICE_NO
                       </isEqual>
                        ) P
                 GROUP BY P.COMPANY_CD, P.YYYYMM
                ) P
          ORDER BY P.YYYYMM DESC
    </select>

    <select id="MMA001.selectDeterminateCount" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT S.*
              ,ROUND(((CASE WHEN S.DE_SUCC_CNT > 0 THEN S.ORG_CNT/S.DE_SUCC_CNT::NUMERIC ELSE 0 END) * 100), 2) AS DE_ORG_RATE
              ,ROUND(((CASE WHEN S.DE_SUCC_CNT > 0 THEN 100 - (S.ORG_CNT/S.DE_SUCC_CNT::NUMERIC *100) ELSE 0 END)), 2) AS DE_NOORG_RATE
          FROM (
                SELECT S.YYYYMM
                      ,CEIL(SUM(ITEM_RST)) AS ITEM_CNT
                      ,COUNT(S.SALES_MGMT_NO) AS FTA_CNT
                      ,SUM(S.SUCC_CNT) AS DE_SUCC_CNT
                      ,SUM(S.FAIL_CNT) AS DE_FAIL_CNT
                      ,SUM(S.EXP_CNT) AS DE_EXP_CNT
                      ,SUM(S.NOVER_CNT) AS DE_NOVER_CNT
                      ,SUM(S.ORG_CNT) AS ORG_CNT
                      ,SUM(S.NOORG_CNT) AS NOORG_CNT
                  FROM (
                        SELECT S.SALES_MGMT_NO
                              ,S.YYYYMM
                              ,S.CO_REQ_NO
                              ,S.FTA_CD
                              ,1.00/COUNT(*) OVER(PARTITION BY S.SALES_MGMT_NO) AS ITEM_RST
                              ,(CASE WHEN MAX(S.CO_REQ_NO) IS NOT NULL AND
                                          SUM(CASE WHEN S.STATUS = '4' THEN 0 ELSE 1 END) = 0 THEN 1
                                     ELSE 0 END) AS SUCC_CNT
                              ,(CASE WHEN MAX(S.CO_REQ_NO) IS NOT NULL AND
                                          SUM(CASE WHEN S.STATUS = '9' THEN 1 ELSE 0 END) > 0 THEN 1
                                     ELSE 0 END) AS FAIL_CNT
                              ,(CASE WHEN MAX(S.DECISION_YN) = 'Y' AND (MAX(S.CO_REQ_NO) IS NULL OR
                                          SUM(CASE WHEN S.STATUS NOT IN('4', '9') THEN 1 ELSE 0 END) > 0) THEN 1
                                     ELSE 0 END) AS NOVER_CNT
                              ,(CASE WHEN MAX(S.DECISION_YN) = 'N' THEN 1 ELSE 0 END) AS EXP_CNT
                              ,(CASE WHEN MAX(S.CO_REQ_NO) IS NOT NULL AND
                                          SUM(CASE WHEN S.STATUS = '4' THEN 0 ELSE 1 END) = 0 THEN
                                          SUM(CASE WHEN S.COMPANY_CO_YN = 'Y' THEN 1 ELSE 0 END)
                                     ELSE 0 END) AS ORG_CNT
                              ,(CASE WHEN MAX(S.CO_REQ_NO) IS NOT NULL AND
                                          SUM(CASE WHEN S.STATUS = '4' THEN 0 ELSE 1 END) = 0 THEN
                                          SUM(CASE WHEN S.COMPANY_CO_YN = 'N' OR S.COMPANY_CO_YN IS NULL OR
                                                        S.COMPANY_CO_YN = ''
                                                   THEN 1 ELSE 0 END)
                                     ELSE 0 END) AS NOORG_CNT
                          FROM (
                                SELECT SD.SALES_MGMT_NO, SD.YYYYMM, SD.CO_REQ_NO, FM.FTA_CD, FM.STATUS, FM.COMPANY_CO_YN, COALESCE(SD.DECISION_YN, 'Y') AS DECISION_YN
                                  FROM SALES_DOMESTIC SD
                                       LEFT OUTER JOIN FCR_MST FM
                                         ON SD.COMPANY_CD = FM.COMPANY_CD
                                        AND SD.DIVISION_CD = FM.DIVISION_CD
                                        AND SD.CO_REQ_NO = FM.CO_REQ_NO
                                        AND SD.YYYYMM = FM.YYYYMM
                                 WHERE SD.COMPANY_CD = #COMPANY_CD#
                                   AND SD.YYYYMM BETWEEN #START_YYYYMM# AND #YYYYMM#
                                   AND SD.DELETE_YN = 'N'
                                 <isEqual property="SESSION_CUSTOMER_CO_TARGET" compareValue="1">
                                   AND EXISTS(SELECT 1 FROM CUSTOMER C
                                               WHERE C.COMPANY_CD = SD.COMPANY_CD
                                                 AND C.CUSTOMER_CD = SD.CUSTOMER_CD
                                                 AND C.CO_TARGET_YN = 'Y')
                                   <isEqual property="SESSION_CRTCT_SUBITEM_YN" compareValue="N">
                                   AND COALESCE(SD.OYB_YN, 'N') != 'Y'
                                   </isEqual>
                                 </isEqual>
                                UNION ALL
                                SELECT SE.SALES_MGMT_NO, SUBSTRING(SE.INVOICE_DATE,1,6) AS YYYYMM, SE.CO_REQ_NO, FM.FTA_CD, FM.STATUS, FM.COMPANY_CO_YN, COALESCE(SE.DECISION_YN, 'Y') AS DECISION_YN
                                  FROM SALES_EXPORT SE
                                       LEFT OUTER JOIN FCR_MST FM
                                         ON SE.COMPANY_CD = FM.COMPANY_CD
                                        AND SE.DIVISION_CD = FM.DIVISION_CD
                                        AND SE.CO_REQ_NO = FM.CO_REQ_NO
                                        AND FM.YYYYMM BETWEEN #START_YYYYMM# AND #YYYYMM#
                                 WHERE SE.COMPANY_CD = #COMPANY_CD#
                                   AND SE.INVOICE_DATE BETWEEN #START_YYYYMM#||'01' AND #YYYYMM#||'31'
                                   AND SE.DELETE_YN = 'N'
                                 <isEqual property="SESSION_CUSTOMER_CO_TARGET" compareValue="1">
                                   AND EXISTS(SELECT 1 FROM CUSTOMER C
                                               WHERE C.COMPANY_CD = SE.COMPANY_CD
                                                 AND C.CUSTOMER_CD = SE.CUSTOMER_CD
                                                 AND C.CO_TARGET_YN = 'Y')
                                   <isEqual property="SESSION_CRTCT_SUBITEM_YN" compareValue="N">
                                   AND COALESCE(SE.OYB_YN, 'N') != 'Y'
                                   </isEqual>
                                   <isEqual property="SESSION_CRTCT_EXPORT_YN" compareValue="N">
                                   AND SE.COMPANY_CD IS NULL
                                   </isEqual>
                                 </isEqual>
                                ) S
                         GROUP BY S.SALES_MGMT_NO, S.YYYYMM, S.CO_REQ_NO, S.FTA_CD
                        ) S
                  GROUP BY S.YYYYMM
                ) S
         ORDER BY S.YYYYMM DESC
    </select>
    
    <select id="MMA001.selectMonthlyDeterminateCount" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT S.*
              ,ROUND(((CASE WHEN S.DE_SUCC_CNT > 0 THEN S.ORG_CNT/S.DE_SUCC_CNT ELSE 0 END) * 100), 2) AS DE_ORG_RATE
              ,ROUND(((CASE WHEN S.DE_SUCC_CNT > 0 THEN 100 - (S.ORG_CNT/S.DE_SUCC_CNT *100) ELSE 0 END)), 2) AS DE_NOORG_RATE
          FROM (
                SELECT S.YYYYMM
                      ,SUM(ITEM_CNT) AS ITEM_CNT
                      ,SUM(S.FTA_CNT) AS FTA_CNT
                      ,SUM(S.DE_SUCC_CNT) AS DE_SUCC_CNT
                      ,SUM(S.DE_FAIL_CNT) AS DE_FAIL_CNT
                      ,SUM(S.DE_EXP_CNT) AS DE_EXP_CNT
                      ,SUM(S.DE_NOVER_CNT) AS DE_NOVER_CNT
                      ,SUM(S.ORG_CNT) AS ORG_CNT
                      ,SUM(S.NOORG_CNT) AS NOORG_CNT
                  FROM (
                        SELECT S.COMPANY_CD
                              ,S.YYYYMM
                              ,S.CUSTOMER_CD
                              ,S.OYB_YN
                              ,S.ITEM_CNT
                              ,S.FTA_CNT
                              ,S.DE_SUCC_CNT
                              ,S.DE_FAIL_CNT
                              ,S.DE_EXP_CNT
                              ,S.DE_NOVER_CNT
                              ,S.ORG_CNT
                              ,S.NOORG_CNT
                          FROM DW_FCR_STATUS S
                         WHERE S.COMPANY_CD = #COMPANY_CD#
                           AND S.YYYYMM BETWEEN #START_YYYYMM# AND #YYYYMM#
                        <isEqual property="SESSION_CUSTOMER_CO_TARGET" compareValue="1">
                           AND EXISTS(SELECT 1 FROM CUSTOMER C
                                       WHERE C.COMPANY_CD = S.COMPANY_CD
                                         AND C.CUSTOMER_CD = S.CUSTOMER_CD
                                         AND C.CO_TARGET_YN = 'Y')
                           <isEqual property="SESSION_CRTCT_SUBITEM_YN" compareValue="N">
                           AND S.OYB_YN != 'Y'
                           </isEqual>
                         </isEqual>
                        ) S
                 GROUP BY S.YYYYMM
                ) S
          ORDER BY S.YYYYMM DESC
    </select>

    <select id="MMA001.selectIssueReportCount" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT S.REPORT_DMT_TOT
              ,S.REPORT_DMT_ISU
              ,ROUND((CASE WHEN S.REPORT_DMT_TOT > 0 THEN (S.REPORT_DMT_ISU/S.REPORT_DMT_TOT::NUMERIC) ELSE 0 END) *100, 2) AS REPORT_DMT_RATE
              ,S.REPORT_EXP_TOT
              ,S.REPORT_EXP_ISU
              ,ROUND((CASE WHEN S.REPORT_EXP_TOT > 0 THEN (S.REPORT_EXP_ISU/S.REPORT_EXP_TOT::NUMERIC) ELSE 0 END) *100, 2) AS REPORT_EXP_RATE
          FROM (
                SELECT COUNT(S.DMT_TOT) AS REPORT_DMT_TOT
                      ,SUM(CASE WHEN DMT_ISU IS NOT NULL THEN 1 ELSE 0 END) AS REPORT_DMT_ISU
                      ,COUNT(S.EXP_TOT) AS REPORT_EXP_TOT
                      ,SUM(CASE WHEN EXP_ISU IS NOT NULL THEN 1 ELSE 0 END) AS REPORT_EXP_ISU
                  FROM (
                        SELECT (CASE WHEN S.EXPORT_FLAG = 'D'THEN S.SALES_MGMT_NO END) AS DMT_TOT
                              ,(CASE WHEN S.EXPORT_FLAG = 'D' AND S.STATUS = '4' THEN MAX(S.CO_DOC_NO) END) AS DMT_ISU
                              ,(CASE WHEN S.EXPORT_FLAG = 'E'THEN S.SALES_MGMT_NO END) AS EXP_TOT
                              ,(CASE WHEN S.EXPORT_FLAG = 'E' AND S.STATUS = '4' THEN MAX(S.CO_DOC_NO) END) AS EXP_ISU
                          FROM (
                                SELECT DISTINCT SD.SALES_MGMT_NO, ICCM.CO_DOC_NO, SD.STATUS, 'D' AS EXPORT_FLAG
                                  FROM SALES_DOMESTIC SD
                                       LEFT OUTER JOIN ISSUE_CO_CERTIFICATE_MST ICCM
                                         ON SD.COMPANY_CD = ICCM.COMPANY_CD
                                        AND SD.DIVISION_CD = ICCM.DIVISION_CD
                                        AND SD.CO_DOC_NO = ICCM.CO_DOC_NO
                                 WHERE SD.COMPANY_CD = #COMPANY_CD#
                                   AND SD.YYYYMM = #YYYYMM#
                                   AND SD.DELETE_YN = 'N'
                                UNION ALL
                                SELECT DISTINCT SE.SALES_MGMT_NO, ICCM.CO_DOC_NO, SE.STATUS, 'E' AS EXPORT_FLAG
                                  FROM SALES_EXPORT SE
                                       LEFT OUTER JOIN ISSUE_CO_CERTIFICATE_MST ICCM
                                         ON SE.COMPANY_CD = ICCM.COMPANY_CD
                                        AND SE.DIVISION_CD = ICCM.DIVISION_CD
                                        AND SE.CO_DOC_NO = ICCM.CO_DOC_NO
                                 WHERE SE.COMPANY_CD = #COMPANY_CD#
                                   AND SUBSTRING(SE.INVOICE_DATE,1,6) = #YYYYMM#
                                   AND SE.DELETE_YN = 'N'
                                 <isEqual property="SESSION_FTA_NATION" compareValue="VN">
                                   AND SE.INVOICE_TYPE = 'E'
                               UNION ALL
                                SELECT DISTINCT SE.SALES_MGMT_NO, ICCM.CO_DOC_NO, SE.STATUS, 'D' AS EXPORT_FLAG
                                  FROM SALES_EXPORT SE
                                       LEFT OUTER JOIN ISSUE_CO_CERTIFICATE_MST ICCM
                                         ON SE.COMPANY_CD = ICCM.COMPANY_CD
                                        AND SE.DIVISION_CD = ICCM.DIVISION_CD
                                        AND SE.CO_DOC_NO = ICCM.CO_DOC_NO
                                 WHERE SE.COMPANY_CD = #COMPANY_CD#
                                   AND SUBSTRING(SE.INVOICE_DATE,1,6) = #YYYYMM#
                                   AND SE.DELETE_YN = 'N'
                                   AND SE.INVOICE_TYPE = 'D'
                                 </isEqual>
                                ) S
                        GROUP BY S.SALES_MGMT_NO, S.STATUS, S.EXPORT_FLAG
                    ) S
                ) S
    </select>

    <update id="MMA001.updateWorkDate" parameterClass="java.util.Map">
        UPDATE FTA_USER
           SET WORK_YYYY_MM = #WORK_YYYYMM#
         WHERE USER_ID = #SESSION_USER_ID#
           AND COMPANY_CD = #SESSION_COMPANY_CD#
    </update>
    
    <select id="MMA001.selectSystemConfig" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT FN_GET_SYSTEM_CONFIG(#COMPANY_CD#, #SYS_CODE#) AS CONFIG_VALUE 
    </select>
    
    <select id="MMA001.selectSystemMenuInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT AM.COMPANY_CD
		      ,MM.MENU_ID
		      ,MM.MENU_NM
		  FROM AUTH_MENU AM
		       INNER JOIN MENU_MGMT MM
		          ON MM.MENU_ID = AM.MENU_ID
		         AND MM.USE_YN = 'Y'
		 WHERE AM.COMPANY_CD = #COMPANY_CD#
		   AND AM.AUTH_GROUP_ID = #AUTH_GROUP_ID#
		   AND AM.MENU_ID = #MENU_ID#
    </select>
    
    <delete id="MMA001.deleteDwMonthFcrStatus" parameterClass="java.util.Map">
        DELETE FROM DW_FCR_STATUS
         WHERE COMPANY_CD = #COMPANY_CD#
           AND YYYYMM = #YYYYMM#
    </delete>
    
    <update id="MMA001.updateDwMonthFcrStatus" parameterClass="java.util.Map">
        INSERT INTO DW_FCR_STATUS(
             COMPANY_CD 
            ,YYYYMM 
            ,CUSTOMER_CD    
            ,OYB_YN 
            ,ITEM_CNT   
            ,FTA_CNT    
            ,DE_SUCC_CNT    
            ,DE_FAIL_CNT    
            ,DE_EXP_CNT 
            ,DE_NOVER_CNT   
            ,ORG_CNT    
            ,NOORG_CNT  
            ,CREATE_DATE    
            ,CREATE_BY  
            ,UPDATE_DATE    
            ,UPDATE_BY
        )
        SELECT S.COMPANY_CD
              ,S.YYYYMM
              ,S.CUSTOMER_CD
              ,S.OYB_YN
              ,CEIL(SUM(ITEM_RST)) AS ITEM_CNT
              ,COUNT(S.SALES_MGMT_NO) AS FTA_CNT
              ,SUM(S.SUCC_CNT) AS DE_SUCC_CNT
              ,SUM(S.FAIL_CNT) AS DE_FAIL_CNT
              ,SUM(S.EXP_CNT) AS DE_EXP_CNT
              ,SUM(S.NOVER_CNT) AS DE_NOVER_CNT
              ,SUM(S.ORG_CNT) AS ORG_CNT
              ,SUM(S.NOORG_CNT) AS NOORG_CNT
              ,NOW()
              ,#SESSION_USER_ID#
              ,NOW()
              ,#SESSION_USER_ID#
          FROM (
                SELECT S.COMPANY_CD
                      ,S.SALES_MGMT_NO
                      ,S.CUSTOMER_CD
                      ,S.OYB_YN
                      ,S.YYYYMM
                      ,S.CO_REQ_NO
                      ,S.FTA_CD
                      ,(CASE WHEN LAG(S.SALES_MGMT_NO) OVER(ORDER BY S.SALES_MGMT_NO) = S.SALES_MGMT_NO THEN 0 ELSE 1 END) AS ITEM_RST
                      ,(CASE WHEN MAX(S.CO_REQ_NO) IS NOT NULL AND
                                  SUM(CASE WHEN S.STATUS = '4' THEN 0 ELSE 1 END) = 0 THEN 1
                             ELSE 0 END) AS SUCC_CNT
                      ,(CASE WHEN MAX(S.CO_REQ_NO) IS NOT NULL AND
                                  SUM(CASE WHEN S.STATUS = '9' THEN 1 ELSE 0 END) > 0 THEN 1
                             ELSE 0 END) AS FAIL_CNT
                      ,(CASE WHEN MAX(S.DECISION_YN) = 'Y' AND (MAX(S.CO_REQ_NO) IS NULL OR
                                  SUM(CASE WHEN S.STATUS NOT IN('4', '9') THEN 1 ELSE 0 END) > 0) THEN 1
                             ELSE 0 END) AS NOVER_CNT
                      ,(CASE WHEN MAX(S.DECISION_YN) = 'N' THEN 1 ELSE 0 END) AS EXP_CNT
                      ,(CASE WHEN MAX(S.CO_REQ_NO) IS NOT NULL AND
                                  SUM(CASE WHEN S.STATUS = '4' THEN 0 ELSE 1 END) = 0 THEN
                                  SUM(CASE WHEN S.COMPANY_CO_YN = 'Y' THEN 1 ELSE 0 END)
                             ELSE 0 END) AS ORG_CNT
                      ,(CASE WHEN MAX(S.CO_REQ_NO) IS NOT NULL AND
                                  SUM(CASE WHEN S.STATUS = '4' THEN 0 ELSE 1 END) = 0 THEN
                                  SUM(CASE WHEN S.COMPANY_CO_YN = 'N' OR S.COMPANY_CO_YN IS NULL
                                                
                                           THEN 1 ELSE 0 END)
                             ELSE 0 END) AS NOORG_CNT
                  FROM (
                        SELECT SD.COMPANY_CD
                              ,SD.SALES_MGMT_NO
                              ,SD.CUSTOMER_CD
                              ,COALESCE(SD.OYB_YN, 'N') AS OYB_YN
                              ,SD.YYYYMM
                              ,SD.CO_REQ_NO
                              ,FM.FTA_CD
                              ,FM.STATUS
                              ,FM.COMPANY_CO_YN
                              ,COALESCE(SD.DECISION_YN, 'Y') AS DECISION_YN
                          FROM SALES_DOMESTIC SD
                               LEFT OUTER JOIN FCR_MST FM
                                 ON SD.COMPANY_CD = FM.COMPANY_CD
                                AND SD.DIVISION_CD = FM.DIVISION_CD
                                AND SD.CO_REQ_NO = FM.CO_REQ_NO
                                AND SD.YYYYMM = FM.YYYYMM
                         WHERE SD.COMPANY_CD = #COMPANY_CD#
                           AND SD.YYYYMM = #YYYYMM#
                           AND SD.DELETE_YN = 'N'
                        UNION ALL
                        SELECT SE.COMPANY_CD
                              ,SE.SALES_MGMT_NO
                              ,SE.CUSTOMER_CD
                              ,COALESCE(SE.OYB_YN, 'N') AS OYB_YN
                              ,SUBSTR(SE.INVOICE_DATE,1,6) AS YYYYMM
                              ,SE.CO_REQ_NO
                              ,FM.FTA_CD
                              ,FM.STATUS
                              ,FM.COMPANY_CO_YN
                              ,COALESCE(SE.DECISION_YN, 'Y') AS DECISION_YN
                          FROM SALES_EXPORT SE
                               LEFT OUTER JOIN FCR_MST FM
                                 ON SE.COMPANY_CD = FM.COMPANY_CD
                                AND SE.DIVISION_CD = FM.DIVISION_CD
                                AND SE.CO_REQ_NO = FM.CO_REQ_NO
                                AND FM.YYYYMM = #YYYYMM#
                         WHERE SE.COMPANY_CD = #COMPANY_CD#
                           AND SE.INVOICE_DATE BETWEEN #YYYYMM#||'01' AND #YYYYMM#||'31'
                           AND SE.DELETE_YN = 'N'
                        ) S
                 GROUP BY S.COMPANY_CD, S.SALES_MGMT_NO, S.CUSTOMER_CD, S.OYB_YN, S.YYYYMM, S.CO_REQ_NO, S.FTA_CD
                ) S
          GROUP BY S.COMPANY_CD
                  ,S.YYYYMM
                  ,S.CUSTOMER_CD
                  ,S.OYB_YN
    </update>
    
    <!-- 협력사 메인화면  -->
    <select id="MMA001.selectSupplierIssueStatus" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT VI.COMPANY_CD
              ,VI.VENDOR_CD
              ,COUNT(*) AS TOT_CNT
              ,SUM(CASE WHEN VI.RECEP_CNT > 0 THEN 1 ELSE 0 END) AS RECEP_CNT
              ,SUM(CASE WHEN VI.RECEP_CNT > 0 THEN 0 ELSE 1 END) AS NO_RECEP_CNT
              ,SUM(CASE WHEN VI.MOD_REQ_CNT > 0 THEN 1 ELSE 0 END) AS MOD_REQ_CNT
              ,SUM(CASE WHEN VI.MOD_CMP_CNT > 0 THEN 1 ELSE 0 END) AS MOD_CMP_CNT
              ,SUM(CASE WHEN VI.MOD_DEL_CNT > 0 THEN 1 ELSE 0 END) AS MOD_DEL_CNT
          FROM (
                SELECT VI.COMPANY_CD
                      ,VI.VENDOR_CD
                      ,VI.FTA_GROUP_CD
                      ,VI.ITEM_CD
                      ,SUM(CASE WHEN RCCD.CO_DOC_NO IS NOT NULL THEN 1 ELSE 0 END) AS RECEP_CNT
                      ,SUM(CASE WHEN RCCM.MODIFY_REQUEST_STATUS = 'R' AND RCCD.CO_DOC_NO IS NOT NULL THEN 1 ELSE 0 END) AS MOD_REQ_CNT
                      ,SUM(CASE WHEN RCCM.MODIFY_REQUEST_STATUS = 'C' AND RCCD.CO_DOC_NO IS NOT NULL THEN 1 ELSE 0 END) AS MOD_CMP_CNT
                      ,SUM(CASE WHEN RCCM.MODIFY_REQUEST_STATUS = 'N' AND RCCD.CO_DOC_NO IS NOT NULL THEN 1 ELSE 0 END) AS MOD_DEL_CNT
                  FROM VENDOR_ITEM VI
                        LEFT OUTER JOIN RCV_CO_CERTIFICATE_MST RCCM
                          ON RCCM.COMPANY_CD = VI.COMPANY_CD
                         AND RCCM.DIVISION_CD = VI.DIVISION_CD
                         AND RCCM.VENDOR_CD = VI.VENDOR_CD
                         AND RCCM.FTA_GROUP_CD = VI.FTA_GROUP_CD
                         AND RCCM.CO_DOC_TYPE     = 'C'
                         AND RCCM.CO_ISSUE_STATUS = '2'
                         AND RCCM.DELETE_YN      != 'Y'
                        LEFT OUTER JOIN RCV_CO_CERTIFICATE_DTL RCCD
                          ON RCCD.CO_DOC_NO = RCCM.CO_DOC_NO
                         AND RCCD.COMPANY_CD = RCCM.COMPANY_CD
                         AND RCCD.DIVISION_CD = RCCM.DIVISION_CD
                         AND RCCD.VENDOR_CD = RCCM.VENDOR_CD
                         AND RCCD.ITEM_CD = VI.ITEM_CD
                 WHERE VI.COMPANY_CD = #SESSION_COMPANY_CD#
                   AND VI.VENDOR_CD = #SESSION_VENDOR_CD#
                   AND VI.CO_DOC_TYPE = 'C'
                <isNotEmpty property="SESSION_VENDOR_CO_TARGET">
                  <isEqual property="SESSION_VENDOR_CO_TARGET" compareValue="1">
                    AND VI.INPUT_TYPE IN('P', 'K')
                  </isEqual>
                  <isEqual property="SESSION_VENDOR_CO_TARGET" compareValue="2">
                    AND VI.CO_TARGET_YN = 'Y'
                  </isEqual>
                </isNotEmpty>
                <isNotEmpty property="STATE_YYYY">
		           AND SUBSTRING(VI.LAST_PURCHASE_DATE, 1, 4) >= #STATE_YYYY#
		        </isNotEmpty>
                 GROUP BY VI.COMPANY_CD
                         ,VI.VENDOR_CD
                         ,VI.FTA_GROUP_CD
                         ,VI.ITEM_CD
                ) VI
         GROUP BY VI.COMPANY_CD
                 ,VI.VENDOR_CD
    </select>
    
    <select id="MMA001.selectExportTariffInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
        SELECT SE.*
              ,(SE.COMPANY_CO_RATE*SE.TOT_FTA_TARIFF) + ((1-SE.COMPANY_CO_RATE)*TOT_TARIFF_AMOUNT) AS TOT_ORGIN_TARIFF_AMOUNT
              ,SE.TOT_TARIFF_AMOUNT - ((SE.COMPANY_CO_RATE*SE.TOT_FTA_TARIFF)+((1-SE.COMPANY_CO_RATE)*TOT_TARIFF_AMOUNT)) AS TOT_FTA_TARIFF_AMOUNT
              ,((SE.COMPANY_CO_RATE*SE.TOT_FTA_TARIFF)+((1-SE.COMPANY_CO_RATE)*TOT_TARIFF_AMOUNT))-SE.TOT_FTA_TARIFF AS TOT_TARGET_TARIFF_AMOUNT
          FROM (
		        SELECT SE.COMPANY_CD
		              ,C.COMPANY_NAME
		          <isNotEmpty property="TARIFF_STATUS_TYPE">
                    <isEqual property="TARIFF_STATUS_TYPE" compareValue="I">
                      ,SE.DIVISION_CD
                      ,D.DIVISION_NAME
                      ,NULL AS CUSTOMER_CD
                      ,NULL AS CUSTOMER_NAME
                      ,NULL AS YYYYMM
                      ,SE.NATION_CD
                      ,SE.NATION_NAME
                      ,SE.FTA_CD
                      ,SE.FTA_NAME
                      ,SE.PRODUCT_ITEM_CD
                      ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
                    </isEqual>
                    <isEqual property="TARIFF_STATUS_TYPE" compareValue="N">
                      ,NULL AS DIVISION_CD
                      ,NULL AS DIVISION_NAME
                      ,NULL AS CUSTOMER_CD
                      ,NULL AS CUSTOMER_NAME
                      ,SE.YYYYMM
                      ,SE.NATION_CD
                      ,SE.NATION_NAME
                      ,SE.FTA_CD
                      ,SE.FTA_NAME
                      ,NULL AS PRODUCT_ITEM_CD
                      ,NULL AS PRODUCT_ITEM_NAME
                    </isEqual>
                    <isEqual property="TARIFF_STATUS_TYPE" compareValue="NC">
                      ,NULL AS DIVISION_CD
                      ,NULL AS DIVISION_NAME
                      ,NULL AS CUSTOMER_CD
                      ,NULL AS CUSTOMER_NAME
                      ,NULL AS YYYYMM
                      ,SE.NATION_CD
                      ,SE.NATION_NAME
                      ,NULL AS FTA_CD
                      ,NULL AS FTA_NAME
                      ,NULL AS PRODUCT_ITEM_CD
                      ,NULL AS PRODUCT_ITEM_NAME
                    </isEqual>
                    <isEqual property="TARIFF_STATUS_TYPE" compareValue="C">
                      ,NULL AS DIVISION_CD
                      ,NULL AS DIVISION_NAME
                      ,NULL AS CUSTOMER_CD
                      ,NULL AS CUSTOMER_NAME
                      ,SE.YYYYMM
                      ,NULL AS NATION_CD
                      ,NULL AS NATION_NAME
                      ,NULL AS FTA_CD
                      ,NULL AS FTA_NAME
                      ,NULL AS PRODUCT_ITEM_CD
                      ,NULL AS PRODUCT_ITEM_NAME
                    </isEqual>
                    <isEqual property="TARIFF_STATUS_TYPE" compareValue="D">
                      ,SE.DIVISION_CD
                      ,D.DIVISION_NAME
                      ,NULL AS CUSTOMER_CD
                      ,NULL AS CUSTOMER_NAME
                      ,SE.YYYYMM
                      ,NULL AS NATION_CD
                      ,NULL AS NATION_NAME
                      ,NULL AS FTA_CD
                      ,NULL AS FTA_NAME
                      ,NULL AS PRODUCT_ITEM_CD
                      ,NULL AS PRODUCT_ITEM_NAME
                    </isEqual>
                    <isEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                      ,NULL AS DIVISION_CD
                      ,NULL AS DIVISION_NAME
                      ,SE.CUSTOMER_CD
                      ,SE.CUSTOMER_NAME
                      ,NULL AS YYYYMM
                      ,NULL AS NATION_CD
                      ,NULL AS NATION_NAME
                      ,NULL AS FTA_CD
                      ,NULL AS FTA_NAME
                      ,NULL AS PRODUCT_ITEM_CD
                      ,NULL AS PRODUCT_ITEM_NAME
                    </isEqual>
                  </isNotEmpty>
		              ,MAX(SE.HS_CODE) AS HS_CODE
		              ,MAX(SE.EXPORT_HS_CODE) AS EXPORT_HS_CODE
		              ,AVG(CASE WHEN SE.STATUS = '4' THEN 100 ELSE 0 END)/100 AS EC_RATE
		              ,TRUNC((SUM(SE.ORIGIN_AMOUNT/(CASE WHEN SE.NAT_CNT = 0 THEN NULL ELSE SE.NAT_CNT END))/
		                      SUM(SE.SALES_AMT/(CASE WHEN SE.NAT_CNT = 0 THEN NULL ELSE SE.NAT_CNT END))), 2) AS COMPANY_CO_RATE
		              ,MAX(SE.TARIFF_TYPE_NAME) AS TARIFF_TYPE_NAME
		              ,SUM(SE.SALES_AMT/(CASE WHEN SE.NAT_CNT = 0 THEN NULL ELSE SE.NAT_CNT END)) AS TOT_AMOUNT
		              ,COALESCE(SUM(SE.TARIFF_AMOUNT/(CASE WHEN SE.NAT_CNT = 0 THEN NULL ELSE SE.NAT_CNT END)), 0) AS TOT_TARIFF_AMOUNT
		              ,COALESCE(SUM(SE.FTA_TARIFF_AMOUNT/(CASE WHEN SE.NAT_CNT = 0 THEN NULL ELSE SE.NAT_CNT END)), 0) AS TOT_FTA_TARIFF
		              ,(CASE WHEN MAX(SE.FTA_TARIFF_RATE) IS NULL THEN NULL
		                     WHEN MIN(SE.FTA_TARIFF_RATE) IS NULL THEN MAX(SE.FTA_TARIFF_RATE)||'%'
		                     WHEN MIN(SE.FTA_TARIFF_RATE) = MAX(SE.FTA_TARIFF_RATE) THEN MAX(SE.FTA_TARIFF_RATE)||'%'
		                     ELSE MIN(SE.FTA_TARIFF_RATE)||'% ~ '||MAX(SE.FTA_TARIFF_RATE)||'%'
		                END) AS FTA_TARIFF_RATE
		              ,(CASE WHEN MAX(SE.TARIFF_RATE) IS NULL THEN NULL
                             WHEN MIN(SE.TARIFF_RATE) IS NULL THEN MAX(SE.TARIFF_RATE)||'%'
                             WHEN MIN(SE.TARIFF_RATE) = MAX(SE.TARIFF_RATE) THEN MAX(SE.TARIFF_RATE)||'%'
                             ELSE MIN(SE.TARIFF_RATE)||'% ~ '||MAX(SE.TARIFF_RATE)||'%'
                        END) AS TARIFF_RATE
		          FROM (
		                SELECT SE.*
				              ,FM.YYYYMM
				              ,(CASE WHEN SE.FTA_CNT > '1' THEN CD.WORD||'('||FM.FTA_CD||')' ELSE CD.WORD END) AS NATION_NAME
				              ,FS.FTA_NAME
				              ,CD2.WORD AS TARIFF_TYPE_NAME
				              ,FM.STATUS
				              ,FM.COMPANY_CO_YN
				              ,(CASE WHEN FM.STATUS = '4' AND FM.COMPANY_CO_YN = 'Y' THEN SE.SALES_AMT
		                             ELSE 0
		                        END) AS ORIGIN_AMOUNT
				              ,(CASE WHEN FM.STATUS = '4' AND FM.COMPANY_CO_YN = 'Y' THEN SE.FTA_TARIFF_AMOUNT
				                     ELSE SE.TARIFF_AMOUNT
				                END) AS ORIGIN_TARIFF_AMOUNT
				          FROM (
				                SELECT SE.*
				                      ,FT.TARIFF_RATE
				                      ,FT.FTA_TARIFF_RATE
				                      ,FT.TARIFF_TYPE
				                      ,SE.SALES_AMT*(TARIFF_RATE/100) AS TARIFF_AMOUNT
				                      ,SE.SALES_AMT*(FTA_TARIFF_RATE/100) AS FTA_TARIFF_AMOUNT
		                            <isEqual property="TARIFF_STATUS_TYPE" compareValue="I">
		                              ,1 AS NAT_CNT
		                              ,1 AS FTA_CNT
		                            </isEqual>
		                            <isEqual property="TARIFF_STATUS_TYPE" compareValue="N">
		                              ,1 AS NAT_CNT
		                              ,1 AS FTA_CNT
		                            </isEqual>
		                            <isEqual property="TARIFF_STATUS_TYPE" compareValue="NC">
		                              ,1 AS NAT_CNT
		                              ,COUNT(SE.FTA_CD) OVER(PARTITION BY SE.CO_REQ_NO, SE.COMPANY_CD, SE.DIVISION_CD) AS FTA_CNT
		                            </isEqual>
		                            <isEqual property="TARIFF_STATUS_TYPE" compareValue="D">
		                              ,COUNT(SE.FTA_CD) OVER(PARTITION BY SE.CO_REQ_NO, SE.COMPANY_CD, SE.DIVISION_CD) AS NAT_CNT
		                              ,1 AS FTA_CNT
		                            </isEqual>
		                            <isEqual property="TARIFF_STATUS_TYPE" compareValue="C">
		                              ,COUNT(SE.FTA_CD) OVER(PARTITION BY SE.CO_REQ_NO, SE.COMPANY_CD, SE.DIVISION_CD) AS NAT_CNT
		                              ,1 AS FTA_CNT
		                            </isEqual>
		                            <isEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                                      ,COUNT(SE.FTA_CD) OVER(PARTITION BY SE.CO_REQ_NO, SE.COMPANY_CD, SE.DIVISION_CD) AS NAT_CNT
                                      ,1 AS FTA_CNT
                                    </isEqual>
		                          FROM (
										SELECT CO_REQ_NO
											  ,COMPANY_CD
											  ,DIVISION_CD
											<isEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                                              ,CUSTOMER_CD
                                              ,CUSTOMER_NAME
                                            </isEqual>
                                            <isNotEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                                              ,MAX(CUSTOMER_CD) AS CUSTOMER_CD
                                              ,MAX(CUSTOMER_NAME) AS CUSTOMER_NAME
                                            </isNotEqual>
											  ,FTA_CD
											  ,HS_CODE
											  ,PRODUCT_ITEM_CD
											  ,SALES_AMT
											  ,NATION_CD
											  ,FT_HS_CODE
											  ,EXPORT_HS_CODE
											  ,FT_NATION_CD
											  ,APPLY_DATE
											  ,HS_RANK
										   FROM (
												SELECT DISTINCT FM.CO_REQ_NO
						                              ,FM.COMPANY_CD
						                              ,FM.DIVISION_CD
						                           <isEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                                                     ,SE.CUSTOMER_CD
                                                     ,C.CUSTOMER_NAME
                                                   </isEqual>
                                                   <isNotEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                                                     ,NULL AS CUSTOMER_CD
                                                     ,NULL AS CUSTOMER_NAME
                                                   </isNotEqual>
						                              ,FM.FTA_CD
						                              ,FM.HS_CODE
						                              ,FM.PRODUCT_ITEM_CD
						                              ,FM.SALES_AMT
						                              ,FM.NATION_CD
						                              ,FT.HS_CODE AS FT_HS_CODE
						                              ,COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE) AS EXPORT_HS_CODE
						                              ,FT.NATION_CD AS FT_NATION_CD
						                              ,FT.APPLY_DATE
						                              ,RANK() OVER(PARTITION BY FM.CO_REQ_NO, FM.COMPANY_CD, FM.DIVISION_CD, FM.FTA_CD
						                                           ORDER BY COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE), FT.FTA_CD, FT.APPLY_DATE DESC, 
						                                           (CASE WHEN FM.HS_CODE = COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE) THEN 1
						                                                 WHEN (FM.HS_CODE = SUBSTR(COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE), 1, LENGTH(FM.HS_CODE)) AND
						                                                       FM.HS_CODE = SUBSTR(FT.HS_CODE, 1, LENGTH(FM.HS_CODE))) THEN 2
						                                                 WHEN FM.HS_CODE = SUBSTR(COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE), 1, LENGTH(FM.HS_CODE)) THEN 3
						                                                 WHEN SUBSTR(FM.HS_CODE, 1, 6) = SUBSTR(COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE), 1, 6) THEN 4
						                                                 WHEN SUBSTR(FM.HS_CODE, 1, 4) = SUBSTR(COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE), 1, 4) THEN 5
						                                                 WHEN SUBSTR(FM.HS_CODE, 1, 2) = SUBSTR(COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE), 1, 2) THEN 6
						                                                 ELSE 7
						                                            END), COALESCE(SFT.HS_CODE, FT.EXPORT_HS_CODE)
						                               ) AS HS_RANK
						                          FROM SALES_EXPORT SE
						                               INNER JOIN FCR_MST FM
						                                  ON FM.CO_REQ_NO = SE.CO_REQ_NO
						                                 AND FM.COMPANY_CD = SE.COMPANY_CD
						                                 AND FM.DIVISION_CD = SE.DIVISION_CD
				                                       <isNotEmpty property="FTA_CD">
				                                         AND FM.FTA_CD = #FTA_CD#
				                                       </isNotEmpty>
				                                       /*동일 인보이스 번호로 반품처리된 내역을 반영한다.*/
				                                       INNER JOIN (SELECT SE.COMPANY_CD, SE.DIVISION_CD, SE.INVOICE_NO, SUM(COALESCE(SE.AMOUNT, 0)) AS AM_SUM
				                                                     FROM SALES_EXPORT SE
				                                                    WHERE SE.COMPANY_CD = #COMPANY_CD#
				                                                      AND SE.DECISION_YN = 'Y'
				                                                      AND SE.INVOICE_DATE BETWEEN #START_YYYYMM#||'01' AND #YYYYMM#||'31'
				                                                    GROUP BY SE.COMPANY_CD, SE.DIVISION_CD, SE.INVOICE_NO
				                                                    ) EX
				                                          ON SE.COMPANY_CD = EX.COMPANY_CD
				                                         AND SE.DIVISION_CD = EX.DIVISION_CD
				                                         AND SE.INVOICE_NO = EX.INVOICE_NO
				                                         AND EX.AM_SUM > 0
				                                       <isEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                                                       INNER JOIN CUSTOMER C
                                                          ON C.COMPANY_CD = SE.COMPANY_CD
                                                         AND C.CUSTOMER_CD = SE.CUSTOMER_CD
                                                         AND C.EXPORT_AGENT_YN = 'Y'
                                                       </isEqual>
                                                        LEFT OUTER JOIN SALES_FOREIGN_TARIFF SFT
                                                          ON SFT.COMPANY_CD = SE.COMPANY_CD
                                                         AND SFT.INVOICE_NO = SE.INVOICE_NO
                                                         AND SFT.CUSTOMER_CD = SE.CUSTOMER_CD
                                                         AND SFT.PRODUCT_ITEM_CD = SE.PRODUCT_ITEM_CD
                                                         AND SFT.CURRENCY = SE.CURRENCY
				                                        LEFT OUTER JOIN FTA_TARIFF FT
			                                              ON FT.FTA_CD = FM.FTA_CD
			                                             AND FT.USE_YN = 'Y'
			                                             AND SE.INVOICE_DATE BETWEEN FT.APPLY_DATE AND FT.END_DATE
			                                             AND (CASE WHEN FT.NATION_CD = '*' THEN SE.NATION_CD ELSE FT.NATION_CD END) = SE.NATION_CD
			                                             AND (CASE WHEN SUBSTR(FT.EXPORT_HS_CODE, 1, LENGTH(FM.HS_CODE)) = FM.HS_CODE THEN 'Y'
			                                                       WHEN SUBSTR(FT.HS_CODE, 1, LENGTH(FM.HS_CODE)) = FM.HS_CODE THEN 'Y' ELSE 'N' END) = 'Y'
				                                 WHERE SE.COMPANY_CD = #COMPANY_CD#
				                                   AND SE.DECISION_YN = 'Y'
				                                   AND SE.DELETE_YN = 'N'
				                                 <isNotEmpty property="DIVISION_CD">
				                                   AND SE.DIVISION_CD = #DIVISION_CD#
				                                 </isNotEmpty>
				                                   AND SE.INVOICE_DATE BETWEEN #START_YYYYMM#||'01' AND #YYYYMM#||'31'
				                                   AND EXISTS(SELECT 1 FROM FTA_TARIFF FTA 
				                                               WHERE FTA.FTA_CD = FM.FTA_CD
				                                                 AND SE.INVOICE_DATE BETWEEN FTA.APPLY_DATE AND FTA.END_DATE)
					                            ) SE
	                                    GROUP  BY CO_REQ_NO
	                                             ,COMPANY_CD
	                                             ,DIVISION_CD
	                                          <isEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                                                ,CUSTOMER_CD
                                                ,CUSTOMER_NAME
                                              </isEqual>
	                                             ,FTA_CD
	                                             ,HS_CODE
	                                             ,PRODUCT_ITEM_CD
	                                             ,SALES_AMT
	                                             ,NATION_CD
	                                             ,FT_HS_CODE
	                                             ,EXPORT_HS_CODE
	                                             ,FT_NATION_CD
	                                             ,APPLY_DATE
	                                             ,HS_RANK
		                               ) SE
		                               LEFT OUTER JOIN FTA_TARIFF FT
		                                 ON FT.HS_CODE = SE.FT_HS_CODE
		                                AND FT.FTA_CD = SE.FTA_CD
		                                AND FT.NATION_CD = SE.FT_NATION_CD
		                                AND FT.EXPORT_HS_CODE = SE.EXPORT_HS_CODE
		                                AND FT.APPLY_DATE = SE.APPLY_DATE
		                          WHERE (SE.EXPORT_HS_CODE IS NULL OR SE.HS_RANK = 1)
		                            AND SE.SALES_AMT > 0
		                       ) SE
		                       INNER JOIN FCR_MST FM
		                          ON FM.CO_REQ_NO = SE.CO_REQ_NO
		                         AND FM.COMPANY_CD = SE.COMPANY_CD
		                         AND FM.DIVISION_CD = SE.DIVISION_CD
		                         AND FM.FTA_CD = SE.FTA_CD
		                       INNER JOIN FTA_NATION FN
		                          ON FN.FTA_CD = FM.FTA_CD
		                         AND FN.NATION_CD = FM.NATION_CD
		                         AND FM.YYYYMM||'01' BETWEEN FN.EFFECTIVE_DATE AND FN.SECESSION_DATE
		                       INNER JOIN FTA_MST FS
		                          ON FS.FTA_CD = FN.FTA_CD
		                        LEFT OUTER JOIN CODE_LANG_DIC CD
		                          ON CD.COMPANY_CD = SE.COMPANY_CD
		                         AND CD.CATEGORY_CD = 'NATION' 
		                         AND CD.CODE = FM.NATION_CD
		                         AND CD.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		                        LEFT OUTER JOIN CODE_LANG_DIC CD2
		                          ON CD2.COMPANY_CD = SE.COMPANY_CD
		                         AND CD2.CATEGORY_CD = 'TARIFF_TYPE'
		                         AND CD2.CODE = SE.TARIFF_TYPE
		                         AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		              <isNotEmpty property="INC_TARIFF_CONFIRM">
		                <isEqual property="INC_TARIFF_CONFIRM" compareValue="Y">
		                  WHERE SE.TARIFF_AMOUNT IS NOT NULL
		                </isEqual>
		                <isEqual property="INC_TARIFF_CONFIRM" compareValue="N">
		                  WHERE SE.TARIFF_AMOUNT IS NULL
		                </isEqual>
		              </isNotEmpty>
		                ) SE
		                INNER JOIN COMPANY C
		                   ON C.COMPANY_CD = SE.COMPANY_CD
		      <isNotEmpty property="TARIFF_STATUS_TYPE">
		        <isEqual property="TARIFF_STATUS_TYPE" compareValue="I">
		                INNER JOIN DIVISION D
		                   ON D.COMPANY_CD = SE.COMPANY_CD
		                  AND D.DIVISION_CD = SE.DIVISION_CD
		                LEFT OUTER JOIN ITEM I
		                   ON I.ITEM_CD = SE.PRODUCT_ITEM_CD
		                  AND I.COMPANY_CD = SE.COMPANY_CD
		          GROUP BY SE.COMPANY_CD
		                  ,C.COMPANY_NAME
		                  ,SE.DIVISION_CD
		                  ,D.DIVISION_NAME
		                  ,SE.PRODUCT_ITEM_CD
		                  ,I.ITEM_NAME
		                  ,SE.NATION_CD
		                  ,SE.NATION_NAME
		                  ,SE.FTA_CD
		                  ,SE.FTA_NAME
		        </isEqual>
		        <isEqual property="TARIFF_STATUS_TYPE" compareValue="N">
		          GROUP BY SE.COMPANY_CD, C.COMPANY_NAME, SE.YYYYMM, SE.FTA_CD, SE.FTA_NAME, SE.NATION_CD, SE.NATION_NAME
		        </isEqual>
		        <isEqual property="TARIFF_STATUS_TYPE" compareValue="NC">
		          GROUP BY SE.COMPANY_CD, C.COMPANY_NAME, SE.FTA_CD, SE.FTA_NAME, SE.NATION_CD, SE.NATION_NAME
		        </isEqual>
		        <isEqual property="TARIFF_STATUS_TYPE" compareValue="C">
		          GROUP BY SE.YYYYMM, SE.COMPANY_CD, C.COMPANY_NAME
		        </isEqual>
		        <isEqual property="TARIFF_STATUS_TYPE" compareValue="D">
		                INNER JOIN DIVISION D
		                   ON D.COMPANY_CD = SE.COMPANY_CD
		                  AND D.DIVISION_CD = SE.DIVISION_CD
		          GROUP BY SE.COMPANY_CD, C.COMPANY_NAME, SE.YYYYMM, SE.DIVISION_CD, D.DIVISION_NAME
		        </isEqual>
		        <isEqual property="TARIFF_STATUS_TYPE" compareValue="E">
                  GROUP BY SE.COMPANY_CD, C.COMPANY_NAME, SE.CUSTOMER_CD, SE.CUSTOMER_NAME
                </isEqual>
		      </isNotEmpty>
		        ) SE
        <include refid="select-paging-end" />
        ORDER BY COMPANY_CD, DIVISION_CD, YYYYMM DESC, NATION_CD, TOT_AMOUNT, FTA_CD, PRODUCT_ITEM_CD, CUSTOMER_CD
    </select>
    
    <!-- MMA003 START -->
    <select id="MMA003.selectExportNProducerInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CT.CUSTOMER_NAME AS EXPORTER_NAME
              ,CT.PRESIDENT_NAME AS EXPORTER_PRESIDENT_NAME
              ,CT.BUSINESS_NO AS EXPORTER_BUSINESS_NO
              ,CT.PHONE_NO AS EXPORTER_PHONE_NO
              ,CT.FAX_NO AS EXPORTER_FAX_NO
              ,CT.EMAIL AS EXPORTER_EMAIL
              ,CT.ADDRESS AS EXPORTER_ADDRESS
              ,C.COMPANY_NAME AS PRODUCER_NAME
              ,C.PRESIDENT_NAME AS PRODUCER_PRESIDENT_NAME
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.BUSINESS_NO, C.BUSINESS_NO) ELSE C.BUSINESS_NO END) AS PRODUCER_BUSINESS_NO
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.PHONE_NO, C.COM_PHONE_NO) ELSE C.COM_PHONE_NO END) AS PRODUCER_PHONE_NO
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.FAX_NO, C.COM_FAX_NO) ELSE C.COM_FAX_NO END) AS PRODUCER_FAX_NO
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.OFFICER_EMAIL, C.COM_EMAIL) ELSE C.COM_EMAIL END) AS PRODUCER_EMAIL
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.ADDRESS1, C.ADDRESS1) ELSE C.ADDRESS1 END) AS PRODUCER_ADDRESS
          FROM SALES_DOMESTIC SD
               INNER JOIN COMPANY C
                  ON C.COMPANY_CD = SD.COMPANY_CD
               INNER JOIN DIVISION D
                  ON D.COMPANY_CD = SD.COMPANY_CD
                 AND D.DIVISION_CD = SD.DIVISION_CD
                LEFT OUTER JOIN CODE_DTL CD
                  ON CD.COMPANY_CD = C.COMPANY_CD
                 AND CD.CATEGORY_CD = 'SYS_CONFIG'
                 AND CD.CODE = 'CERT_EXPORTER_SCOPE'
                LEFT OUTER JOIN CUSTOMER CT
                  ON CT.COMPANY_CD = SD.COMPANY_CD
                 AND CT.CUSTOMER_CD = SD.CUSTOMER_CD
         WHERE SD.COMPANY_CD = #COMPANY_CD#
           AND SD.DIVISION_CD = #DIVISION_CD#
           AND SD.SALES_MGMT_NO = #SALES_MGMT_NO#
    </select>
    
    <delete id="MMA203.deleteExcelIssueItemSample" parameterClass="java.util.Map">
        DELETE FROM EXCELDATA
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CATEGORY_CD = #CATEGORY_CD#
           AND ID = #USER_ID#
    </delete>
    
    <insert id="MMA203.insertExcelIssueItemSample" parameterClass="java.util.Map">
        INSERT INTO EXCELDATA
              (ID
              ,COMPANY_CD
              ,CATEGORY_CD
              ,CREATE_DATE
              ,SPID
              ,TEXTVALUE1
              ,TEXTVALUE2
              ,TEXTVALUE3
              ,TEXTVALUE4
              ,TEXTVALUE5
              ,TEXTVALUE6)
        VALUES(#USER_ID#
              ,#COMPANY_CD#
              ,#CATEGORY_CD#
              ,NOW()
              ,#ROW_SEQ#::INT
              ,#DIVISION_CD#
              ,#CUSTOMER_CD# 
              ,#PRODUCT_ITEM_CD#
              ,#CUSTOMER_ITEM_CD#
              ,#INVOICE_NO#
              ,#YYYYMM#)
    </insert>
    
    <select id="MMA203.selectDeterminateList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT SD.*
              ,CD1.WORD AS ORIGIN_YN_NAME
              ,CD2.WORD AS FTA_GROUP_CD_NAME
          FROM (
                SELECT FM.COMPANY_CD
		              ,FM.DIVISION_CD
		              ,FM.CUSTOMER_CD
		              ,FM.YYYYMM
		              ,MAX(FM.CO_REQ_NO) AS CO_REQ_NO
		              ,MAX(SD.SALES_MGMT_NO) AS SALES_MGMT_NO
		              ,SD.PRODUCT_ITEM_CD
		              ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
		              ,(CASE WHEN COALESCE(CI.CUSTOMER_ITEM_CD, '') != '' THEN CI.CUSTOMER_ITEM_CD ELSE SD.PRODUCT_ITEM_CD END) AS CUSTOMER_ITEM_CD
		              ,COALESCE(MAX(CI.CUSTOMER_ITEM_NAME), I.ITEM_NAME) AS CUSTOMER_ITEM_NAME
		              ,FM.FTA_CD
		              ,FS.FTA_NAME
		              ,(CASE WHEN FS.FTA_ASSOCIATION_CD = 'MER' THEN
		                          MAX(FN_GET_ITEM_HS_CODE(FM.COMPANY_CD, SD.PRODUCT_ITEM_CD, 'HSM', FM.YYYYMM, SD.SALES_MGMT_NO))
		                     ELSE MAX(FM.HS_CODE)
		                END) AS HS_CODE
		              ,(CASE WHEN FS.FTA_ASSOCIATION_CD = 'MER' THEN MAX(FM.HS_CODE) ELSE NULL END) AS NALADISA_CODE
		              ,MAX(FM.RULE_CONTENTS) AS RULE_CONTENTS
		              ,MAX(CASE WHEN (FR.BD_RULE + FR.BU_RULE + FR.NC_RULE + FR.MC_RULE) > 0 THEN
		                          (CASE WHEN FR.MC_RULE > 0 THEN 
		                                             (CASE WHEN FM.RVC_RATE + FR.BUFFER_RVC_RATE > 100 THEN 100 ELSE FM.RVC_RATE + FR.BUFFER_RVC_RATE END)
		                                        <![CDATA[ ELSE (CASE WHEN FM.RVC_RATE - FR.BUFFER_RVC_RATE < 0 THEN 100 ELSE FM.RVC_RATE - FR.BUFFER_RVC_RATE END) ]]>
		                                    END)
		                     ELSE FN_PG_GET_CAST_NUM('')
		                END) AS RVC_RATE
		              ,(CASE WHEN SUM(CASE WHEN COALESCE(FM.COMPANY_CO_YN, 'N') = 'N' THEN 1 ELSE 0 END) > 0 THEN 'N' ELSE 'Y' END)  AS ORIGIN_YN
		              ,FS.FTA_GROUP_CD
		              ,MAX(CASE WHEN FM.UNIT_PRICE IS NULL THEN 0 ELSE FM.UNIT_PRICE END) AS SALES_UNIT_PRICE
		              ,AVG(FM.NET_COST) AS NET_COST
		              ,MAX(FM.CURRENCY) AS CURRENCY
		              ,SUM(CASE WHEN FM.TRACE_VALUE IS NULL THEN 0 
		                        ELSE (FM.TRACE_VALUE * (CASE WHEN SD.SALES_QTY > 0 THEN SD.SALES_QTY ELSE 1 END))
		                   END)/SUM(CASE WHEN SD.SALES_QTY > 0 THEN SD.SALES_QTY ELSE 1 END) AS TRACE_VALUE 
		              ,COUNT(SD.COMPANY_CD) AS DEP_CNT
		              ,MAX(FM.STATUS) AS STATUS
		              ,MAX(CD2.WORD) AS STATUS_NAME
		              ,MAX(FM.NONORIGIN_REASON_CD) AS NONORIGIN_REASON_CD
		              ,MAX(CD1.WORD) AS NONORIGIN_REASON_NAME
		              ,MAX(FM.NONORIGIN_REASON_DESC) AS NONORIGIN_REASON_DESC   
		              ,MAX(FM.ERROR_REASON) AS ERROR_REASON           
		              ,MAX(MT.MESSAGE) AS ERROR_REASON_NAME
		              ,MAX(CASE WHEN COALESCE(FM.ORIGIN_NATION_CD, '') != '' THEN FM.ORIGIN_NATION_CD
		                        ELSE FN_GET_ORIGIN_NATION(FM.COMPANY_CD, FM.DIVISION_CD, FM.CO_REQ_NO, FM.FTA_CD, FM.ITEM_TYPE, FM.COMPANY_CO_YN, 'N')
		               END) AS ORIGIN_NATION_CD
		              ,MAX(FM.CORE_ITEM_YN) AS CORE_ITEM_YN
		              ,MAX(FM.ORIGIN_NATION_SRC) AS ORIGIN_NATION_SRC
		              ,MAX(CD3.WORD) AS ORIGIN_NATION_SRC_NAME
		          FROM SALES_DOMESTIC SD
		             <isNotEmpty property="gridData">
                      INNER JOIN(SELECT E.COMPANY_CD
                                       ,E.TEXTVALUE1
                                       ,E.TEXTVALUE2
                                       ,E.TEXTVALUE3
                                       ,E.TEXTVALUE6
                                   FROM EXCELDATA E
                                  WHERE E.COMPANY_CD = #COMPANY_CD#
                                    AND E.CATEGORY_CD = 'ISSUE_DO_LIST'
                                    AND E.ID = #USER_ID#
                                  GROUP BY E.COMPANY_CD
                                          ,E.TEXTVALUE1
                                          ,E.TEXTVALUE2
                                          ,E.TEXTVALUE3
                                          ,E.TEXTVALUE6
                                 ) E
                         ON E.COMPANY_CD = SD.COMPANY_CD
                        AND E.TEXTVALUE1 = SD.DIVISION_CD
                        AND E.TEXTVALUE2 = SD.CUSTOMER_CD
                        AND E.TEXTVALUE3 = SD.PRODUCT_ITEM_CD
                        AND E.TEXTVALUE6 = SD.YYYYMM
                    </isNotEmpty>
		               INNER JOIN FCR_MST FM
		                  ON FM.COMPANY_CD = SD.COMPANY_CD
		                 AND FM.DIVISION_CD = SD.DIVISION_CD
		                 AND FM.CO_REQ_NO = SD.CO_REQ_NO
		                 AND FM.STATUS = '4'
		               INNER JOIN FTA_MST FS
		                  ON FS.FTA_CD = FM.FTA_CD
		              <isNotEmpty property="FTA_GROUP_CD">
		                 AND FS.FTA_GROUP_CD = #FTA_GROUP_CD#
		              </isNotEmpty>
		              <isNotEmpty property="APPLY_FTA_CD">
			             AND FS.FTA_CD IN($APPLY_FTA_CD$)
			          </isNotEmpty>
		               INNER JOIN FCR_RESULT FR
		                  ON FR.CO_REQ_NO = FM.CO_REQ_NO
		                 AND FR.COMPANY_CD = FM.COMPANY_CD
		                 AND FR.DIVISION_CD = FM.DIVISION_CD
		                 AND FR.FTA_CD = FM.FTA_CD
		                 AND FR.RULE_CONTENTS = FM.RULE_CONTENTS
		                 AND FR.COMPANY_CO_YN = FM.COMPANY_CO_YN
		                LEFT OUTER JOIN ITEM I
		                  ON I.COMPANY_CD = SD.COMPANY_CD
		                 AND I.ITEM_CD = SD.PRODUCT_ITEM_CD
		                LEFT OUTER JOIN CUSTOMER_ITEM CI
		                  ON CI.COMPANY_CD = SD.COMPANY_CD
		                 AND CI.DIVISION_CD = SD.DIVISION_CD
		                 AND CI.CUSTOMER_CD = SD.CUSTOMER_CD
		                 AND CI.ITEM_CD = SD.PRODUCT_ITEM_CD
		                 AND CI.CUSTOMER_SALES_TYPE = 'D'
		                 AND SD.YYYYMM BETWEEN SUBSTR(CI.START_DATE, 1, 6) AND SUBSTR(CI.END_DATE, 1, 6)
		               <isNotEmpty property="ISSUE_LIST">
		                 <iterate open="(" close=")" property="ISSUE_LIST" conjunction=" OR " prepend="AND">
		                     CI.CUSTOMER_ITEM_CD = #ISSUE_LIST[].CUSTOMER_ITEM_CD#
		                 </iterate>
		               </isNotEmpty>
		               <isNotEmpty property="gridData">
                         AND EXISTS(SELECT 1
                                      FROM EXCELDATA E
                                     WHERE E.COMPANY_CD = CI.COMPANY_CD
                                       AND E.TEXTVALUE4 = CI.CUSTOMER_ITEM_CD
                                       AND E.CATEGORY_CD = 'ISSUE_DO_LIST'
                                       AND E.ID = #USER_ID#)
                       </isNotEmpty>
		               LEFT OUTER JOIN CODE_LANG_DIC CD1
		                 ON CD1.COMPANY_CD = FM.COMPANY_CD
		                AND CD1.CATEGORY_CD = 'NONORIGIN_REASON' 
		                AND CD1.CODE = FM.NONORIGIN_REASON_CD
		                AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		               LEFT OUTER JOIN CODE_LANG_DIC CD2
		                 ON CD2.COMPANY_CD = FM.COMPANY_CD
		                AND CD2.CATEGORY_CD = 'CO_STATUS' 
		                AND CD2.CODE = FM.STATUS
		                AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		               LEFT OUTER JOIN CODE_LANG_DIC CD3
		                 ON CD3.COMPANY_CD = FM.COMPANY_CD
		                AND CD3.CATEGORY_CD = 'ORIGIN_NATION_SRC'
		                AND CD3.CODE = FM.ORIGIN_NATION_SRC
		                AND CD3.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		               LEFT OUTER JOIN MESSAGE_TABLE MT
		                 ON MT.MESSAGE_CODE = FM.ERROR_REASON
		                AND MT.NATION_CODE = #SESSION_DEFAULT_LANGUAGE#
		         WHERE SD.COMPANY_CD = #COMPANY_CD#
		           AND SD.DELETE_YN = 'N'
		       <isNotEmpty property="ISSUE_LIST">
		         <iterate open="(" close=")" property="ISSUE_LIST" conjunction=" OR " prepend="AND">
		           (SD.DIVISION_CD = #ISSUE_LIST[].DIVISION_CD# AND SD.CUSTOMER_CD = #ISSUE_LIST[].CUSTOMER_CD# AND
		            SD.PRODUCT_ITEM_CD = #ISSUE_LIST[].PRODUCT_ITEM_CD# AND SD.YYYYMM = #ISSUE_LIST[].YYYYMM#)
		         </iterate>
		       </isNotEmpty>
		         GROUP BY FM.COMPANY_CD
		                 ,FM.DIVISION_CD
		                 ,SD.PRODUCT_ITEM_CD
		                 ,FM.FTA_CD
		                 ,FS.FTA_NAME
		                 ,FS.FTA_ASSOCIATION_CD
		                 ,FS.FTA_GROUP_CD
		                 ,FM.CUSTOMER_CD
		                 ,FM.YYYYMM
		                 ,I.ITEM_NAME
		                 ,CI.CUSTOMER_ITEM_CD
                ) SD
               LEFT OUTER JOIN CODE_LANG_DIC CD1
                 ON CD1.COMPANY_CD = SD.COMPANY_CD
                AND CD1.CATEGORY_CD = 'FTA_CO_YN' 
                AND CD1.CODE = SD.ORIGIN_YN
                AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
               LEFT OUTER JOIN CODE_LANG_DIC CD2
                 ON CD2.COMPANY_CD = SD.COMPANY_CD
                AND CD2.CATEGORY_CD = 'FTA_GROUP_CD' 
                AND CD2.CODE = SD.FTA_GROUP_CD
                AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
         WHERE SD.CUSTOMER_ITEM_CD IS NOT NULL AND SD.CUSTOMER_ITEM_CD != ''
         ORDER BY SD.CUSTOMER_ITEM_CD, SD.PRODUCT_ITEM_CD, SD.FTA_CD
    </select>
    <!-- MMA003 END -->
    
    <select id="MMA204.selectDeterminateList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT SE.*
              ,CD1.WORD AS ORIGIN_YN_NAME
              ,CD2.WORD AS STATUS_NAME
          FROM (
                SELECT FM.COMPANY_CD
		              ,C.COMPANY_NAME
		              ,FM.DIVISION_CD
		              ,FN_GET_DIVISION(FM.COMPANY_CD, FM.DIVISION_CD, 'DIVISION_NAME') AS DIVISION_NAME
		              ,FM.CO_REQ_NO
		              ,FM.PRODUCT_YYYYMM
		              ,FM.EXPORT_FLAG
		              ,CD1.WORD AS EXPORT_FLAG_NAME
		              ,FM.ITEM_TYPE
		              ,FM.YYYYMM
		              ,MAX(CASE WHEN #SESSION_FTA_NATION# = 'MX' THEN TO_CHAR(FM.CREATE_DATE, 'DD-MM-YYYY HH24:MI:SS')
		                     WHEN #SESSION_FTA_NATION# = 'US' THEN TO_CHAR(FM.CREATE_DATE, 'MM-DD-YYYY HH24:MI:SS')
		                     ELSE TO_CHAR(FM.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS')
		                END) AS DE_DATE
		              ,SE.SALES_MGMT_NO
		              ,SE.CUSTOMER_CD
		              ,FN_GET_CUSTOMER(FM.COMPANY_CD, SE.CUSTOMER_CD, 'CUSTOMER_NAME') AS CUSTOMER_NAME
		              ,SE.INVOICE_NO
		              ,SE.PRODUCT_ITEM_CD
		              ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
		              ,SUM(SE.SALES_QTY) AS SALES_QTY
		              ,MAX(SE.UNIT) AS UNIT
		              ,COALESCE(MAX(SE.UNIT_PRICE), 0) AS SE_UNIT_PRICE
		              ,SUM(SE.SALES_QTY)*COALESCE(MAX(SE.UNIT_PRICE), 0) AS SE_AMOUNT
		              ,SUM(SE.SALES_QTY)*MAX(CASE WHEN FM.UNIT_PRICE IS NULL THEN 0 ELSE FM.UNIT_PRICE END) AS SALES_AMOUNT
		              ,(CASE WHEN COALESCE(CI.CUSTOMER_ITEM_CD, '') != '' THEN CI.CUSTOMER_ITEM_CD ELSE SE.PRODUCT_ITEM_CD END) AS CUSTOMER_ITEM_CD
		              ,COALESCE(MAX(CI.CUSTOMER_ITEM_NAME), I.ITEM_NAME) AS CUSTOMER_ITEM_NAME
		              ,FM.FTA_CD
		              ,FS.FTA_NAME
		              ,(CASE WHEN FS.FTA_ASSOCIATION_CD = 'MER' THEN
		                          MAX(FN_GET_ITEM_HS_CODE(FM.COMPANY_CD, SE.PRODUCT_ITEM_CD, 'HSM', FM.YYYYMM, SE.SALES_MGMT_NO))
		                     ELSE MAX(FM.HS_CODE)
		                END) AS HS_CODE
		              ,MAX(FM.RULE_CONTENTS) AS RULE_CONTENTS
		              ,MAX(FR.RULE_ID) AS RULE_ID
		              ,MAX(CASE WHEN (FR.BD_RULE + FR.BU_RULE + FR.NC_RULE + FR.MC_RULE) > 0 THEN
		                          (CASE WHEN FR.MC_RULE > 0 THEN 
		                                             (CASE WHEN FM.RVC_RATE + FR.BUFFER_RVC_RATE > 100 THEN 100 ELSE FM.RVC_RATE + FR.BUFFER_RVC_RATE END)
		                                        <![CDATA[ ELSE (CASE WHEN FM.RVC_RATE - FR.BUFFER_RVC_RATE < 0 THEN 100 ELSE FM.RVC_RATE - FR.BUFFER_RVC_RATE END) ]]>
		                                    END)
		                     ELSE FN_PG_GET_CAST_NUM('')
		                END) AS RVC_RATE
		              ,(CASE WHEN SUM(CASE WHEN COALESCE(FM.COMPANY_CO_YN, 'N') = 'N' THEN 1 ELSE 0 END) > 0 THEN 'NON-KR' ELSE 'KR' END) AS ISSUE_ORIGIN_YN
		              ,(CASE WHEN SUM(CASE WHEN COALESCE(FM.COMPANY_CO_YN, 'N') = 'N' THEN 1 ELSE 0 END) > 0 THEN 'N' ELSE 'Y' END) AS ORIGIN_YN
		              ,FS.FTA_GROUP_CD
		              ,MAX(CASE WHEN FM.UNIT_PRICE IS NULL THEN 0 ELSE FM.UNIT_PRICE END) AS SALES_UNIT_PRICE
		              ,AVG(FM.NET_COST) AS NET_COST
		              ,MAX(FM.CURRENCY) AS CURRENCY
		              ,SUM(CASE WHEN FM.TRACE_VALUE IS NULL THEN 0 
		                        ELSE (FM.TRACE_VALUE * (CASE WHEN SE.SALES_QTY > 0 THEN SE.SALES_QTY ELSE 1 END))
		                   END)/SUM(CASE WHEN SE.SALES_QTY > 0 THEN SE.SALES_QTY ELSE 1 END) AS TRACE_VALUE 
		              ,MAX(FM.STATUS) AS STATUS
		              ,COALESCE(MAX(SED.SALES_QTY), SUM(SE.SALES_QTY)) AS INVOICE_QTY
		              ,COALESCE(MAX(SED.QTY_UNIT), MAX(SE.UNIT)) AS INVOICE_UNIT
		              ,COALESCE(MAX(SED.AMOUNT), SUM(SE.AMOUNT)) AS INVOICE_AMOUNT
		              ,COALESCE(MAX(SED.CURRENCY), MAX(SE.CURRENCY)) AS INVOICE_CURRENCY
		              ,MAX(SED.GROSS_WEIGHT) AS GROSS_WEIGHT
		              ,MAX(SED.WEIGHT_UNIT) AS WEIGHT_UNIT
		              ,MAX(SED.PACKING_QTY) AS PACKING_QTY
		              ,MAX(SED.PACKING_UNIT) AS PACKING_UNIT
		              ,MAX(SED.INVOICE_DATE) AS INVOICE_ISSUE_DATE
		              ,MAX(SED.DEAL_ITEM_NAME) AS DEAL_ITEM_NAME
		              ,MAX(SE.INVOICE_DATE) AS INVOICE_DATE
		              ,MAX(FM.SALES_QTY) AS FM_SALES_QTY
		              ,MAX(FM.UNIT) AS FM_QTY_UNIT
		              ,MAX(FM.FOB_UNIT_PRICE*FM.SALES_QTY) AS FM_FOB_DECLARE_AMOUNT
		              ,MAX(FM.CURRENCY) AS FM_CURRENCY
		              ,MAX(FM.ERROR_REASON) AS ERROR_REASON
		              ,MAX(MT.MESSAGE) AS ERROR_REASON_NAME
		              ,MAX(CASE WHEN COALESCE(FM.ORIGIN_NATION_CD, '') != '' THEN FM.ORIGIN_NATION_CD
		                        ELSE FN_GET_ORIGIN_NATION(FM.COMPANY_CD, FM.DIVISION_CD, FM.CO_REQ_NO, FM.FTA_CD, FM.ITEM_TYPE, FM.COMPANY_CO_YN, 'N')
		               END) AS ORIGIN_NATION_CD
		              ,MAX(FM.CORE_ITEM_YN) AS CORE_ITEM_YN
		              ,MAX(FM.ORIGIN_NATION_SRC) AS ORIGIN_NATION_SRC
		              ,MAX(CD3.WORD) AS ORIGIN_NATION_SRC_NAME
		          FROM SALES_EXPORT SE
		         <isEqual property="SEARCH_TYPE" compareValue="ITEM">
                   <isNotEmpty property="gridData">
                     INNER JOIN(SELECT E.COMPANY_CD
                                       ,E.TEXTVALUE1
                                       ,E.TEXTVALUE2
                                       ,E.TEXTVALUE3
                                       ,E.TEXTVALUE5
                                   FROM EXCELDATA E
                                  WHERE E.COMPANY_CD = #COMPANY_CD#
                                    AND E.CATEGORY_CD = 'ISSUE_CO_LIST'
                                    AND E.ID = #USER_ID#
                                  GROUP BY E.COMPANY_CD
                                          ,E.TEXTVALUE1
                                          ,E.TEXTVALUE2
                                          ,E.TEXTVALUE3
                                          ,E.TEXTVALUE5
                                 ) E
                         ON E.COMPANY_CD = SE.COMPANY_CD
                        AND E.TEXTVALUE1 = SE.DIVISION_CD
                        AND E.TEXTVALUE2 = SE.CUSTOMER_CD
                        AND E.TEXTVALUE3 = SE.PRODUCT_ITEM_CD
                        AND E.TEXTVALUE5 = SE.INVOICE_NO
                   </isNotEmpty>
                 </isEqual>
		               INNER JOIN COMPANY C
		                  ON C.COMPANY_CD = SE.COMPANY_CD
		               INNER JOIN FCR_MST FM
		                  ON FM.COMPANY_CD = SE.COMPANY_CD
		                 AND FM.DIVISION_CD = SE.DIVISION_CD
		                 AND FM.CO_REQ_NO = SE.CO_REQ_NO
		               <isNotEmpty property="FTA_CD">
		                 AND FM.FTA_CD = #FTA_CD#
		               </isNotEmpty>
		               <isEqual property="cmCheckbox" compareValue="Y">
		                 <isEqual property="FTA_GROUP_CD" compareValue="VN">
		                 AND FM.COMPANY_CO_YN = 'Y'
		                 </isEqual>
		                 <isEqual property="CO_ISSUE_TYPE" compareValue="A">
                         AND FM.COMPANY_CO_YN = 'Y'
                         </isEqual>
		                 AND FM.STATUS = '4'
		               </isEqual>
		               INNER JOIN FCR_RESULT FR
		                  ON FR.CO_REQ_NO = FM.CO_REQ_NO
		                 AND FR.COMPANY_CD = FM.COMPANY_CD
		                 AND FR.DIVISION_CD = FM.DIVISION_CD
		                 AND FR.FTA_CD = FM.FTA_CD
		                 AND FR.RULE_CONTENTS = FM.RULE_CONTENTS
		                 AND FR.COMPANY_CO_YN = FM.COMPANY_CO_YN
		               INNER JOIN FTA_MST FS
		                  ON FS.FTA_CD = FM.FTA_CD
		               <isNotEmpty property="APPLY_FTA_CD">
		                 AND FS.FTA_CD IN($APPLY_FTA_CD$)
		               </isNotEmpty>
		                LEFT OUTER JOIN SALES_EXP_DECLARE SED
		                  ON SED.COMPANY_CD = SE.COMPANY_CD
		                 AND SED.DIVISION_CD = SE.DIVISION_CD
		                 AND SED.INVOICE_NO = SE.INVOICE_NO
		                 AND SED.PRODUCT_ITEM_CD = SE.PRODUCT_ITEM_CD
		                LEFT OUTER JOIN ITEM I
		                  ON I.COMPANY_CD = SE.COMPANY_CD
		                 AND I.ITEM_CD = SE.PRODUCT_ITEM_CD
		                LEFT OUTER JOIN CUSTOMER_ITEM CI
		                  ON CI.COMPANY_CD = SE.COMPANY_CD
		                 AND CI.DIVISION_CD = SE.DIVISION_cD
		                 AND CI.CUSTOMER_CD = SE.CUSTOMER_CD
		                 AND CI.ITEM_CD = SE.PRODUCT_ITEM_CD
		                 AND CI.CUSTOMER_SALES_TYPE = 'E'
		                 AND SE.INVOICE_DATE BETWEEN CI.START_DATE AND CI.END_DATE
		              <isEqual property="SEARCH_TYPE" compareValue="ITEM">
		                <isNotEmpty property="ISSUE_CITEM_LIST">
		                  <iterate open="(" close=")" property="ISSUE_CITEM_LIST" conjunction=" OR " prepend="AND">
		                     (CI.CUSTOMER_CD = #ISSUE_CITEM_LIST[].CUSTOMER_CD# AND CI.CUSTOMER_ITEM_CD = #ISSUE_CITEM_LIST[].CUSTOMER_ITEM_CD#)
		                  </iterate>
		                </isNotEmpty>
		                <isNotEmpty property="gridData">
                         AND EXISTS(SELECT 1
                                      FROM EXCELDATA E
                                     WHERE E.COMPANY_CD = CI.COMPANY_CD
                                       AND E.TEXTVALUE2 = CI.CUSTOMER_CD
                                       AND E.TEXTVALUE4 = CI.CUSTOMER_ITEM_CD
                                       AND E.CATEGORY_CD = 'ISSUE_CO_LIST'
                                       AND E.ID = #USER_ID#)
                       </isNotEmpty>
		             </isEqual>
		                LEFT OUTER JOIN CODE_LANG_DIC CD1
		                  ON CD1.COMPANY_CD = FM.COMPANY_CD
		                 AND CD1.CATEGORY_CD = 'EXPORT_FLAG' 
		                 AND CD1.CODE = FM.EXPORT_FLAG
		                 AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		                LEFT OUTER JOIN CODE_LANG_DIC CD3
		                  ON CD3.COMPANY_CD = FM.COMPANY_CD
		                 AND CD3.CATEGORY_CD = 'ORIGIN_NATION_SRC'
		                 AND CD3.CODE = FM.ORIGIN_NATION_SRC
		                 AND CD3.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		                LEFT OUTER JOIN MESSAGE_TABLE MT
		                 ON MT.MESSAGE_CODE = FM.ERROR_REASON
		                AND MT.NATION_CODE = #SESSION_DEFAULT_LANGUAGE#
		         WHERE SE.COMPANY_CD = #COMPANY_CD#
		           AND SE.DELETE_YN = 'N'
		         <isNotEmpty property="CUSTOMER_CD">
		           AND SE.CUSTOMER_CD = #CUSTOMER_CD#
		         </isNotEmpty>
		         <isEqual property="SEARCH_TYPE" compareValue="INVOICE">
		           <isNotEmpty property="INVOICE_DATE">
		           AND SE.INVOICE_DATE = #INVOICE_DATE#
		           </isNotEmpty>
		         </isEqual>
		         <isEqual property="SEARCH_TYPE" compareValue="ITEM">
		           <isNotEmpty property="ISSUE_LIST">
		             <iterate open="(" close=")" property="ISSUE_LIST" conjunction=" OR " prepend="AND">
		               (SE.DIVISION_CD = #ISSUE_LIST[].DIVISION_CD# AND SE.CUSTOMER_CD = #ISSUE_LIST[].CUSTOMER_CD# AND
		                SE.PRODUCT_ITEM_CD = #ISSUE_LIST[].PRODUCT_ITEM_CD# AND SE.INVOICE_NO = #ISSUE_LIST[].INVOICE_NO#)
		             </iterate>
		           </isNotEmpty>
		         </isEqual>
		         <isNotEqual property="SEARCH_TYPE" compareValue="ITEM">
		           AND SE.DIVISION_CD = #DIVISION_CD#
		           AND SE.INVOICE_NO = #INVOICE_NO#
		         </isNotEqual>
		         GROUP BY FM.COMPANY_CD
		                 ,C.COMPANY_NAME
		                 ,FM.DIVISION_CD
		                 ,FM.CO_REQ_NO
		                 ,FM.PRODUCT_YYYYMM
		                 ,FM.EXPORT_FLAG
		                 ,CD1.WORD
		                 ,FM.ITEM_TYPE
		                 ,FM.YYYYMM
		                 ,SE.SALES_MGMT_NO
		                 ,SE.CUSTOMER_CD
		                 ,SE.INVOICE_NO
		                 ,SE.PRODUCT_ITEM_CD
		                 ,FM.FTA_CD
		                 ,FS.FTA_NAME
		                 ,FS.FTA_ASSOCIATION_CD
		                 ,FS.FTA_GROUP_CD
		                 ,FM.YYYYMM
		                 ,I.ITEM_NAME
		                 ,CI.CUSTOMER_ITEM_CD
                ) SE
               LEFT OUTER JOIN CODE_LANG_DIC CD1
                 ON CD1.COMPANY_CD = SE.COMPANY_CD
                AND CD1.CATEGORY_CD = 'FTA_CO_YN' 
                AND CD1.CODE = SE.ORIGIN_YN
                AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
               LEFT OUTER JOIN CODE_LANG_DIC CD2
                 ON CD2.COMPANY_CD = SE.COMPANY_CD
                AND CD2.CATEGORY_CD = 'CO_STATUS' 
                AND CD2.CODE = SE.STATUS
                AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
         WHERE SE.CUSTOMER_ITEM_CD IS NOT NULL AND SE.CUSTOMER_ITEM_CD != ''
         ORDER BY SE.INVOICE_NO, SE.PRODUCT_ITEM_CD, SE.CUSTOMER_ITEM_CD, SE.FTA_CD
    </select>
    
    <!-- MMA004 START -->
    <select id="MMA004.selectCOIssueInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT ICCM.CO_DOC_NO
              ,ICCM.COMPANY_CD
              ,ICCM.DIVISION_CD
              ,ICCM.CO_DOC_TYPE
              ,ICCM.CUSTOMER_CD
              ,FN_GET_CUSTOMER(ICCM.COMPANY_CD, ICCM.CUSTOMER_CD, 'CUSTOMER_NAME') AS CUSTOMER_NAME
              ,FN_GET_COMMON_CD(ICCM.COMPANY_CD, 'CO_DOC_TYPE', ICCM.CO_DOC_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS CO_DOC_TYPE_NAME
              ,ICCM.ISSUE_DATE
              ,ICCM.APPLY_DATE
              ,ICCM.END_DATE
              ,ICCM.EXPORTER_NAME
              ,ICCM.EXPORTER_PRESIDENT_NAME
              ,ICCM.EXPORTER_BUSINESS_NO
              ,ICCM.EXPORTER_PHONE_NO
              ,ICCM.EXPORTER_FAX_NO
              ,ICCM.EXPORTER_EMAIL
              ,ICCM.EXPORTER_ADDRESS
              ,ICCM.PRODUCER_NAME
              ,ICCM.PRODUCER_PRESIDENT_NAME
              ,ICCM.PRODUCER_BUSINESS_NO
              ,ICCM.PRODUCER_PHONE_NO
              ,ICCM.PRODUCER_FAX_NO
              ,ICCM.PRODUCER_EMAIL
              ,ICCM.PRODUCER_ADDRESS
              ,ICCM.SIGNATURE_SEQ
              ,ICCM.CO_SHARE_YN
              ,S.PHONE_NO AS SIGN_PHONE_NO
              ,S.EMAIL AS SIGN_EMAIL
              ,S.POSITION AS SIGN_POSITION
              ,S.END_DATE AS SIGN_END_DATE
              ,SEI.SHIPPING_DATE
              ,SEI.VEHICLE_NAME
              ,SEI.LOADING_PORT_NAME
              ,SEI.FINAL_DESTINATION
              ,FN_GET_COMMON_CD(SEI.COMPANY_CD, 'NATION', SEI.FINAL_DESTINATION, 'NAME', 'EN') AS FINAL_DESTINATION_NAME
              ,ICCM.REASON_TITLE
              ,ICCM.REQUESTER
              ,ICCM.REQUEST_DATE
              ,KCDR.CO_DOC_SEQ
              ,FN_GET_CERTIFICATION_NO(ICCM.COMPANY_CD, ICCM.DIVISION_CD, ICCM.CO_DOC_NO) AS CERTIFICATION_NO
              ,ICCM.ORIGIN_RESULT_1
              ,ICCM.ORIGIN_RESULT_2
              ,ICCM.ORIGIN_RESULT_3
              ,ICCM.ORIGIN_RESULT_4
              ,ICCM.ORIGIN_RESULT_5
              ,ICCM.ORIGIN_RESULT_6
              ,ICCM.ORIGIN_RESULT_7
              ,ICCM.ORIGIN_RESULT_8
              ,ICCM.ORIGIN_RESULT_9
            <isEmpty property="FTA_CD">
              ,NULL AS DOC_NAME_ENG
              ,NULL AS ISSUE_NATION_NM
              ,NULL AS FTA_CD
              ,NULL AS FTA_NAME
              ,ICCM.INVOICE_NO
              ,COALESCE(C.COMPANY_NAME_ENG, C.COMPANY_NAME) AS COMPANY_NAME
              ,NULL AS ORIGIN_NATION_NM
              ,NULL AS MAKER_NATION_NM
              ,NULL AS PRODUCER_NATION_NM
              ,NULL AS IMPORT_NATION_NM
              ,NULL AS CITY
              ,ICCM.APPLY_DATE AS DECLARE_DATE
            </isEmpty>
            <isNotEmpty property="FTA_CD">
              ,DM.DOC_NAME_ENG
              ,CD1.CODE_NAME_ENG AS ISSUE_NATION_NM
              ,FTA.FTA_CD
              ,FTA.FTA_NAME_ENG AS FTA_NAME
              ,ICCM.INVOICE_NO
              ,COALESCE(C.COMPANY_NAME_ENG, C.COMPANY_NAME) AS COMPANY_NAME
              ,CD1.CODE_NAME_ENG AS ORIGIN_NATION_NM
              ,CD1.CODE_NAME_ENG AS MAKER_NATION_NM
              ,CD1.CODE_NAME_ENG AS PRODUCER_NATION_NM
              ,CD2.CODE_NAME_ENG AS IMPORT_NATION_NM
              ,COALESCE(D.ADDRESS2_ENG, D.ADDRESS2) AS CITY
              ,ICCM.APPLY_DATE AS DECLARE_DATE
            </isNotEmpty>
          FROM ISSUE_CO_CERTIFICATE_MST ICCM
               INNER JOIN COMPANY C
                  ON C.COMPANY_CD = ICCM.COMPANY_CD
               INNER JOIN DIVISION D
                  ON D.COMPANY_CD = ICCM.COMPANY_CD
                 AND D.DIVISION_CD = ICCM.DIVISION_CD
               <isNotEmpty property="FTA_CD"> 
               INNER JOIN FTA_MST FTA
                  ON FTA.FTA_CD = #FTA_CD#
                LEFT OUTER JOIN DOC_MATRIX DM
                  ON DM.FTA_CD = FTA.FTA_CD
                 AND DM.EXPORT_FLAG = ICCM.EXPORT_FLAG
                LEFT OUTER JOIN CODE_DTL CD1
                  ON CD1.COMPANY_CD = ICCM.COMPANY_CD
                 AND CD1.CATEGORY_CD = 'NATION'
                 AND CD1.CODE = FTA.FTA_GROUP_CD
               </isNotEmpty>
               LEFT OUTER JOIN SIGNATURE S
                 ON S.SIGNATURE_SEQ = ICCM.SIGNATURE_SEQ
               LEFT OUTER JOIN SALES_EXPORT_INVOICE SEI
                 ON SEI.COMPANY_CD = ICCM.COMPANY_CD
                AND SEI.INVOICE_NO = ICCM.INVOICE_NO
               LEFT OUTER JOIN CODE_DTL CD2
                 ON CD2.COMPANY_CD = SEI.COMPANY_CD
                AND CD2.CATEGORY_CD = 'NATION'
                AND CD2.CODE = SEI.FINAL_DESTINATION
               LEFT OUTER JOIN KCS_CO_DOC_REQT KCDR
                 ON KCDR.COMPANY_CD = ICCM.COMPANY_CD
                AND KCDR.DIVISION_CD = ICCM.DIVISION_CD
                AND KCDR.CO_DOC_NO = ICCM.CO_DOC_NO
                AND KCDR.REQ_SEND_TYPE_CODE = '09'
         WHERE ICCM.COMPANY_CD = #COMPANY_CD#
           AND ICCM.DIVISION_CD = #DIVISION_CD#
           AND ICCM.CO_DOC_NO = #CO_DOC_NO#
           LIMIT 1
    </select>
    
    <select id="MMA004.selectIssueReasonInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT ICCM.CO_DOC_NO
              ,ICCM.COMPANY_CD
              ,ICCM.DIVISION_CD
              ,ICCM.REASON_TITLE
              ,ICCM.REQUESTER
              ,ICCM.REQUEST_DATE
              ,ICCM.REASON_CONTENTS
          FROM ISSUE_CO_CERTIFICATE_MST ICCM
         WHERE ICCM.COMPANY_CD = #COMPANY_CD#
           AND ICCM.DIVISION_CD = #DIVISION_CD#
           AND ICCM.CO_DOC_NO = #CO_DOC_NO#
    </select>
    
    <select id="MMA004.selectExportNProducerInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COALESCE(CT.CUSTOMER_NAME_ENG, CT.CUSTOMER_NAME) AS EXPORTER_NAME
              ,COALESCE(CT.PRESIDENT_NAME_ENG, CT.PRESIDENT_NAME) AS EXPORTER_PRESIDENT_NAME
              ,CT.BUSINESS_NO AS EXPORTER_BUSINESS_NO
              ,CT.PHONE_NO AS EXPORTER_PHONE_NO
              ,CT.FAX_NO AS EXPORTER_FAX_NO
              ,CT.EMAIL AS EXPORTER_EMAIL
              ,COALESCE(CT.ADDRESS_ENG, CT.ADDRESS) AS EXPORTER_ADDRESS
              ,COALESCE(C.COMPANY_NAME_ENG, C.COMPANY_NAME) AS PRODUCER_NAME
              ,COALESCE(C.PRESIDENT_NAME_ENG, C.PRESIDENT_NAME) AS PRODUCER_PRESIDENT_NAME
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.BUSINESS_NO, C.BUSINESS_NO) ELSE C.BUSINESS_NO END) AS PRODUCER_BUSINESS_NO
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.PHONE_NO, C.COM_PHONE_NO) ELSE C.COM_PHONE_NO END) AS PRODUCER_PHONE_NO
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.FAX_NO, C.COM_FAX_NO) ELSE C.COM_FAX_NO END) AS PRODUCER_FAX_NO
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.OFFICER_EMAIL, C.COM_EMAIL) ELSE C.COM_EMAIL END) AS PRODUCER_EMAIL
              ,(CASE WHEN CD.TXT_VALUE1 = 'D' THEN COALESCE(D.ADDRESS1_ENG, COALESCE(C.ADDRESS2, C.ADDRESS1)) ELSE COALESCE(C.ADDRESS2, C.ADDRESS1) END) AS PRODUCER_ADDRESS
              ,SEI.FINAL_DESTINATION
              ,FN_GET_COMMON_CD(SEI.COMPANY_CD, 'NATION', SEI.FINAL_DESTINATION, 'NAME', 'EN') AS FINAL_DESTINATION_NAME
              ,SEI.SHIPPING_DATE
              ,SE.CURRENCY
              ,FN_GET_CERTIFICATION_NO(SE.COMPANY_CD, SE.DIVISION_CD, NULL) AS CERTIFICATION_NO
            <isEmpty property="FTA_CD">
              ,NULL AS DOC_NAME_ENG
		      ,NULL AS ISSUE_NATION_NM
		      ,NULL AS FTA_CD
		      ,NULL AS FTA_NAME
		      ,SE.INVOICE_NO
		      ,SEI.VEHICLE_NAME
		      ,SEI.LOADING_PORT_NAME
		      ,COALESCE(C.COMPANY_NAME_ENG, C.COMPANY_NAME) AS COMPANY_NAME
		      ,NULL AS ORIGIN_NATION_NM
		      ,NULL AS MAKER_NATION_NM
		      ,NULL AS PRODUCER_NATION_NM
		      ,NULL AS IMPORT_NATION_NM
		      ,NULL AS CITY
		      ,SE.INVOICE_DATE AS DECLARE_DATE
            </isEmpty>
            <isNotEmpty property="FTA_CD">
              ,DM.DOC_NAME_ENG
              ,CD1.CODE_NAME_ENG AS ISSUE_NATION_NM
              ,FTA.FTA_CD
              ,FTA.FTA_NAME_ENG AS FTA_NAME
              ,SE.INVOICE_NO
              ,SEI.VEHICLE_NAME
              ,SEI.LOADING_PORT_NAME
              ,COALESCE(C.COMPANY_NAME_ENG, C.COMPANY_NAME) AS COMPANY_NAME
              ,CD1.CODE_NAME_ENG AS ORIGIN_NATION_NM
              ,CD1.CODE_NAME_ENG AS MAKER_NATION_NM
              ,CD1.CODE_NAME_ENG AS PRODUCER_NATION_NM
              ,CD2.CODE_NAME_ENG AS IMPORT_NATION_NM
              ,COALESCE(D.ADDRESS2_ENG, D.ADDRESS2) AS CITY
              ,SE.INVOICE_DATE AS DECLARE_DATE
            </isNotEmpty>
          FROM SALES_EXPORT SE
               INNER JOIN COMPANY C
                  ON C.COMPANY_CD = SE.COMPANY_CD
               INNER JOIN DIVISION D
                  ON D.COMPANY_CD = SE.COMPANY_CD
                 AND D.DIVISION_CD = SE.DIVISION_CD
               <isNotEmpty property="FTA_CD"> 
               INNER JOIN FTA_MST FTA
		          ON FTA.FTA_CD = #FTA_CD#
		        LEFT OUTER JOIN DOC_MATRIX DM
		          ON DM.FTA_CD = FTA.FTA_CD
		         AND DM.EXPORT_FLAG = SE.INVOICE_TYPE
		        LEFT OUTER JOIN CODE_DTL CD1
		          ON CD1.COMPANY_CD = SE.COMPANY_CD
		         AND CD1.CATEGORY_CD = 'NATION'
		         AND CD1.CODE = FTA.FTA_GROUP_CD
		        LEFT OUTER JOIN CODE_DTL CD2
		          ON CD2.COMPANY_CD = SE.COMPANY_CD
		         AND CD2.CATEGORY_CD = 'NATION'
		         AND CD2.CODE = SE.NATION_CD
               </isNotEmpty>
                LEFT OUTER JOIN CODE_DTL CD
                  ON CD.COMPANY_CD = C.COMPANY_CD
                 AND CD.CATEGORY_CD = 'SYS_CONFIG'
                 AND CD.CODE = 'CERT_EXPORTER_SCOPE'
                LEFT OUTER JOIN CUSTOMER CT
                  ON CT.COMPANY_CD = SE.COMPANY_CD
                 AND CT.CUSTOMER_CD = SE.CUSTOMER_CD
                LEFT OUTER JOIN SALES_EXPORT_INVOICE SEI
                  ON SEI.COMPANY_CD = SE.COMPANY_CD
                 AND SEI.INVOICE_NO = SE.INVOICE_NO
         WHERE SE.COMPANY_CD = #COMPANY_CD#
           AND SE.DIVISION_CD = #DIVISION_CD#
           AND SE.SALES_MGMT_NO = #SALES_MGMT_NO#
         LIMIT 1
    </select>

    <select id="MMA004.selectCOOriginList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT ICCM.COMPANY_CD,
               C.COMPANY_NAME,
               ICCM.DIVISION_CD,
               FN_GET_DIVISION(ICCM.COMPANY_CD, ICCM.DIVISION_CD, 'DIVISION_NAME') AS DIVISION_NAME,
               ICCM.CO_DOC_NO,
               ICCD.CO_REQ_NO,
               ICCD.SALES_MGMT_NO,
               ICCM.CUSTOMER_CD,
               FN_GET_CUSTOMER(ICCM.COMPANY_CD, ICCM.CUSTOMER_CD, 'CUSTOMER_NAME') AS CUSTOMER_NAME,
               FM.PRODUCT_YYYYMM,
               FM.EXPORT_FLAG,
               FN_GET_COMMON_CD(ICCM.COMPANY_CD, 'EXPORT_FLAG', FM.EXPORT_FLAG, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS EXPORT_FLAG_NAME,
               FM.ITEM_TYPE,
               FN_GET_COMMON_CD(ICCM.COMPANY_CD, 'ITEM_TYPE', FM.ITEM_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ITEM_TYPE_NAME,
               FM.YYYYMM,
               FM.INVOICE_NO,
               (CASE WHEN #SESSION_FTA_NATION# = 'MX' THEN TO_CHAR(FM.CREATE_DATE, 'DD-MM-YYYY HH24:MI:SS')
                     WHEN #SESSION_FTA_NATION# = 'US' THEN TO_CHAR(FM.CREATE_DATE, 'MM-DD-YYYY HH24:MI:SS')
                     ELSE TO_CHAR(FM.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS')
                END) AS DE_DATE,
               ICCD.PRODUCT_ITEM_CD,
               COALESCE(ICCD.CUSTOMER_ITEM_CD, ICCD.PRODUCT_ITEM_CD) AS CUSTOMER_ITEM_CD,
               COALESCE(FN_GET_CUSTOMER_ITEM(ICCM.COMPANY_CD, ICCM.CUSTOMER_CD, ICCD.PRODUCT_ITEM_CD, 'SALES_ITEM_NAME'), FN_GET_ITEM(ICCM.COMPANY_CD, ICCM.DIVISION_CD, ICCD.PRODUCT_ITEM_CD, 'ITEM_NAME')) AS CUSTOMER_ITEM_NAME,
               ICCD.FTA_CD,
               FS.FTA_NAME,
               ICCD.HS_CODE,
               ICCD.RULE_CONTENTS,
               ICCD.RVC_RATE,
               ICCD.ORIGIN_YN,
               ICCD.ORIGIN_NATION_CD,
               FN_GET_COMMON_CD(ICCD.COMPANY_CD, 'FTA_CO_YN', ICCD.ORIGIN_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ORIGIN_YN_NAME,
               ICCD.FTA_GROUP_CD,
               FN_GET_COMMON_CD(ICCD.COMPANY_CD, 'FTA_GROUP_CD', ICCD.FTA_GROUP_CD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS FTA_GROUP_CD_NAME,
               ICCD.SALES_UNIT_PRICE,
               ICCD.NET_COST,
               ICCD.NALADISA_CODE,
               ICCD.CURRENCY,
               ICCD.TRACE_VALUE,
               FM.NONORIGIN_REASON_CD,
               CD1.WORD AS NONORIGIN_REASON_NAME,
               FM.NONORIGIN_REASON_DESC,
               FM.INVOICE_DATE,
               COALESCE(SED.SALES_QTY, SE.SALES_QTY) AS INVOICE_QTY,
               COALESCE(SED.QTY_UNIT, SE.UNIT) AS INVOICE_UNIT,
               COALESCE(SED.AMOUNT, SE.AMOUNT) AS INVOICE_AMOUNT,
               COALESCE(SED.CURRENCY, SE.CURRENCY) AS INVOICE_CURRENCY,
               SED.GROSS_WEIGHT,
               SED.WEIGHT_UNIT,
               SED.PACKING_QTY,
               SED.PACKING_UNIT,
               SED.INVOICE_DATE AS INVOICE_ISSUE_DATE,
               SED.DEAL_ITEM_NAME,
               FM.STATUS,
               CD2.WORD AS STATUS_NAME,
               FM.SALES_QTY AS FM_SALES_QTY,
               FM.UNIT AS FM_QTY_UNIT,
               FM.FOB_UNIT_PRICE*FM.SALES_QTY AS FM_FOB_DECLARE_AMOUNT,
               FM.CURRENCY AS FM_CURRENCY,
               FM.ORIGIN_NATION_SRC,
               CD3.WORD AS ORIGIN_NATION_SRC_NAME
          FROM ISSUE_CO_CERTIFICATE_MST ICCM
               INNER JOIN ISSUE_CO_CERTIFICATE_DTL ICCD
                  ON ICCD.COMPANY_CD = ICCM.COMPANY_CD
                 AND ICCD.DIVISION_CD = ICCM.DIVISION_CD
                 AND ICCD.CO_DOC_NO = ICCM.CO_DOC_NO
              <isNotEmpty property="FTA_CD">
                 AND ICCD.FTA_CD = #FTA_CD#
              </isNotEmpty>
               INNER JOIN FCR_MST FM
                  ON FM.CO_REQ_NO = ICCD.CO_REQ_NO
                 AND FM.COMPANY_CD = ICCD.COMPANY_CD
                 AND FM.DIVISION_CD = ICCD.DIVISION_CD
                 AND FM.FTA_CD = ICCD.FTA_CD
               INNER JOIN COMPANY C
                  ON C.COMPANY_CD = ICCM.COMPANY_CD
                LEFT OUTER JOIN SALES_EXPORT SE
                  ON SE.COMPANY_CD = FM.COMPANY_CD
                 AND SE.DIVISION_CD = FM.DIVISION_CD
                 AND SE.SALES_MGMT_NO = FM.SALES_MGMT_NO
                LEFT OUTER JOIN SALES_EXP_DECLARE SED
                  ON SED.COMPANY_CD = FM.COMPANY_CD
                 AND SED.DIVISION_CD = FM.DIVISION_CD
                 AND SED.INVOICE_NO = FM.INVOICE_NO
                 AND SED.PRODUCT_ITEM_CD = FM.PRODUCT_ITEM_CD
                LEFT OUTER JOIN FTA_MST FS
                  ON FS.FTA_CD = ICCD.FTA_CD
                LEFT OUTER JOIN CODE_LANG_DIC CD1
                  ON CD1.COMPANY_CD = FM.COMPANY_CD
                 AND CD1.CATEGORY_CD = 'NONORIGIN_REASON' 
                 AND CD1.CODE = FM.NONORIGIN_REASON_CD
                 AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                LEFT OUTER JOIN CODE_LANG_DIC CD2
                  ON CD2.COMPANY_CD = FM.COMPANY_CD
                 AND CD2.CATEGORY_CD = 'CO_STATUS' 
                 AND CD2.CODE = FM.STATUS
                 AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                LEFT OUTER JOIN CODE_LANG_DIC CD3
                  ON CD3.COMPANY_CD = FM.COMPANY_CD
                 AND CD3.CATEGORY_CD = 'ORIGIN_NATION_SRC'
                 AND CD3.CODE = FM.ORIGIN_NATION_SRC
                 AND CD3.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
         WHERE ICCM.COMPANY_CD = #COMPANY_CD#
           AND ICCM.DIVISION_CD = #DIVISION_CD#
           AND ICCM.CO_DOC_NO = #CO_DOC_NO#
         ORDER BY FM.INVOICE_NO, ICCD.PRODUCT_ITEM_CD, ICCD.CUSTOMER_ITEM_CD, ICCD.FTA_CD
    </select>
    
    <select id="MMA204.selectProducerList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT P.COMPANY_CD
              ,P.DIVISION_CD
              ,P.PRODUCER_CD
            <isEqual property="SEARCH_ITEM_YN" compareValue="Y">
              ,P.PRODUCT_ITEM_CD
              ,P.CUSTOMER_ITEM_CD
              ,P.HS_CODE
              ,P.COMPANY_CO_YN AS ORIGIN_YN
              ,P.FTA_CD
              ,MAX(FM.FTA_NAME) AS FTA_NAME
              ,FN_GET_COMMON_CD(P.COMPANY_CD, 'FTA_CO_YN', P.COMPANY_CO_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ORIGIN_YN_NAME
            </isEqual>
            <isNotEqual property="SEARCH_ITEM_YN" compareValue="Y">
              ,NULL AS PRODUCT_ITEM_CD
              ,NULL AS CUSTOMER_ITEM_CD
              ,NULL AS HS_CODE
              ,NULL AS ORIGIN_YN
              ,NULL AS FTA_CD
              ,NULL AS FTA_NAME
              ,NULL AS ORIGIN_YN_NAME
            </isNotEqual>
              ,MAX(P.PRODUCT_ITEM_NAME) AS PRODUCT_ITEM_NAME
              ,MAX(P.CUSTOMER_ITEM_NAME) AS CUSTOMER_ITEM_NAME
              ,MAX(P.PRODUCER_NAME) AS PRODUCER_NAME
              ,MAX(P.CHARGE_NAME) AS CHARGE_NAME
              ,MAX(P.ADDRESS) AS ADDRESS
              ,MAX(P.CHARGE_EMAIL) AS CHARGE_EMAIL
              ,MAX(P.BUSINESS_NO) AS BUSINESS_NO
              ,MAX(P.PHONE_NO) AS PHONE_NO
              ,MAX(P.FAX_NO) AS FAX_NO
          FROM (
                (SELECT SE.COMPANY_CD
                      ,SE.DIVISION_CD
                      ,SE.PRODUCT_ITEM_CD
                      ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
                      ,(CASE WHEN COALESCE(CI.CUSTOMER_ITEM_CD, '') != '' THEN CI.CUSTOMER_ITEM_CD ELSE SE.PRODUCT_ITEM_CD END) AS CUSTOMER_ITEM_CD
                      ,COALESCE(CI.CUSTOMER_ITEM_NAME, I.ITEM_NAME) AS CUSTOMER_ITEM_NAME
                      ,C.COMPANY_CD AS PRODUCER_CD
                      ,COALESCE(C.COMPANY_NAME_ENG, C.COMPANY_NAME) AS PRODUCER_NAME
                      ,COALESCE(C.PRESIDENT_NAME_ENG, C.PRESIDENT_NAME) AS CHARGE_NAME
                      ,COALESCE(C.ADDRESS2, C.ADDRESS1) AS ADDRESS
                      ,C.OFFICER_EMAIL AS CHARGE_EMAIL
                      ,C.BUSINESS_NO
                      ,C.COM_PHONE_NO AS PHONE_NO
                      ,C.COM_FAX_NO AS FAX_NO
                      ,FM.HS_CODE
                      ,FM.COMPANY_CO_YN
                      ,FM.FTA_CD
                  FROM SALES_EXPORT SE
                      <isEqual property="SEARCH_TYPE" compareValue="ITEM">
                        <isNotEmpty property="gridData">
                        INNER JOIN(SELECT E.COMPANY_CD
                                       ,E.TEXTVALUE1
                                       ,E.TEXTVALUE2
                                       ,E.TEXTVALUE3
                                       ,E.TEXTVALUE5
                                   FROM EXCELDATA E
                                  WHERE E.COMPANY_CD = #COMPANY_CD#
                                    AND E.CATEGORY_CD = 'ISSUE_CO_LIST'
                                    AND E.ID = #USER_ID#
                                  GROUP BY E.COMPANY_CD
                                          ,E.TEXTVALUE1
                                          ,E.TEXTVALUE2
                                          ,E.TEXTVALUE3
                                          ,E.TEXTVALUE5
                                 ) E
                         ON E.COMPANY_CD = SE.COMPANY_CD
                        AND E.TEXTVALUE1 = SE.DIVISION_CD
                        AND E.TEXTVALUE2 = SE.CUSTOMER_CD
                        AND E.TEXTVALUE3 = SE.PRODUCT_ITEM_CD
                        AND E.TEXTVALUE5 = SE.INVOICE_NO
                        </isNotEmpty>
                      </isEqual>
                       INNER JOIN FCR_MST FM
                          ON FM.COMPANY_CD = SE.COMPANY_CD
                         AND FM.DIVISION_CD = SE.DIVISION_CD
                         AND FM.CO_REQ_NO = SE.CO_REQ_NO
                         AND FM.FTA_CD = #FTA_CD#
                       <isEqual property="cmCheckbox" compareValue="Y">
                         <isEqual property="FTA_GROUP_CD" compareValue="VN">
                         AND FM.COMPANY_CO_YN = 'Y'
                         </isEqual>
                         <isEqual property="CO_ISSUE_TYPE" compareValue="A">
                         AND FM.COMPANY_CO_YN = 'Y'
                         </isEqual>
                         AND FM.STATUS = '4'
                       </isEqual>
                       INNER JOIN COMPANY C
                          ON C.COMPANY_CD = SE.COMPANY_CD
                        LEFT OUTER JOIN ITEM I
		                  ON I.COMPANY_CD = SE.COMPANY_CD
		                 AND I.ITEM_CD = SE.PRODUCT_ITEM_CD
                        LEFT OUTER JOIN CUSTOMER_ITEM CI
                          ON CI.COMPANY_CD = SE.COMPANY_CD
                         AND CI.DIVISION_CD = SE.DIVISION_cD
                         AND CI.CUSTOMER_CD = SE.CUSTOMER_CD
                         AND CI.ITEM_CD = SE.PRODUCT_ITEM_CD
                         AND CI.CUSTOMER_SALES_TYPE = 'E'
                      <isEqual property="SEARCH_TYPE" compareValue="ITEM">
                        <isNotEmpty property="ISSUE_CITEM_LIST">
                          <iterate open="(" close=")" property="ISSUE_CITEM_LIST" conjunction=" OR " prepend="AND">
                             (CI.CUSTOMER_CD = #ISSUE_CITEM_LIST[].CUSTOMER_CD# AND CI.CUSTOMER_ITEM_CD = #ISSUE_CITEM_LIST[].CUSTOMER_ITEM_CD#)
                          </iterate>
                        </isNotEmpty>
                        <isNotEmpty property="gridData">
                         AND EXISTS(SELECT 1
                                      FROM EXCELDATA E
                                     WHERE E.COMPANY_CD = SE.COMPANY_CD
                                       AND E.TEXTVALUE2 = CI.CUSTOMER_CD
                                       AND E.TEXTVALUE4 = CI.CUSTOMER_ITEM_CD
                                       AND E.CATEGORY_CD = 'ISSUE_CO_LIST'
                                       AND E.ID = #USER_ID#)
                        </isNotEmpty>
                      </isEqual>
                 WHERE SE.COMPANY_CD = #COMPANY_CD#
                   AND SE.DELETE_YN = 'N'
                 <isEqual property="SEARCH_TYPE" compareValue="ITEM">
                    <isNotEmpty property="ISSUE_CITEM_LIST">
                      <iterate open="(" close=")" property="ISSUE_LIST" conjunction=" OR " prepend="AND">
                        (SE.DIVISION_CD = #ISSUE_LIST[].DIVISION_CD# AND SE.CUSTOMER_CD = #ISSUE_LIST[].CUSTOMER_CD# AND
                         SE.PRODUCT_ITEM_CD = #ISSUE_LIST[].PRODUCT_ITEM_CD# AND SE.INVOICE_NO = #ISSUE_LIST[].INVOICE_NO#)
                      </iterate>
                    </isNotEmpty>
                 </isEqual>
                 <isNotEqual property="SEARCH_TYPE" compareValue="ITEM">
                   AND SE.DIVISION_CD = #DIVISION_CD#
                   AND SE.INVOICE_NO = #INVOICE_NO#
                 </isNotEqual>
                   AND SE.ITEM_TYPE IN('P', 'H', 'S'))
                UNION ALL
                SELECT SE.COMPANY_CD
                      ,SE.DIVISION_CD
                      ,SE.PRODUCT_ITEM_CD
                      ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
                      ,(CASE WHEN COALESCE(CI.CUSTOMER_ITEM_CD, '') != '' THEN CI.CUSTOMER_ITEM_CD ELSE SE.PRODUCT_ITEM_CD END) AS CUSTOMER_ITEM_CD
                      ,COALESCE(CI.CUSTOMER_ITEM_NAME, I.ITEM_NAME) AS CUSTOMER_ITEM_NAME
                      ,P.VENDOR_CD AS PRODUCER_CD
                      ,COALESCE(V.VENDOR_NAME_ENG, V.VENDOR_NAME) AS PRODUCER_NAME
                      ,COALESCE(V.PRESIDENT_NAME_ENG, V.PRESIDENT_NAME) AS CHARGE_NAME
                      ,COALESCE(V.ADDRESS_ENG, V.ADDRESS) AS ADDRESS
                      ,V.CHARGE_EMAIL
                      ,V.BUSINESS_NO
                      ,V.PHONE_NO
                      ,V.FAX_NO
                      ,FM.HS_CODE
                      ,FM.COMPANY_CO_YN
                      ,FM.FTA_CD
                  FROM SALES_EXPORT SE
                     <isEqual property="SEARCH_TYPE" compareValue="ITEM">
                        <isNotEmpty property="gridData">
                        INNER JOIN(SELECT E.COMPANY_CD
                                       ,E.TEXTVALUE1
                                       ,E.TEXTVALUE2
                                       ,E.TEXTVALUE3
                                       ,E.TEXTVALUE5
                                   FROM EXCELDATA E
                                  WHERE E.COMPANY_CD = #COMPANY_CD#
                                    AND E.CATEGORY_CD = 'ISSUE_CO_LIST'
                                    AND E.ID = #USER_ID#
                                  GROUP BY E.COMPANY_CD
                                          ,E.TEXTVALUE1
                                          ,E.TEXTVALUE2
                                          ,E.TEXTVALUE3
                                          ,E.TEXTVALUE5
                                 ) E
                         ON E.COMPANY_CD = SE.COMPANY_CD
                        AND E.TEXTVALUE1 = SE.DIVISION_CD
                        AND E.TEXTVALUE2 = SE.CUSTOMER_CD
                        AND E.TEXTVALUE3 = SE.PRODUCT_ITEM_CD
                        AND E.TEXTVALUE5 = SE.INVOICE_NO
                        </isNotEmpty>
                      </isEqual>
                       INNER JOIN FCR_MST FM
                          ON FM.COMPANY_CD = SE.COMPANY_CD
                         AND FM.DIVISION_CD = SE.DIVISION_CD
                         AND FM.CO_REQ_NO = SE.CO_REQ_NO
                         AND FM.FTA_CD = #FTA_CD#
                       <isEqual property="cmCheckbox" compareValue="Y">
                         <isEqual property="FTA_GROUP_CD" compareValue="VN">
                         AND FM.COMPANY_CO_YN = 'Y'
                         </isEqual>
                         <isEqual property="CO_ISSUE_TYPE" compareValue="A">
                         AND FM.COMPANY_CO_YN = 'Y'
                         </isEqual>
                         AND FM.STATUS = '4'
                       </isEqual>
                       INNER JOIN FCR_DTL FD
                          ON FM.CO_REQ_NO = FD.CO_REQ_NO
                         AND FM.COMPANY_CD = FD.COMPANY_CD
                         AND FM.DIVISION_CD = FD.DIVISION_CD
                         AND FM.FTA_CD = FD.FTA_CD
                       INNER JOIN FCR_PO_ITEM P
                          ON P.CO_REQ_NO = FM.CO_REQ_NO
                         AND P.COMPANY_CD = FM.COMPANY_CD
                         AND P.DIVISION_CD = FM.DIVISION_CD
                         AND P.ITEM_CD = FD.ITEM_CD
                         AND P.PO_APPLY_YN = 'Y'
                        LEFT OUTER JOIN VENDOR V
                          ON P.COMPANY_CD = V.COMPANY_CD
                         AND P.VENDOR_CD = V.VENDOR_CD
                        LEFT OUTER JOIN ITEM I
                          ON I.COMPANY_CD = SE.COMPANY_CD
                         AND I.ITEM_CD = SE.PRODUCT_ITEM_CD
                        LEFT OUTER JOIN CUSTOMER_ITEM CI
                          ON CI.COMPANY_CD = SE.COMPANY_CD
                         AND CI.DIVISION_CD = SE.DIVISION_CD
                         AND CI.CUSTOMER_CD = SE.CUSTOMER_CD
                         AND CI.ITEM_CD = SE.PRODUCT_ITEM_CD
                         AND CI.CUSTOMER_SALES_TYPE = 'E'
                      <isEqual property="SEARCH_TYPE" compareValue="ITEM">
                        <isNotEmpty property="ISSUE_CITEM_LIST">
                          <iterate open="(" close=")" property="ISSUE_CITEM_LIST" conjunction=" OR " prepend="AND">
                             (CI.CUSTOMER_CD = #ISSUE_CITEM_LIST[].CUSTOMER_CD# AND CI.CUSTOMER_ITEM_CD = #ISSUE_CITEM_LIST[].CUSTOMER_ITEM_CD#)
                          </iterate>
                        </isNotEmpty>
                        <isNotEmpty property="gridData">
                         AND EXISTS(SELECT 1
                                      FROM EXCELDATA E
                                     WHERE E.COMPANY_CD = SE.COMPANY_CD
                                       AND E.TEXTVALUE2 = CI.CUSTOMER_CD
                                       AND E.TEXTVALUE4 = CI.CUSTOMER_ITEM_CD
                                       AND E.CATEGORY_CD = 'ISSUE_CO_LIST'
                                       AND E.ID = #USER_ID#)
                        </isNotEmpty>
                      </isEqual>
                 WHERE SE.COMPANY_CD = #COMPANY_CD#
                   AND SE.DELETE_YN = 'N'
                 <isEqual property="SEARCH_TYPE" compareValue="ITEM">
                    <isNotEmpty property="ISSUE_CITEM_LIST">
                      <iterate open="(" close=")" property="ISSUE_LIST" conjunction=" OR " prepend="AND">
                        (SE.DIVISION_CD = #ISSUE_LIST[].DIVISION_CD# AND SE.CUSTOMER_CD = #ISSUE_LIST[].CUSTOMER_CD# AND
                         SE.PRODUCT_ITEM_CD = #ISSUE_LIST[].PRODUCT_ITEM_CD# AND SE.INVOICE_NO = #ISSUE_LIST[].INVOICE_NO#)
                      </iterate>
                    </isNotEmpty>
                 </isEqual>
                 <isNotEqual property="SEARCH_TYPE" compareValue="ITEM">
                   AND SE.DIVISION_CD = #DIVISION_CD#
                   AND SE.INVOICE_NO = #INVOICE_NO#
                 </isNotEqual>
                   AND SE.ITEM_TYPE NOT IN('P', 'H', 'S')
                ) P
                INNER JOIN FTA_MST FM
                   ON FM.FTA_CD = P.FTA_CD
         WHERE 1 = 1
        <isNotEmpty property="schKeyWord">
           AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>
        <isNotEmpty property="PRODUCER_NAME">
           AND UPPER(P.PRODUCER_NAME) LIKE UPPER('%'||#PRODUCER_NAME#||'%')
        </isNotEmpty>
        <isEqual property="SEARCH_ITEM_YN" compareValue="Y">
          GROUP BY P.COMPANY_CD
                  ,P.DIVISION_CD
                  ,P.PRODUCT_ITEM_CD
                  ,P.CUSTOMER_ITEM_CD
                  ,P.HS_CODE
                  ,P.COMPANY_CO_YN
                  ,P.FTA_CD
                  ,P.PRODUCER_CD
          ORDER BY P.CUSTOMER_ITEM_CD, P.PRODUCT_ITEM_CD, P.PRODUCER_CD
        </isEqual>
        <isNotEqual property="SEARCH_ITEM_YN" compareValue="Y">
          GROUP BY P.COMPANY_CD
                  ,P.DIVISION_CD
                  ,P.PRODUCER_CD
          ORDER BY P.PRODUCER_CD
        </isNotEqual>
    </select>
    
    <select id="MMA204.selectCOProducerList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT P.COMPANY_CD
              ,P.DIVISION_CD
              ,P.PRODUCER_CD
            <isEqual property="SEARCH_ITEM_YN" compareValue="Y">
              ,P.PRODUCT_ITEM_CD
              ,P.CUSTOMER_ITEM_CD
              ,P.HS_CODE
              ,P.ORIGIN_YN
              ,P.FTA_CD
              ,MAX(FM.FTA_NAME) AS FTA_NAME
              ,FN_GET_COMMON_CD(P.COMPANY_CD, 'FTA_CO_YN', P.ORIGIN_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ORIGIN_YN_NAME
            </isEqual>
            <isNotEqual property="SEARCH_ITEM_YN" compareValue="Y">
              ,NULL AS PRODUCT_ITEM_CD
              ,NULL AS CUSTOMER_ITEM_CD
              ,NULL AS HS_CODE
              ,NULL AS ORIGIN_YN
              ,NULL AS FTA_CD
              ,NULL AS FTA_NAME
              ,NULL AS ORIGIN_YN_NAME
            </isNotEqual>
              ,MAX(P.PRODUCT_ITEM_NAME) AS PRODUCT_ITEM_NAME
              ,MAX(P.CUSTOMER_ITEM_NAME) AS CUSTOMER_ITEM_NAME
              ,MAX(P.PRODUCER_NAME) AS PRODUCER_NAME
              ,MAX(P.CHARGE_NAME) AS CHARGE_NAME
              ,MAX(P.ADDRESS) AS ADDRESS
              ,MAX(P.CHARGE_EMAIL) AS CHARGE_EMAIL
              ,MAX(P.BUSINESS_NO) AS BUSINESS_NO
              ,MAX(P.PHONE_NO) AS PHONE_NO
              ,MAX(P.FAX_NO) AS FAX_NO
          FROM (
                SELECT P.COMPANY_CD
                      ,P.DIVISION_CD
                      ,D.PRODUCT_ITEM_CD
                      ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
                      ,D.CUSTOMER_ITEM_CD
                      ,I.ITEM_NAME AS CUSTOMER_ITEM_NAME
                      ,P.PRODUCER_CD
                      ,P.PRODUCER_NAME
                      ,P.CHARGE_NAME
                      ,P.ADDRESS
                      ,P.CHARGE_EMAIL
                      ,P.BUSINESS_NO
                      ,P.PHONE_NO
                      ,P.FAX_NO
                      ,D.HS_CODE
                      ,D.ORIGIN_YN
                      ,D.FTA_CD
                  FROM ISSUE_CO_CERTIFICATE_DTL D
                       INNER JOIN FCR_MST FM
                          ON FM.COMPANY_CD = D.COMPANY_CD
                         AND FM.DIVISION_CD = D.DIVISION_CD
                         AND FM.CO_REQ_NO = D.CO_REQ_NO
                         AND FM.FTA_CD = #FTA_CD#
                         AND FM.ITEM_TYPE IN('P', 'H', 'S')
                       INNER JOIN ISSUE_CO_CERTIFICATE_PRD P
                          ON D.COMPANY_CD = P.COMPANY_CD
                         AND D.DIVISION_CD = P.DIVISION_CD
                         AND D.CO_DOC_NO = P.CO_DOC_NO
                         AND D.COMPANY_CD = P.PRODUCER_CD
                        LEFT OUTER JOIN ITEM I
                          ON I.COMPANY_CD = D.COMPANY_CD
                         AND I.ITEM_CD = D.PRODUCT_ITEM_CD
                 WHERE D.COMPANY_CD = #COMPANY_CD#
                   AND D.DIVISION_CD = #DIVISION_CD#
                   AND D.CO_DOC_NO = #CO_DOC_NO#
               UNION ALL
                SELECT P.COMPANY_CD
                      ,P.DIVISION_CD
                      ,D.PRODUCT_ITEM_CD
                      ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
                      ,D.CUSTOMER_ITEM_CD
                      ,I.ITEM_NAME AS CUSTOMER_ITEM_NAME
                      ,P.PRODUCER_CD
                      ,P.PRODUCER_NAME
                      ,P.CHARGE_NAME
                      ,P.ADDRESS
                      ,P.CHARGE_EMAIL
                      ,P.BUSINESS_NO
                      ,P.PHONE_NO
                      ,P.FAX_NO
                      ,D.HS_CODE
                      ,D.ORIGIN_YN
                      ,D.FTA_CD
                  FROM ISSUE_CO_CERTIFICATE_DTL D
                       INNER JOIN FCR_MST FM
                          ON FM.COMPANY_CD = D.COMPANY_CD
                         AND FM.DIVISION_CD = D.DIVISION_CD
                         AND FM.CO_REQ_NO = D.CO_REQ_NO
                         AND FM.FTA_CD = #FTA_CD#
                         AND FM.ITEM_TYPE NOT IN('P', 'H', 'S')
                       INNER JOIN FCR_DTL FD
                          ON FM.CO_REQ_NO = FD.CO_REQ_NO
                         AND FM.COMPANY_CD = FD.COMPANY_CD
                         AND FM.DIVISION_CD = FD.DIVISION_CD
                         AND FM.FTA_CD = FD.FTA_CD
                       INNER JOIN FCR_PO_ITEM PI
                          ON PI.CO_REQ_NO = FM.CO_REQ_NO
                         AND PI.COMPANY_CD = FM.COMPANY_CD
                         AND PI.DIVISION_CD = FM.DIVISION_CD
                         AND PI.ITEM_CD = FD.ITEM_CD
                         AND PI.PO_APPLY_YN = 'Y'
                       INNER JOIN ISSUE_CO_CERTIFICATE_PRD P
                          ON D.COMPANY_CD = P.COMPANY_CD
                         AND D.DIVISION_CD = P.DIVISION_CD
                         AND D.CO_DOC_NO = P.CO_DOC_NO
                         AND PI.VENDOR_CD = P.PRODUCER_CD
                        LEFT OUTER JOIN ITEM I
                          ON I.COMPANY_CD = D.COMPANY_CD
                         AND I.ITEM_CD = D.PRODUCT_ITEM_CD
                 WHERE D.COMPANY_CD = #COMPANY_CD#
                   AND D.DIVISION_CD = #DIVISION_CD#
                   AND D.CO_DOC_NO = #CO_DOC_NO#
                ) P
                INNER JOIN FTA_MST FM
                   ON FM.FTA_CD = P.FTA_CD
         WHERE 1 = 1
        <isNotEmpty property="schKeyWord">
           AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>
        <isNotEmpty property="PRODUCER_NAME">
           AND UPPER(P.PRODUCER_NAME) LIKE UPPER('%'||#PRODUCER_NAME#||'%')
        </isNotEmpty>
        <isEqual property="SEARCH_ITEM_YN" compareValue="Y">
          GROUP BY P.COMPANY_CD
                  ,P.DIVISION_CD
                  ,P.PRODUCT_ITEM_CD
                  ,P.CUSTOMER_ITEM_CD
                  ,P.HS_CODE
	              ,P.ORIGIN_YN
	              ,P.FTA_CD
                  ,P.PRODUCER_CD
          ORDER BY P.CUSTOMER_ITEM_CD, P.PRODUCT_ITEM_CD, P.PRODUCER_CD
        </isEqual>
        <isNotEqual property="SEARCH_ITEM_YN" compareValue="Y">
          GROUP BY P.COMPANY_CD
                  ,P.DIVISION_CD
                  ,P.PRODUCER_CD
          ORDER BY P.PRODUCER_CD
        </isNotEqual>
    </select>
    
    <select id="MMA004.selectSignatureInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT PHONE_NO AS SIGN_PHONE_NO,
               EMAIL AS SIGN_EMAIL,
               POSITION AS SIGN_POSITION,
               END_DATE AS SIGN_END_DATE,
               SIGNATURE_IMAGE
          FROM SIGNATURE
         WHERE SIGNATURE_SEQ = FN_PG_GET_CAST_NUM(#SIGNATURE_SEQ#)
    </select>

    <select id="MMA004.selectInvoiceInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT A.COMPANY_CD
              ,A.INVOICE_NO
              ,A.INVOICE_ISSUE_DATE
              ,A.INVOICE_SEQ
              ,A.EXPORT_DECLARE_NO
              ,A.EXPORT_DECLARE_TYPE
              ,CD1.CODE_NAME AS EXPORT_DECLARE_TYPE_NAME
              ,A.EXPORT_DECLARE_DATE
              ,A.EXPORT_DECLARE_SEQ
              ,A.VEHICLE_TYPE
              ,CD2.CODE_NAME AS VEHICLE_TYPE_NAME
              ,A.VEHICLE_NAME
              ,A.LOADING_PORT
              ,A.LOADING_PORT_NAME
              ,A.LOADING_NATION_CD
              ,CD3.WORD AS LOADING_NATION_NAME
              ,A.LOADING_CITY_NAME
              ,A.SHIPPING_DATE
              ,A.LOADING_MARK
              ,A.BL_NO
              ,A.DEPARTURE_DATE
              ,A.DISCHARGE_PORT
              ,A.DISCHARGE_PORT_NAME
              ,A.ITINER_NATION_CD
              ,A.ITINER_NATION_NAME
              ,A.FINAL_DEST_PORT
              ,A.FINAL_DEST_PORT_NAME
              ,A.FINAL_DESTINATION
              ,CD4.WORD AS FINAL_DESTINATION_NAME
              ,A.TOTAL_QTY
              ,A.QTY_UNIT
              ,A.TOTAL_WEIGHT
              ,A.WEIGHT_UNIT
              ,A.PACKING_QTY
              ,A.PACKING_UNIT
              ,A.FOB_DECLARE_AMOUNT
              ,A.AMOUNT
              ,A.CURRENCY
              ,A.EXCHANGE_AMT
              ,A.EXCHANGE_CURRENCY
              ,A.EXCHANGE_RATE
              ,A.EXCHANGE_DATE
              ,A.PACKING_QTY_COMENT
              ,A.EXPORT_OTHER_YN
              ,A.OED_INVOICE_NO
              ,A.OED_INVOICE_ISSUE_DATE
              ,A.OED_COMPANY_NAME
              ,A.OED_ISSUE_YN
              ,A.OED_NATION_CD
              ,CD5.WORD AS OED_NATION_NAME
              ,A.OED_ADDRESS
              ,A.CONSIGNEE
              ,A.NOTIFY_PARTY
          FROM SALES_EXPORT_INVOICE A
               LEFT OUTER JOIN CODE_DTL CD1
                 ON CD1.COMPANY_CD = A.COMPANY_CD
                AND CD1.CODE = A.EXPORT_DECLARE_TYPE
                AND CD1.CATEGORY_CD = 'ORC'
               LEFT OUTER JOIN CODE_DTL CD2
                 ON CD2.COMPANY_CD = A.COMPANY_CD
                AND CD2.CODE = A.VEHICLE_TYPE
                AND CD2.CATEGORY_CD = 'OTT'
               LEFT OUTER JOIN CODE_LANG_DIC CD3
                 ON CD3.COMPANY_CD = A.COMPANY_CD
                AND CD3.CATEGORY_CD = 'NATION' 
                AND CD3.CODE = A.LOADING_NATION_CD
                AND CD3.LANGUAGE_CAT = 'EN'
               LEFT OUTER JOIN CODE_LANG_DIC CD4
                 ON CD4.COMPANY_CD = A.COMPANY_CD
                AND CD4.CATEGORY_CD = 'NATION' 
                AND CD4.CODE = A.FINAL_DESTINATION
                AND CD4.LANGUAGE_CAT = 'EN'
               LEFT OUTER JOIN CODE_LANG_DIC CD5
                 ON CD5.COMPANY_CD = A.COMPANY_CD
                AND CD5.CATEGORY_CD = 'NATION' 
                AND CD5.CODE = A.OED_NATION_CD
                AND CD5.LANGUAGE_CAT = 'EN'
         WHERE A.COMPANY_CD = #COMPANY_CD#
           AND A.INVOICE_NO   = #INVOICE_NO#
    </select>

    <update id="MMA004.updateInvoiceInfo" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #COMPANY_CD#             AS COMPANY_CD
		      ,#INVOICE_NO#             AS INVOICE_NO
		      ,#INVOICE_ISSUE_DATE#     AS INVOICE_ISSUE_DATE
		      ,#INVOICE_SEQ#            AS INVOICE_SEQ
		      ,#EXPORT_DECLARE_NO#      AS EXPORT_DECLARE_NO
		      ,#EXPORT_DECLARE_TYPE#    AS EXPORT_DECLARE_TYPE
		      ,#EXPORT_DECLARE_DATE#    AS EXPORT_DECLARE_DATE
		      ,#EXPORT_DECLARE_SEQ#     AS EXPORT_DECLARE_SEQ
		      ,#VEHICLE_TYPE#           AS VEHICLE_TYPE
		      ,#VEHICLE_NAME#           AS VEHICLE_NAME
		      ,#LOADING_PORT#           AS LOADING_PORT
		      ,#LOADING_PORT_NAME#      AS LOADING_PORT_NAME
		      ,#LOADING_NATION_CD#      AS LOADING_NATION_CD
		      ,#LOADING_CITY_NAME#      AS LOADING_CITY_NAME
		      ,#SHIPPING_DATE#          AS SHIPPING_DATE
		      ,#LOADING_MARK#           AS LOADING_MARK
		      ,#BL_NO#                  AS BL_NO
		      ,#DEPARTURE_DATE#         AS DEPARTURE_DATE
		      ,#DISCHARGE_PORT#         AS DISCHARGE_PORT
		      ,#DISCHARGE_PORT_NAME#    AS DISCHARGE_PORT_NAME
		      ,#ITINER_NATION_CD#       AS ITINER_NATION_CD
		      ,#ITINER_NATION_NAME#     AS ITINER_NATION_NAME
		      ,#FINAL_DEST_PORT#        AS FINAL_DEST_PORT
		      ,#FINAL_DEST_PORT_NAME#   AS FINAL_DEST_PORT_NAME
		      ,#FINAL_DESTINATION#      AS FINAL_DESTINATION
		      ,#TOTAL_QTY#              AS TOTAL_QTY
		      ,#QTY_UNIT#               AS QTY_UNIT
		      ,#TOTAL_WEIGHT#           AS TOTAL_WEIGHT
		      ,#WEIGHT_UNIT#            AS WEIGHT_UNIT
		      ,#PACKING_QTY#            AS PACKING_QTY
		      ,#PACKING_UNIT#           AS PACKING_UNIT
		      ,#FOB_DECLARE_AMOUNT#     AS FOB_DECLARE_AMOUNT
		      ,#AMOUNT#                 AS AMOUNT
		      ,#CURRENCY#               AS CURRENCY
		      ,#EXCHANGE_AMT#           AS EXCHANGE_AMT
		      ,#EXCHANGE_CURRENCY#      AS EXCHANGE_CURRENCY
		      ,#EXCHANGE_RATE#          AS EXCHANGE_RATE
		      ,#EXCHANGE_DATE#          AS EXCHANGE_DATE
		      ,#PACKING_QTY_COMENT#     AS PACKING_QTY_COMENT
		      ,#EXPORT_OTHER_YN#        AS EXPORT_OTHER_YN
		      ,#OED_INVOICE_NO#         AS OED_INVOICE_NO
		      ,#OED_INVOICE_ISSUE_DATE# AS OED_INVOICE_ISSUE_DATE
		      ,#OED_COMPANY_NAME#       AS OED_COMPANY_NAME
		      ,#OED_ISSUE_YN#           AS OED_ISSUE_YN
		      ,#OED_NATION_CD#          AS OED_NATION_CD
		      ,#OED_ADDRESS#            AS OED_ADDRESS
		      ,#CONSIGNEE#              AS CONSIGNEE
		      ,#NOTIFY_PARTY#           AS NOTIFY_PARTY
		),
		UPDATE_OPTOIN AS
		( 
		UPDATE SALES_EXPORT_INVOICE SEI
		SET    INVOICE_ISSUE_DATE     = COALESCE(SI.INVOICE_ISSUE_DATE, SEI.INVOICE_ISSUE_DATE)
		      ,INVOICE_SEQ            = COALESCE(FN_PG_GET_CAST_NUM(SI.INVOICE_SEQ), SEI.INVOICE_SEQ)
		      ,EXPORT_DECLARE_NO      = COALESCE(SI.EXPORT_DECLARE_NO, SEI.EXPORT_DECLARE_NO)
		      ,EXPORT_DECLARE_TYPE    = COALESCE(SI.EXPORT_DECLARE_TYPE, SEI.EXPORT_DECLARE_TYPE)
		      ,EXPORT_DECLARE_DATE    = COALESCE(SI.EXPORT_DECLARE_DATE, SEI.EXPORT_DECLARE_DATE)
		      ,EXPORT_DECLARE_SEQ     = COALESCE(SI.EXPORT_DECLARE_SEQ, SEI.EXPORT_DECLARE_SEQ)
		      ,VEHICLE_TYPE           = COALESCE(SI.VEHICLE_TYPE, SEI.VEHICLE_TYPE)
		      ,VEHICLE_NAME           = COALESCE(SI.VEHICLE_NAME, SEI.VEHICLE_NAME)
		      ,LOADING_PORT           = COALESCE(SI.LOADING_PORT, SEI.LOADING_PORT)
		      ,LOADING_PORT_NAME      = COALESCE(SI.LOADING_PORT_NAME, SEI.LOADING_PORT_NAME)
		      ,LOADING_NATION_CD      = COALESCE(SI.LOADING_NATION_CD, SEI.LOADING_NATION_CD)
		      ,LOADING_CITY_NAME      = COALESCE(SI.LOADING_CITY_NAME, SEI.LOADING_CITY_NAME)
		      ,SHIPPING_DATE          = COALESCE(SI.SHIPPING_DATE, SEI.SHIPPING_DATE)
		      ,LOADING_MARK           = COALESCE(SI.LOADING_MARK, SEI.LOADING_MARK)
		      ,BL_NO                  = COALESCE(SI.BL_NO, SEI.BL_NO)
		      ,DEPARTURE_DATE         = COALESCE(SI.DEPARTURE_DATE, SEI.DEPARTURE_DATE)
		      ,DISCHARGE_PORT         = COALESCE(SI.DISCHARGE_PORT, SEI.DISCHARGE_PORT)
		      ,DISCHARGE_PORT_NAME    = COALESCE(SI.DISCHARGE_PORT_NAME, SEI.DISCHARGE_PORT_NAME)
		      ,ITINER_NATION_CD       = COALESCE(SI.ITINER_NATION_CD, SEI.ITINER_NATION_CD)
		      ,ITINER_NATION_NAME     = COALESCE(SI.ITINER_NATION_NAME, SEI.ITINER_NATION_NAME)
		      ,FINAL_DEST_PORT        = COALESCE(SI.FINAL_DEST_PORT, SEI.FINAL_DEST_PORT)
		      ,FINAL_DEST_PORT_NAME   = COALESCE(SI.FINAL_DEST_PORT_NAME, SEI.FINAL_DEST_PORT_NAME)
		      ,FINAL_DESTINATION      = COALESCE(SI.FINAL_DESTINATION, SEI.FINAL_DESTINATION)
		      ,TOTAL_QTY              = COALESCE(FN_PG_GET_CAST_NUM(SI.TOTAL_QTY), SEI.TOTAL_QTY)
		      ,QTY_UNIT               = COALESCE(SI.QTY_UNIT, SEI.QTY_UNIT)
		      ,TOTAL_WEIGHT           = COALESCE(FN_PG_GET_CAST_NUM(SI.TOTAL_WEIGHT), SEI.TOTAL_WEIGHT)
		      ,WEIGHT_UNIT            = COALESCE(SI.WEIGHT_UNIT, SEI.WEIGHT_UNIT)
		      ,PACKING_QTY            = COALESCE(FN_PG_GET_CAST_NUM(SI.PACKING_QTY), SEI.PACKING_QTY)
		      ,PACKING_UNIT           = COALESCE(SI.PACKING_UNIT, SEI.PACKING_UNIT)
		      ,FOB_DECLARE_AMOUNT     = COALESCE(FN_PG_GET_CAST_NUM(SI.FOB_DECLARE_AMOUNT), SEI.FOB_DECLARE_AMOUNT)
		      ,AMOUNT                 = COALESCE(FN_PG_GET_CAST_NUM(SI.AMOUNT), SEI.AMOUNT)
		      ,CURRENCY               = COALESCE(SI.CURRENCY, SEI.CURRENCY)
		      ,EXCHANGE_AMT           = COALESCE(FN_PG_GET_CAST_NUM(SI.EXCHANGE_AMT), SEI.EXCHANGE_AMT)
		      ,EXCHANGE_CURRENCY      = COALESCE(SI.EXCHANGE_CURRENCY, SEI.EXCHANGE_CURRENCY)
		      ,EXCHANGE_RATE          = COALESCE(FN_PG_GET_CAST_NUM(SI.EXCHANGE_RATE), SEI.EXCHANGE_RATE)
		      ,EXCHANGE_DATE          = COALESCE(SI.EXCHANGE_DATE, SEI.EXCHANGE_DATE)
		      ,PACKING_QTY_COMENT     = COALESCE(SI.PACKING_QTY_COMENT, SEI.PACKING_QTY_COMENT)
		      ,EXPORT_OTHER_YN        = COALESCE(SI.EXPORT_OTHER_YN, SEI.EXPORT_OTHER_YN)
		      ,OED_INVOICE_NO         = COALESCE(SI.OED_INVOICE_NO, SEI.OED_INVOICE_NO)
		      ,OED_INVOICE_ISSUE_DATE = COALESCE(SI.OED_INVOICE_ISSUE_DATE, SEI.OED_INVOICE_ISSUE_DATE)
		      ,OED_COMPANY_NAME       = COALESCE(SI.OED_COMPANY_NAME, SEI.OED_COMPANY_NAME)
		      ,OED_ISSUE_YN           = COALESCE(SI.OED_ISSUE_YN, SEI.OED_ISSUE_YN)
		      ,OED_NATION_CD          = COALESCE(SI.OED_NATION_CD, SEI.OED_NATION_CD)
		      ,OED_ADDRESS            = COALESCE(SI.OED_ADDRESS, SEI.OED_ADDRESS)
		      ,CONSIGNEE              = COALESCE(SI.CONSIGNEE, SEI.CONSIGNEE)
		      ,NOTIFY_PARTY           = COALESCE(SI.NOTIFY_PARTY, SEI.NOTIFY_PARTY)
		      ,UPDATE_DATE            = NOW()
		      ,UPDATE_BY              = #SESSION_USER_ID# FROM UPSERT SI
		WHERE  SEI.COMPANY_CD = SI.COMPANY_CD
		AND    SEI.INVOICE_NO = SI.INVOICE_NO
		) 
		INSERT INTO SALES_EXPORT_INVOICE
		    (COMPANY_CD
		    ,INVOICE_NO
		    ,INVOICE_ISSUE_DATE
		    ,INVOICE_SEQ
		    ,EXPORT_DECLARE_NO
		    ,EXPORT_DECLARE_TYPE
		    ,EXPORT_DECLARE_DATE
		    ,EXPORT_DECLARE_SEQ
		    ,VEHICLE_TYPE
		    ,VEHICLE_NAME
		    ,LOADING_PORT
		    ,LOADING_PORT_NAME
		    ,LOADING_NATION_CD
		    ,LOADING_CITY_NAME
		    ,SHIPPING_DATE
		    ,LOADING_MARK
		    ,BL_NO
		    ,DEPARTURE_DATE
		    ,DISCHARGE_PORT
		    ,DISCHARGE_PORT_NAME
		    ,ITINER_NATION_CD
		    ,ITINER_NATION_NAME
		    ,FINAL_DEST_PORT
		    ,FINAL_DEST_PORT_NAME
		    ,FINAL_DESTINATION
		    ,TOTAL_QTY
		    ,QTY_UNIT
		    ,TOTAL_WEIGHT
		    ,WEIGHT_UNIT
		    ,PACKING_QTY
		    ,PACKING_UNIT
		    ,FOB_DECLARE_AMOUNT
		    ,AMOUNT
		    ,CURRENCY
		    ,EXCHANGE_AMT
		    ,EXCHANGE_CURRENCY
		    ,EXCHANGE_RATE
		    ,EXCHANGE_DATE
		    ,PACKING_QTY_COMENT
		    ,EXPORT_OTHER_YN
		    ,OED_INVOICE_NO
		    ,OED_INVOICE_ISSUE_DATE
		    ,OED_COMPANY_NAME
		    ,OED_ISSUE_YN
		    ,OED_NATION_CD
		    ,OED_ADDRESS
		    ,CONSIGNEE
		    ,NOTIFY_PARTY
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		    SELECT SI.COMPANY_CD
		          ,SI.INVOICE_NO
		          ,SI.INVOICE_ISSUE_DATE
		          ,FN_PG_GET_CAST_NUM(SI.INVOICE_SEQ)
		          ,SI.EXPORT_DECLARE_NO
		          ,SI.EXPORT_DECLARE_TYPE
		          ,SI.EXPORT_DECLARE_DATE
		          ,SI.EXPORT_DECLARE_SEQ
		          ,SI.VEHICLE_TYPE
		          ,SI.VEHICLE_NAME
		          ,SI.LOADING_PORT
		          ,SI.LOADING_PORT_NAME
		          ,SI.LOADING_NATION_CD
		          ,SI.LOADING_CITY_NAME
		          ,SI.SHIPPING_DATE
		          ,SI.LOADING_MARK
		          ,SI.BL_NO
		          ,SI.DEPARTURE_DATE
		          ,SI.DISCHARGE_PORT
		          ,SI.DISCHARGE_PORT_NAME
		          ,SI.ITINER_NATION_CD
		          ,SI.ITINER_NATION_NAME
		          ,SI.FINAL_DEST_PORT
		          ,SI.FINAL_DEST_PORT_NAME
		          ,SI.FINAL_DESTINATION
		          ,FN_PG_GET_CAST_NUM(SI.TOTAL_QTY)
		          ,SI.QTY_UNIT
		          ,FN_PG_GET_CAST_NUM(SI.TOTAL_WEIGHT)
		          ,SI.WEIGHT_UNIT
		          ,FN_PG_GET_CAST_NUM(SI.PACKING_QTY)
		          ,SI.PACKING_UNIT
		          ,FN_PG_GET_CAST_NUM(SI.FOB_DECLARE_AMOUNT)
		          ,FN_PG_GET_CAST_NUM(SI.AMOUNT)
		          ,SI.CURRENCY
		          ,FN_PG_GET_CAST_NUM(SI.EXCHANGE_AMT)
		          ,SI.EXCHANGE_CURRENCY
		          ,FN_PG_GET_CAST_NUM(SI.EXCHANGE_RATE)
		          ,SI.EXCHANGE_DATE
		          ,SI.PACKING_QTY_COMENT
		          ,SI.EXPORT_OTHER_YN
		          ,SI.OED_INVOICE_NO
		          ,SI.OED_INVOICE_ISSUE_DATE
		          ,SI.OED_COMPANY_NAME
		          ,SI.OED_ISSUE_YN
		          ,SI.OED_NATION_CD
		          ,SI.OED_ADDRESS
		          ,SI.CONSIGNEE
		          ,SI.NOTIFY_PARTY
		          ,NOW()
		          ,'fta'
		          ,NOW()
		          ,'fta'
		    FROM   UPSERT SI
		    WHERE  NOT EXISTS (SELECT 1 FROM SALES_EXPORT_INVOICE SEI WHERE  SEI.COMPANY_CD = SI.COMPANY_CD AND SEI.INVOICE_NO = SI.INVOICE_NO)
    </update>

    <select id="MMA004.selectCoDocList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT DOC_ID
              ,DOC_NAME
              ,DOC_NAME_ENG
              ,FTA_CD
              ,EXPORT_FLAG
              ,APPLY_DATE
              ,END_DATE
              ,DOC_FILE_NAME
              ,USE_YN
              ,SORT_NO
              ,URL
          FROM DOC_MATRIX DM
         WHERE FTA_CD IN((CASE WHEN SUBSTRING(#FTA_CD#, 1, 3) = 'OPT' THEN #FTA_CD# ELSE  'ALL' END), #FTA_CD#, #FTA_GROUP_CD#)
           AND EXPORT_FLAG IN('A', #EXPORT_FLAG#)
           AND DM.FTA_NATION = #SESSION_FTA_NATION#
           AND #ISSUE_DATE# BETWEEN APPLY_DATE AND END_DATE
           AND USE_YN = 'Y'
           AND NOT EXISTS(SELECT 1
                            FROM FTA_MST FM
                           WHERE FM.FTA_CD = DM.FTA_CD
                             AND FM.CO_ISSUE_TYPE = (CASE WHEN FM.FTA_GROUP_CD = 'VN' THEN NULL ELSE 'A' END))
         ORDER BY SORT_NO
    </select>
    
    <update id="MMA004.updateCoIssueDate" parameterClass="java.util.Map">
        UPDATE ISSUE_CO_CERTIFICATE_MST
           SET ISSUE_DATE = #ISSUE_DATE#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND DIVISION_CD = #DIVISION_CD#
           AND CO_DOC_NO = #CO_DOC_NO#
    </update>
    <!-- MMA004 END -->

    <!-- 협력사 조회 :: CARLOS -->
    <select id="MMA006.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
        SELECT COMPANY_CD
              ,VENDOR_CD
              ,BUSINESS_NO
              ,PRESIDENT_NAME
              ,PRESIDENT_NAME_ENG
              ,PRESIDENT_EMAIL
              ,PRESIDENT_PHONE_NO
              ,VENDOR_NAME
              ,VENDOR_NAME_ENG
              ,NATION_CD
              ,ZIP_CD
              ,ADDRESS
              ,COALESCE(ADDRESS_ENG, ADDRESS) AS ADDRESS_ENG
              ,PHONE_NO
              ,FAX_NO
              ,CO_TARGET_YN
              ,CO_DOC_TYPE
              ,CO_CERTIFIED_EXPORTER_YN
              ,CO_CERTIFIED_EXPORTER_NO
              ,CHARGE_NAME
              ,CHARGE_POSITION
              ,CHARGE_EMAIL
              ,CHARGE_PHONE_NO
          FROM VENDOR
         WHERE COMPANY_CD = #COMPANY_CD#
         <isNotEmpty property="schKeyWord">
           <isNotEqual property="schKeyField" compareValue="BUSINESS_NO">
             AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
           </isNotEqual>
           <isEqual property="schKeyField" compareValue="BUSINESS_NO">
             AND REPLACE(BUSINESS_NO, '-', '') LIKE REPLACE(UPPER(#schKeyWord#), '-', '')
           </isEqual>
         </isNotEmpty>
         <isNotEmpty property="VENDOR_ITEM_CD">
             AND EXISTS(SELECT 1
		                  FROM VENDOR_ITEM VI
		                 WHERE VI.COMPANY_CD = VENDOR.COMPANY_CD
		                   AND VI.VENDOR_CD = VENDOR.VENDOR_CD
		                   AND VI.ITEM_CD = #VENDOR_ITEM_CD#)
         </isNotEmpty>
        <include refid="select-paging-end" />
        ORDER BY VENDOR_NAME
    </select>

  <select id="MMA007.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
       <include refid="select-paging-start" />
        SELECT COMPANY_CD
              ,CUSTOMER_CD
              ,CUSTOMER_NAME
              ,COALESCE(CUSTOMER_NAME_ENG, CUSTOMER_NAME) AS CUSTOMER_NAME_ENG
              ,PRESIDENT_NAME
              ,COALESCE(PRESIDENT_NAME, PRESIDENT_NAME_ENG) AS PRESIDENT_NAME_ENG
              ,BUSINESS_NO
              ,PHONE_NO
              ,FAX_NO
              ,EMAIL
              ,ADDRESS
              ,COALESCE(ADDRESS_ENG, ADDRESS) AS ADDRESS_ENG
              ,HUB_CERT_ID
          FROM CUSTOMER
         WHERE COMPANY_CD = #COMPANY_CD#
         <isNotEmpty property="schKeyWord">
           <isNotEqual property="schKeyField" compareValue="BUSINESS_NO">
             AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
           </isNotEqual>
           <isEqual property="schKeyField" compareValue="BUSINESS_NO">
             AND REPLACE(BUSINESS_NO, '-', '') LIKE REPLACE(UPPER(#schKeyWord#), '-', '')
           </isEqual>
         </isNotEmpty>
       <include refid="select-paging-end" />
       ORDER BY CUSTOMER_NAME
  </select>

  <select id="MMA008.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
       <include refid="select-paging-start" />
           SELECT CD.CODE AS CODE
                 ,COALESCE(CLD.WORD, COALESCE(CD.CODE_NAME, CD.CODE_NAME_ENG)) AS CODE_NAME
                 ,(CASE WHEN SUBSTRING(#FTA_CD#, 4, 2) = 'RC' THEN COALESCE(CD.TXT_VALUE2, CD.CODE_NAME_ENG)
                        ELSE CD.CODE_NAME_ENG
                   END) AS CODE_NAME_ENG
              FROM CODE_DTL CD
                   LEFT OUTER JOIN CODE_LANG_DIC CLD
                     ON CLD.COMPANY_CD = CD.COMPANY_CD
                    AND CLD.CATEGORY_CD = CD.CATEGORY_CD
                    AND CLD.CODE = CD.CODE
                    AND CLD.LANGUAGE_CAT = COALESCE(#SESSION_DEFAULT_LANGUAGE#, 'EN')
             WHERE CD.COMPANY_CD = #COMPANY_CD#
               AND CD.CATEGORY_CD = 'NATION'
             <isNotEmpty property="CODE">
               AND UPPER(CD.CODE) LIKE UPPER(#CODE#) || '%'
             </isNotEmpty>
             <isEqual property="ZZ_INC_YN" compareValue="N">
               AND CD.CODE != 'ZZ'
             </isEqual>
             <isNotEmpty property="FTA_CD">
               AND EXISTS(SELECT 1
                            FROM FTA_NATION FN
                           WHERE FN.FTA_CD = #FTA_CD#
                             AND FN.NATION_CD = CD.CODE)
             </isNotEmpty>
       <include refid="select-paging-end" />
       <isNotEmpty property="CODE_NAME">
         WHERE UPPER(CODE_NAME) LIKE UPPER(#CODE_NAME#) || '%'
       </isNotEmpty>
       ORDER BY CODE_NAME
  </select>

  <select id="MMA009.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
       <include refid="select-paging-start" />
            SELECT USER_ID,NAME,EMP_NO,POSITION
                 , NAME_ENG, EMAIL, CELL_PHONE_NO, OFFICE_PHONE_NO, FAX_NO
            FROM FTA_USER
            WHERE COMPANY_CD = #COMPANY_CD# /*로그인한 사람의 COMPANY_ID*/
               AND USER_ID NOT IN('fta', 'supplier')
             <isNotEmpty property="USER_ID">
               AND UPPER(USER_ID) LIKE UPPER(#USER_ID#) || '%' /*입력한 사용자 USER_ID의 일부 */
             </isNotEmpty>
             <isNotEmpty property="NAME">
               AND UPPER(NAME) LIKE UPPER(#NAME#) || '%' /*입력한 사용자 이름의 일부 */
             </isNotEmpty>
       <include refid="select-paging-end" />
       ORDER BY USER_ID
  </select>

    <!-- 서명권자 팝업 SQL :: CARLOS -->
    <select id="MMA010.selectSignatureList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
        SELECT T.SIGNATURE_SEQ
             , T.COMPANY_CD
             , T.DIVISION_CD
             , FN_GET_DIVISION(T.COMPANY_CD, T.DIVISION_CD,
                   (CASE WHEN #SESSION_DEFAULT_LANGUAGE# = 'EN' THEN 'DIVISION_NAME_ENG' ELSE 'DIVISION_NAME' END)
               ) AS DIVISION_NAME
             , T.START_DATE
             , T.END_DATE
             , T.START_REASON
             , T.END_REASON
             , T.EMP_NO
             , (SELECT (CASE WHEN #SESSION_DEFAULT_LANGUAGE# = 'EN' THEN NAME_ENG ELSE NAME END) FROM FTA_USER WHERE USER_ID = T.EMP_NO AND COMPANY_CD = T.COMPANY_CD) AS EMP_NM
             , T.SIGNATURE_NAME
             , T.SIGNATURE_NAME_ENG
             , T.POSITION
             , T.POSITION_ENG
             /*, T.SIGNATURE_IMAGE*/
             , T.PHONE_NO
             , T.EMAIL
             , TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
             , T.CREATE_BY
             , TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
             , T.UPDATE_BY
          FROM SIGNATURE T
         WHERE 1=1
           AND T.COMPANY_CD = #COMPANY_CD#
        <isNotEmpty property="SIGNATURE_SEQ">
           AND T.SIGNATURE_SEQ LIKE #SIGNATURE_SEQ# || '%'
        </isNotEmpty>
        <isNotEmpty property="SIGNATURE_NAME">
           AND UPPER(T.SIGNATURE_NAME) LIKE UPPER(#SIGNATURE_NAME#) || '%'
        </isNotEmpty>
        <include refid="select-paging-end" />
    </select>

    <!-- 사업부선택 팝업 SQL -->
    <select id="MMA002.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
          SELECT COMPANY_CD
                ,DIVISION_CD
                ,DIVISION_NAME
                ,DIVISION_NAME_ENG
                ,DIVISION_TYPE
                ,STATUS
                ,BUSINESS_NO
                ,OFFICER
                ,OFFICER_PHONE_NO
                ,OFFICER_EMAIL
                ,PHONE_NO
                ,FAX_NO
                ,ZIP_CD
                ,ADDRESS1
                ,ADDRESS2
                ,ADDRESS1_ENG
                ,ADDRESS2_ENG
                ,CO_CERTIFIED_EXPORTER_YN
                ,CERTIFICATION_NO
                ,PRESIDENT_NAME
                ,PRESIDENT_NAME_ENG         
            FROM DIVISION
           WHERE COMPANY_CD = #COMPANY_CD#
           <isNotEmpty property="DIVISION_CD">
             AND DIVISION_CD = #DIVISION_CD#
           </isNotEmpty>
           <isNotEmpty property="DIVISION_NAME">
             AND UPPER(DIVISION_NAME) LIKE '%'||UPPER(#DIVISION_NAME#)||'%'
           </isNotEmpty>
        <include refid="select-paging-end" />
    </select>
    
    <select id="MMA002.selectMainCompanyList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
          SELECT COMPANY_CD
                ,COMPANY_NAME
                ,COMPANY_NAME_ENG
                ,BUSINESS_NO
                ,PRESIDENT_NAME
                ,PRESIDENT_NAME_ENG
                ,OFFICER_NAME
                ,OFFICER_PHONE_NO
                ,OFFICER_EMAIL
                ,COM_PHONE_NO
                ,COM_FAX_NO
                ,ZIP_CD
                ,ADDRESS1
                ,ADDRESS2
                ,CO_CERTIFIED_EXPORTER_YN
                ,CO_CERTIFIED_EXPORTER_NO
                ,FTA_MODEL_CD
                ,PO_PRICE_ADJUST_METHOD_CD
                ,DATA_INTERFACE_TYPE_CD
                ,SALES_COST_APPLY_YN
                ,INLAND_COST_APPLY_YN
                ,INV_CHECK_APPLY_YN
                ,DOC_PREFIX
                ,INV_BOOK_APPLY_YN
                ,LOCAL_CURR_CD
                ,EXPORT_YN
                ,CO_RATE_TYPE_CD
                ,MX_YN
                ,COM_EMAIL
                ,OFFICER_POSITION
                ,ERP_YN
                ,HUB_CERT_ID
                ,PARENT_COMPANY_CD
            FROM COMPANY
           WHERE 1 = 1
           <isNotEmpty property="COMPANY_CD">
             AND COMPANY_CD = #COMPANY_CD#
           </isNotEmpty>
           <isNotEmpty property="COMPANY_NAME">
             AND UPPER(COMPANY_NAME) LIKE '%'||UPPER(#COMPANY_NAME#)||'%'
           </isNotEmpty>
        <include refid="select-paging-end" />
    </select>
    
    <!-- HSCODE 선택 팝업 SQL -->
    <select id="MMA011.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
             SELECT HS_CODE, HS_CODE_NAME, HS_CODE_NAME_ENG, HS_CODE_DESC, HS_CODE_DESC_ENG
               FROM HS_CODE
              WHERE 3=3
              <isNotEmpty property="HS_CODE">
                 AND HS_CODE LIKE #HS_CODE# || '%'
              </isNotEmpty>
            <isNotEmpty property="HS_CODE_NAME">
               AND HS_CODE_NAME LIKE #HS_CODE_NAME# || '%'
            </isNotEmpty>
        <include refid="select-paging-end" />
    </select>

    <!-- 품목(아이템) 선택 팝업 SQL -->
    <select id="MMA005.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
            SELECT I.*
                  ,HC.HS_CODE_NAME
              FROM (
		            SELECT DISTINCT M.HS_CODE
		            	  ,NULL AS NALADISA_CODE
		                  ,M.ITEM_CD
		                  ,M.ITEM_NAME
		                  ,COALESCE(M.ITEM_NAME_ENG, M.ITEM_NAME) AS ITEM_NAME_ENG
		                  ,M.ITEM_DESC
		                  ,M.STANDARD
		                  ,M.UNIT
		                  ,ID.ITEM_TYPE
		                  ,CD1.WORD AS ITEM_TYPE_NAME
		                  ,M.TEMP_COLUMN3
                          ,M.TEMP_COLUMN4
		              FROM ITEM M
		                   LEFT OUTER JOIN ITEM_DTL ID
		                     ON ID.COMPANY_CD = M.COMPANY_CD
		                    AND ID.ITEM_CD = M.ITEM_CD
		                   LEFT OUTER JOIN CODE_LANG_DIC CD1
			                 ON CD1.COMPANY_CD = M.COMPANY_CD 
			                AND CD1.CATEGORY_CD = 'ITEM_TYPE' 
			                AND CD1.CODE = ID.ITEM_TYPE
			                AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#		                    
		             WHERE M.COMPANY_CD = #COMPANY_CD#
		             <isNotEmpty property="DIVISION_CD">
		               AND ID.DIVISION_CD = #DIVISION_CD#
		             </isNotEmpty>
		             <isNotEmpty property="schKeyWord">
		               AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
		             </isNotEmpty>
		             <isEqual property="VENDOR_ITEM_STATE" compareValue="PO">
		               AND EXISTS(SELECT 1
		                            FROM VENDOR_ITEM VI
		                           WHERE VI.COMPANY_CD = M.COMPANY_CD
		                             AND VI.ITEM_CD = M.ITEM_CD
		                             AND VI.VENDOR_CD = #VENDOR_CD#
		                          )
		             </isEqual>
                   ) I
                   LEFT OUTER JOIN HS_CODE HC
                     ON HC.HS_CODE = SUBSTR(I.HS_CODE, 1, 6)
        <include refid="select-paging-end" />
        <isNotEmpty property="ITEM_TYPE">
          WHERE ITEM_TYPE = #ITEM_TYPE#
        </isNotEmpty>
          ORDER BY ITEM_CD
    </select>
    
    <select id="MMA005.selectBomItemList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT FBD.COMPANY_CD
		      ,FBD.ITEM_CD
		      ,I.ITEM_NAME
		      ,MAX(I.ITEM_NAME_ENG) AS ITEM_NAME_ENG
              ,MAX(I.TEMP_COLUMN3) AS TEMP_COLUMN3
              ,MAX(I.TEMP_COLUMN4) AS TEMP_COLUMN4
		      ,FN_GET_ITEM_HS_CODE(FBD.COMPANY_CD, FBD.ITEM_CD, 'HSM', MAX(FBD.YYYYMM), NULL) AS HS_CODE
		      ,FN_GET_ITEM_HS_CODE(FBD.COMPANY_CD, FBD.ITEM_CD, 'NAL', MAX(FBD.YYYYMM), NULL) AS NALADISA_CODE
		  FROM FTA_BOM_DTL FBD
		       LEFT OUTER JOIN ITEM I
		         ON I.COMPANY_CD = FBD.COMPANY_CD
		        AND I.ITEM_CD = FBD.ITEM_CD
		 WHERE FBD.COMPANY_CD = #COMPANY_CD#
		   AND FBD.YYYYMM BETWEEN #SCH_FROM_DATE# AND #SCH_TO_DATE#
		   AND FBD.PRODUCT_ITEM_CD = #PRODUCT_ITEM_CD#
		 <isNotEmpty property="schKeyWord">
           AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
         </isNotEmpty>
		 GROUP BY FBD.COMPANY_CD
		         ,FBD.ITEM_CD
		         ,I.ITEM_NAME
		 ORDER BY FBD.ITEM_CD
    </select>
    
    <!-- MMA012 : NALADISA CODE 조회 -->
    <select id="MMA012.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
        SELECT A.HS_CODE
             , A.NALADISA_CODE
             , A.NALADISA_CODE_NAME
          FROM NALADISA_CODE A
         WHERE A.NALADISA_CODE LIKE '%' || #CODE# || '%'
           AND A.NALADISA_CODE_NAME LIKE '%' || #CODE_NAME# || '%'
           AND A.NALADISA_VERSION = 'N2002' /*고정값:N2002*/
           AND A.DELETE_YN = 'N' /*고정값:N*/
        <include refid="select-paging-end" />
    </select>


    <!-- FTA 협정 조회 :: CARLOS -->
    <select id="MMA013.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
            SELECT FTA_CD, FTA_NAME
              FROM FTA_MST
             WHERE DELETE_YN = 'N'
               AND SUBSTRING(FTA_CD, 2, 2) = #SESSION_FTA_NATION#
            <isNotEmpty property="schKeyWord">
               AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
        <include refid="select-paging-end" />
    </select>


    <!-- MMA015 : 공통 CODE 조회-->
    <select id="MMA015.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
            SELECT CD.CODE AS CODE
                 , COALESCE(CLD.WORD, COALESCE(CD.CODE_NAME, CD.CODE_NAME_ENG)) AS CODE_NAME
                 , CD.CODE_NAME_ENG
              FROM CODE_DTL CD
                   LEFT OUTER JOIN CODE_LANG_DIC CLD
                     ON CLD.COMPANY_CD = CD.COMPANY_CD
                    AND CLD.CATEGORY_CD = CD.CATEGORY_CD
                    AND CLD.CODE = CD.CODE
                    AND CLD.LANGUAGE_CAT = COALESCE(#SESSION_DEFAULT_LANGUAGE#, 'EN')
             WHERE CD.COMPANY_CD = #COMPANY_CD#
               AND CD.CATEGORY_CD = #CATEGORY_CD#
            <isNotEmpty property="CODE">
               AND CD.CODE = #CODE#
            </isNotEmpty>
        <include refid="select-paging-end" />
        <isNotEmpty property="CODE_NAME">
           WHERE UPPER(CODE_NAME) LIKE '%'||UPPER(#CODE_NAME#)||'%'
        </isNotEmpty>
        ORDER BY CODE_NAME
    </select>
    
    <select id="MMA015.selectKcsStandardCodeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
		<include refid="select-paging-start" />
			SELECT CD.CODE AS CODE
                 , COALESCE(CD.CODE_NAME, CD.CODE_NAME_ENG) AS CODE_NAME
                 , CD.CODE_NAME_ENG                 
                 <isEqual property="CATEGORY_CD" compareValue="OPOS">
                 , CD.TXT_VALUE1 AS NATION_CD
                 , CLD.WORD AS NATION_NAME
                 </isEqual>                 
                 , CD.SORT_NO
              FROM KCS_CODE_MST CD
			<isEqual property="CATEGORY_CD" compareValue="OPOS">
              LEFT OUTER JOIN CODE_LANG_DIC CLD
                ON CLD.COMPANY_CD = #COMPANY_CD#
               AND CLD.CATEGORY_CD = 'NATION'
               AND CLD.CODE = CD.TXT_VALUE1
               AND CLD.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
			</isEqual>	                                     
             WHERE CD.CATEGORY_CD = #CATEGORY_CD#
             <isNotEmpty property="CODE">
               AND CD.CODE = #CODE#
             </isNotEmpty>
             <isNotEmpty property="NATION_CD">
               AND CD.TXT_VALUE1 = #NATION_CD#
             </isNotEmpty>
             <isNotEmpty property="PORT_AIR_CD">
               AND CD.TXT_VALUE2 = #PORT_AIR_CD#
             </isNotEmpty>             
             <isNotEmpty property="CODE_NAME">
	           AND (UPPER(CD.CODE_NAME) LIKE '%'||UPPER(#CODE_NAME#)||'%' OR UPPER(CD.CODE_NAME_ENG) LIKE '%'||UPPER(#CODE_NAME#)||'%')
	         </isNotEmpty>
        <include refid="select-paging-end" />
        <isNotEmpty property="NATION_NAME">
          WHERE UPPER(NATION_NAME) LIKE '%'||UPPER(#NATION_NAME#)||'%'
        </isNotEmpty>
        <isNotEmpty property="CSMH_NAME">
          WHERE UPPER(CUSTOMS_NAME) LIKE '%'||UPPER(#CUSTOMS_NAME#)||'%'
        </isNotEmpty>        
        ORDER BY SORT_NO
    </select>
    
    <!-- MMA016 : 엑셀업로드 시작 -->
    <select id="MMA016.selectExcelData" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT COMPANY_CD
                  ,IF_CD
                  ,USER_ID
                  ,ROW_NO
                  ,SUM(CASE WHEN ERROR_CODE != 'S' THEN 1 ELSE 0 END) AS ERROR_CNT
                  ,FN_GET_COMMON_CD(COMPANY_CD, 'MAPPING_STATUS', 
                       (CASE WHEN SUM(CASE WHEN ERROR_CODE != 'S' THEN 1 ELSE 0 END) > 0 THEN 'F' ELSE 'S' END),
                        'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ERROR_NAME
                  ,MAX(ERROR_MSG) AS ERROR_MSG
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE01' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE01
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE02' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE02
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE03' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE03
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE04' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE04
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE05' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE05
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE06' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE06
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE07' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE07
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE08' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE08
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE09' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE09
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE10' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE10
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE11' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE11
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE12' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE12
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE13' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE13
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE14' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE14
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE15' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE15
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE16' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE16
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE17' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE17
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE18' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE18
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE19' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE19
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE20' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE20
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE21' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE21
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE22' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE22
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE23' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE23
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE24' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE24
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE25' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE25
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE26' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE26
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE27' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE27
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE28' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE28
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE29' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE29
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE30' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE30
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE31' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE31
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE32' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE32
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE33' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE33
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE34' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE34
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE35' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE35
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE36' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE36
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE37' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE37
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE38' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE38
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE39' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE39
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE40' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE40
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE41' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE41
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE42' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE42
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE43' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE43
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE44' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE44
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE45' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE45
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE46' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE46
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE47' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE47
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE48' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE48
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE49' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE49
                  ,MAX(CASE WHEN COLUMN_ID = 'ATTRIBUTE50' THEN COLUMN_VALUE ELSE '' END) AS ATTRIBUTE50
                  ,TO_CHAR(MAX(CREATE_DATE), 'YYYYMMDD') AS CREATE_DATE
              FROM EXCEL_DATA_CHECK
             WHERE COMPANY_CD = #COMPANY_CD#
               AND IF_CD = #IF_CD#
               AND USER_ID = #USER_ID#
             <isEqual property="STEP_INDEX" compareValue="2">
               AND ERROR_CODE != 'U'
             </isEqual>
             GROUP BY COMPANY_CD
                     ,IF_CD
                     ,USER_ID
                     ,ROW_NO
        <include refid="select-paging-end" />
        <isEqual property="ERROR_CODE" compareValue="F">
          WHERE ERROR_CNT != 0
        </isEqual>
        <isEqual property="ERROR_CODE" compareValue="S">
          WHERE ERROR_CNT = 0
        </isEqual>
        ORDER BY ROW_NO
    </select>
    
    <insert id="MMA016.insertExcelData" parameterClass="java.util.Map">
        INSERT INTO EXCEL_DATA_CHECK
              (COMPANY_CD
              ,IF_CD
              ,USER_ID
              ,ROW_NO
              ,CELL_ID
              ,COLUMN_ID
              ,COLUMN_VALUE
              ,COLUMN_NAME
              ,ERROR_CODE
              ,ERROR_MSG
              ,CREATE_DATE)
        VALUES(#COMPANY_CD#
              ,#IF_CD#
              ,#USER_ID#
              ,#ROW_NO#
              ,#CELL_ID#
              ,#COLUMN_ID#
              ,#COLUMN_VALUE#
              ,#COLUMN_NAME#
              ,#ERROR_CODE#
              ,#ERROR_MSG#
              ,NOW())
    </insert>
    
    <delete id="MMA016.deleteExcelData" parameterClass="java.util.Map">
        DELETE FROM EXCEL_DATA_CHECK
         WHERE COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
           AND USER_ID = #USER_ID#
    </delete>
    <!-- com.yni.fta.common.postgresql.PostgresqlDao 클래스에서 직접 구현
    <parameterMap id="excelChangeSourceMap" class="java.util.Map">
        <parameter property="COMPANY_CD" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="IF_CD" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="USER_ID" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="O_RETURN" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
        <parameter property="O_RETURNMSG" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
        <parameter property="O_LINES" jdbcType="INTEGER" javaType="java.lang.String" mode="OUT"/>
    </parameterMap>

    <procedure id="MMA016.executeChangeSource" parameterMap="excelChangeSourceMap">
        { CALL PKG_CLOSING_EXCEL(?, ?, ?, ?, ?, ?) }
    </procedure>
    -->
    <select id="MMA016.selectExcelColmunList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT EDC.COMPANY_CD
              ,EDC.IF_CD
              ,EDC.USER_ID
              ,EDC.CELL_ID
              ,EDC.COLUMN_ID
              ,EDC.COLUMN_NAME
              ,EDC.ERROR_CNT
              ,EDC.ERROR_YN
              ,EDC.ERROR_MSG_1||EDC.ERROR_MSG_2||EDC.ERROR_MSG_3||EDC.ERROR_MSG_4||EDC.ERROR_MSG_5 AS ERROR_MSG
          FROM (
                SELECT EDC.COMPANY_CD
                      ,EDC.IF_CD
                      ,EDC.USER_ID
                      ,EDC.CELL_ID
                      ,EDC.COLUMN_ID
                      ,EDC.COLUMN_NAME
                      ,SUM(EDC.ERROR_CNT) AS ERROR_CNT
                      ,(CASE WHEN SUM(EDC.ERROR_CNT) > 0 THEN 'Y' ELSE 'N' END) AS ERROR_YN
                      ,MAX((CASE WHEN EDC.ERROR_MSG_NUM = 1 AND EDC.ERROR_MSG IS NOT NULL THEN EDC.ERROR_MSG ELSE '' END)) AS ERROR_MSG_1
                      ,MAX((CASE WHEN EDC.ERROR_MSG_NUM = 2 AND EDC.ERROR_MSG IS NOT NULL THEN ', '||EDC.ERROR_MSG ELSE '' END)) AS ERROR_MSG_2
                      ,MAX((CASE WHEN EDC.ERROR_MSG_NUM = 3 AND EDC.ERROR_MSG IS NOT NULL THEN ', '||EDC.ERROR_MSG ELSE '' END)) AS ERROR_MSG_3
                      ,MAX((CASE WHEN EDC.ERROR_MSG_NUM = 4 AND EDC.ERROR_MSG IS NOT NULL THEN ', '||EDC.ERROR_MSG ELSE '' END)) AS ERROR_MSG_4
                      ,MAX((CASE WHEN EDC.ERROR_MSG_NUM = 5 AND EDC.ERROR_MSG IS NOT NULL THEN ', '||EDC.ERROR_MSG ELSE '' END)) AS ERROR_MSG_5
                  FROM (
                        SELECT COMPANY_CD
                              ,IF_CD
                              ,USER_ID
                              ,CELL_ID
                              ,COLUMN_ID
                              ,COLUMN_NAME
                              ,SUM(CASE WHEN ERROR_CODE != 'S' THEN 1 ELSE 0 END) AS ERROR_CNT
                              ,ROW_NUMBER() OVER(PARTITION BY CELL_ID ORDER BY CELL_ID) AS ERROR_MSG_NUM
                              ,ERROR_MSG
                          FROM EXCEL_DATA_CHECK
                         WHERE COMPANY_CD = #COMPANY_CD#
                           AND IF_CD = #IF_CD#
                           AND USER_ID = #USER_ID#
                         GROUP BY COMPANY_CD
                                 ,IF_CD
                                 ,USER_ID
                                 ,CELL_ID
                                 ,COLUMN_ID
                                 ,COLUMN_NAME
                                 ,ERROR_MSG
                        ) EDC
                 GROUP BY EDC.COMPANY_CD
                         ,EDC.IF_CD
                         ,EDC.USER_ID
                         ,EDC.CELL_ID
                         ,EDC.COLUMN_ID
                         ,EDC.COLUMN_NAME
                ) EDC
         ORDER BY EDC.COLUMN_ID
    </select>
    
    <select id="MMA016.selectExcelValueList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT COMPANY_CD
                  ,IF_CD
                  ,USER_ID
                  ,ROW_NO
                  ,CELL_ID
                  ,CELL_ID||ROW_NO AS CELL_NAME
                  ,COLUMN_ID
                  ,COLUMN_NAME
                  ,COLUMN_VALUE
                  ,ERROR_CODE
                  ,FN_GET_COMMON_CD(COMPANY_CD, 'MAPPING_STATUS', ERROR_CODE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ERROR_NAME
                  ,ERROR_MSG
              FROM EXCEL_DATA_CHECK
             WHERE COMPANY_CD = #COMPANY_CD#
               AND IF_CD = #IF_CD#
               AND USER_ID = #USER_ID#
               AND CELL_ID = #CELL_ID#
             <isEqual property="ERROR_CODE" compareValue="E">
                AND ERROR_CODE != 'S'
             </isEqual>
        <include refid="select-paging-end" />
        ORDER BY ROW_NO
    </select>
    
    <select id="MMA016.selectExcelOriginDataList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COMPANY_CD
              ,IF_CD
              ,USER_ID
              ,ROW_NO
              ,CELL_ID
              ,COLUMN_ID
              ,COLUMN_NAME
              ,COLUMN_VALUE
              ,#YYYYMM# AS CLOSING_MONTH
          FROM EXCEL_DATA_CHECK
         WHERE COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
           AND USER_ID = #USER_ID#
        ORDER BY ROW_NO, COLUMN_ID
    </select>
    
    <update id="MMA016.updateTargetColumn" parameterClass="java.util.Map">
        UPDATE EXCEL_DATA_CHECK
           SET COLUMN_ID = #COLUMN_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
           AND USER_ID = #USER_ID#
           AND CELL_ID = #CELL_ID#
    </update>
    
    <delete id="MMA016.deleteSourceColumn" parameterClass="java.util.Map">
        DELETE FROM EXCEL_DATA_CHECK
         WHERE COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
           AND USER_ID = #USER_ID#
           AND CELL_ID = #CELL_ID#
    </delete>
    
    <select id="MMA016.selectExcelInterfaceList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT ISM.COMPANY_CD
              ,ISM.IF_CD
              ,IIM.IF_NAME
              ,ISM.REQUIRED_YN
              ,FN_GET_COMMON_CD(ISM.COMPANY_CD, 'YN', ISM.REQUIRED_YN, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS REQUIRED_YN_NAME <!-- 필수여부 명칭-->
              ,IIM.FILE_NAME
          FROM INTERFACE_SCHEDULE_MAPPING ISM
               INNER JOIN INTERFACE_ITEM_MST IIM
                  ON IIM.COMPANY_CD = ISM.COMPANY_CD
                 AND IIM.IF_CD = ISM.IF_CD
                 AND IIM.USING_YN = 'Y'
               <isNotEmpty property="DATA_TYPE">
                 AND IIM.FILE_TYPE = #DATA_TYPE#
               </isNotEmpty>
         WHERE ISM.COMPANY_CD = #COMPANY_CD#
           AND ISM.SCHEDULE_CD = (CASE WHEN IIM.FILE_TYPE = 'C' THEN 'MONTHLY_BATCH'
                                       WHEN IIM.FILE_TYPE = 'M' THEN 'MANUALLY_BATCH'
                                       ELSE #SCHEDULE_CD# END)
           AND ISM.IF_METHOD = 'E'
         <isNotEmpty property="IF_CD">
           <isEqual property="IF_CD" compareValue="RPT_MM_001">
           AND ISM.IF_CD IN('RPT_MM_001', 'RPT_MM_002')
           </isEqual>
           <isEqual property="IF_CD" compareValue="RPT_PP_001">
           AND ISM.IF_CD IN('RPT_PP_001', 'RPT_PP_003')
           </isEqual>
           <isEqual property="IF_CD" compareValue="RPT_PP_002">
           AND ISM.IF_CD IN('RPT_PP_002', 'RPT_PP_004')
           </isEqual>
           <isEqual property="IF_CD" compareValue="RPT_CO_001">
           AND ISM.IF_CD IN('RPT_CO_001', 'RPT_CO_004')
           </isEqual>
           <isEqual property="IF_CD" compareValue="RPT_SD_011">
           AND ISM.IF_CD IN('RPT_SD_011', 'RPT_SD_012')
           </isEqual>
           <isEqual property="IF_CD" compareValue="RPT_MM_004">
           AND ISM.IF_CD IN('RPT_MM_004', 'RPT_MM_008')
           </isEqual>
           <isEqual property="IF_CD" compareValue="RPT_SD_006">
           AND ISM.IF_CD IN('RPT_SD_006', 'RPT_SD_017')
           </isEqual>
           <isEqual property="IF_CD" compareValue="RPT_SD_008">
           AND ISM.IF_CD IN('RPT_SD_008', 'RPT_SD_015', 'RPT_SD_016')
           </isEqual>
           <isNotEqual property="IF_CD" compareValue="RPT_MM_001">
             <isNotEqual property="IF_CD" compareValue="RPT_PP_001">
               <isNotEqual property="IF_CD" compareValue="RPT_PP_002">
                 <isNotEqual property="IF_CD" compareValue="RPT_CO_001">
                   <isNotEqual property="IF_CD" compareValue="RPT_SD_011">
                     <isNotEqual property="IF_CD" compareValue="RPT_MM_004">
                       <isNotEqual property="IF_CD" compareValue="RPT_SD_006">
                         <isNotEqual property="IF_CD" compareValue="RPT_SD_008">
           AND ISM.IF_CD = #IF_CD#
                         </isNotEqual>
                       </isNotEqual>
                     </isNotEqual>
                   </isNotEqual>
                 </isNotEqual>
               </isNotEqual>
             </isNotEqual>
           </isNotEqual>
         </isNotEmpty>
         ORDER BY ISM.SCHEDULE_SEQ
    </select>
    
    <select id="MMA016.selectExcelDataStatus" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT EDC.*
              ,TOT_ROW_CNT-(SUCC_ROW_CNT+FAIL_ROW_CNT) AS UND_ROW_CNT
          FROM (
                SELECT COUNT(EDC.COMPANY_CD) AS TOT_ROW_CNT
                      ,SUM(CASE WHEN TOT_CNT = SUCC_CNT THEN 1 ELSE 0 END) AS SUCC_ROW_CNT
                      ,SUM(CASE WHEN FAIL_CNT != 0 THEN 1 ELSE 0 END) AS FAIL_ROW_CNT
                  FROM (
                        SELECT EDC.COMPANY_CD
                              ,EDC.IF_CD
                              ,EDC.USER_ID
                              ,EDC.ROW_NO
                              ,COUNT(EDC.COMPANY_CD) AS TOT_CNT
                              ,SUM(CASE WHEN ERROR_CODE = 'S' THEN 1 ELSE 0 END) AS SUCC_CNT
                              ,SUM(CASE WHEN ERROR_CODE = 'F' THEN 1 ELSE 0 END) AS FAIL_CNT
                          FROM EXCEL_DATA_CHECK EDC
                         WHERE EDC.COMPANY_CD = #COMPANY_CD#
                           AND EDC.IF_CD = #IF_CD#
                           AND EDC.USER_ID = #USER_ID#
                           AND EDC.ERROR_CODE != 'U'
                         GROUP BY EDC.COMPANY_CD
                                 ,EDC.IF_CD
                                 ,EDC.USER_ID
                                 ,EDC.ROW_NO
                        ) EDC
                 GROUP BY EDC.COMPANY_CD
                         ,EDC.IF_CD
                         ,EDC.USER_ID
                ) EDC
    </select>
    
    <select id="MMA016.selectExcelHeaderList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT DISTINCT EDC.COMPANY_CD
              ,EDC.IF_CD
              ,EDC.USER_ID
              ,EDC.CELL_ID
              ,EDC.COLUMN_ID
          FROM EXCEL_DATA_CHECK EDC
         WHERE EDC.COMPANY_CD = #COMPANY_CD#
           AND EDC.IF_CD = #IF_CD#
           AND EDC.USER_ID = #USER_ID#
           AND EDC.ERROR_CODE != 'U'
         ORDER BY COLUMN_ID
    </select>
    
    <select id="MMA016.selectItemTypeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT I.COMPANY_CD, I.ITEM_CD, MAX(I.ITEM_TYPE) AS ITEM_TYPE
          FROM ITEM_DTL I
               INNER JOIN EXCEL_DATA_CHECK E
                  ON E.COMPANY_CD = I.COMPANY_CD
                 AND E.IF_CD = 'RPT_SD_008'
                 AND E.COLUMN_ID = 'ATTRIBUTE07'
                 AND E.COLUMN_VALUE = I.ITEM_CD
                 AND E.USER_ID = #USER_ID#
         WHERE I.COMPANY_CD = #COMPANY_CD#
           AND I.ITEM_TYPE IS NOT NULL
           AND I.ITEM_TYPE != 'E'
         GROUP BY I.COMPANY_CD, I.ITEM_CD
    </select>
    <!-- MMA016 : 엑셀업로드 종료 -->
    
    <!-- MMA021 : 정정요청 이력 조회 -->
    <select id="MMA021.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT RCCH.CO_DOC_NO
                  ,RCCH.COMPANY_CD
                  ,RCCH.DIVISION_CD
                  ,FN_GET_DIVISION(RCCH.COMPANY_CD, RCCH.DIVISION_CD, 'DIVISION_NAME') AS DIVISION_NAME
                  ,RCCH.VENDOR_CD
                  ,FN_GET_VENDOR(RCCH.COMPANY_CD, RCCH.VENDOR_CD, 'VENDOR_NAME') AS VENDOR_NAME
                  ,RCCM.ISSUE_DATE
                  ,RCCH.INVOICE_NO
                  ,RCCH.SEQ
                  ,TO_CHAR(RCCH.MODIFY_REQUEST_DATE, 'YYYYMMDD') AS MODIFY_REQUEST_DATE
                  ,TO_CHAR(RCCH.MODIFY_REQUEST_DATE, 'HH24:MI:SS') AS MODIFY_REQUEST_TIME
                  ,RCCH.MODIFY_REQUEST_STATUS
                  ,RCCH.MODIFY_REQUEST_REASON
                  ,FN_GET_COMMON_CD(RCCH.COMPANY_CD, 'MODIFY_REQUEST_STATUS', RCCH.MODIFY_REQUEST_STATUS, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS MRS_NM
                  ,RCCH.UPDATE_BY
                  ,(SELECT MAX(RCCHD.MODIFY_REQ)
                      FROM RCV_CO_CHANGE_HISTORY_DTL RCCHD
	                 WHERE RCCHD.CO_DOC_NO = RCCH.CO_DOC_NO
	                   AND RCCHD.COMPANY_CD = RCCH.COMPANY_CD
	                   AND RCCHD.DIVISION_CD = RCCH.DIVISION_CD
	                   AND RCCHD.VENDOR_CD = RCCH.VENDOR_CD
                       AND RCCH.MODIFY_REQUEST_STATUS IN('C', 'D')
                       AND TO_CHAR(RCCH.CREATE_DATE, 'YYYYMMDDHH24MI') = TO_CHAR(RCCHD.CREATE_DATE, 'YYYYMMDDHH24MI')
                    ) AS MODIFY_REQ
                  ,RCCM.MODIFY_REQ AS CURRENT_MODIFY_REQ
                  ,(SELECT COALESCE(MAX(H.SEQ), 0)
                      FROM RCV_CO_CHANGE_HISTORY H
                     WHERE H.CO_DOC_NO = RCCH.CO_DOC_NO
                       AND H.COMPANY_CD = RCCH.COMPANY_CD
                       AND H.DIVISION_CD = RCCH.DIVISION_CD
                       AND H.VENDOR_CD = RCCH.VENDOR_CD
                       AND H.MODIFY_REQUEST_STATUS = 'R'
                       AND TO_CHAR(H.MODIFY_REQUEST_DATE, 'YYYYMMDDHH24MI') = TO_CHAR(RCCM.MODIFY_REQUEST_DATE, 'YYYYMMDDHH24MI')
                    ) AS MAX_MODIFY_REQ
              FROM RCV_CO_CHANGE_HISTORY RCCH
                   LEFT OUTER JOIN RCV_CO_CERTIFICATE_MST RCCM
                      ON RCCM.CO_DOC_NO = RCCH.CO_DOC_NO
                     AND RCCM.COMPANY_CD = RCCH.COMPANY_CD
                     AND RCCM.DIVISION_CD = RCCH.DIVISION_CD
                     AND RCCM.VENDOR_CD = RCCH.VENDOR_CD
                    LEFT OUTER JOIN VENDOR V
                      ON V.COMPANY_CD = RCCH.COMPANY_CD
                     AND V.VENDOR_CD = RCCH.VENDOR_CD
             WHERE RCCH.COMPANY_CD = #COMPANY_CD#
             <isNotEmpty property="DIVISION_CD">
               AND RCCH.DIVISION_CD = #DIVISION_CD#
             </isNotEmpty>
             <isNotEmpty property="VENDOR_CD">
               AND RCCH.VENDOR_CD = #VENDOR_CD#
             </isNotEmpty>
             <isNotEmpty property="VENDOR_NAME">
               AND UPPER(V.VENDOR_NAME) LIKE UPPER('%'||#VENDOR_NAME#||'%')
             </isNotEmpty>
             <isNotEmpty property="CO_DOC_NO">
               AND RCCH.CO_DOC_NO = #CO_DOC_NO#
             </isNotEmpty>
             <isNotEmpty property="MODIFY_REQUEST_STATUS">
               AND RCCH.MODIFY_REQUEST_STATUS = #MODIFY_REQUEST_STATUS#
             </isNotEmpty>
             <isNotEmpty property="MODIFY_REQUEST_REASON">
               AND REPLACE(UPPER(RCCH.MODIFY_REQUEST_REASON), ' ', '') LIKE '%'||REPLACE(UPPER(#MODIFY_REQUEST_REASON#), ' ', '')||'%'
             </isNotEmpty>
             <isNotEmpty property="REQUEST_FROM_DATE">
               AND TO_CHAR(RCCH.MODIFY_REQUEST_DATE, 'YYYYMMDD') BETWEEN #REQUEST_FROM_DATE# AND #REQUEST_TO_DATE#
             </isNotEmpty>
             <isNotEmpty property="schKeyWord">
               <isEqual property="schKeyField" compareValue="ITEM_CD">
               AND EXISTS(SELECT 1 
                            FROM RCV_CO_CHANGE_HISTORY_DTL RCCHD
                           WHERE RCCHD.COMPANY_CD = RCCH.COMPANY_CD
                             AND RCCHD.DIVISION_CD = RCCH.DIVISION_CD
                             AND RCCHD.CO_DOC_NO = RCCH.CO_DOC_NO
                             AND RCCHD.VENDOR_CD = RCCH.VENDOR_CD
                             AND UPPER(RCCHD.ITEM_CD) LIKE UPPER(#schKeyWord#)
                          )
               </isEqual>
               <isEqual property="schKeyField" compareValue="ITEM_NAME">
               AND EXISTS(SELECT 1 
                            FROM RCV_CO_CHANGE_HISTORY_DTL RCCHD
                                 INNER JOIN ITEM I
                                    ON I.COMPANY_CD = RCCHD.COMPANY_CD
                                   AND I.ITEM_CD = RCCHD.ITEM_CD
                           WHERE RCCHD.COMPANY_CD = RCCH.COMPANY_CD
                             AND RCCHD.DIVISION_CD = RCCH.DIVISION_CD
                             AND RCCHD.CO_DOC_NO = RCCH.CO_DOC_NO
                             AND RCCHD.VENDOR_CD = RCCH.VENDOR_CD
                             AND UPPER(I.ITEM_NAME) LIKE UPPER(#schKeyWord#)
                          )
               </isEqual>
               <isEqual property="schKeyField" compareValue="INVOICE_NO">                   
               AND UPPER(RCCH.INVOICE_NO) LIKE UPPER(#schKeyWord#)
               </isEqual>
             </isNotEmpty>
        <include refid="select-paging-end" />
        <isEmpty property="REQUEST_FROM_DATE">
         ORDER BY VENDOR_CD, CO_DOC_NO, SEQ DESC
        </isEmpty>
        <isNotEmpty property="REQUEST_FROM_DATE">
         ORDER BY MODIFY_REQUEST_DATE DESC, MODIFY_REQUEST_TIME DESC, SEQ DESC
        </isNotEmpty>
    </select>
    
    <select id="MMA021.selectRecieveCoDetail" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
        SELECT RCHD.CO_DOC_NO
              ,RCHD.COMPANY_CD
              ,RCHD.DIVISION_CD
              ,D.DIVISION_NAME
              ,RCHD.VENDOR_CD
              ,FN_GET_VENDOR(RCHD.COMPANY_CD, RCHD.VENDOR_CD, 'VENDOR_NAME') AS VENDOR_NAME
              ,RCHD.MODIFY_REQ
              ,RCHD.CO_DOC_TYPE
              ,CLD1.WORD AS CO_DOC_TYPE_NAME
              ,RCHD.ISSUE_DATE
              ,RCHD.FTA_CD
              ,FM.FTA_NAME
              ,RCHD.ITEM_CD
              ,IT.ITEM_NAME
              ,RCHD.FTA_GROUP_CD
              ,RCHD.TXN_NO
              ,RCHD.TXN_SEQ
              ,RCHD.FTA_CO_YN
              ,CLD2.WORD AS FTA_CO_YN_NAME
              ,RCHD.FTA_CO_N_REASON
              ,RCHD.HS_CODE
              ,RCHD.RULE_CONTENTS
              ,RCHD.RVC_RATE
              ,RCHD.ORIGIN_NATION_CD
              ,RCHD.RULE_ID
              ,RCHD.RULE_SEQ
              ,RCHD.TRACE_LIST_YN
              ,RCHD.NALADISA_CODE
              ,RCHD.PRICE
              ,RCHD.CURRENCY
              ,RCHD.TRACE_VALUE
              ,RCHD.APPLY_DATE
              ,RCHD.END_DATE
              ,RCHD.SALES_CURRENCY
              ,RCHD.SALES_UNIT_PRICE
              ,RCHD.NONORIGIN_REASON_CD
              ,RCHD.NONORIGIN_REASON_DESC
              ,TO_CHAR(RCHD.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,RCHD.CREATE_BY
              ,IT.TEMP_COLUMN3
              ,IT.TEMP_COLUMN4
          FROM RCV_CO_CHANGE_HISTORY_DTL RCHD
               INNER JOIN DIVISION D
                  ON D.COMPANY_CD = RCHD.COMPANY_CD
                 AND D.DIVISION_CD = RCHD.DIVISION_CD
                LEFT OUTER JOIN ITEM IT
                  ON IT.COMPANY_CD = RCHD.COMPANY_CD
                 AND IT.ITEM_CD = RCHD.ITEM_CD
                LEFT OUTER JOIN FTA_MST FM
                  ON FM.FTA_CD = RCHD.FTA_CD
                LEFT OUTER JOIN CODE_LANG_DIC CLD1
                  ON CLD1.COMPANY_CD = RCHD.COMPANY_CD
                 AND CLD1.CATEGORY_CD = 'CO_DOC_TYPE'
                 AND CLD1.CODE = RCHD.CO_DOC_TYPE
                 AND CLD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                LEFT OUTER JOIN CODE_LANG_DIC CLD2
                  ON CLD2.COMPANY_CD = RCHD.COMPANY_CD
                 AND CLD2.CATEGORY_CD = 'FTA_CO_YN'
                 AND CLD2.CODE = RCHD.FTA_CO_YN
                 AND CLD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
         WHERE RCHD.CO_DOC_NO   = #CO_DOC_NO#
           AND RCHD.COMPANY_CD  = #COMPANY_CD#
         <isNotEmpty property="DIVISION_CD">
           AND RCHD.DIVISION_CD = #DIVISION_CD#
         </isNotEmpty>
           AND RCHD.VENDOR_CD   = #VENDOR_CD#
           AND RCHD.MODIFY_REQ  = FN_PG_GET_CAST_NUM(#MODIFY_REQ#)
        <include refid="select-paging-end" />
         ORDER BY DIVISION_CD, ITEM_CD, FTA_CD
    </select>
    
    <!-- MMA021 : 요청사유 수정 -->
    <update id="MMA021.updateReqReason" parameterClass="java.util.Map">
        UPDATE RCV_CO_CERTIFICATE_MST
           SET MODIFY_REQUEST_STATUS = #MODIFY_REQUEST_STATUS#
              ,MODIFY_REQUEST_REASON = #MODIFY_REQUEST_REASON#
              ,MODIFY_REQUEST_DATE = NOW()
         WHERE CO_DOC_NO = #CO_DOC_NO#
           AND COMPANY_CD = #COMPANY_CD#
           AND VENDOR_CD = #VENDOR_CD#
    </update>

    <!-- MMA021 : 요청 이력 신규 생성 -->
    <insert id="MMA021.insertReqHistory" parameterClass="java.util.Map">
        INSERT
          INTO RCV_CO_CHANGE_HISTORY
             ( COMPANY_CD
             , DIVISION_CD
             , VENDOR_CD
             , CO_DOC_NO
             , SEQ
             , MODIFY_REQUEST_DATE
             , MODIFY_REQUEST_STATUS
             , MODIFY_REQUEST_REASON
             , INVOICE_NO
             , CREATE_DATE
             , CREATE_BY
             , UPDATE_DATE
             , UPDATE_BY
             )
        SELECT RCCM.COMPANY_CD
             , RCCM.DIVISION_CD
             , RCCM.VENDOR_CD
             , RCCM.CO_DOC_NO
             , (SELECT COALESCE(MAX(SEQ), 0) + 1
                  FROM RCV_CO_CHANGE_HISTORY RCCH
                 WHERE RCCH.COMPANY_CD = RCCM.COMPANY_CD
                   AND RCCH.DIVISION_CD = RCCM.DIVISION_CD
                   AND RCCH.VENDOR_CD = RCCM.VENDOR_CD
                   AND RCCH.CO_DOC_NO = RCCM.CO_DOC_NO)
             , NOW()
             , #MODIFY_REQUEST_STATUS#
             , #MODIFY_REQUEST_REASON#
             , INVOICE_NO
             , NOW()
             , #USER_ID#
             , NOW()
             , #USER_ID#
          FROM RCV_CO_CERTIFICATE_MST RCCM
         WHERE RCCM.COMPANY_CD = #COMPANY_CD#
           AND RCCM.VENDOR_CD = #VENDOR_CD#
           AND RCCM.CO_DOC_NO = #CO_DOC_NO#
    </insert>
    
    <select id="MMA021.selectEvdcDownloadFileList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT RCCF.CO_DOC_NO
              ,RCCF.COMPANY_CD
              ,RCCF.DIVISION_CD
              ,RCCF.VENDOR_CD
              ,RCCF.EV_DOC_TYPE
              ,CLD1.WORD AS EV_DOC_TYPE_NAME
              ,RCCF.FILE_BIN
              ,RCCF.ORIGIN_FILE_NAME
              ,RCCF.FILE_SEQ
              ,RCCF.FILE_TYPE
              ,RCCF.FILE_PATH || RCCF.FILE_NAME AS FILE_PATH
              ,RCCF.ITEM_CD
              ,I.ITEM_NAME
              ,RCCF.FILE_DESC
          FROM RCV_CO_CERTIFICATE_FILE RCCF
               LEFT OUTER JOIN ITEM I
                 ON I.COMPANY_CD = RCCF.COMPANY_CD
                AND I.ITEM_CD = RCCF.ITEM_CD
               LEFT OUTER JOIN CODE_LANG_DIC CLD1
                 ON CLD1.COMPANY_CD = RCCF.COMPANY_CD
                AND CLD1.CATEGORY_CD = 'EV_DOC_TYPE'
                AND CLD1.CODE = RCCF.EV_DOC_TYPE
                AND CLD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
         WHERE RCCF.CO_DOC_NO = #CO_DOC_NO#
           AND RCCF.COMPANY_CD = #COMPANY_CD#
           AND RCCF.VENDOR_CD = #VENDOR_CD#
         <isEqual property="EV_FILE_ONLY_YN" compareValue="Y">
           AND RCCF.EV_DOC_TYPE != '01'
         </isEqual>
         <isNotEmpty property="EV_DOC_TYPE">
           AND RCCF.EV_DOC_TYPE = #EV_DOC_TYPE#
         </isNotEmpty>
         <isNotEmpty property="FILE_SEQ">
           AND RCCF.FILE_SEQ = #FILE_SEQ#::NUMERIC
         </isNotEmpty>
         <isNotEmpty property="DIVISION_CD">
           AND RCCF.DIVISION_CD = #DIVISION_CD#
         </isNotEmpty>
         <isEmpty property="DIVISION_CD">
           AND RCCF.DIVISION_CD = (SELECT MAX(RF.DIVISION_CD) 
                                     FROM RCV_CO_CERTIFICATE_FILE RF
                                    WHERE RF.CO_DOC_NO = RCCF.CO_DOC_NO
                                      AND RF.COMPANY_CD = RCCF.COMPANY_CD
                                      AND RF.VENDOR_CD = RCCF.VENDOR_CD)
         </isEmpty>
    </select>
    
    <!-- MMA024 : 제품군 조회-->
    <select id="MMA024.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
        SELECT PRODUCT_LINE_CD
             , PRODUCT_LINE_NAME AS CONTENT1
          FROM PRODUCT_LINE
         WHERE COMPANY_CD = #COMPANY_CD#
        <isNotEmpty property="PRODUCT_LINE_CD">
           AND UPPER(PRODUCT_LINE_CD)  LIKE UPPER(#PRODUCT_LINE_CD#)||'%'
        </isNotEmpty>
        <isNotEmpty property="CONTENT1">
           AND UPPER(CONTENT1) LIKE UPPER(#CONTENT#)||'%'
        </isNotEmpty>
        <include refid="select-paging-end" />
    </select>


    <!-- 제품군 조회 : 팝업 -->
    <select id="MMA025.selectMainList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
            SELECT FTA_CD, FTA_NAME 
              FROM FTA_MST
             WHERE SUBSTRING(FTA_CD, 2, 2) = #SESSION_FTA_NATION#
            <isNotEmpty property="FTA_STATUS">
               AND FTA_STATUS = #FTA_STATUS#
            </isNotEmpty>
        <include refid="select-paging-end" />
    </select>
    
    <!-- 인터페이스 이력 데이터 상세 -->
    <select id="MMA027.selectHeaderInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <![CDATA[
        SELECT IID.*
          FROM (
                SELECT REPLACE(MESSAGE_CODE, 'TXT_', '') AS field
                      ,MESSAGE AS title
                      ,(CASE WHEN MESSAGE_CODE = 'TXT_ERROR_YN' THEN 90 ELSE 250 END) AS width
                      ,'left' AS align
                      ,'center' AS halign
                      ,'true' AS sortable
                      ,'false' AS hidden
                      ,'null' AS editor
                      ,'null' AS checkbox
                      ,'null' AS formatter
                      ,0 AS rowspan
                      ,0 AS colspan
                      ,'false' AS frozen
                      ,'null' AS styler
                      ,0 AS COL_SEQ
                  FROM MESSAGE_TABLE
                 WHERE MESSAGE_CODE IN('TXT_ERROR_YN', 'TXT_ERROR_MESSAGE')
                   AND NATION_CODE = #SESSION_DEFAULT_LANGUAGE#
                UNION ALL
                SELECT IID.FROM_COL_ID AS field
                      ,COALESCE(MT.MESSAGE, LOWER(REPLACE(IID.TO_COL_ID, '_', ' '))) AS title
                      ,(CASE WHEN IID.DATA_LENGTH > 20 THEN 100
                             WHEN IID.DATA_LENGTH < 10 THEN 100
                             ELSE IID.DATA_LENGTH*10
                        END) AS width
                      ,(CASE WHEN LOWER(IID.DATA_TYPE) = 'nvarchar' THEN 'left'
                             WHEN LOWER(IID.DATA_TYPE) IN('int', 'numeric') THEN 'right'
                             ELSE 'center'
                        END) AS align
                      ,'center' AS halign
                      ,'true' AS sortable
                      ,'false' AS hidden
                      ,'null' AS editor
                      ,'null' AS checkbox
                      ,'null' AS formatter
                      ,0 AS rowspan
                      ,0 AS colspan
                      ,'false' AS frozen
                      ,'null' AS styler
                      ,IID.COL_SEQ
                  FROM INTERFACE_ITEM_DTL IID
                       LEFT OUTER JOIN MESSAGE_TABLE MT
                         ON MT.MESSAGE_CODE = IID.REMARK
                        AND MT.NATION_CODE = #SESSION_DEFAULT_LANGUAGE#
                 WHERE IID.COMPANY_CD = #COMPANY_CD#
                   AND IID.IF_CD = #IF_CD#
               ) IID
         ORDER BY IID.COL_SEQ, IID.field DESC
        ]]>
    </select>
    
    <select id="MMA027.selectInterfaceHistoryList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
            SELECT IHD.INTERFACE_HISTORY_DATA_ID
                  ,IHD.INTERFACE_HISTORY_ID::NUMERIC
                  ,IHD.COMPANY_CD
                  ,IHD.ROW_SEQ::NUMERIC
                  ,IHD.CURRENT_ROW::NUMERIC
                  ,IHD.ERROR_YN
                  ,CLD.WORD AS ERROR_YN_NAME
                  ,COALESCE(M.MESSAGE, ERROR_MESSAGE) AS ERROR_MESSAGE
                  ,IHD.ATTRIBUTE01
                  ,IHD.ATTRIBUTE02
                  ,IHD.ATTRIBUTE03
                  ,IHD.ATTRIBUTE04
                  ,IHD.ATTRIBUTE05
                  ,IHD.ATTRIBUTE06
                  ,IHD.ATTRIBUTE07
                  ,IHD.ATTRIBUTE08
                  ,IHD.ATTRIBUTE09
                  ,IHD.ATTRIBUTE10
                  ,IHD.ATTRIBUTE11
                  ,IHD.ATTRIBUTE12
                  ,IHD.ATTRIBUTE13
                  ,IHD.ATTRIBUTE14
                  ,IHD.ATTRIBUTE15
                  ,IHD.ATTRIBUTE16
                  ,IHD.ATTRIBUTE17
                  ,IHD.ATTRIBUTE18
                  ,IHD.ATTRIBUTE19
                  ,IHD.ATTRIBUTE20
                  ,IHD.ATTRIBUTE21
                  ,IHD.ATTRIBUTE22
                  ,IHD.ATTRIBUTE23
                  ,IHD.ATTRIBUTE24
                  ,IHD.ATTRIBUTE25
                  ,IHD.ATTRIBUTE26
                  ,IHD.ATTRIBUTE27
                  ,IHD.ATTRIBUTE28
                  ,IHD.ATTRIBUTE29
                  ,IHD.ATTRIBUTE30
                  ,IHD.ATTRIBUTE31
                  ,IHD.ATTRIBUTE32
                  ,IHD.ATTRIBUTE33
                  ,IHD.ATTRIBUTE34
                  ,IHD.ATTRIBUTE35
                  ,IHD.ATTRIBUTE36
                  ,IHD.ATTRIBUTE37
                  ,IHD.ATTRIBUTE38
                  ,IHD.ATTRIBUTE39
                  ,IHD.ATTRIBUTE40
                  ,IHD.ATTRIBUTE41
                  ,IHD.ATTRIBUTE42
                  ,IHD.ATTRIBUTE43
                  ,IHD.ATTRIBUTE44
                  ,IHD.ATTRIBUTE45
                  ,IHD.ATTRIBUTE46
                  ,IHD.ATTRIBUTE47
                  ,IHD.ATTRIBUTE48
                  ,IHD.ATTRIBUTE49
                  ,IHD.ATTRIBUTE50
              FROM INTERFACE_HISTORY_DATA IHD
                   LEFT OUTER JOIN MESSAGE_TABLE M
                     ON M.MESSAGE_CODE = IHD.ERROR_MESSAGE
                    AND M.NATION_CODE = #SESSION_DEFAULT_LANGUAGE#
                   LEFT OUTER JOIN CODE_LANG_DIC CLD
                     ON CLD.COMPANY_CD = IHD.COMPANY_CD
                    AND CLD.CODE =  IHD.ERROR_YN
                    AND CLD.CATEGORY_CD = 'YN'
                    AND CLD.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#                       
             WHERE IHD.INTERFACE_HISTORY_ID = #INTERFACE_HISTORY_ID#::NUMERIC
        <include refid="select-paging-end" />
        ORDER BY ROW_SEQ
    </select>
    
    <select id="MMA029.selectHelpMenuList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        WITH CONECT_CONTENTS(ID, PARENT_ID, TEXT, PID_LEVEL, SORT_NO, SORT_PATH, LINK_URL)
        AS (
            SELECT HM.PID AS ID
                  ,HM.MENU_ID AS PARENT_ID
                  ,HM.PROGRAM_NAME AS TEXT
                  ,HM.PID_LEVEL
                  ,HM.SORT_NO
                  ,HM.SORT_PATH
                  ,(CASE WHEN HM.DOC_YN = 'N' THEN NULL ELSE '/html/help/'||HM.PID||'.html' END) AS LINK_URL
              FROM (
                    SELECT DISTINCT MM.MENU_ID AS PID
                          ,NULL AS MENU_ID
                          ,COALESCE(DIC.WORD, MM.MENU_NM) AS PROGRAM_NAME
                          ,1 AS PID_LEVEL
                          ,MM.MENU_SORT_SER AS SORT_NO
                          ,'1' AS IF_TYPE
                          ,'1' AS IF_MAPPING_TYPE
                          ,'N' AS DOC_YN
                          ,MM.MENU_SORT_SER AS SORT_PATH
                      FROM MENU_MGMT MM
                           INNER JOIN HELP_MENU HM
                              ON HM.MENU_ID = MM.MENU_ID
                             AND HM.DOC_YN = 'Y'
                           INNER JOIN AUTH_USER AU
                              ON AU.COMPANY_CD = #SESSION_COMPANY_CD#
                           <isEqual property="SESSION_CERTIFY_TYPE" compareValue="external">
                             AND AU.USER_ID = 'supplier'
                           </isEqual>
                           <isNotEqual property="SESSION_CERTIFY_TYPE" compareValue="external">
                             AND AU.USER_ID = #SESSION_USER_ID#
                           </isNotEqual>
                           INNER JOIN AUTH_MENU AM
                              ON AM.COMPANY_CD = AU.COMPANY_CD
                             AND AM.AUTH_GROUP_ID = AU.AUTH_GROUP_ID
                             AND AM.MENU_ID = MM.MENU_ID
                            LEFT OUTER JOIN MENU_LANG_DIC DIC
                              ON MM.MENU_ID = DIC.MENU_ID
                             AND DIC.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                             AND DIC.LANG_ID = 1
                     WHERE MM.USE_YN = 'Y'
                    UNION ALL
                    SELECT HM.PID
                          ,HM.MENU_ID
                          ,(CASE WHEN #SESSION_DEFAULT_LANGUAGE# = 'KR' THEN HM.PROGRAM_NAME
                                 ELSE COALESCE(HM.PROGRAM_NAME_ENG, HM.PROGRAM_NAME)
                            END) AS PROGRAM_NAME
                          ,HM.PID_LEVEL
                          ,HM.SORT_NO
                          ,HM.IF_TYPE
                          ,MAX(CASE WHEN ISM.SCHEDULE_CD = 'MONTHLY_BATCH' AND IIM.FILE_TYPE = 'C' AND ISM.IF_METHOD = 'U' THEN '2'
                                    WHEN ISM.SCHEDULE_CD = 'MONTHLY_BATCH' AND IIM.FILE_TYPE = 'C' AND ISM.IF_METHOD = 'E' THEN '3'
                                    WHEN ISM.SCHEDULE_CD = 'MANUALLY_BATCH' AND IIM.FILE_TYPE = 'M' AND ISM.IF_METHOD = 'U' THEN '2'
                                    WHEN ISM.SCHEDULE_CD = 'MANUALLY_BATCH' AND IIM.FILE_TYPE = 'M' AND ISM.IF_METHOD = 'E' THEN '3'
                                    ELSE '1'
                           END) AS IF_MAPPING_TYPE
                          ,HM.DOC_YN
                          ,MM.MENU_SORT_SER AS SORT_PATH
                      FROM HELP_MENU HM
                           INNER JOIN MENU_MGMT MM
                              ON MM.MENU_ID = HM.MENU_ID
                             AND MM.USE_YN = 'Y'
                            LEFT OUTER JOIN INTERFACE_SCHEDULE_MAPPING ISM
                              ON ISM.COMPANY_CD = #SESSION_COMPANY_CD#
                             AND ISM.IF_CD = MM.PRGM_ID
                             AND ISM.SCHEDULE_CD IN('MONTHLY_BATCH', 'MANUALLY_BATCH')
                            LEFT OUTER JOIN INTERFACE_ITEM_MST IIM
                              ON IIM.COMPANY_CD = ISM.COMPANY_CD
                             AND IIM.IF_CD = ISM.IF_CD
                             AND IIM.USING_YN = 'Y'
                             AND IIM.ITEM_TYPE != 'P'
                     WHERE HM.DOC_YN = 'Y'
                       AND EXISTS(SELECT 1
                                    FROM AUTH_MENU AM
                                         INNER JOIN AUTH_USER AU
                                            ON AU.COMPANY_CD = #SESSION_COMPANY_CD#
                                           AND AU.AUTH_GROUP_ID = AM.AUTH_GROUP_ID
                                         <isEqual property="SESSION_CERTIFY_TYPE" compareValue="external">
                                           AND AU.USER_ID = 'supplier'
                                         </isEqual>
                                         <isNotEqual property="SESSION_CERTIFY_TYPE" compareValue="external">
                                           AND AU.USER_ID = #SESSION_USER_ID#
                                         </isNotEqual>
                                    WHERE AM.MENU_ID = MM.MENU_ID)
                     GROUP BY HM.PID
                             ,HM.MENU_ID
                             ,HM.PROGRAM_NAME
                             ,HM.PROGRAM_NAME_ENG
                             ,HM.PID_LEVEL
                             ,HM.SORT_NO
                             ,HM.IF_TYPE
                             ,HM.DOC_YN,MM.MENU_SORT_SER
                   ) HM
            <![CDATA[ WHERE HM.IF_TYPE <= HM.IF_MAPPING_TYPE ]]>
         )
        SELECT *
          FROM (
          <isNotEqual property="SESSION_CERTIFY_TYPE" compareValue="external">
                SELECT 'MM-0001' AS ID, NULL AS PARENT_ID, '메인화면' AS TEXT, 1 AS PID_LEVEL, 0 AS SORT_NO, 1 AS SORT_PATH, '/html/help/MM-0001_01.html' AS LINK_URL 
                UNION ALL
          </isNotEqual>
                SELECT ID, PARENT_ID, TEXT, PID_LEVEL, SORT_NO, SORT_PATH, LINK_URL
                  FROM CONECT_CONTENTS
               ) C
        ORDER BY SORT_PATH, PID_LEVEL, SORT_NO
    </select>
    
    <select id="MMA029.selectKeyContents" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT HM.PID
              ,HM.PROGRAM_NAME
              ,HM.COMMENTS
              ,MP.MENU_NM AS PARENT_MENU_NAME
              ,MM.MENU_NM AS MENU_NAME
          FROM HELP_MENU HM
               INNER JOIN AUTH_USER AU
                  ON AU.COMPANY_CD = #SESSION_COMPANY_CD#
               <isEqual property="SESSION_CERTIFY_TYPE" compareValue="external">
                 AND AU.USER_ID = 'supplier'
               </isEqual>
               <isNotEqual property="SESSION_CERTIFY_TYPE" compareValue="external">
                 AND AU.USER_ID = #SESSION_USER_ID#
               </isNotEqual>
               INNER JOIN AUTH_MENU AM
                  ON AM.COMPANY_CD = AU.COMPANY_CD
                 AND AM.AUTH_GROUP_ID = AU.AUTH_GROUP_ID
                 AND AM.MENU_ID = HM.MENU_ID
               LEFT OUTER JOIN MENU_MGMT MM
                  ON MM.MENU_ID = HM.MENU_ID
               LEFT OUTER JOIN MENU_MGMT MP
                  ON MP.MENU_ID = MM.HGRNK_MENU_ID
         WHERE HM.DOC_YN = 'Y'
           AND (UPPER(HM.PROGRAM_NAME) LIKE UPPER(#schKeyWord#) OR
                UPPER(HM.COMMENTS) LIKE UPPER(#schKeyWord#))
    </select>
    
    <select id="MMA030.selectJoinCompanyNo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT MJR.COMPANY_JOIN_NO
              ,MJR.SERVICE_STATUS
          FROM MEMBER_JOIN_REQ MJR
         WHERE REPLACE(MJR.BUSINESS_NO, '-') = REPLACE(#BUSINESS_NO#, '-', '')
           AND MJR.SERVICE_STATUS NOT IN('3', '4')
         <isNotEmpty property="USER_ID">
           AND #USER_ID# IN(MJR.OFFICER_EMAIL, MJR.USER_ID)
         </isNotEmpty>
           LIMIT 1 
    </select>
    
    <select id="MMA030.selectJoinCompanyInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT COMPANY_JOIN_NO
              ,COMPANY_NAME
              ,COMPANY_NAME_ENG
              ,BUSINESS_NO
              ,PRESIDENT_NAME
              ,PRESIDENT_NAME_ENG
              ,COM_PHONE_NO
              ,COM_FAX_NO
              ,COM_EMAIL
              ,ADDRESS1
              ,ADDRESS2
              ,COMMENTS
              ,OFFICER_NAME
              ,OFFICER_POSITION
              ,OFFICER_DEPT
              ,OFFICER_PHONE_NO
              ,OFFICER_CELL_NO
              ,OFFICER_FAX_NO
              ,OFFICER_EMAIL
              ,USER_ID
              ,SERVICE_STATUS
              ,COMPANY_CD
              ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,CREATE_BY
          FROM MEMBER_JOIN_REQ
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
    </select>
    
    <insert id="MMA030.insertJoinCompanyInfo" parameterClass="java.util.Map">
        INSERT INTO MEMBER_JOIN_REQ(
               COMPANY_JOIN_NO
              ,COMPANY_NAME
              ,COMPANY_NAME_ENG
              ,BUSINESS_NO
              ,PRESIDENT_NAME
              ,PRESIDENT_NAME_ENG
              ,COM_PHONE_NO
              ,COM_FAX_NO
              ,COM_EMAIL
              ,ADDRESS1
              ,ADDRESS2
              ,COMMENTS
              ,OFFICER_NAME
              ,OFFICER_DEPT
              ,OFFICER_POSITION
              ,OFFICER_CELL_NO
              ,OFFICER_PHONE_NO
              ,OFFICER_FAX_NO
              ,OFFICER_EMAIL
              ,USER_ID
              ,SERVICE_STATUS
              ,COMPANY_CD
              ,CREATE_DATE
              ,CREATE_BY
              ,UPDATE_DATE
              ,UPDATE_BY)
        VALUES(NEXTVAL('COMPANY_JOIN_NO_SEQ')
              ,#COMPANY_NAME#
              ,''
              ,#BUSINESS_NO#
              ,#PRESIDENT_NAME#
              ,''
              ,#COM_PHONE_NO#
              ,#COM_FAX_NO#
              ,#COM_EMAIL#
              ,#ADDRESS1#
              ,''
              ,#COMMENTS#
              ,#OFFICER_NAME#
              ,#OFFICER_DEPT#
              ,#OFFICER_POSITION#
              ,#OFFICER_CELL_NO#
              ,#OFFICER_PHONE_NO#
              ,#OFFICER_FAX_NO#
              ,#OFFICER_EMAIL#
              ,#USER_ID#
              ,'0'
              ,NULL
              ,NOW()
              ,'fta'
              ,NOW()
              ,'fta')
    </insert>
    
    <update id="MMA030.updateJoinCompanyInfo" parameterClass="java.util.Map">
        UPDATE MEMBER_JOIN_REQ 
           SET COMPANY_NAME = #COMPANY_NAME#
              ,BUSINESS_NO = #BUSINESS_NO#
              ,PRESIDENT_NAME = #PRESIDENT_NAME#
              ,COM_PHONE_NO = #COM_PHONE_NO#
              ,COM_FAX_NO = #COM_FAX_NO#
              ,COM_EMAIL = #COM_EMAIL#
              ,ADDRESS1 = #ADDRESS1#
              ,COMMENTS = #COMMENTS#
              ,OFFICER_NAME = #OFFICER_NAME#
              ,OFFICER_POSITION = #OFFICER_POSITION#
              ,OFFICER_PHONE_NO = #OFFICER_PHONE_NO#
              ,OFFICER_FAX_NO = #OFFICER_FAX_NO#
              ,OFFICER_EMAIL = #OFFICER_EMAIL#
              ,USER_ID = #USER_ID#
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = 'fta'
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
    </update>
    
    <select id="MMA031.selectInquiryEmailRecordList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
        SELECT MJR.COMPANY_NAME
              ,IR.INQUIRY_NO
              ,IR.INQUIRY_TYPE
              ,IR.INQUIRY_NAME
              ,IR.INQUIRY_POSITION
              ,IR.INQUIRY_EMAIL
              ,IR.INQUIRY_TEL
              ,IR.INQUIRY_RESPONSE
              ,IR.INQUIRY_TITLE
              ,IR.INQUIRY_CONTENTS
              ,TO_CHAR(IR.INQUIRY_DATE, 'YYYY-MM-DD HH24:MI:SS') AS INQUIRY_DATE
              ,IR.INQUIRY_ID
              ,IR.CUSTOMER_NAME
              ,IR.APPLICATION_SERVICE_TYPE
              ,IR.CERTIFY_TYPE
              ,IR.FTA_NATION
              ,IR.LICENSE_KEY
              ,IR.MEMBER_ID
              ,IR.STATUS
              ,CD1.WORD AS STATUS_NAME
              ,CD2.WORD AS INQUIRY_RESPONSE_NAME
              ,IR.INQUIRY_PARENT_TYPE
              ,CD3.WORD AS INQUIRY_TYPE_NAME
              ,IR.INQUIRY_SUB_TYPE
              ,(CASE WHEN IR.STATUS = '3' THEN IR.SEND_CONTENTS ELSE NULL END) AS SEND_CONTENTS
              ,(CASE WHEN IR.STATUS = '3' THEN IR.SURVEY_RESULT ELSE NULL END) AS SURVEY_RESULT
              ,TO_CHAR(IR.RECEIPT_DATE, 'YYYY-MM-DD HH24:MI:SS') AS RECEIPT_DATE
              ,(CASE WHEN IR.STATUS = '3' THEN TO_CHAR(IR.SEND_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END) AS SEND_DATE
              ,IR.RECEIPT_ID
              ,FU.NAME AS RECEIPT_NAME
              ,FU.OFFICE_PHONE_NO AS RECEIPT_PHONE
              ,FU.EMAIL AS RECEIPT_EMAIL
              ,IR.SEND_ID
              ,FU1.NAME AS ANSWER_NAME
              ,FU1.OFFICE_PHONE_NO AS ANSWER_PHONE
              ,FU1.EMAIL AS ANSWER_EMAIL
          FROM INQUIRY_RECORD IR
               INNER JOIN MEMBER_JOIN_REQ MJR
                 ON MJR.COMPANY_CD = IR.MEMBER_ID
               LEFT OUTER JOIN CODE_LANG_DIC CD1
                 ON CD1.COMPANY_CD = #COMPANY_CD#
                AND CD1.CATEGORY_CD = 'INQUIRY_STATUS'
                AND CD1.CODE = IR.STATUS
                AND CD1.LANGUAGE_CAT = #DEFAULT_LANGUAGE#
               LEFT OUTER JOIN CODE_LANG_DIC CD2
                 ON CD2.COMPANY_CD = #COMPANY_CD# 
                AND CD2.CATEGORY_CD = 'INQUIRY_RESPONSE'
                AND CD2.CODE = IR.INQUIRY_RESPONSE
                AND CD2.LANGUAGE_CAT = #DEFAULT_LANGUAGE#
               LEFT OUTER JOIN CODE_LANG_DIC CD3
                 ON CD3.COMPANY_CD = #COMPANY_CD# 
                AND CD3.CATEGORY_CD = 'INQUIRY_PARENT_TYPE'
                AND CD3.CODE = IR.INQUIRY_PARENT_TYPE
                AND CD3.LANGUAGE_CAT = #DEFAULT_LANGUAGE#
               LEFT OUTER JOIN FTA_USER FU
                 ON FU.COMPANY_CD = #COMPANY_CD#
                AND FU.USER_ID = IR.RECEIPT_ID
               LEFT OUTER JOIN FTA_USER FU1
                 ON FU1.COMPANY_CD = #COMPANY_CD#
                AND FU1.USER_ID = IR.SEND_ID
         WHERE IR.MEMBER_ID = #MEMBER_ID#
           AND IR.LICENSE_KEY = #LICENSE_KEY#
           AND IR.INQUIRY_TYPE = #INQUIRY_TYPE#
           AND IR.INQUIRY_ID = #INQUIRY_ID#
           AND TO_CHAR(IR.INQUIRY_DATE, 'YYYYMMDD') BETWEEN #SCH_FROM_DATE# AND #SCH_TO_DATE#
         <isNotEmpty property="STATUS">
           AND IR.STATUS = #STATUS#
         </isNotEmpty>
         <isNotEmpty property="schKeyWord">
           <isEqual property="schKeyField" compareValue="T">
             AND UPPER(IR.INQUIRY_TITLE) LIKE UPPER(#schKeyWord#)
           </isEqual>
           <isEqual property="schKeyField" compareValue="C">
             AND UPPER(IR.INQUIRY_CONTENTS) LIKE UPPER(#schKeyWord#)
           </isEqual>
           <isEqual property="schKeyField" compareValue="TC">
             AND (UPPER(IR.INQUIRY_TITLE) LIKE UPPER(#schKeyWord#) OR UPPER(IR.INQUIRY_CONTENTS) LIKE UPPER(#schKeyWord#))
           </isEqual>
         </isNotEmpty>
         <include refid="select-paging-end" />
         ORDER BY INQUIRY_NO DESC
    </select>
    
    <select id="MMA031.selectInquiryFileList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT FILE_SEQ
              ,INQUIRY_NO
              ,FILE_NAME
              ,FILE_PATH
              ,ORIGIN_FILE_NAME
          FROM INQUIRY_RECORD_FILE
         WHERE INQUIRY_NO = #INQUIRY_NO#::numeric
         ORDER BY FILE_SEQ
    </select>
    
    <select id="MMA031.selectInquiryRealFile" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT REALFILE
              ,ORIGIN_FILE_NAME
          FROM INQUIRY_RECORD_FILE
         WHERE INQUIRY_NO = #INQUIRY_NO#::numeric
           AND FILE_SEQ = #FILE_SEQ#::numeric
    </select>
    
    <select id="MMA031.selectInquiryFileMaxNumber" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT MAX(FILE_SEQ) AS FILE_MAX_SEQ
          FROM INQUIRY_RECORD_FILE
         WHERE INQUIRY_NO = #INQUIRY_NO#::numeric
    </select>
    
    <insert id="MMA031.insertInquiryEmailRecord" parameterClass="java.util.Map">
        <selectKey resultClass="int" keyProperty="INQUIRY_NO">
            SELECT NEXTVAL('NQUIRY_NO_SEQ')
        </selectKey>
        
        INSERT INTO INQUIRY_RECORD(
             INQUIRY_NO
            ,INQUIRY_TYPE
            ,INQUIRY_NAME
            ,INQUIRY_POSITION
            ,INQUIRY_EMAIL
            ,INQUIRY_TEL
            ,INQUIRY_RESPONSE
            ,INQUIRY_TITLE
            ,INQUIRY_CONTENTS
            ,INQUIRY_DATE
            ,INQUIRY_ID
            ,CUSTOMER_NAME
            ,APPLICATION_SERVICE_TYPE
            ,CERTIFY_TYPE
            ,FTA_NATION
            ,LICENSE_KEY
            ,MEMBER_ID
            ,STATUS
            ,INQUIRY_PARENT_TYPE
            <isNotEmpty property="INQUIRY_SUB_TYPE">,INQUIRY_SUB_TYPE</isNotEmpty>
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             #INQUIRY_NO#
            ,#INQUIRY_TYPE#
            ,#INQUIRY_NAME#
            ,#INQUIRY_POSITION#
            ,#INQUIRY_EMAIL#
            ,#INQUIRY_TEL#
            ,#INQUIRY_RESPONSE#
            ,#INQUIRY_TITLE#
            ,#INQUIRY_CONTENTS#
            ,NOW()
            ,#INQUIRY_ID#
            ,#CUSTOMER_NAME#
            ,#APPLICATION_SERVICE_TYPE#
            ,#CERTIFY_TYPE#
            ,#FTA_NATION#
            ,#LICENSE_KEY#
            ,#MEMBER_ID#
            ,'1'
            ,#INQUIRY_PARENT_TYPE#
            <isNotEmpty property="INQUIRY_SUB_TYPE">,#INQUIRY_SUB_TYPE#</isNotEmpty>
            ,NOW()
            ,'fta'
            ,NOW()
            ,'fta'
        )
    </insert>
    
    <update id="MMA031.updateInquiryEmailRecord" parameterClass="java.util.Map">
        UPDATE INQUIRY_RECORD
           SET INQUIRY_NAME = #INQUIRY_NAME#
              ,INQUIRY_POSITION = #INQUIRY_POSITION#
              ,INQUIRY_EMAIL = #INQUIRY_EMAIL#
              ,INQUIRY_TEL = #INQUIRY_TEL#
              ,INQUIRY_RESPONSE = #INQUIRY_RESPONSE#
              ,INQUIRY_TITLE = #INQUIRY_TITLE#
              ,INQUIRY_CONTENTS = #INQUIRY_CONTENTS#
              ,INQUIRY_ID = #INQUIRY_ID#
              ,CUSTOMER_NAME = #CUSTOMER_NAME#
              ,APPLICATION_SERVICE_TYPE = #APPLICATION_SERVICE_TYPE#
              ,CERTIFY_TYPE = #CERTIFY_TYPE#
              ,FTA_NATION = #FTA_NATION#
              ,LICENSE_KEY = #LICENSE_KEY#
              ,MEMBER_ID = #MEMBER_ID#
              ,INQUIRY_PARENT_TYPE = #INQUIRY_PARENT_TYPE#
              <isNotEmpty property="INQUIRY_SUB_TYPE">,INQUIRY_SUB_TYPE = #INQUIRY_SUB_TYPE#</isNotEmpty>
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = 'fta'
         WHERE INQUIRY_NO = #INQUIRY_NO#::numeric
           AND STATUS != '3'
    </update>
    
    <delete id="MMA031.deleteInquiryEmailRecord" parameterClass="java.util.Map">
        DELETE FROM INQUIRY_RECORD
         WHERE INQUIRY_NO = #INQUIRY_NO#::numeric
           AND STATUS != '3'
    </delete>
    
    <insert id="MMA031.insertInquiryFileRecord" parameterClass="java.util.Map">
        INSERT INTO INQUIRY_RECORD_FILE(
             INQUIRY_NO
            ,FILE_SEQ
            ,FILE_PATH
            ,FILE_NAME
            ,REALFILE
            ,ORIGIN_FILE_NAME
            ,FILE_TYPE
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             #INQUIRY_NO#::NUMERIC
            ,#FILE_SEQ#::NUMERIC
            ,#FILE_PATH#
            ,#FILE_NAME#
            ,#REALFILE:BLOB#
            ,#ORIGIN_FILE_NAME#
            ,#FILE_TYPE#
            ,NOW()
            ,'fta'
            ,NOW()
            ,'fta'
        )
    </insert>
    
    <delete id="MMA031.deleteInquiryFileRecord" parameterClass="java.util.Map">
        DELETE FROM INQUIRY_RECORD_FILE
         WHERE INQUIRY_NO = #INQUIRY_NO#::numeric
         <isNotEmpty property="FILE_SEQ">
           AND FILE_SEQ = #FILE_SEQ#::numeric
         </isNotEmpty>
    </delete>
    
    <select id="MMA031.selectSystemNoticeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
	    SELECT N.SUBJECT
              ,N.CONTENT1
              ,TO_CHAR(N.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,(CASE WHEN TO_CHAR(N.CREATE_DATE, 'YYYYMMDD') BETWEEN 
                          TO_CHAR(NOW() - INTERVAL '1 WEEK', 'YYYYMMDD') AND TO_CHAR(NOW(), 'YYYYMMDD') THEN 'Y'
                     ELSE 'N'
                END) AS NEW_YN
          FROM NOTICE N
		 WHERE N.COMPANY_CD = #COMPANY_CD#
		 <isNotEmpty property="BBS_TYPE">
           <isEqual property="BBS_TYPE" compareValue="1">
             AND N.BBS_TYPE IN('A', '1')
           </isEqual>
           <isEqual property="BBS_TYPE" compareValue="2">
             AND N.BBS_TYPE IN('A', '2')
           </isEqual>
           <isEqual property="BBS_TYPE" compareValue="U">
             AND N.BBS_TYPE = 'U'
           </isEqual>
        </isNotEmpty>
        <isEmpty property="BBS_TYPE">
             AND N.BBS_TYPE = 'A'
        </isEmpty>
	    <include refid="select-paging-end" />
		 ORDER BY CREATE_DATE DESC
    </select>
    
    <select id="MMA032.selectCompanyList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT DISTINCT T.COMPANY_CD
                  ,T.COMPANY_NAME
                  ,T.COMPANY_NAME_ENG
                  ,T.BUSINESS_NO
                  ,T.PRESIDENT_NAME
                  ,T.PRESIDENT_NAME_ENG
                  ,T.OFFICER_NAME
                  ,T.OFFICER_PHONE_NO
                  ,T.OFFICER_EMAIL
                  ,T.COM_PHONE_NO
                  ,T.COM_FAX_NO
                  ,T.ZIP_CD
                  ,(CASE WHEN #SESSION_DEFAULT_LANGUAGE# = 'KR' THEN T.ADDRESS1 ELSE T.ADDRESS2 END) AS ADDRESS
                  ,T.ADDRESS1
                  ,T.ADDRESS2
                  ,T.CO_CERTIFIED_EXPORTER_YN
                  ,T.CO_CERTIFIED_EXPORTER_NO
                  ,T.FTA_MODEL_CD
                  ,T.PO_PRICE_ADJUST_METHOD_CD
                  ,T.DATA_INTERFACE_TYPE_CD
                  ,T.SALES_COST_APPLY_YN
                  ,T.INLAND_COST_APPLY_YN
                  ,T.INV_CHECK_APPLY_YN
                  ,T.DOC_PREFIX
                  ,T.INV_BOOK_APPLY_YN
                  ,T.LOCAL_CURR_CD
                  ,T.EXPORT_YN
                  ,T.CO_RATE_TYPE_CD
                  ,T.MX_YN
                  ,T.COM_EMAIL
                  ,T.OFFICER_POSITION
                  ,T.ERP_YN
                  ,T.PARENT_COMPANY_CD
                  ,T.AUTH_GROUP_ID
                  ,C.COMPANY_NAME AS PARENT_COMPANY_NAME
                  ,AC.COMPANY_NAME AS MGMT_COMPANY_NAME
            <isNotEmpty property="PARENT_COMPANY_CD">
              FROM (
                    SELECT C.COMPANY_CD
                          ,C.COMPANY_NAME
                          ,C.COMPANY_NAME_ENG
                          ,C.BUSINESS_NO
                          ,C.PRESIDENT_NAME
                          ,C.PRESIDENT_NAME_ENG
                          ,C.OFFICER_NAME
                          ,C.OFFICER_PHONE_NO
                          ,C.OFFICER_EMAIL
                          ,C.COM_PHONE_NO
                          ,C.COM_FAX_NO
                          ,C.ZIP_CD
                          ,C.ADDRESS1
                          ,C.ADDRESS2
                          ,C.CO_CERTIFIED_EXPORTER_YN
                          ,C.CO_CERTIFIED_EXPORTER_NO
                          ,C.FTA_MODEL_CD
                          ,C.PO_PRICE_ADJUST_METHOD_CD
                          ,C.DATA_INTERFACE_TYPE_CD
                          ,C.SALES_COST_APPLY_YN
                          ,C.INLAND_COST_APPLY_YN
                          ,C.INV_CHECK_APPLY_YN
                          ,C.DOC_PREFIX
                          ,C.INV_BOOK_APPLY_YN
                          ,C.LOCAL_CURR_CD
                          ,C.EXPORT_YN
                          ,C.CO_RATE_TYPE_CD
                          ,C.MX_YN
                          ,C.COM_EMAIL
                          ,C.OFFICER_POSITION
                          ,C.ERP_YN
                          ,C.PARENT_COMPANY_CD
                          ,C.AUTH_GROUP_ID
                      FROM COMPANY C
                     WHERE C.COMPANY_CD = #COMPANY_CD#
                   UNION
                    SELECT C.COMPANY_CD
                          ,C.COMPANY_NAME
                          ,C.COMPANY_NAME_ENG
                          ,C.BUSINESS_NO
                          ,C.PRESIDENT_NAME
                          ,C.PRESIDENT_NAME_ENG
                          ,C.OFFICER_NAME
                          ,C.OFFICER_PHONE_NO
                          ,C.OFFICER_EMAIL
                          ,C.COM_PHONE_NO
                          ,C.COM_FAX_NO
                          ,C.ZIP_CD
                          ,C.ADDRESS1
                          ,C.ADDRESS2
                          ,C.CO_CERTIFIED_EXPORTER_YN
                          ,C.CO_CERTIFIED_EXPORTER_NO
                          ,C.FTA_MODEL_CD
                          ,C.PO_PRICE_ADJUST_METHOD_CD
                          ,C.DATA_INTERFACE_TYPE_CD
                          ,C.SALES_COST_APPLY_YN
                          ,C.INLAND_COST_APPLY_YN
                          ,C.INV_CHECK_APPLY_YN
                          ,C.DOC_PREFIX
                          ,C.INV_BOOK_APPLY_YN
                          ,C.LOCAL_CURR_CD
                          ,C.EXPORT_YN
                          ,C.CO_RATE_TYPE_CD
                          ,C.MX_YN
                          ,C.COM_EMAIL
                          ,C.OFFICER_POSITION
                          ,C.ERP_YN
                          ,C.PARENT_COMPANY_CD
                          ,C.AUTH_GROUP_ID
                      FROM COMPANY C
                     WHERE C.PARENT_COMPANY_CD = #PARENT_COMPANY_CD#
                   UNION
                    SELECT C.COMPANY_CD
                          ,C.COMPANY_NAME
                          ,C.COMPANY_NAME_ENG
                          ,C.BUSINESS_NO
                          ,C.PRESIDENT_NAME
                          ,C.PRESIDENT_NAME_ENG
                          ,C.OFFICER_NAME
                          ,C.OFFICER_PHONE_NO
                          ,C.OFFICER_EMAIL
                          ,C.COM_PHONE_NO
                          ,C.COM_FAX_NO
                          ,C.ZIP_CD
                          ,C.ADDRESS1
                          ,C.ADDRESS2
                          ,C.CO_CERTIFIED_EXPORTER_YN
                          ,C.CO_CERTIFIED_EXPORTER_NO
                          ,C.FTA_MODEL_CD
                          ,C.PO_PRICE_ADJUST_METHOD_CD
                          ,C.DATA_INTERFACE_TYPE_CD
                          ,C.SALES_COST_APPLY_YN
                          ,C.INLAND_COST_APPLY_YN
                          ,C.INV_CHECK_APPLY_YN
                          ,C.DOC_PREFIX
                          ,C.INV_BOOK_APPLY_YN
                          ,C.LOCAL_CURR_CD
                          ,C.EXPORT_YN
                          ,C.CO_RATE_TYPE_CD
                          ,C.MX_YN
                          ,C.COM_EMAIL
                          ,C.OFFICER_POSITION
                          ,C.ERP_YN
                          ,C.PARENT_COMPANY_CD
                          ,C.AUTH_GROUP_ID
                      FROM COMPANY C
                           INNER JOIN AUTH_USER AU
                              ON AU.USER_ID = #SESSION_USER_ID#
                             AND AU.AUTH_GROUP_ID = C.AUTH_GROUP_ID
                   ) T
            </isNotEmpty>
            <isEmpty property="PARENT_COMPANY_CD">
              FROM COMPANY T
            </isEmpty>
                   LEFT OUTER JOIN COMPANY C
                     ON C.COMPANY_CD = T.PARENT_COMPANY_CD
                   LEFT OUTER JOIN COMPANY AC
                     ON AC.COMPANY_CD = T.AUTH_GROUP_ID
             WHERE 1=1
            <isNotEmpty property="schKeyWord">
               AND UPPER(T.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
        <include refid="select-paging-end" />
         ORDER BY COMPANY_NAME
    </select>
    
    <select id="MMA033.selectCustomerItemList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
            SELECT DISTINCT CI.COMPANY_CD
                <isNotEmpty property="DIVISION_CD">
	              ,CI.DIVISION_CD
                  ,FN_GET_DIVISION(CI.COMPANY_CD, CI.DIVISION_CD, 'DIVISION_NAME') AS DIVISION_NAME
	            </isNotEmpty>
                  ,CI.ITEM_CD
                  ,FN_GET_ITEM(CI.COMPANY_CD, CI.DIVISION_CD, CI.ITEM_CD, 'ITEM_NAME') AS ITEM_NAME
                  ,A.HS_CODE
                  ,CI.CUSTOMER_CD
                  ,FN_GET_CUSTOMER(CI.COMPANY_CD, CI.CUSTOMER_CD, 'CUSTOMER_NAME') AS CUSTOMER_NAME
                  ,CI.CUSTOMER_ITEM_CD
                  ,CI.CUSTOMER_ITEM_NAME
                  ,CI.CUSTOMER_STANDARD
                  ,CI.CUSTOMER_HS_CODE
                  ,CI.LAST_SALES_DATE
                  ,CI.START_DATE
                  ,CI.END_DATE
                  ,CI.CUSTOMER_SALES_TYPE
                  ,FN_GET_COMMON_CD(CI.COMPANY_CD, 'SALES_TYPE', CI.CUSTOMER_SALES_TYPE, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS CUSTOMER_SALES_TYPE_NAME
                  ,CI.CUSTOMER_NALADISA_CODE
                  ,CI.FTA_CD
                  ,FM.FTA_NAME
              FROM (SELECT CI.COMPANY_CD
                                  ,CI.DIVISION_CD
                                  ,CI.ITEM_CD
                                  ,CI.CUSTOMER_CD
                                  ,CI.CUSTOMER_ITEM_CD
                                  ,CI.CUSTOMER_ITEM_NAME
                                  ,CI.CUSTOMER_STANDARD
                                  ,CI.CUSTOMER_HS_CODE
                                  ,CI.LAST_SALES_DATE
                                  ,CI.START_DATE
                                  ,CI.END_DATE
                                  ,CI.CUSTOMER_SALES_TYPE
                                  ,CI.CUSTOMER_NALADISA_CODE
                                  ,CI.FTA_CD
                              FROM CUSTOMER_ITEM CI
                             WHERE CI.COMPANY_CD = #COMPANY_CD#
                             <isNotEmpty property="DIVISION_CD">
                               AND CI.DIVISION_CD = #DIVISION_CD#
                             </isNotEmpty>
                             <isNotEmpty property="CUSTOMER_SALES_TYPE">
                               AND CI.CUSTOMER_SALES_TYPE = #CUSTOMER_SALES_TYPE#
                             </isNotEmpty>
                            UNION
                            SELECT CRI.COMPANY_CD
                                  ,CRI.DIVISION_CD
                                  ,CRI.ITEM_CD AS ITEM_CD
                                  ,CRI.CUSTOMER_CD
                                  ,CRI.ITEM_CD AS CUSTOMER_ITEM_CD
                                  ,NULL AS CUSTOMER_ITEM_NAME
                                  ,NULL AS CUSTOMER_STANDARD
                                  ,CRI.ITEM_HS_CODE AS CUSTOMER_HS_CODE
                                  ,NULL AS LAST_SALES_DATE
                                  ,CRI.START_DATE
                                  ,CRI.END_DATE
                                  ,CRI.CUSTOMER_SALES_TYPE
                                  ,CRI.ITEM_NALADISA_CODE AS CUSTOMER_NALADISA_CODE
                                  ,CRI.FTA_CD
                              FROM CUSTOMER_RAW_ITEM CRI
                             WHERE CRI.COMPANY_CD = #COMPANY_CD#
                             <isNotEmpty property="DIVISION_CD">
                               AND CRI.DIVISION_CD = #DIVISION_CD#
                             </isNotEmpty>
                             <isNotEmpty property="CUSTOMER_SALES_TYPE">
                               AND CRI.CUSTOMER_SALES_TYPE = #CUSTOMER_SALES_TYPE#
                             </isNotEmpty>
                            ) CI
                   LEFT OUTER JOIN ITEM A
                     ON A.COMPANY_CD = CI.COMPANY_CD
                    AND A.ITEM_CD = CI.ITEM_CD
                   LEFT OUTER JOIN FTA_MST FM
                     ON FM.FTA_CD = CI.FTA_CD
        <include refid="select-paging-end" />
        <isNotEmpty property="schKeyWord">
          WHERE UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>
        ORDER BY ITEM_CD, CUSTOMER_CD
    </select>
    
    <select id="MMA034.selectDatagridMstList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT DHM.GRID_ID
              ,DHM.HEADER_ID
              ,DHM.HEADER_NO
              ,DHM.SORT_NO
              ,DHM.GRID_LANG_CODE
              ,DHM.CELL_FIELD
              ,DHM.CELL_TITLE
              ,DHM.CELL_WIDTH
              ,DHM.CELL_ALIGN
              ,DHM.CELL_HALIGN
              ,DHM.CELL_SORTABLE
              ,DHM.CELL_HIDDEN
              ,DHM.CELL_EDITOR
              ,DHM.CELL_CHECKBOX
              ,DHM.CELL_FORMATTER
              ,DHM.CELL_ROWSPAN
              ,DHM.CELL_COLSPAN
              ,DHM.CELL_FROZEN
              ,DHM.CELL_STYLER
              ,DHM.CELL_ATTRIBUTE1
              ,DHM.CELL_ATTRIBUTE2
              ,DHM.CELL_ATTRIBUTE3
              ,DHM.CELL_ATTRIBUTE4
              ,DHM.CELL_ATTRIBUTE5
              ,DHM.FIELD_MAPPING_ID
              ,DHM.REAL_TABLE
              ,DHM.REAL_COLUMN
              ,DHM.CREATE_DATE
              ,DHM.CREATE_BY
          FROM FROM DGRID_HEADER_MST DHM
         WHERE DHM.GRID_ID = #GRID_ID#
           AND DHM.HEADER_ID = #HEADER_ID#
    </select>
    
    <delete id="MMA034.deleteDatagridMstInfo" parameterClass="java.util.Map">
        DELETE FROM DGRID_HEADER_MST
         WHERE GRID_ID = #GRID_ID#
    </delete>
    
    <insert id="MMA034.insertDatagridMstInfo" parameterClass="java.util.Map">
        INSERT INTO DGRID_HEADER_MST
              (GRID_ID
              ,HEADER_ID
              ,HEADER_NO
              ,SORT_NO
              ,GRID_LANG_CODE
              ,CELL_FIELD
              ,CELL_TITLE
              ,CELL_WIDTH
              ,CELL_ALIGN
              ,CELL_HALIGN
              ,CELL_SORTABLE
              ,CELL_HIDDEN
              ,CELL_EDITOR
              ,CELL_CHECKBOX
              ,CELL_FORMATTER
              ,CELL_ROWSPAN
              ,CELL_COLSPAN
              ,CELL_FROZEN
              ,CELL_STYLER
              ,CELL_ATTRIBUTE1
              ,CELL_ATTRIBUTE2
              ,CELL_ATTRIBUTE3
              ,CELL_ATTRIBUTE4
              ,CELL_ATTRIBUTE5
              ,FIELD_MAPPING_ID
              ,REAL_TABLE
              ,REAL_COLUMN
              ,CREATE_DATE
              ,CREATE_BY)
        VALUES(#GRID_ID#
              ,#HEADER_ID#
              ,#HEADER_NO#::numeric
              ,#SORT_NO#::numeric
              ,#GRID_LANG_CODE#
              ,#CELL_FIELD#
              ,#CELL_TITLE#
              ,<isNotEmpty property="CELL_WIDTH">#CELL_WIDTH#</isNotEmpty><isEmpty property="CELL_WIDTH">NULL</isEmpty>
              ,#CELL_ALIGN#
              ,#CELL_HALIGN#
              ,#CELL_SORTABLE#
              ,#CELL_HIDDEN#
              ,#CELL_EDITOR#
              ,#CELL_CHECKBOX#
              ,#CELL_FORMATTER#
              ,<isNotEmpty property="CELL_ROWSPAN">#CELL_ROWSPAN#</isNotEmpty><isEmpty property="CELL_ROWSPAN">NULL</isEmpty>
              ,<isNotEmpty property="CELL_COLSPAN">#CELL_COLSPAN#</isNotEmpty><isEmpty property="CELL_COLSPAN">NULL</isEmpty>
              ,#CELL_FROZEN#
              ,#CELL_STYLER#
              ,#CELL_ATTRIBUTE1#
              ,#CELL_ATTRIBUTE2#
              ,#CELL_ATTRIBUTE3#
              ,#CELL_ATTRIBUTE4#
              ,#CELL_ATTRIBUTE5#
              ,#FIELD_MAPPING_ID#
              ,#REAL_TABLE#
              ,#REAL_COLUMN#
              ,NOW()
              ,#USER_ID#)
    </insert>
    
</sqlMap>