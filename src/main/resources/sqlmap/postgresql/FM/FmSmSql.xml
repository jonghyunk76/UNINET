<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="FmSm">

    <!-- SM7001 START :: CARLOS -->
    <select id="SM7001.selectCompanyList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT T.COMPANY_CD
                  ,T.COMPANY_NAME
                  ,T.COMPANY_NAME_ENG
                  ,T.BUSINESS_NO
                  ,T.PRESIDENT_NAME
                  ,T.PRESIDENT_NAME_ENG
                  ,T.OFFICER_NAME
                  ,T.OFFICER_PHONE_NO
                  ,T.OFFICER_EMAIL
                  ,T.COM_PHONE_NO
                  ,T.COM_FAX_NO
                  ,T.ZIP_CD
                  ,T.ADDRESS1
                  ,T.ADDRESS2
                  ,T.ADDRESS1 || ' ' || T.ADDRESS2 AS ADDRESS_FULL
                  ,T.CO_CERTIFIED_EXPORTER_YN
                  ,T.CO_CERTIFIED_EXPORTER_NO
                  ,T.FTA_MODEL_CD
                  ,T.PO_PRICE_ADJUST_METHOD_CD
                  ,T.DATA_INTERFACE_TYPE_CD
                  ,T.SALES_COST_APPLY_YN
                  ,T.INLAND_COST_APPLY_YN
                  ,T.INV_CHECK_APPLY_YN
                  ,T.DOC_PREFIX
                  ,T.INV_BOOK_APPLY_YN
                  ,T.LOCAL_CURR_CD
                  ,T.EXPORT_YN
                  ,T.CO_RATE_TYPE_CD
                  ,T.MX_YN
                  ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                  ,T.CREATE_BY
                  ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
                  ,T.UPDATE_BY
                  ,T.COM_EMAIL
                  ,T.OFFICER_POSITION
                  ,T.ERP_YN
                  ,T.MANAGER_SITE_URL
                  ,T.SUPPLIER_SITE_URL
                  ,T.PARENT_COMPANY_CD
                  ,T.PASS_COMPANY_CD
                  ,T.PASS_DOCBOX_NO
                  ,T.CI_IMAGE_NAME
                  ,T.STAMP_IMAGE_NAME
              FROM COMPANY T
              WHERE 1=1
            <isNotEmpty property="COMPANY_CD">
                AND T.COMPANY_CD = #COMPANY_CD#
            </isNotEmpty>
            <isNotEmpty property="schKeyWord">
                AND UPPER(T.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
        <include refid="select-paging-end" />
         ORDER BY COMPANY_CD
    </select>

    <select id="SM7001.selectCompanyInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.COMPANY_CD
              ,T.COMPANY_NAME
              ,T.COMPANY_NAME_ENG
              ,T.BUSINESS_NO
              ,T.PRESIDENT_NAME
              ,T.PRESIDENT_NAME_ENG
              ,T.OFFICER_NAME
              ,T.OFFICER_PHONE_NO
              ,T.OFFICER_EMAIL
              ,T.COM_PHONE_NO
              ,T.COM_FAX_NO
              ,T.ZIP_CD
              ,T.ADDRESS1
              ,T.ADDRESS2
              ,T.ADDRESS1 || ' ' || T.ADDRESS2 AS ADDRESS_FULL
              ,T.CO_CERTIFIED_EXPORTER_YN
              ,T.CO_CERTIFIED_EXPORTER_NO
              ,T.FTA_MODEL_CD
              ,T.PO_PRICE_ADJUST_METHOD_CD
              ,T.DATA_INTERFACE_TYPE_CD
              ,T.SALES_COST_APPLY_YN
              ,T.INLAND_COST_APPLY_YN
              ,T.INV_CHECK_APPLY_YN
              ,T.DOC_PREFIX
              ,T.INV_BOOK_APPLY_YN
              ,T.LOCAL_CURR_CD
              ,T.EXPORT_YN
              ,T.CO_RATE_TYPE_CD
              ,T.MX_YN
              ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,T.CREATE_BY
              ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,T.UPDATE_BY
              ,T.COM_EMAIL
              ,T.OFFICER_POSITION
              ,T.ERP_YN
              ,T.HUB_CERT_ID
              ,T.TOMS_HUB_ID
              ,FN_GET_SYSTEM_CONFIG(T.COMPANY_CD, 'TOMS_FTA_CERT_KEY') AS LICENSE_KEY
              ,T.MANAGER_SITE_URL
              ,T.SUPPLIER_SITE_URL
              ,T.PARENT_COMPANY_CD
              ,T.PASS_COMPANY_CD
              ,T.PASS_DOCBOX_NO
              ,T.CI_IMAGE_NAME
              ,T.STAMP_IMAGE_NAME
          FROM COMPANY T
         WHERE T.COMPANY_CD = #COMPANY_CD#
    </select>

    <select id="SM7001.selectStempCIImg" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CI_IMAGE_NAME
              ,CI_IMAGE
              ,STAMP_IMAGE_NAME
              ,STAMP_IMAGE
          FROM COMPANY
         WHERE COMPANY_CD = #SESSION_COMPANY_CD#
    </select>
    
    <select id="SM7001.selectCompanyDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(1) DUPLICATE
          FROM INTERFACE_SCHEDULE
         WHERE 1=1
           AND COMPANY_CD = #COMPANY_CD#
    </select>

    <insert id="SM7001.insertCompanyInfo" parameterClass="java.util.Map">
        INSERT INTO COMPANY(
             COMPANY_CD
            ,COMPANY_NAME
            ,COMPANY_NAME_ENG
            ,BUSINESS_NO
            ,PRESIDENT_NAME
            ,PRESIDENT_NAME_ENG
            ,OFFICER_NAME
            ,OFFICER_PHONE_NO
            ,OFFICER_EMAIL
            ,COM_PHONE_NO
            ,COM_FAX_NO
            ,ZIP_CD
            ,ADDRESS1
            ,ADDRESS2
            ,CO_CERTIFIED_EXPORTER_YN
            ,CO_CERTIFIED_EXPORTER_NO
            ,FTA_MODEL_CD
            ,PO_PRICE_ADJUST_METHOD_CD
            ,DATA_INTERFACE_TYPE_CD
            ,SALES_COST_APPLY_YN
            ,INLAND_COST_APPLY_YN
            ,INV_CHECK_APPLY_YN
            ,DOC_PREFIX
            ,INV_BOOK_APPLY_YN
            ,LOCAL_CURR_CD
            ,EXPORT_YN
            ,CO_RATE_TYPE_CD
            ,MX_YN
            ,MANAGER_SITE_URL
            ,SUPPLIER_SITE_URL
            ,PASS_COMPANY_CD
            ,PASS_DOCBOX_NO
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY
            ,COM_EMAIL
            ,OFFICER_POSITION
            ,ERP_YN)
        VALUES(
             #COMPANY_CD#
            ,#COMPANY_NAME#
            ,#COMPANY_NAME_ENG#
            ,#BUSINESS_NO#
            ,#PRESIDENT_NAME#
            ,#PRESIDENT_NAME_ENG#
            ,#OFFICER_NAME#
            ,#OFFICER_PHONE_NO#
            ,#OFFICER_EMAIL#
            ,#COM_PHONE_NO#
            ,#COM_FAX_NO#
            ,#ZIP_CD#
            ,#ADDRESS1#
            ,#ADDRESS2#
            ,#CO_CERTIFIED_EXPORTER_YN#
            ,#CO_CERTIFIED_EXPORTER_NO#
            ,#FTA_MODEL_CD#
            ,#PO_PRICE_ADJUST_METHOD_CD#
            ,#DATA_INTERFACE_TYPE_CD#
            ,#SALES_COST_APPLY_YN#
            ,#INLAND_COST_APPLY_YN#
            ,#INV_CHECK_APPLY_YN#
            ,#DOC_PREFIX#
            ,#INV_BOOK_APPLY_YN#
            ,#LOCAL_CURR_CD#
            ,#EXPORT_YN#
            ,#CO_RATE_TYPE_CD#
            ,#MX_YN#
            ,#MANAGER_SITE_URL#
            ,#SUPPLIER_SITE_URL#
            ,#PASS_COMPANY_CD#
            ,#PASS_DOCBOX_NO#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,#COM_EMAIL#
            ,#OFFICER_POSITION#
            ,#ERP_YN#
        )
    </insert>

    <update id="SM7001.updateCompanyInfo" parameterClass="java.util.Map">
        UPDATE COMPANY
           SET UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
              <isNotNull prepend=", " property="COMPANY_NAME"             >COMPANY_NAME              = #COMPANY_NAME#             </isNotNull>
              <isNotNull prepend=", " property="COMPANY_NAME_ENG"         >COMPANY_NAME_ENG          = #COMPANY_NAME_ENG#         </isNotNull>
              <isNotNull prepend=", " property="BUSINESS_NO"              >BUSINESS_NO               = #BUSINESS_NO#              </isNotNull>
              <isNotNull prepend=", " property="PRESIDENT_NAME"           >PRESIDENT_NAME            = #PRESIDENT_NAME#           </isNotNull>
              <isNotNull prepend=", " property="PRESIDENT_NAME_ENG"       >PRESIDENT_NAME_ENG        = #PRESIDENT_NAME_ENG#       </isNotNull>
              <isNotNull prepend=", " property="OFFICER_NAME"             >OFFICER_NAME              = #OFFICER_NAME#             </isNotNull>
              <isNotNull prepend=", " property="OFFICER_PHONE_NO"         >OFFICER_PHONE_NO          = #OFFICER_PHONE_NO#         </isNotNull>
              <isNotNull prepend=", " property="OFFICER_EMAIL"            >OFFICER_EMAIL             = #OFFICER_EMAIL#            </isNotNull>
              <isNotNull prepend=", " property="COM_PHONE_NO"             >COM_PHONE_NO              = #COM_PHONE_NO#             </isNotNull>
              <isNotNull prepend=", " property="COM_FAX_NO"               >COM_FAX_NO                = #COM_FAX_NO#               </isNotNull>
              <isNotNull prepend=", " property="ZIP_CD"                   >ZIP_CD                    = #ZIP_CD#                   </isNotNull>
              <isNotNull prepend=", " property="ADDRESS1"                 >ADDRESS1                  = #ADDRESS1#                 </isNotNull>
              <isNotNull prepend=", " property="ADDRESS2"                 >ADDRESS2                  = #ADDRESS2#                 </isNotNull>
              <isNotNull prepend=", " property="CO_CERTIFIED_EXPORTER_YN" >CO_CERTIFIED_EXPORTER_YN  = #CO_CERTIFIED_EXPORTER_YN# </isNotNull>
              <isNotNull prepend=", " property="CO_CERTIFIED_EXPORTER_NO" >CO_CERTIFIED_EXPORTER_NO  = #CO_CERTIFIED_EXPORTER_NO# </isNotNull>
              <isNotNull prepend=", " property="FTA_MODEL_CD"             >FTA_MODEL_CD              = #FTA_MODEL_CD#             </isNotNull>
              <isNotNull prepend=", " property="PO_PRICE_ADJUST_METHOD_CD">PO_PRICE_ADJUST_METHOD_CD = #PO_PRICE_ADJUST_METHOD_CD#</isNotNull>
              <isNotNull prepend=", " property="DATA_INTERFACE_TYPE_CD"   >DATA_INTERFACE_TYPE_CD    = #DATA_INTERFACE_TYPE_CD#   </isNotNull>
              <isNotNull prepend=", " property="SALES_COST_APPLY_YN"      >SALES_COST_APPLY_YN       = #SALES_COST_APPLY_YN#      </isNotNull>
              <isNotNull prepend=", " property="INLAND_COST_APPLY_YN"     >INLAND_COST_APPLY_YN      = #INLAND_COST_APPLY_YN#     </isNotNull>
              <isNotNull prepend=", " property="INV_CHECK_APPLY_YN"       >INV_CHECK_APPLY_YN        = #INV_CHECK_APPLY_YN#       </isNotNull>
              <isNotNull prepend=", " property="DOC_PREFIX"               >DOC_PREFIX                = #DOC_PREFIX#               </isNotNull>
              <isNotNull prepend=", " property="INV_BOOK_APPLY_YN"        >INV_BOOK_APPLY_YN         = #INV_BOOK_APPLY_YN#        </isNotNull>
              <isNotNull prepend=", " property="LOCAL_CURR_CD"            >LOCAL_CURR_CD             = #LOCAL_CURR_CD#            </isNotNull>
              <isNotNull prepend=", " property="EXPORT_YN"                >EXPORT_YN                 = #EXPORT_YN#                </isNotNull>
              <isNotNull prepend=", " property="CO_RATE_TYPE_CD"          >CO_RATE_TYPE_CD           = #CO_RATE_TYPE_CD#          </isNotNull>
              <isNotNull prepend=", " property="MX_YN"                    >MX_YN                     = #MX_YN#                    </isNotNull>
              <isNotNull prepend=", " property="COM_EMAIL"                >COM_EMAIL                 = #COM_EMAIL#                </isNotNull>
              <isNotNull prepend=", " property="OFFICER_POSITION"         >OFFICER_POSITION          = #OFFICER_POSITION#         </isNotNull>
              <isNotNull prepend=", " property="ERP_YN"                   >ERP_YN                    = #ERP_YN#                   </isNotNull>
              <isNotEmpty prepend=", " property="CI_IMAGE"                 >CI_IMAGE     = #CI_IMAGE#     </isNotEmpty>
              <isNotEmpty prepend=", " property="CI_IMAGE"                 >CI_IMAGE_NAME     = #CI_IMAGE_NAME#     </isNotEmpty>
              <isNotEmpty prepend=", " property="STAMP_IMAGE"              >STAMP_IMAGE     = #STAMP_IMAGE#     </isNotEmpty>
              <isNotEmpty prepend=", " property="STAMP_IMAGE"              >STAMP_IMAGE_NAME     = #STAMP_IMAGE_NAME#     </isNotEmpty>
              ,MANAGER_SITE_URL = #MANAGER_SITE_URL#
              ,SUPPLIER_SITE_URL = #SUPPLIER_SITE_URL#
              ,PASS_COMPANY_CD = #PASS_COMPANY_CD#
              ,PASS_DOCBOX_NO = #PASS_DOCBOX_NO#
         WHERE 1=1
           AND COMPANY_CD = #COMPANY_CD#
    </update>

    <delete id="SM7001.deleteCompanyInfo" parameterClass="java.util.Map">
        DELETE FROM COMPANY
         WHERE COMPANY_CD = #COMPANY_CD#
    </delete>

    <update id="SM7001.updateCompnayGroupCd" parameterClass="java.util.Map">
        UPDATE COMPANY
           SET PARENT_COMPANY_CD = #PARENT_COMPANY_CD#
              ,UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
    </update>
    
    <select id="SM7001.selectCompnayGroupList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
        SELECT T.COMPANY_CD
              ,T.COMPANY_NAME
              ,T.COMPANY_NAME_ENG
              ,T.BUSINESS_NO
              ,T.PRESIDENT_NAME
              ,T.PRESIDENT_NAME_ENG
              ,T.OFFICER_NAME
              ,T.OFFICER_PHONE_NO
              ,T.OFFICER_EMAIL
              ,T.COM_PHONE_NO
              ,T.COM_FAX_NO
              ,T.ZIP_CD
              ,T.ADDRESS1
              ,T.ADDRESS2
              ,T.CO_CERTIFIED_EXPORTER_YN
              ,T.CO_CERTIFIED_EXPORTER_NO
              ,T.FTA_MODEL_CD
              ,T.PO_PRICE_ADJUST_METHOD_CD
              ,T.DATA_INTERFACE_TYPE_CD
              ,T.SALES_COST_APPLY_YN
              ,T.INLAND_COST_APPLY_YN
              ,T.INV_CHECK_APPLY_YN
              ,T.DOC_PREFIX
              ,T.INV_BOOK_APPLY_YN
              ,T.LOCAL_CURR_CD
              ,T.EXPORT_YN
              ,T.CO_RATE_TYPE_CD
              ,T.MX_YN
              ,T.COM_EMAIL
              ,T.OFFICER_POSITION
              ,T.ERP_YN
              ,T.HUB_CERT_ID
              ,T.TOMS_HUB_ID
              ,T.PARENT_COMPANY_CD
              ,(CASE WHEN T.COMPANY_CD = T.PARENT_COMPANY_CD THEN 'Y' ELSE 'N' END) AS PARENT_COMPANY_YN
          FROM COMPANY T
         WHERE T.PARENT_COMPANY_CD = #PARENT_COMPANY_CD#
         <isEqual property="APPLICATION_SERVICE_TYPE" compareValue="CL">
           AND T.COMPANY_CD = #COMPANY_CD#
         </isEqual>
        <include refid="select-paging-end" />
        ORDER BY PARENT_COMPANY_YN DESC, COMPANY_NAME
    </select>
    
    <select id="SM7001.selectSysconfigOptionInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT MAX(CASE WHEN CODE = 'AGING' THEN TXT_VALUE1 ELSE NULL END) AS  AGING <!-- 재고회전기간(월) -->
              ,MAX(CASE WHEN CODE = 'AGING_BUFFER' THEN TXT_VALUE1 ELSE NULL END) AS AGING_BUFFER <!-- 재고회전기간(월)-->
              ,MAX(CASE WHEN CODE = 'SP' THEN TXT_VALUE1 ELSE NULL END) AS SP_YN <!-- 가공공정기준 -->
              ,MAX(CASE WHEN CODE = 'WO' THEN TXT_VALUE1 ELSE NULL END) AS WO_YN <!-- 완정생산기준 -->
              ,MAX(CASE WHEN CODE = 'BOM_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS BOM_TYPE <!-- BOM 타입 -->
              ,MAX(CASE WHEN CODE = 'RUN_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS RUN_TYPE <!-- 운영구분 -->
              ,MAX(CASE WHEN CODE = 'TERM_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS    TERM_TYPE <!-- 인도조건 마감 -->
              ,MAX(CASE WHEN CODE = 'DOMESTIC_TERM' THEN TXT_VALUE1 ELSE NULL END) AS DOMESTIC_TERM <!-- 로컬 인도조건 -->
              ,MAX(CASE WHEN CODE = 'EXPORT_TERM' THEN TXT_VALUE1 ELSE NULL END) AS EXPORT_TERM <!-- 수출 인도조건 -->
              ,MAX(CASE WHEN CODE = 'LOCAL_CURRENCY' THEN TXT_VALUE1 ELSE NULL END) AS LOCAL_CURRENCY <!-- 관리통화 단위 -->
              ,MAX(CASE WHEN CODE = 'EXCHANGE_CURRENCY' THEN TXT_VALUE1 ELSE NULL END) AS EXCHANGE_CURRENCY <!-- 환산통화 단위 -->
              ,MAX(CASE WHEN CODE = 'EXCHANGE_CURRENCY_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS EXCHANGE_CURRENCY_TYPE <!-- 환산통화 타입 -->
              ,MAX(CASE WHEN CODE = 'FTA' THEN TXT_VALUE1 ELSE NULL END) AS FTA <!-- FTA협정 -->
              ,MAX(CASE WHEN CODE = 'ITEM_TYPE_DATA' THEN TXT_VALUE1 ELSE NULL END) AS ITEM_TYPE_DATA <!-- 판매유형(맵핑 데이터) -->
              ,MAX(CASE WHEN CODE = 'VENDOR_CO_TARGET' THEN TXT_VALUE1 ELSE NULL END) AS VENDOR_CO_TARGET <!-- 협력사 확인서 수취 대상 -->
              ,MAX(CASE WHEN CODE = 'CRTCT_MAT_RATE' THEN TXT_VALUE1 ELSE NULL END) AS CRTCT_MAT_RATE <!-- 중점관리 대상 자재 -->
              ,MAX(CASE WHEN CODE = 'CRTCT_GOOD_YN' THEN TXT_VALUE1 ELSE NULL END) AS CRTCT_GOOD_YN <!-- 중점관리 대상 자재 -->
              ,MAX(CASE WHEN CODE = 'CRTCT_IMP_YN' THEN TXT_VALUE1 ELSE NULL END) AS CRTCT_IMP_YN <!-- 중점관리 대상 자재 -->
              ,MAX(CASE WHEN CODE = 'CLOUD_SERVER_URL' THEN TXT_VALUE1 ELSE NULL END) AS CLOUD_SERVER_URL <!-- 클라우드 URL -->
              ,MAX(CASE WHEN CODE = 'TOMS_FTA_CERT_KEY' THEN TXT_VALUE1 ELSE NULL END) AS TOMS_FTA_CERT_KEY <!-- 라이센스 번호 -->
              ,MAX(CASE WHEN CODE = 'BOM_MM_DELETE' THEN TXT_VALUE1 ELSE NULL END) AS BOM_MM_DELETE <!-- BOM마감 정보 삭제여부 -->
              ,MAX(CASE WHEN CODE = 'BOM_ASSY_DEL_YN' THEN TXT_VALUE1 ELSE NULL END) AS BOM_ASSY_DEL_YN
              ,MAX(CASE WHEN CODE = 'CUSTOMER_CO_TARGET' THEN TXT_VALUE1 ELSE NULL END) AS CUSTOMER_CO_TARGET
              ,MAX(CASE WHEN CODE = 'CRTCT_SUBITEM_YN' THEN TXT_VALUE1 ELSE NULL END) AS CRTCT_SUBITEM_YN
              ,MAX(CASE WHEN CODE = 'CRTCT_EXPORT_YN' THEN TXT_VALUE1 ELSE NULL END) AS CRTCT_EXPORT_YN
              ,MAX(CASE WHEN CODE = 'EVALU_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS EVALU_TYPE
              ,MAX(CASE WHEN CODE = 'CO_CLOSING_UNIT' THEN TXT_VALUE1 ELSE NULL END) AS CO_CLOSING_UNIT
              ,MAX(CASE WHEN CODE = 'PROD_YYYYMM' THEN TXT_VALUE1 ELSE NULL END) AS PROD_YYYYMM
              ,MAX(CASE WHEN CODE = 'IM_ITEM_YN' THEN TXT_VALUE1 ELSE NULL END) AS IM_ITEM_YN
              ,MAX(CASE WHEN CODE = 'ORGAN_ISSUE_YN' THEN TXT_VALUE1 ELSE NULL END) AS ORGAN_ISSUE_YN
              ,MAX(CASE WHEN CODE = 'CERT_EXPORTER_SCOPE' THEN TXT_VALUE1 ELSE NULL END) AS CERT_EXPORTER_SCOPE
              ,MAX(CASE WHEN CODE = 'VENODR_FTA_FIX_YN' THEN TXT_VALUE1 ELSE NULL END) AS VENODR_FTA_FIX_YN
              ,MAX(CASE WHEN CODE = 'RESIDUAL_CO_YN' THEN TXT_VALUE1 ELSE NULL END) AS RESIDUAL_CO_YN
              ,MAX(CASE WHEN CODE = 'RVC_DETERMIN_YN' THEN TXT_VALUE1 ELSE NULL END) AS RVC_DETERMIN_YN
              ,MAX(CASE WHEN CODE = 'BOM_REQ_SUM_YN' THEN TXT_VALUE1 ELSE NULL END) AS BOM_REQ_SUM_YN
              ,MAX(CASE WHEN CODE = 'GEN_ORIGIN_REQ_YN' THEN TXT_VALUE1 ELSE NULL END) AS GEN_ORIGIN_REQ_YN
              ,MAX(CASE WHEN CODE = 'NON_ORGIN_RESN_YN' THEN TXT_VALUE1 ELSE NULL END) AS NON_ORGIN_RESN_YN
              ,MAX(CASE WHEN CODE = 'NON_ORGIN_RESN_REQ_YN' THEN TXT_VALUE1 ELSE NULL END) AS NON_ORGIN_RESN_REQ_YN
              ,MAX(CASE WHEN CODE = 'VENDOR_ID_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS VENDOR_ID_TYPE
              ,MAX(CASE WHEN CODE = 'VENDOR_ID_TYPE' THEN TXT_VALUE2 ELSE NULL END) AS VENDOR_ID_SUFFIX
              ,MAX(CASE WHEN CODE = 'VENDOR_PW_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS VENDOR_PW_TYPE
              ,MAX(CASE WHEN CODE = 'VENDOR_PW_TYPE' THEN TXT_VALUE2 ELSE NULL END) AS VENDOR_PW_SUFFIX
              ,MAX(CASE WHEN CODE = 'BATCH_DAILY_NUM' THEN TXT_VALUE1 ELSE NULL END) AS BATCH_DAILY_NUM
              ,MAX(CASE WHEN CODE = 'BATCH_MONTHLY_NUM' THEN TXT_VALUE1 ELSE NULL END) AS BATCH_MONTHLY_NUM
              ,MAX(CASE WHEN CODE = 'DAILY_SAELS_DE' THEN TXT_VALUE1 ELSE NULL END) AS DAILY_SAELS_DE
              ,MAX(CASE WHEN CODE = 'VENDOR_INFO_REQUIRED_YN' THEN TXT_VALUE1 ELSE NULL END) AS VENDOR_INFO_REQUIRED_YN
              ,MAX(CASE WHEN CODE = 'CUSTOMER_PRICE_APLY_YN' THEN TXT_VALUE1 ELSE NULL END) AS CUSTOMER_PRICE_APLY_YN
              ,MAX(CASE WHEN CODE = 'SALES_NO_PRICE_INC_YN' THEN TXT_VALUE1 ELSE NULL END) AS SALES_NO_PRICE_INC_YN
              ,MAX(CASE WHEN CODE = 'SUB_MAIL_SEND_YN' THEN TXT_VALUE1 ELSE NULL END) AS SUB_MAIL_SEND_YN
              ,MAX(CASE WHEN CODE = 'EVALUATION_SCOPE' THEN TXT_VALUE1 ELSE NULL END) AS EVALUATION_SCOPE
              ,MAX(CASE WHEN CODE = 'SALES_IN_ZERO_QTY_YN' THEN TXT_VALUE1 ELSE NULL END) AS SALES_IN_ZERO_QTY_YN
              ,MAX(CASE WHEN CODE = 'VAATZ_HUB_UNIT' THEN TXT_VALUE1 ELSE NULL END) AS VAATZ_HUB_UNIT
              ,MAX(CASE WHEN CODE = 'BOM_APPLY_ORDER' THEN TXT_VALUE1 ELSE NULL END) AS BOM_APPLY_ORDER
              ,MAX(CASE WHEN CODE = 'CRTCT_HS_YN' THEN TXT_VALUE1 ELSE NULL END) AS CRTCT_HS_YN
              ,MAX(CASE WHEN CODE = 'AMOUNT_DETERMIN_YN' THEN TXT_VALUE1 ELSE NULL END) AS AMOUNT_DETERMIN_YN 
              ,MAX(CASE WHEN CODE = 'USAGE_DETERMIN_YN' THEN TXT_VALUE1 ELSE NULL END) AS USAGE_DETERMIN_YN 
              ,MAX(CASE WHEN CODE = 'WEIGHT_DETERMIN_YN' THEN TXT_VALUE1 ELSE NULL END) AS WEIGHT_DETERMIN_YN
              ,MAX(CASE WHEN CODE = 'BOM_PRICE_ADJUST_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS BOM_PRICE_ADJUST_TYPE
              ,MAX(CASE WHEN CODE = 'BFO_DOC_JO_YN' THEN TXT_VALUE1 ELSE NULL END) AS BFO_DOC_JO_YN 
              ,MAX(CASE WHEN CODE = 'PKRIN_EXP_TARGET_YN' THEN TXT_VALUE1 ELSE NULL END) AS PKRIN_EXP_TARGET_YN
              ,MAX(CASE WHEN CODE = 'SEND_ORGIN_TARGET' THEN TXT_VALUE1 ELSE NULL END) AS SEND_ORGIN_TARGET
              ,MAX(CASE WHEN CODE = 'SEND_CO_TIMING' THEN TXT_VALUE1 ELSE NULL END) AS SEND_CO_TIMING
              ,MAX(CASE WHEN CODE = 'PASS_MAIL_SEND_YN' THEN TXT_VALUE1 ELSE NULL END) AS PASS_MAIL_SEND_YN
              ,MAX(CASE WHEN CODE = 'ORIGIN_DECSN_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS ORIGIN_DECSN_TYPE
              ,MAX(CASE WHEN CODE = 'RVC_REQUIRED_YN' THEN TXT_VALUE1 ELSE NULL END) AS RVC_REQUIRED_YN
              ,MAX(CASE WHEN CODE = 'ORIGIN_TRACE_MTH' THEN TXT_VALUE1 ELSE NULL END) AS ORIGIN_TRACE_MTH   
              ,MAX(CASE WHEN CODE = 'INV_IN_PRICE_TYP' THEN TXT_VALUE1 ELSE NULL END) AS INV_IN_PRICE_TYP
              ,MAX(CASE WHEN CODE = 'INV_IN_PRICE_MTH' THEN TXT_VALUE1 ELSE NULL END) AS INV_IN_PRICE_MTH
              ,MAX(CASE WHEN CODE = 'EMAIL_AUTH_INTG_YN' THEN TXT_VALUE1 ELSE NULL END) AS EMAIL_AUTH_INTG_YN
              ,MAX(CASE WHEN CODE = 'BOM_DIRC_CTRL_YN' THEN TXT_VALUE1 ELSE NULL END) AS BOM_DIRC_CTRL_YN
              ,MAX(CASE WHEN CODE = 'STD_EXCRATE_CURRENCY' THEN TXT_VALUE1 ELSE NULL END) AS STD_EXCRATE_CURRENCY
              ,MAX(CASE WHEN CODE = 'INV_BOM_ISSUE_YN' THEN TXT_VALUE1 ELSE NULL END) AS INV_BOM_ISSUE_YN
              ,MAX(CASE WHEN CODE = 'INV_INQTY_ADJUST_YN' THEN TXT_VALUE1 ELSE NULL END) AS INV_INQTY_ADJUST_YN
              ,MAX(CASE WHEN CODE = 'IF_DEL_MONTH' THEN TXT_VALUE1 ELSE NULL END) AS IF_DEL_MONTH
              ,MAX(CASE WHEN CODE = 'INV_PO_DECLARE_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS INV_PO_DECLARE_TYPE
              ,MAX(CASE WHEN CODE = 'OVER_COPER_CO_TRANS' THEN TXT_VALUE1 ELSE NULL END) AS OVER_COPER_CO_TRANS
              ,MAX(CASE WHEN CODE = 'INV_EXT_ISSUE_APY_YN' THEN TXT_VALUE1 ELSE NULL END) AS INV_EXT_ISSUE_APY_YN
              ,MAX(CASE WHEN CODE = 'INV_SD_DECLARE_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS INV_SD_DECLARE_TYPE
              ,MAX(CASE WHEN CODE = 'INV_IMP_ADJUST_TYPE' THEN TXT_VALUE1 ELSE NULL END) AS INV_IMP_ADJUST_TYPE
              ,MAX(CASE WHEN CODE = 'CR' THEN TXT_VALUE1 ELSE NULL END) AS CR_YN
              ,MAX(CASE WHEN CODE = 'PE_RUN_TARGET' THEN TXT_VALUE1 ELSE NULL END) AS PE_RUN_TARGET
              ,MAX(CASE WHEN CODE = 'EXCEL_MAX_ROWNUM' THEN TXT_VALUE1 ELSE NULL END) AS EXCEL_MAX_ROWNUM
              ,MAX(CASE WHEN CODE = 'CSV_MAX_ROWNUM' THEN TXT_VALUE1 ELSE NULL END) AS CSV_MAX_ROWNUM
              ,MAX(CASE WHEN CODE = 'REMOTE_SERVICE_VIEW' THEN TXT_VALUE1 ELSE NULL END) AS REMOTE_SERVICE_YN
              ,MAX(CASE WHEN CODE = 'REMOTE_SERVICE_VIEW' THEN TXT_VALUE2 ELSE NULL END) AS REMOTE_SERVICE_URL
          FROM CODE_DTL CD
         WHERE CD.COMPANY_CD = #COMPANY_CD#
           AND CD.CATEGORY_CD = 'SYS_CONFIG'
         GROUP BY COMPANY_CD, CATEGORY_CD
    </select>

    <update id="SM7001.updateSysconfigOptionInfo" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #COMPANY_CD# AS COMPANY_CD
		      ,'SYS_CONFIG' AS CATEGORY_CD
		      ,C.CODE
		      ,C.TXT_VALUE1
		      ,C.TXT_VALUE2
		      ,C.CODE_NAME
		      ,C.SORT_NO
		      ,#SESSION_USER_ID# AS USER_ID
		FROM   (
		      SELECT '재고회전 최대 개월수' AS CODE_NAME, 2 AS SORT_NO, 'AGING' AS CODE, COALESCE(#AGING#, '-12') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
			  SELECT '가공공정기준 충족여부' AS CODE_NAME, 3 AS SORT_NO, 'SP' AS CODE, COALESCE(#SP_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
			  SELECT '완전생산기준 충족여부' AS CODE_NAME, 4 AS SORT_NO, 'WO' AS CODE, COALESCE(#WO_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '적용할 BOM타입' AS CODE_NAME, 5 AS SORT_NO, 'BOM_TYPE' AS CODE, COALESCE(#BOM_TYPE#, 'S') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '환산할 화폐단위' AS CODE_NAME, 6 AS SORT_NO, 'EXCHANGE_CURRENCY' AS CODE, COALESCE(#EXCHANGE_CURRENCY#, 'KRW') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '회사 화폐단위' AS CODE_NAME, 7 AS SORT_NO, 'LOCAL_CURRENCY' AS CODE, COALESCE(#LOCAL_CURRENCY#, 'KRW') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '인도조건 마감타입' AS CODE_NAME, 8 AS SORT_NO, 'TERM_TYPE' AS CODE, COALESCE(#TERM_TYPE#, '1') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '수출 인도조건' AS CODE_NAME, 9 AS SORT_NO, 'EXPORT_TERM' AS CODE, COALESCE(#EXPORT_TERM#, 'FOB') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '로컬수출 거래조건' AS CODE_NAME, 10 AS SORT_NO, 'DOMESTIC_TERM' AS CODE, COALESCE(#DOMESTIC_TERM#, 'FOB') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '환율 적용조건' AS CODE_NAME, 11 AS SORT_NO, 'EXCHANGE_CURRENCY_TYPE' AS CODE, COALESCE(#EXCHANGE_CURRENCY_TYPE#, '4') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '시스템 운영구분' AS CODE_NAME, 12 AS SORT_NO, 'RUN_TYPE' AS CODE, COALESCE(#RUN_TYPE#, 'R') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '판매유형맵핑' AS CODE_NAME, 13 AS SORT_NO, 'ITEM_TYPE_DATA' AS CODE, COALESCE(#ITEM_TYPE_DATA#, 'S') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '협력사 중점관리대상' AS CODE_NAME, 14 AS SORT_NO, 'VENDOR_CO_TARGET' AS CODE, #VENDOR_CO_TARGET# AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '중점관리 대상 자재(제품별 재료비가 지정된 비율에 포함되는 자재)' AS CODE_NAME, 15 AS SORT_NO, 'CRTCT_MAT_RATE' AS CODE, COALESCE(#CRTCT_MAT_RATE#, '-1') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '중점관리 대상 자재(상품포함 여부)' AS CODE_NAME, 16 AS SORT_NO, 'CRTCT_GOOD_YN' AS CODE, COALESCE(#CRTCT_GOOD_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '중점관리 대상 자재(수입자재 포함 여부)' AS CODE_NAME, 17 AS SORT_NO, 'CRTCT_IMP_YN' AS CODE, COALESCE(#CRTCT_IMP_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '클라우드 URL' AS CODE_NAME, 18 AS SORT_NO, 'CLOUD_SERVER_URL' AS CODE, #CLOUD_SERVER_URL# AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT 'TOMS 라이센스 키' AS CODE_NAME, 19 AS SORT_NO, 'TOMS_FTA_CERT_KEY' AS CODE, #TOMS_FTA_CERT_KEY# AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
			  SELECT '기존 생산BOM 마감 정보 삭제여부' AS CODE_NAME, 20 AS SORT_NO, 'BOM_MM_DELETE' AS CODE, COALESCE(#BOM_MM_DELETE#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT 'FTA BOM 생성 시 자산구분이 반제품인 원재료 제거여부' AS CODE_NAME, 21 AS SORT_NO, 'BOM_ASSY_DEL_YN' AS CODE, COALESCE(#BOM_ASSY_DEL_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
			  SELECT '고객사 중점관리 대상' AS CODE_NAME, 22 AS SORT_NO, 'CUSTOMER_CO_TARGET' AS CODE, #CUSTOMER_CO_TARGET# AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '고객사 중점관리에 사급포함 여부' AS CODE_NAME, 23 AS SORT_NO, 'CRTCT_SUBITEM_YN' AS CODE, COALESCE(#CRTCT_SUBITEM_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
			  SELECT '고객사 중점관리에 수출포함 여부' AS CODE_NAME, 24 AS SORT_NO, 'CRTCT_EXPORT_YN' AS CODE, COALESCE(#CRTCT_EXPORT_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION 
		      SELECT '재고평가방법' AS CODE_NAME, 25 AS SORT_NO, 'EVALU_TYPE' AS CODE, COALESCE(#EVALU_TYPE#, 'A') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '회계마감기준' AS CODE_NAME, 26 AS SORT_NO, 'CO_CLOSING_UNIT' AS CODE, COALESCE(#CO_CLOSING_UNIT#, 'C') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '생산일자 기준' AS CODE_NAME, 27 AS SORT_NO, 'PROD_YYYYMM' AS CODE, COALESCE(#PROD_YYYYMM#, '2') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '재고회전 버퍼월' AS CODE_NAME, 28 AS SORT_NO, 'AGING_BUFFER' AS CODE, COALESCE(#AGING_BUFFER#, '0') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '중간재 적용여부' AS CODE_NAME, 29 AS SORT_NO, 'IM_ITEM_YN' AS CODE, COALESCE(#IM_ITEM_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '기관발급 적용여부' AS CODE_NAME, 30 AS SORT_NO, 'ORGAN_ISSUE_YN' AS CODE, COALESCE(#ORGAN_ISSUE_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '원산지발급 조직' AS CODE_NAME, 31 AS SORT_NO, 'CERT_EXPORTER_SCOPE' AS CODE, COALESCE(#CERT_EXPORTER_SCOPE#, 'C') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '협정 선택가능 여부' AS CODE_NAME, 32 AS SORT_NO, 'VENODR_FTA_FIX_YN' AS CODE, COALESCE(#VENODR_FTA_FIX_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '부산물 충족여부' AS CODE_NAME, 33 AS SORT_NO, 'RESIDUAL_CO_YN' AS CODE, COALESCE(#RESIDUAL_CO_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT 'RVC 판정여부' AS CODE_NAME, 34 AS SORT_NO, 'RVC_DETERMIN_YN' AS CODE, COALESCE(#RVC_DETERMIN_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT 'BOM소요량 적용방법(S:SUM, X:MAX, N:MIN, A:AVG)' AS CODE_NAME, 35 AS SORT_NO, 'BOM_REQ_SUM_YN' AS CODE, COALESCE(#BOM_REQ_SUM_YN#, 'A') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '일반원산지 필수여부(Y:필수, N:필수아님)' AS CODE_NAME, 36 AS SORT_NO, 'GEN_ORIGIN_REQ_YN' AS CODE, COALESCE(#GEN_ORIGIN_REQ_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '역외사유 적용여부(Y:적용, N:미적용)' AS CODE_NAME, 37 AS SORT_NO, 'NON_ORGIN_RESN_YN' AS CODE, COALESCE(#NON_ORGIN_RESN_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '역외사유 필수여부(Y:필수, N:필수아님)' AS CODE_NAME, 38 AS SORT_NO, 'NON_ORGIN_RESN_REQ_YN' AS CODE, COALESCE(#NON_ORGIN_RESN_REQ_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2  UNION
		      SELECT '협력사 ID 설정(1:협력사 코드, 2:사업자번호(숫자만), 99:생성안함)' AS CODE_NAME, 39 AS SORT_NO, 'VENDOR_ID_TYPE' AS CODE, COALESCE(#VENDOR_ID_TYPE#, '1') AS TXT_VALUE1, #VENDOR_ID_SUFFIX# AS TXT_VALUE2  UNION
		      SELECT '협력사 비밀번호 설정(1:협력사 코드, 2:사업자번호(숫자만), 99:생성안함)' AS CODE_NAME, 40 AS SORT_NO, 'VENDOR_PW_TYPE' AS CODE, COALESCE(#VENDOR_PW_TYPE#, '2') AS TXT_VALUE1, #VENDOR_PW_SUFFIX# AS TXT_VALUE2 UNION
              SELECT '일마감 조정일수(0:당일,-1~N:지정된 이전일자)' AS CODE_NAME, 41 AS SORT_NO, 'BATCH_DAILY_NUM' AS CODE, COALESCE(#BATCH_DAILY_NUM#, '-1') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '월마감 조정월수(0:당월,-1~N:지정된 이전월)' AS CODE_NAME, 42 AS SORT_NO, 'BATCH_MONTHLY_NUM' AS CODE, COALESCE(#BATCH_MONTHLY_NUM#, '-1') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '일배치 매출처리 구분(E:직수출만 처리, D:내수만 처리, DE:내수,수출 모두 처리)' AS CODE_NAME, 43 AS SORT_NO, 'DAILY_SAELS_DE' AS CODE, COALESCE(#DAILY_SAELS_DE#, 'E') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '협력사 포탈내 협력사 정보 필수입력 여부(Y:필수, N:미필수)' AS CODE_NAME, 44 AS SORT_NO, 'VENDOR_INFO_REQUIRED_YN' AS CODE, COALESCE(#VENDOR_INFO_REQUIRED_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '고객사 품목단가 적용여부(Y:적용, N:미적용)' AS CODE_NAME, 45 AS SORT_NO, 'CUSTOMER_PRICE_APLY_YN' AS CODE, COALESCE(#CUSTOMER_PRICE_APLY_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '매출단가 0이하 품목적용여부(Y:적용, N:미적용)' AS CODE_NAME, 46 AS SORT_NO, 'SALES_NO_PRICE_INC_YN' AS CODE, COALESCE(#SALES_NO_PRICE_INC_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '사급확인서 요청 및 승인메일 발송여부(Y:발송, N:미발송)' AS CODE_NAME, 47 AS SORT_NO, 'SUB_MAIL_SEND_YN' AS CODE, COALESCE(#SUB_MAIL_SEND_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '평가범위(1:관계사별 평가, 2:법인별 평가)' AS CODE_NAME, 48 AS SORT_NO, 'EVALUATION_SCOPE' AS CODE, COALESCE(#EVALUATION_SCOPE#, '2') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
		      SELECT '판매단가 조정금액 포함여부(Y:포함, N:제외)' AS CODE_NAME, 49 AS SORT_NO, 'SALES_IN_ZERO_QTY_YN' AS CODE, COALESCE(#SALES_IN_ZERO_QTY_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT 'HKMC바츠 연계단위(C:법인별, D:사업부별)' AS CODE_NAME, 50 AS SORT_NO, 'VAATZ_HUB_UNIT' AS CODE, COALESCE(#VAATZ_HUB_UNIT#, 'C') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '생산BOM적용시 BOM우선순위(1:생산BOM>표준BOM, 2:표준BOM>생산BOM)' AS CODE_NAME, 51 AS SORT_NO, 'BOM_APPLY_ORDER' AS CODE, COALESCE(#BOM_APPLY_ORDER#, '1') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '중점관리 대상 자재(세번 미변경 자재)' AS CODE_NAME, 52 AS SORT_NO, 'CRTCT_HS_YN' AS CODE, COALESCE(#CRTCT_HS_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '미소기준 판정여부(금액)' AS CODE_NAME, 53 AS SORT_NO, 'AMOUNT_DETERMIN_YN' AS CODE, COALESCE(#AMOUNT_DETERMIN_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '미소기준 판정여부(소요량)' AS CODE_NAME, 54 AS SORT_NO, 'USAGE_DETERMIN_YN' AS CODE, COALESCE(#USAGE_DETERMIN_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '미소기준 판정여부(중량)' AS CODE_NAME, 55 AS SORT_NO, 'WEIGHT_DETERMIN_YN' AS CODE, COALESCE(#WEIGHT_DETERMIN_YN#, 'Y') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT 'BOM 환산비율 적용방식(D:나누기, M:곱하기)' AS CODE_NAME, 56 AS SORT_NO, 'BOM_PRICE_ADJUST_TYPE' AS CODE, COALESCE(#BOM_PRICE_ADJUST_TYPE#, 'D') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '국내제조 포괄확인서 자재 원산지 표시(A 또는 NULL:모든 자재, Y:역내자재, N:역외자재)' AS CODE_NAME, 57 AS SORT_NO, 'BFO_DOC_JO_YN' AS CODE, COALESCE(#BFO_DOC_JO_YN#, 'A') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '인도수출 소명대상 여부(Y:자동지정, N:미지정)' AS CODE_NAME, 58 AS SORT_NO, 'PKRIN_EXP_TARGET_YN' AS CODE, COALESCE(#PKRIN_EXP_TARGET_YN#, 'N') AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '원산지 전송대상 지정(D:내수, E:수출, A:모든 매출)' AS CODE_NAME, 59 AS SORT_NO, 'SEND_ORGIN_TARGET' AS CODE, #SEND_ORGIN_TARGET# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT 'CO 전송시점 지정(1:CO 발급, 2:직수출 판정+CO발급)' AS CODE_NAME, 60 AS SORT_NO, 'SEND_CO_TIMING' AS CODE, #SEND_CO_TIMING# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT 'FTA PASS 메일 발송여부(Y/N)' AS CODE_NAME, 61 AS SORT_NO, 'PASS_MAIL_SEND_YN' AS CODE, #PASS_MAIL_SEND_YN# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '원산지 지위 결정방법(1:이분법, 2:비율법-금액기준)' AS CODE_NAME, 62 AS SORT_NO, 'ORIGIN_DECSN_TYPE' AS CODE, #ORIGIN_DECSN_TYPE# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '부가가치비율 필수여부(Y/N)' AS CODE_NAME, 63 AS SORT_NO, 'RVC_REQUIRED_YN' AS CODE, #RVC_REQUIRED_YN# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '원산지 판정방법(A:Aging기번, I:개별법)' AS CODE_NAME, 64 AS SORT_NO, 'ORIGIN_TRACE_MTH' AS CODE, #ORIGIN_TRACE_MTH# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '단가 계산범위(RNG:기간내, CUR:최근)' AS CODE_NAME, 65 AS SORT_NO, 'INV_IN_PRICE_TYP' AS CODE, #INV_IN_PRICE_TYP# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '단가 계산식(AVG:평균, MIN:최소, MAX:최대, MMX:보수적)' AS CODE_NAME, 66 AS SORT_NO, 'INV_IN_PRICE_MTH' AS CODE, #INV_IN_PRICE_MTH# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '메일 계정통합 여부(Y/N)' AS CODE_NAME, 67 AS SORT_NO, 'EMAIL_AUTH_INTG_YN' AS CODE, #EMAIL_AUTH_INTG_YN# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT 'BOM 투입일 관리여부(Y/N)' AS CODE_NAME, 68 AS SORT_NO, 'BOM_DIRC_CTRL_YN' AS CODE, #BOM_DIRC_CTRL_YN# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '기준환율통화' AS CODE_NAME, 69 AS SORT_NO, 'STD_EXCRATE_CURRENCY' AS CODE, #STD_EXCRATE_CURRENCY# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '원자재 투입출고 자료(R:생산실적 적용, B:BOM 적용)' AS CODE_NAME, 70 AS SORT_NO, 'INV_BOM_ISSUE_YN' AS CODE, #INV_BOM_ISSUE_YN# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '재고조정수량 적용 여부' AS CODE_NAME, 71 AS SORT_NO, 'INV_INQTY_ADJUST_YN' AS CODE, #INV_INQTY_ADJUST_YN# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '이력정보 삭제 주기(-개월수)' AS CODE_NAME, 72 AS SORT_NO, 'IF_DEL_MONTH' AS CODE, #IF_DEL_MONTH# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '구매 C/O 신고구분(I:인보이스 번호, D:수입신고 번호)' AS CODE_NAME, 73 AS SORT_NO, 'INV_PO_DECLARE_TYPE' AS CODE, #INV_PO_DECLARE_TYPE# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '법인간 교환 조건(1:원산지 판정건, 2:증명서 발급건, 3:모두 역내산 전송)' AS CODE_NAME, 74 AS SORT_NO, 'OVER_COPER_CO_TRANS' AS CODE, #OVER_COPER_CO_TRANS# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '수불부 기타출고 단가 적용여부(Y/N)' AS CODE_NAME, 75 AS SORT_NO, 'INV_EXT_ISSUE_APY_YN' AS CODE, #INV_EXT_ISSUE_APY_YN# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '수출 C/O 신고구분(I:인보이스 번호, E:수출신고 번호)' AS CODE_NAME, 76 AS SORT_NO, 'INV_SD_DECLARE_TYPE' AS CODE, #INV_SD_DECLARE_TYPE# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '수입가격 환산기준((I:인보이스 번호, D:수입신고 번호)' AS CODE_NAME, 77 AS SORT_NO, 'INV_IMP_ADJUST_TYPE' AS CODE, #INV_IMP_ADJUST_TYPE# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT 'CR충족여부(Y/N)' AS CODE_NAME, 78 AS SORT_NO, 'CR' AS CODE, #CR_YN# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT 'PE판정대상(D:내수만, E:수출만, A:내수+수출)' AS CODE_NAME, 79 AS SORT_NO, 'PE_RUN_TARGET' AS CODE, #PE_RUN_TARGET# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '엑셀파일 최대 표시 ROW수' AS CODE_NAME, 80 AS SORT_NO, 'EXCEL_MAX_ROWNUM' AS CODE, #EXCEL_MAX_ROWNUM# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT 'CSV파일 최대 표시 ROW수' AS CODE_NAME, 81 AS SORT_NO, 'CSV_MAX_ROWNUM' AS CODE, #CSV_MAX_ROWNUM# AS TXT_VALUE1, NULL AS TXT_VALUE2 UNION
              SELECT '구글 원격지원 표시여부(TXT_VALUE1:Y/N, TXT_VALUE2:접속URL)' AS CODE_NAME, 82 AS SORT_NO, 'REMOTE_SERVICE_VIEW' AS CODE, #REMOTE_SERVICE_YN# AS TXT_VALUE1, #REMOTE_SERVICE_URL# AS TXT_VALUE2
		    ) C
		),
		UPDATE_OPTOIN AS( 
		UPDATE CODE_DTL CD
		SET    TXT_VALUE1  = C.TXT_VALUE1
		      ,TXT_VALUE2  = C.TXT_VALUE2
		      ,UPDATE_DATE = NOW()::TIMESTAMP
		      ,UPDATE_BY   = C.USER_ID
	    FROM UPSERT C
		WHERE  CD.COMPANY_CD = C.COMPANY_CD
		AND    CD.CATEGORY_CD = C.CATEGORY_CD
		AND    CD.CODE = C.CODE
		)
		INSERT INTO CODE_DTL
		    (COMPANY_CD,CATEGORY_CD,CODE,CODE_NAME,CODE_NAME_ENG,SORT_NO,TXT_VALUE1
		    ,TXT_VALUE2
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		    SELECT C.COMPANY_CD
		          ,C.CATEGORY_CD
		          ,C.CODE
		          ,C.CODE_NAME
		          ,C.CODE_NAME
		          ,C.SORT_NO
		          ,C.TXT_VALUE1
		          ,C.TXT_VALUE2
		          ,NOW()::TIMESTAMP
		          ,C.USER_ID
		          ,NOW()::TIMESTAMP
		          ,C.USER_ID
		    FROM   UPSERT C
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   CODE_DTL CD
		            WHERE  CD.COMPANY_CD = C.COMPANY_CD AND CD.CATEGORY_CD = C.CATEGORY_CD
		            AND    CD.CODE = C.CODE)
    </update>

    <update id="SM7001.updateCompanyCertIDInfo" parameterClass="java.util.Map">
        UPDATE COMPANY
           SET HUB_CERT_ID = #HUB_CERT_ID#
              ,TOMS_HUB_ID = #TOMS_HUB_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
    </update>

    <select id="SM7001.selectHubCertCustomerList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT C.COMPANY_CD
              ,C.CUSTOMER_CD <!-- 고객사 코드 -->
              ,C.CUSTOMER_NAME <!-- 고객사 명 -->
              ,C.CUSTOMER_NAME_ENG <!-- 고객사 영문명 -->
              ,C.PRESIDENT_NAME <!-- 대표자명 -->
              ,C.PRESIDENT_NAME_ENG <!-- 대표자 영문명 -->
              ,C.BUSINESS_NO <!-- 사업자등록번호 -->
              ,C.PHONE_NO <!-- 전화번호 -->
              ,C.FAX_NO <!-- 팩스번호 -->
              ,C.CHARGE_EMAIL <!-- 이메일 -->
              ,C.ADDRESS <!-- 주소 -->
              ,C.ADDRESS_ENG <!-- 주소(영문) -->
              ,C.HUB_CERT_ID <!-- 인증ID -->
          FROM CUSTOMER C
         WHERE C.COMPANY_CD = #COMPANY_CD#
         <isNotEmpty property="CUSTOMER_CD"> <!-- 검색조건 -->
           AND C.CUSTOMER_CD = #CUSTOMER_CD#
         </isNotEmpty>
           AND C.HUB_CERT_ID IS NOT NULL
         ORDER BY C.CUSTOMER_CD
    </select>

    <update id="SM7001.updateHubCertCustomerInfo" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #COMPANY_CD#         AS COMPANY_CD
		      ,#CUSTOMER_CD#        AS CUSTOMER_CD
		      ,#CUSTOMER_NAME#      AS CUSTOMER_NAME
		      ,#CUSTOMER_NAME_ENG#  AS CUSTOMER_NAME_ENG
		      ,#PRESIDENT_NAME#     AS PRESIDENT_NAME
		      ,#PRESIDENT_NAME_ENG# AS PRESIDENT_NAME_ENG
		      ,#BUSINESS_NO#        AS BUSINESS_NO
		      ,#PHONE_NO#           AS PHONE_NO
		      ,#FAX_NO#             AS FAX_NO
		      ,#CHARGE_EMAIL#       AS CHARGE_EMAIL
		      ,#ADDRESS#            AS ADDRESS
		      ,#ADDRESS_ENG#        AS ADDRESS_ENG
		      ,#HUB_CERT_ID#        AS HUB_CERT_ID
		      ,#USER_ID#            AS USER_ID
		),
		UPDATE_OPTOIN AS
		( 
		UPDATE CUSTOMER C
		   SET CUSTOMER_NAME = D.CUSTOMER_NAME
		      ,CUSTOMER_NAME_ENG = D.CUSTOMER_NAME_ENG
		      ,PRESIDENT_NAME = D.PRESIDENT_NAME
		      ,PRESIDENT_NAME_ENG = D.PRESIDENT_NAME_ENG
		      ,BUSINESS_NO = D.BUSINESS_NO
		      ,PHONE_NO = D.PHONE_NO
		      ,FAX_NO = D.FAX_NO
		      ,CHARGE_EMAIL = D.CHARGE_EMAIL
		      ,ADDRESS = D.ADDRESS
		      ,ADDRESS_ENG = D.ADDRESS_ENG
		      ,HUB_CERT_ID = D.HUB_CERT_ID
		      ,UPDATE_DATE = NOW()::TIMESTAMP
		      ,UPDATE_BY = D.USER_ID
		FROM UPSERT D      
		WHERE  C.COMPANY_CD = D.COMPANY_CD
		  AND  C.CUSTOMER_CD = D.CUSTOMER_CD
		) 
		INSERT INTO CUSTOMER
		    (COMPANY_CD
		    ,CUSTOMER_CD
		    ,CUSTOMER_NAME
		    ,CUSTOMER_NAME_ENG
		    ,PRESIDENT_NAME
		    ,PRESIDENT_NAME_ENG
		    ,BUSINESS_NO
		    ,PHONE_NO
		    ,FAX_NO
		    ,CHARGE_EMAIL
		    ,ADDRESS
		    ,ADDRESS_ENG
		    ,HUB_CERT_ID
		    ,NATION_CD
		    ,CO_TARGET_YN
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		    SELECT D.COMPANY_CD
		          ,D.CUSTOMER_CD
		          ,D.CUSTOMER_NAME
		          ,D.CUSTOMER_NAME_ENG
		          ,D.PRESIDENT_NAME
		          ,D.PRESIDENT_NAME_ENG
		          ,D.BUSINESS_NO
		          ,D.PHONE_NO
		          ,D.FAX_NO
		          ,D.CHARGE_EMAIL
		          ,D.ADDRESS
		          ,D.ADDRESS_ENG
		          ,D.HUB_CERT_ID
		          ,'KR'
		          ,'N'
		          ,NOW()::TIMESTAMP
		          ,D.USER_ID
		          ,NOW()::TIMESTAMP
		          ,D.USER_ID
		    FROM   UPSERT D
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   CUSTOMER C WHERE  C.COMPANY_CD = D.COMPANY_CD AND C.CUSTOMER_CD = D.CUSTOMER_CD)
    </update>
    
    <select id="SM7001.selectHubCertID" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
	    SELECT COUNT(1) AS DUPLICATE_CNT
		  FROM CUSTOMER C
		 WHERE COMPANY_CD = #COMPANY_CD#
		   AND HUB_CERT_ID = #HUB_CERT_ID#
    </select>
    
    <delete id="SM7001.deleteHubCertCustomerInfo" parameterClass="java.util.Map">
        UPDATE CUSTOMER
           SET HUB_CERT_ID = NULL
              ,UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CUSTOMER_CD = #CUSTOMER_CD#
    </delete>

    <select id="SM7001.selectHubSalesCustomerList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SC.COMPANY_CD <!-- 회사코드-->
              ,SC.DIVISION_CD <!-- 판매 사업부코드-->
              ,FN_GET_DIVISION(SC.COMPANY_CD, SC.DIVISION_CD, 'DIVISION_NAME') AS DIVISION_NAME <!-- 판매 사업부명-->
              ,SC.CUSTOMER_CD <!-- C/O 발급 고객사 코드-->
              ,C.CUSTOMER_NAME <!-- C/O 발급 고객사명-->
              ,C.CUSTOMER_NAME_ENG <!-- C/O 발급 고객사 영문명-->
              ,C.BUSINESS_NO <!-- 사업자등록번호-->
              ,C.PHONE_NO <!-- 전화번호-->
              ,C.FAX_NO <!-- 팩스번호-->
              ,C.ADDRESS <!-- 주소-->
              ,C.ADDRESS_ENG <!-- 주소영문-->
              ,C.HUB_CERT_ID <!-- 인증ID-->
              ,SC.SALES_CUSTOMER_CD <!-- 거래고객사 코드-->
              ,SC.SALES_CUSTOMER_NAME <!-- 고객사명-->
              ,SC.SALES_CUSTOMER_NAME_ENG <!-- 고객사 영문명-->
              ,SC.REMARK <!-- 비고-->
          FROM SALES_CUSTOMER SC
               INNER JOIN CUSTOMER C
                  ON C.COMPANY_CD = SC.COMPANY_CD
                 AND C.CUSTOMER_CD = SC.CUSTOMER_CD
         WHERE SC.COMPANY_CD = #COMPANY_CD#
         ORDER BY SC.CUSTOMER_CD
    </select>

    <update id="SM7001.updateHubSalesCustomerInfo" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #COMPANY_CD#              AS COMPANY_CD
		      ,#DIVISION_CD#             AS DIVISION_CD
		      ,#CUSTOMER_CD#             AS CUSTOMER_CD
		      ,#SALES_CUSTOMER_CD#       AS SALES_CUSTOMER_CD
		      ,#SALES_CUSTOMER_NAME#     AS SALES_CUSTOMER_NAME
		      ,#SALES_CUSTOMER_NAME_ENG# AS SALES_CUSTOMER_NAME_ENG
		      ,#REMARK#                  AS REMARK
		      ,#USER_ID#                 AS USER_ID
		),
		UPDATE_OPTOIN AS
		( 
		UPDATE SALES_CUSTOMER SC
		SET    SALES_CUSTOMER_NAME     = D.SALES_CUSTOMER_NAME
		      ,SALES_CUSTOMER_NAME_ENG = D.SALES_CUSTOMER_NAME_ENG
		      ,REMARK                  = D.REMARK
		      ,UPDATE_DATE             = NOW()::TIMESTAMP
		      ,UPDATE_BY               = D.USER_ID FROM UPSERT D
		WHERE  SC.COMPANY_CD = D.COMPANY_CD
		AND    SC.DIVISION_CD = D.DIVISION_CD
		AND    SC.CUSTOMER_CD = D.CUSTOMER_CD
		AND    SC.SALES_CUSTOMER_CD = D.SALES_CUSTOMER_CD
		) 
		INSERT INTO SALES_CUSTOMER
		    (COMPANY_CD
		    ,DIVISION_CD
		    ,CUSTOMER_CD
		    ,SALES_CUSTOMER_CD
		    ,SALES_CUSTOMER_NAME
		    ,SALES_CUSTOMER_NAME_ENG
		    ,REMARK
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		    SELECT D.COMPANY_CD
		          ,D.DIVISION_CD
		          ,D.CUSTOMER_CD
		          ,D.SALES_CUSTOMER_CD
		          ,D.SALES_CUSTOMER_NAME
		          ,D.SALES_CUSTOMER_NAME_ENG
		          ,D.REMARK
		          ,NOW()::TIMESTAMP
		          ,D.USER_ID
		          ,NOW()::TIMESTAMP
		          ,D.USER_ID
		    FROM   UPSERT D
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   SALES_CUSTOMER SC
		            WHERE  SC.COMPANY_CD = D.COMPANY_CD AND SC.DIVISION_CD = D.DIVISION_CD AND SC.CUSTOMER_CD = D.CUSTOMER_CD AND SC.SALES_CUSTOMER_CD = D.SALES_CUSTOMER_CD)
    </update>

    <delete id="SM7001.deleteHubSalesCustomerInfo" parameterClass="java.util.Map">
        DELETE FROM SALES_CUSTOMER
         WHERE COMPANY_CD = #COMPANY_CD#
           AND DIVISION_CD = #DIVISION_CD#
           AND CUSTOMER_CD = #CUSTOMER_CD#
           AND SALES_CUSTOMER_CD = #SALES_CUSTOMER_CD#
    </delete>

    <select id="SM7001.selectHubSignatureList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT S.SIGNATURE_SEQ
              ,S.COMPANY_CD
              ,S.DIVISION_CD
              ,S.START_DATE
              ,S.END_DATE
              ,S.SIGNATURE_NAME
              ,S.SIGNATURE_NAME_ENG
              ,S.POSITION
              ,S.POSITION_ENG
              ,S.PHONE_NO
              ,S.EMAIL
          FROM SIGNATURE S
         WHERE S.COMPANY_CD = #COMPANY_CD#
           AND S.HUB_CERT_YN = 'Y'
         ORDER BY S.SIGNATURE_SEQ
    </select>
    
    <select id="SM7001.selectSignatureNumber" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT nextval('SEQ_SIGNATURE_01') AS SIGNATURE_SEQ
    </select>

    <update id="SM7001.updateHubSignatureInfo" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #SIGNATURE_SEQ#::NUMERIC AS SIGNATURE_SEQ
		      ,#COMPANY_CD# AS COMPANY_CD
		      ,#DIVISION_CD# AS DIVISION_CD
		      ,#SIGNATURE_NAME# AS SIGNATURE_NAME
		      ,#SIGNATURE_NAME_ENG# AS SIGNATURE_NAME_ENG
		      ,#POSITION# AS POSITION
		      ,#POSITION_ENG# AS POSITION_ENG
		      ,#PHONE_NO# AS PHONE_NO
		      ,#EMAIL# AS EMAIL
		      ,#START_DATE# AS START_DATE
		      ,#END_DATE# AS END_DATE
		      ,#USER_ID# AS USER_ID
		      <isNotEmpty property="SIGNATURE_IMAGE">,#SIGNATURE_IMAGE# AS SIGNATURE_IMAGE</isNotEmpty> 
		      
		      
		      
		),
		UPDATE_OPTOIN AS
		( 
		UPDATE SIGNATURE S
		SET    SIGNATURE_NAME     = D.SIGNATURE_NAME
		      ,SIGNATURE_NAME_ENG = D.SIGNATURE_NAME_ENG
		      ,POSITION           = D.POSITION
		      ,POSITION_ENG       = D.POSITION_ENG
		      ,PHONE_NO           = D.PHONE_NO
		      ,EMAIL              = D.EMAIL
		      ,START_DATE         = D.START_DATE
		      ,END_DATE           = D.END_DATE
		      <isNotEmpty property="SIGNATURE_IMAGE">
		      ,SIGNATURE_IMAGE = D.SIGNATURE_IMAGE
		      </isNotEmpty>      
		      ,HUB_CERT_YN        = #HUB_CERT_YN#
		      ,UPDATE_DATE        = NOW()::TIMESTAMP
		      ,UPDATE_BY          = D.USER_ID FROM UPSERT D WHERE  S.COMPANY_CD = D.COMPANY_CD AND S.SIGNATURE_SEQ = D.SIGNATURE_SEQ
		)
		INSERT INTO SIGNATURE
		    (SIGNATURE_SEQ
		    ,COMPANY_CD
		    ,DIVISION_CD
		    ,START_DATE
		    ,END_DATE
		    ,SIGNATURE_NAME
		    ,SIGNATURE_NAME_ENG
		    ,POSITION
		    ,POSITION_ENG
		    <isNotEmpty property="SIGNATURE_IMAGE">
		    ,SIGNATURE_IMAGE
		    </isNotEmpty>
		    ,PHONE_NO
		    ,EMAIL
		    ,HUB_CERT_YN
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		    SELECT D.SIGNATURE_SEQ
		          ,D.COMPANY_CD
		          ,D.DIVISION_CD
		          ,D.START_DATE
		          ,D.END_DATE
		          ,D.SIGNATURE_NAME
		          ,D.SIGNATURE_NAME_ENG
		          ,D.POSITION
		          ,D.POSITION_ENG
	              <isNotEmpty property="SIGNATURE_IMAGE">
	                ,D.SIGNATURE_IMAGE
	              </isNotEmpty>
		          ,D.PHONE_NO
		          ,D.EMAIL
		          ,'Y'
		          ,NOW()::TIMESTAMP
		          ,D.USER_ID
		          ,NOW()::TIMESTAMP
		          ,D.USER_ID
		    FROM   UPSERT D
		    WHERE  NOT EXISTS (SELECT 1 FROM   SIGNATURE S WHERE  S.COMPANY_CD = D.COMPANY_CD AND S.SIGNATURE_SEQ = D.SIGNATURE_SEQ)
    </update>

    <delete id="SM7001.deleteHubSignatureInfo" parameterClass="java.util.Map">
        UPDATE SIGNATURE
           SET HUB_CERT_YN = 'N'
              ,UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND SIGNATURE_SEQ = FN_PG_GET_CAST_NUM(#SIGNATURE_SEQ#)
    </delete>

    <!-- SM7002 START :: CARLOS -->
    <select id="SM7002.selectDivisionList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT T.COMPANY_CD
                  ,T.DIVISION_CD
                  ,T.DIVISION_NAME
                  ,T.DIVISION_NAME_ENG
                  ,T.DIVISION_TYPE
                  ,FN_GET_COMMON_CD(T.COMPANY_CD, 'DIVISION_TYPE', T.DIVISION_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS DIVISION_TYPE_NAME
                  ,T.STATUS
                  ,T.BUSINESS_NO
                  ,T.OFFICER
                  ,T.OFFICER_PHONE_NO
                  ,T.OFFICER_EMAIL
                  ,T.PHONE_NO
                  ,T.FAX_NO
                  ,T.ZIP_CD
                  ,T.ADDRESS1
                  ,T.ADDRESS2
                  ,T.ADDRESS1_ENG
                  ,T.ADDRESS2_ENG
                  ,T.CO_CERTIFIED_EXPORTER_YN
                  ,T.CERTIFICATION_NO
                  ,T.PRESIDENT_NAME
                  ,T.PRESIDENT_NAME_ENG
                  ,T.CUSTOMS_CD
                  ,CD.CODE_NAME AS CUSTOMS_NAME
                  ,T.ORGAN_VENDOR_CD
                  ,T.ORGAN_USER_ID
                  ,T.ORGAN_DOC_NO
                  ,T.HUB_CERT_ID
                  ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                  ,T.CREATE_BY
                  ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
                  ,T.UPDATE_BY
              FROM DIVISION T
                   LEFT OUTER JOIN KCS_CODE_MST CD
	                 ON CD.CODE = T.CUSTOMS_CD
	                AND CD.CATEGORY_CD = 'CT'
             WHERE T.COMPANY_CD = #COMPANY_CD#
            <isNotEmpty property="DIVISION_CD">
                AND T.DIVISION_CD = #DIVISION_CD#
            </isNotEmpty>
            <isEqual property="USE_YN" compareValue="Y">
                AND T.STATUS = 'Y'
            </isEqual> 
            <isNotEmpty property="schKeyWord">
                AND UPPER(T.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
            <isEqual property="SEARCH_TYPE" compareValue="CE">
	          AND NOT EXISTS(SELECT 1
	                           FROM CERTIFICATION_DIV CD
	                          WHERE CD.COMPANY_CD = #COMPANY_CD#
	                            AND CD.CERTIFICATION_SEQ = #CERTIFICATION_SEQ#::numeric
	                            AND CD.DIVISION_CD = T.DIVISION_CD)
	        </isEqual>
        <include refid="select-paging-end" />
         ORDER BY DIVISION_CD
    </select>

    <select id="SM7002.selectDivisionInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.COMPANY_CD
              ,T.DIVISION_CD
              ,T.DIVISION_NAME
              ,T.DIVISION_NAME_ENG
              ,T.DIVISION_TYPE
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'DIVISION_TYPE', T.DIVISION_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS DIVISION_TYPE_NAME
              ,T.STATUS
              ,T.BUSINESS_NO
              ,T.OFFICER
              ,T.OFFICER_PHONE_NO
              ,T.OFFICER_EMAIL
              ,T.PHONE_NO
              ,T.FAX_NO
              ,T.ZIP_CD
              ,T.ADDRESS1
              ,T.ADDRESS2
              ,T.ADDRESS1_ENG
              ,T.ADDRESS2_ENG
              ,T.CO_CERTIFIED_EXPORTER_YN
              ,T.CERTIFICATION_NO
              ,T.PRESIDENT_NAME
              ,T.PRESIDENT_NAME_ENG
              ,T.CUSTOMS_CD
              ,CD.CODE_NAME AS CUSTOMS_NAME
              ,T.ORGAN_VENDOR_CD
              ,T.ORGAN_USER_ID
              ,T.ORGAN_DOC_NO
              ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,T.CREATE_BY
              ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,T.UPDATE_BY
          FROM DIVISION T
               LEFT OUTER JOIN KCS_CODE_MST CD
                 ON CD.CODE = T.CUSTOMS_CD
                AND CD.CATEGORY_CD = 'CT'
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.DIVISION_CD = #DIVISION_CD#
    </select>

    <select id="SM7002.selectDivisionDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(1) DUPLICATE
          FROM DIVISION
         WHERE COMPANY_CD = #COMPANY_CD#
           AND DIVISION_CD = #DIVISION_CD#
    </select>

    <insert id="SM7002.insertDivisionInfo" parameterClass="java.util.Map">
        INSERT INTO DIVISION(
             COMPANY_CD
            ,DIVISION_CD
            ,DIVISION_NAME
            ,DIVISION_NAME_ENG
            ,DIVISION_TYPE
            ,STATUS
            ,BUSINESS_NO
            ,OFFICER
            ,OFFICER_PHONE_NO
            ,OFFICER_EMAIL
            ,PHONE_NO
            ,FAX_NO
            ,ZIP_CD
            ,ADDRESS1
            ,ADDRESS2
            ,ADDRESS1_ENG
            ,ADDRESS2_ENG
            ,CO_CERTIFIED_EXPORTER_YN
            ,CERTIFICATION_NO
            ,PRESIDENT_NAME
            ,PRESIDENT_NAME_ENG
            ,CUSTOMS_CD
            ,ORGAN_VENDOR_CD
            ,ORGAN_USER_ID
            ,ORGAN_DOC_NO
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             #COMPANY_CD#
            ,#DIVISION_CD#
            ,#DIVISION_NAME#
            ,#DIVISION_NAME_ENG#
            ,#DIVISION_TYPE#
            ,#STATUS#
            ,#BUSINESS_NO#
            ,#OFFICER#
            ,#OFFICER_PHONE_NO#
            ,#OFFICER_EMAIL#
            ,#PHONE_NO#
            ,#FAX_NO#
            ,#ZIP_CD#
            ,#ADDRESS1#
            ,#ADDRESS2#
            ,#ADDRESS1_ENG#
            ,#ADDRESS2_ENG#
            ,#CO_CERTIFIED_EXPORTER_YN#
            ,#CERTIFICATION_NO#
            ,#PRESIDENT_NAME#
            ,#PRESIDENT_NAME_ENG#
            ,#CUSTOMS_CD#
            ,#ORGAN_VENDOR_CD#
            ,#ORGAN_USER_ID#
            ,#ORGAN_DOC_NO#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
        )
    </insert>

    <update id="SM7002.updateDivisionInfo" parameterClass="java.util.Map">
        UPDATE DIVISION
           SET UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
              <isNotNull prepend=", " property="DIVISION_NAME"           >DIVISION_NAME            = #DIVISION_NAME#            </isNotNull>
              <isNotNull prepend=", " property="DIVISION_NAME_ENG"       >DIVISION_NAME_ENG        = #DIVISION_NAME_ENG#        </isNotNull>
              <isNotNull prepend=", " property="DIVISION_TYPE"           >DIVISION_TYPE            = #DIVISION_TYPE#            </isNotNull>
              <isNotNull prepend=", " property="STATUS"                  >STATUS                   = #STATUS#                   </isNotNull>
              <isNotNull prepend=", " property="BUSINESS_NO"             >BUSINESS_NO              = #BUSINESS_NO#              </isNotNull>
              <isNotNull prepend=", " property="OFFICER"                 >OFFICER                  = #OFFICER#                  </isNotNull>
              <isNotNull prepend=", " property="OFFICER_PHONE_NO"        >OFFICER_PHONE_NO         = #OFFICER_PHONE_NO#         </isNotNull>
              <isNotNull prepend=", " property="OFFICER_EMAIL"           >OFFICER_EMAIL            = #OFFICER_EMAIL#            </isNotNull>
              <isNotNull prepend=", " property="PHONE_NO"                >PHONE_NO                 = #PHONE_NO#                 </isNotNull>
              <isNotNull prepend=", " property="FAX_NO"                  >FAX_NO                   = #FAX_NO#                   </isNotNull>
              <isNotNull prepend=", " property="ZIP_CD"                  >ZIP_CD                   = #ZIP_CD#                   </isNotNull>
              <isNotNull prepend=", " property="ADDRESS1"                >ADDRESS1                 = #ADDRESS1#                 </isNotNull>
              <isNotNull prepend=", " property="ADDRESS2"                >ADDRESS2                 = #ADDRESS2#                 </isNotNull>
              <isNotNull prepend=", " property="ADDRESS1_ENG"            >ADDRESS1_ENG             = #ADDRESS1_ENG#             </isNotNull>
              <isNotNull prepend=", " property="ADDRESS2_ENG"            >ADDRESS2_ENG             = #ADDRESS2_ENG#             </isNotNull>
              <isNotNull prepend=", " property="CO_CERTIFIED_EXPORTER_YN">CO_CERTIFIED_EXPORTER_YN = #CO_CERTIFIED_EXPORTER_YN# </isNotNull>
              <isNotNull prepend=", " property="CERTIFICATION_NO"        >CERTIFICATION_NO         = #CERTIFICATION_NO#         </isNotNull>
              <isNotNull prepend=", " property="PRESIDENT_NAME"          >PRESIDENT_NAME           = #PRESIDENT_NAME#           </isNotNull>
              <isNotNull prepend=", " property="PRESIDENT_NAME_ENG"      >PRESIDENT_NAME_ENG       = #PRESIDENT_NAME_ENG#       </isNotNull>
              <isNotNull prepend=", " property="CUSTOMS_CD"              >CUSTOMS_CD               = #CUSTOMS_CD#              </isNotNull>
              <isNotNull prepend=", " property="ORGAN_VENDOR_CD"         >ORGAN_VENDOR_CD          = #ORGAN_VENDOR_CD#         </isNotNull>
              <isNotNull prepend=", " property="ORGAN_USER_ID"           >ORGAN_USER_ID            = #ORGAN_USER_ID#           </isNotNull>
              <isNotNull prepend=", " property="ORGAN_DOC_NO"            >ORGAN_DOC_NO             = #ORGAN_DOC_NO#            </isNotNull>
         WHERE COMPANY_CD = #COMPANY_CD#
           AND DIVISION_CD = #DIVISION_CD#
    </update>
    
    <update id="SM7002.updateDivisionVaatzIDInfo" parameterClass="java.util.Map">
        UPDATE DIVISION
           SET HUB_CERT_ID = #HUB_CERT_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND DIVISION_CD = #DIVISION_CD#
    </update>

    <update id="SM7002.deleteDivisionInfo" parameterClass="java.util.Map">
        UPDATE DIVISION
           SET STATUS = 'N'
              ,UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND DIVISION_CD = #DIVISION_CD#
    </update>

    <delete id="SM7002.deleteDivisionInfoReal" parameterClass="java.util.Map">
        DELETE FROM DIVISION
         WHERE COMPANY_CD = #COMPANY_CD#
           AND DIVISION_CD = #DIVISION_CD#
    </delete>

    <update id="SM7002.updateInitDivisionStatus" parameterClass="java.util.Map">
        UPDATE DIVISION
           SET STATUS = #STATUS#
              ,UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND DIVISION_CD = #DIVISION_CD#
    </update>

    <!-- SM7003 START :: CARLOS -->
    <select id="SM7003.selectUserList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT T.ID_SEQ
                  ,T.USER_ID
                  ,T.COMPANY_CD
                  ,'' AS PASSWORD
                  ,T.PASSWORD AS PASSWORD_ORG
                  ,T.EMP_NO
                  ,T.NAME
                  ,T.NAME_ENG
                  ,T.POSITION
                  ,T.EMAIL
                  ,T.CELL_PHONE_NO
                  ,T.OFFICE_PHONE_NO
                  ,T.FAX_NO
                  ,T.MANAGER_YN
                  ,T.STATUS
                  ,CD1.WORD AS MANAGER_NAME
                  ,CD2.WORD AS STATUS_NAME
                  ,T.DEFAULT_LANGUAGE
                  ,T.WORK_YYYY_MM
                  ,T.SELECT_LANG
                  ,T.MAIL_ID
                  ,T.MAIL_PASSWORD
                  ,T.START_DATE
                  ,T.END_DATE
                  ,T.END_DESC
                  ,T.MAIL_SENDER_YN
                  ,T.KAKAO_SCRIPT_KEY
                  ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                  ,T.CREATE_BY
                  ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
                  ,T.UPDATE_BY
                <isNotEqual property="SEARCH_TYPE" compareValue="MEMBER_MGTR">
                 , NULL AS AUTH_GROUP_ID
                 , NULL AS AUTH_GROUP_NAME
                </isNotEqual>
                <isEqual property="SEARCH_TYPE" compareValue="MEMBER_MGTR">
                 , AG.AUTH_GROUP_ID
                 , AG.AUTH_GROUP_NAME
                </isEqual>
              FROM FTA_USER T
                <isEqual property="SEARCH_TYPE" compareValue="MEMBER_MGTR">
                   LEFT OUTER JOIN AUTH_USER AU
                     ON AU.COMPANY_CD = T.COMPANY_CD
                    AND AU.USER_ID = T.USER_ID
                   LEFT OUTER JOIN AUTH_GROUP AG
                     ON AG.COMPANY_CD = T.COMPANY_CD
                    AND AG.AUTH_GROUP_ID = AU.AUTH_GROUP_ID
                </isEqual>
                   LEFT OUTER JOIN CODE_LANG_DIC CD1
                     ON CD1.COMPANY_CD = T.COMPANY_CD
                    AND CD1.CATEGORY_CD = 'MANAGER_TYPE' 
                    AND CD1.CODE = T.MANAGER_YN
                    AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                   LEFT OUTER JOIN CODE_LANG_DIC CD2
                     ON CD2.COMPANY_CD = T.COMPANY_CD
                    AND CD2.CATEGORY_CD = 'USE_YN' 
                    AND CD2.CODE = T.STATUS
                    AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
             WHERE T.COMPANY_CD = #COMPANY_CD#
               AND T.USER_ID NOT IN('fta', 'supplier')
             <isNotEmpty property="USER_ID">
               AND T.USER_ID = #USER_ID#
             </isNotEmpty>
             <isNotEmpty property="schKeyWord">
               AND UPPER(T.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
             </isNotEmpty>
        <include refid="select-paging-end" />
         ORDER BY USER_ID
    </select>

    <select id="SM7003.selectUserInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.ID_SEQ
              ,T.USER_ID
              ,T.COMPANY_CD
              ,'' AS PASSWORD
              ,T.PASSWORD AS PASSWORD_ORG
              ,T.EMP_NO
              ,T.NAME
              ,T.NAME_ENG
              ,T.POSITION
              ,T.EMAIL
              ,T.CELL_PHONE_NO
              ,T.OFFICE_PHONE_NO
              ,T.FAX_NO
              ,T.MANAGER_YN
              ,T.STATUS
              ,T.DEFAULT_LANGUAGE
              ,T.WORK_YYYY_MM
              ,T.SELECT_LANG
              ,T.MAIL_ID
              ,T.MAIL_PASSWORD
              ,T.START_DATE
              ,T.END_DATE
              ,T.END_DESC
              ,T.MAIL_SENDER_YN
              ,T.KAKAO_SCRIPT_KEY
              ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,T.CREATE_BY
              ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,T.UPDATE_BY
          FROM FTA_USER T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.USER_ID = #USER_ID#
    </select>

    <select id="SM7003.selectUserDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(1) DUPLICATE
          FROM FTA_USER T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.USER_ID = #USER_ID#
    </select>

    <select id="SM7003.selectUserPwdCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CASE WHEN COALESCE(#PWD_ENC#, '') = PASSWORD THEN 'T' ELSE 'F' END AS PWD_VALID
          FROM FTA_USER T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.USER_ID = #USER_ID#
    </select>
    
    <insert id="SM7003.insertUserInfo" parameterClass="java.util.Map">
        INSERT INTO FTA_USER(
             ID_SEQ
            ,COMPANY_CD
            ,USER_ID
            ,PASSWORD
            ,EMP_NO
            ,NAME
            ,NAME_ENG
            ,POSITION
            ,EMAIL
            ,CELL_PHONE_NO
            ,OFFICE_PHONE_NO
            ,FAX_NO
            ,MANAGER_YN
            ,STATUS
            ,DEFAULT_LANGUAGE
            ,WORK_YYYY_MM
            ,SELECT_LANG
            ,MAIL_ID
            ,MAIL_PASSWORD
            ,START_DATE
            ,END_DATE
            ,END_DESC
            ,MAIL_SENDER_YN
            ,KAKAO_SCRIPT_KEY
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             NEXTVAL('SEQ_FTA_USER_01')
            ,#COMPANY_CD#
            ,#USER_ID#
            ,#PASSWORD#
            ,#EMP_NO#
            ,#NAME#
            ,#NAME_ENG#
            ,#POSITION#
            ,#EMAIL#
            ,#CELL_PHONE_NO#
            ,#OFFICE_PHONE_NO#
            ,#FAX_NO#
            ,#MANAGER_YN#
            ,#STATUS#
            ,#DEFAULT_LANGUAGE#
            ,#WORK_YYYY_MM#
            ,#SELECT_LANG#
            ,#MAIL_ID#
            ,#MAIL_PASSWORD#
            ,#START_DATE#
            ,#END_DATE#
            ,#END_DESC#
            ,#MAIL_SENDER_YN#
            ,#KAKAO_SCRIPT_KEY#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
        )
    </insert>

    <update id="SM7003.updateUserInfo" parameterClass="java.util.Map">
        UPDATE FTA_USER
           SET UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
              <isNotNull prepend=", " property="PASSWORD"        >PASSWORD = #PASSWORD#                 </isNotNull>
              <isNotNull prepend=", " property="EMP_NO"          >EMP_NO = #EMP_NO#                     </isNotNull>
              <isNotNull prepend=", " property="NAME"            >NAME = #NAME#                         </isNotNull>
              <isNotNull prepend=", " property="NAME_ENG"        >NAME_ENG = #NAME_ENG#                 </isNotNull>
              <isNotNull prepend=", " property="POSITION"        >POSITION = #POSITION#                 </isNotNull>
              <isNotNull prepend=", " property="EMAIL"           >EMAIL = #EMAIL#                       </isNotNull>
              <isNotNull prepend=", " property="CELL_PHONE_NO"   >CELL_PHONE_NO = #CELL_PHONE_NO#       </isNotNull>
              <isNotNull prepend=", " property="OFFICE_PHONE_NO" >OFFICE_PHONE_NO = #OFFICE_PHONE_NO#   </isNotNull>
              <isNotNull prepend=", " property="FAX_NO"          >FAX_NO = #FAX_NO#                     </isNotNull>
              <isNotNull prepend=", " property="MANAGER_YN"      >MANAGER_YN = #MANAGER_YN#             </isNotNull>
              <isNotNull prepend=", " property="STATUS"          >STATUS = #STATUS#                     </isNotNull>
              <isNotNull prepend=", " property="DEFAULT_LANGUAGE">DEFAULT_LANGUAGE = #DEFAULT_LANGUAGE# </isNotNull>
              <isNotNull prepend=", " property="SELECT_LANG"     >SELECT_LANG = #SELECT_LANG#           </isNotNull>
              <isNotNull prepend=", " property="MAIL_ID"         >MAIL_ID = #MAIL_ID#                   </isNotNull>
              <isNotNull prepend=", " property="MAIL_PASSWORD"   >MAIL_PASSWORD = #MAIL_PASSWORD#       </isNotNull>
              <isNotNull prepend=", " property="START_DATE"   >START_DATE = #START_DATE#       </isNotNull>
              <isNotNull prepend=", " property="END_DATE"   >END_DATE = #END_DATE#       </isNotNull>
              <isNotNull prepend=", " property="END_DESC"   >END_DESC = #END_DESC#       </isNotNull>
              <isNotNull prepend=", " property="MAIL_SENDER_YN"   >MAIL_SENDER_YN = #MAIL_SENDER_YN#       </isNotNull>
              <isNotNull prepend=", " property="KAKAO_SCRIPT_KEY"   >KAKAO_SCRIPT_KEY = #KAKAO_SCRIPT_KEY#       </isNotNull>
         WHERE COMPANY_CD = #COMPANY_CD#
           AND USER_ID = #USER_ID#
    </update>

    <update id="SM7003.deleteUserInfo" parameterClass="java.util.Map">
        UPDATE FTA_USER
           SET STATUS = 'N'
              ,UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND USER_ID = #USER_ID#
    </update>

    <delete id="SM7003.deleteUserInfoReal" parameterClass="java.util.Map">
        DELETE FROM FTA_USER
         WHERE COMPANY_CD = #COMPANY_CD#
           AND USER_ID = #USER_ID#
    </delete>

    <update id="SM7003.updateInitUserStatus" parameterClass="java.util.Map">
        UPDATE FTA_USER
           SET STATUS = #STATUS#
              ,UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND USER_ID = #USER_ID#
    </update>

    <!-- SM7004 START :: CARLOS -->
    <select id="SM7004.selectScheduleList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT T.INTERFACE_SCHEDULE_ID
                  ,T.SCHEDULE_CD
                  ,T.COMPANY_CD
                  ,T.SCHEDULE_NAME
                  ,T.SCHEDULE_DESC
                  ,T.EXECUTION_PROGRAM
                  ,T.APPLY_FROM_DATE
                  ,T.APPLY_TO_DATE
                  ,T.MONTH
                  ,T.WEEK
                  ,T.DAY
                  ,T.HOUR
                  ,T.MINUTES
                  ,T.COM_MONTH
                  ,T.COM_WEEK
                  ,T.COM_DAY
                  ,T.COM_HOUR
                  ,T.COM_MINUTES
                  ,T.STATUS
                  ,FN_GET_COMMON_CD(T.COMPANY_CD, 'SCHEDULE_STATUS', T.STATUS, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS STATUS_NAME
                  ,T.SYSTEM_BATCH_YN
                  ,FN_GET_COMMON_CD(T.COMPANY_CD, 'YN', T.SYSTEM_BATCH_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS SYSTEM_BATCH_YN_NAME
                  ,TO_CHAR(T.LAST_EXECUTION_DATE, 'YYYY-MM-DD HH24:MI:SS') AS LAST_EXECUTION_DATE
                  ,T.EXECUTION_MESSAGE
                  ,T.BATCH_YYYYMM
                  ,T.BATCH_YYYYMM_YN
                  ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                  ,T.CREATE_BY
                  ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
                  ,T.UPDATE_BY
              FROM INTERFACE_SCHEDULE T
             WHERE T.COMPANY_CD = #COMPANY_CD#
            <isNotEmpty property="schKeyWord">
               AND UPPER(T.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
        <include refid="select-paging-end" />
         ORDER BY SCHEDULE_CD
    </select>

    <select id="SM7004.selectScheduleInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.INTERFACE_SCHEDULE_ID
              ,T.SCHEDULE_CD
              ,T.COMPANY_CD
              ,T.SCHEDULE_NAME
              ,T.SCHEDULE_DESC
              ,T.EXECUTION_PROGRAM
              ,T.APPLY_FROM_DATE
              ,T.APPLY_TO_DATE
              ,T.MONTH
              ,T.WEEK
              ,T.DAY
              ,T.HOUR
              ,T.MINUTES
              ,T.COM_MONTH
              ,T.COM_WEEK
              ,T.COM_DAY
              ,T.COM_HOUR
              ,T.COM_MINUTES
              ,T.STATUS
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'SCHEDULE_STATUS', T.STATUS, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS STATUS_NAME
              ,T.SYSTEM_BATCH_YN
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'YN', T.SYSTEM_BATCH_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS SYSTEM_BATCH_YN_NAME
              ,TO_CHAR(T.LAST_EXECUTION_DATE, 'YYYY-MM-DD HH24:MI:SS') AS LAST_EXECUTION_DATE
              ,T.EXECUTION_MESSAGE
              ,T.BATCH_YYYYMM
              ,T.BATCH_YYYYMM_YN
              ,T.BATCH_FILTER_TYPE
              ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,T.CREATE_BY
              ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,T.UPDATE_BY
          FROM INTERFACE_SCHEDULE T
         WHERE T.INTERFACE_SCHEDULE_ID = #INTERFACE_SCHEDULE_ID#::numeric
    </select>

    <select id="SM7004.selectScheduleDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(1) DUPLICATE
          FROM INTERFACE_SCHEDULE
         WHERE SCHEDULE_CD = #SCHEDULE_CD#
           AND COMPANY_CD = #COMPANY_CD#
    </select>

    <select id="SM7004.selectLastInterfaceScheduleId" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT INTERFACE_SCHEDULE_ID FROM INTERFACE_SCHEDULE
         WHERE SCHEDULE_CD = #SCHEDULE_CD# 
           AND COMPANY_CD = #COMPANY_CD#
    </select>

    <insert id="SM7004.insertScheduleInfo" parameterClass="java.util.Map">
        INSERT INTO INTERFACE_SCHEDULE(
             INTERFACE_SCHEDULE_ID
            ,SCHEDULE_CD
            ,COMPANY_CD
            ,SCHEDULE_NAME
            ,SCHEDULE_DESC
            ,EXECUTION_PROGRAM
            ,APPLY_FROM_DATE
            ,APPLY_TO_DATE
            ,MONTH
            ,WEEK
            ,DAY
            ,HOUR
            ,MINUTES
            ,COM_MONTH
            ,COM_WEEK
            ,COM_DAY
            ,COM_HOUR
            ,COM_MINUTES
            ,STATUS
            ,SYSTEM_BATCH_YN
            ,LAST_EXECUTION_DATE
            ,EXECUTION_MESSAGE
            ,BATCH_YYYYMM
            ,BATCH_YYYYMM_YN
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             NEXTVAL('SEQ_INTERFACE_SCHEDULE_01')
            ,#SCHEDULE_CD#
            ,#COMPANY_CD#
            ,#SCHEDULE_NAME#
            ,#SCHEDULE_DESC#
            ,#EXECUTION_PROGRAM#
            ,#APPLY_FROM_DATE#
            ,#APPLY_TO_DATE#
            ,#MONTH#
            ,#WEEK#
            ,#DAY#
            ,#HOUR#
            ,#MINUTES#
            ,#COM_MONTH#
            ,#COM_WEEK#
            ,#COM_DAY#
            ,#COM_HOUR#
            ,#COM_MINUTES#
            ,#STATUS#
            ,#SYSTEM_BATCH_YN#
            ,#LAST_EXECUTION_DATE#
            ,#EXECUTION_MESSAGE#
            ,#BATCH_YYYYMM#
            ,#BATCH_YYYYMM_YN#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
        )
    </insert>

    <update id="SM7004.updateScheduleInfo" parameterClass="java.util.Map">
        UPDATE INTERFACE_SCHEDULE
           SET UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
              <isNotNull prepend=", " property="SCHEDULE_NAME"      >SCHEDULE_NAME       = #SCHEDULE_NAME#       </isNotNull>
              <isNotNull prepend=", " property="SCHEDULE_DESC"      >SCHEDULE_DESC       = #SCHEDULE_DESC#       </isNotNull>
              <isNotNull prepend=", " property="EXECUTION_PROGRAM"  >EXECUTION_PROGRAM   = #EXECUTION_PROGRAM#   </isNotNull>
              <isNotNull prepend=", " property="APPLY_FROM_DATE"    >APPLY_FROM_DATE     = #APPLY_FROM_DATE#     </isNotNull>
              <isNotNull prepend=", " property="APPLY_TO_DATE"      >APPLY_TO_DATE       = #APPLY_TO_DATE#       </isNotNull>
              <isNotNull prepend=", " property="MONTH"              >MONTH               = #MONTH#               </isNotNull>
              <isNotNull prepend=", " property="WEEK"               >WEEK                = #WEEK#                </isNotNull>
              <isNotNull prepend=", " property="DAY"                >DAY                 = #DAY#                 </isNotNull>
              <isNotNull prepend=", " property="HOUR"               >HOUR                = #HOUR#                </isNotNull>
              <isNotNull prepend=", " property="MINUTES"            >MINUTES             = #MINUTES#             </isNotNull>
              <isNotNull prepend=", " property="STATUS"             >STATUS              = #STATUS#              </isNotNull>
              <isNotNull prepend=", " property="SYSTEM_BATCH_YN"    >SYSTEM_BATCH_YN     = #SYSTEM_BATCH_YN#     </isNotNull>
              <isNotNull prepend=", " property="LAST_EXECUTION_DATE">LAST_EXECUTION_DATE = #LAST_EXECUTION_DATE# </isNotNull>
              <isNotNull prepend=", " property="EXECUTION_MESSAGE"  >EXECUTION_MESSAGE   = #EXECUTION_MESSAGE#   </isNotNull>
              <isNotNull prepend=", " property="BATCH_YYYYMM"       >BATCH_YYYYMM        = #BATCH_YYYYMM#        </isNotNull>
              <isNotNull prepend=", " property="BATCH_YYYYMM_YN"    >BATCH_YYYYMM_YN     = #BATCH_YYYYMM_YN#     </isNotNull>
              <isNotNull prepend=", " property="BATCH_YYYYMM_YN"    >BATCH_FILTER_TYPE     = #BATCH_FILTER_TYPE#    </isNotNull>
              <isNotNull prepend=", " property="COM_MONTH"    >COM_MONTH     = #COM_MONTH#     </isNotNull>
              <isNotNull prepend=", " property="COM_WEEK"    >COM_WEEK     = #COM_WEEK#     </isNotNull>
              <isNotNull prepend=", " property="COM_DAY"    >COM_DAY     = #COM_DAY#     </isNotNull>
              <isNotNull prepend=", " property="COM_HOUR"    >COM_HOUR     = #COM_HOUR#     </isNotNull>
              <isNotNull prepend=", " property="COM_MINUTES"    >COM_MINUTES     = #COM_MINUTES#     </isNotNull>
         WHERE COMPANY_CD = #COMPANY_CD#
           AND SCHEDULE_CD = #SCHEDULE_CD#
    </update>

    <delete id="SM7004.deleteScheduleInfo" parameterClass="java.util.Map">
        DELETE FROM INTERFACE_SCHEDULE
         WHERE SCHEDULE_CD = #SCHEDULE_CD#
           AND COMPANY_CD = #COMPANY_CD#
    </delete>

    <select id="SM7004.selectScheduleMappingList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
	        SELECT ISM.INTERFACE_SCHEDULE_MAPPING_ID
	              ,ISM.SCHEDULE_CD
	              ,ISC.SCHEDULE_NAME
	              ,ISM.COMPANY_CD
	              ,ISM.SCHEDULE_SEQ
	              ,ISM.IF_CD
	              ,IIM.IF_NAME
	              ,ISM.IF_PARENT_CD
	              ,IIMP.IF_NAME AS IF_PARENT_NAME
	              ,ISM.REQUIRED_YN AS REQUIRED_YN
	              ,FN_GET_COMMON_CD(ISM.COMPANY_CD, 'YN', ISM.REQUIRED_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS REQUIRED_YN_NAME
	              ,ISM.IF_METHOD AS IF_METHOD
	              ,FN_GET_COMMON_CD(ISM.COMPANY_CD, 'IF_METHOD', ISM.IF_METHOD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS IF_METHOD_NAME
	              ,ISM.VALID_CHECK_YN
                  ,FN_GET_COMMON_CD(ISM.COMPANY_CD, 'YN', ISM.VALID_CHECK_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS VALID_CHECK_YN_NAME
	              ,TO_CHAR(ISM.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
	              ,ISM.CREATE_BY
	              ,TO_CHAR(ISM.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
	              ,ISM.UPDATE_BY
	          FROM INTERFACE_SCHEDULE_MAPPING ISM
	               INNER JOIN INTERFACE_SCHEDULE ISC
	                  ON ISM.COMPANY_CD = ISC.COMPANY_CD
	                 AND ISM.SCHEDULE_CD = ISC.SCHEDULE_CD
	               INNER JOIN INTERFACE_ITEM_MST IIM
	                  ON IIM.COMPANY_CD = ISM.COMPANY_CD
	                 AND IIM.IF_CD = ISM.IF_CD
	                 AND IIM.USING_YN = 'Y'
	                LEFT JOIN INTERFACE_ITEM_MST IIMP
	                  ON IIMP.COMPANY_CD = ISM.COMPANY_CD
	                 AND IIMP.IF_CD = ISM.IF_PARENT_CD
	         WHERE ISM.COMPANY_CD = #COMPANY_CD#
	           AND ISM.SCHEDULE_CD = #SCHEDULE_CD#
	     <include refid="select-paging-end" />
         ORDER BY SCHEDULE_SEQ
    </select>
    
    <select id="SM7004.selectScheduleServiceMappingList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT ISM.INTERFACE_SCHEDULE_MAPPING_ID
                  ,ISM.SCHEDULE_CD
                  ,ISC.SCHEDULE_NAME
                  ,ISM.COMPANY_CD
                  ,ISM.SCHEDULE_SEQ
                  ,ISM.IF_CD
                  ,SM.SERVICE_NAME AS IF_NAME
                  ,ISM.IF_PARENT_CD
                  ,ISM.REQUIRED_YN AS REQUIRED_YN
                  ,ISM.IF_METHOD AS IF_METHOD
                  ,ISM.VALID_CHECK_YN
              FROM INTERFACE_SCHEDULE_MAPPING ISM
                   INNER JOIN INTERFACE_SCHEDULE ISC
                      ON ISM.COMPANY_CD = ISC.COMPANY_CD
                     AND ISM.SCHEDULE_CD = ISC.SCHEDULE_CD
                   INNER JOIN SERVICE_MST SM
                      ON SM.COMPANY_CD = ISM.COMPANY_CD
                     AND SM.SERVICE_ID = ISM.IF_CD
                     AND SM.USE_YN = 'Y'
             WHERE ISM.COMPANY_CD = #COMPANY_CD#
               AND ISM.SCHEDULE_CD = #SCHEDULE_CD#
         <include refid="select-paging-end" />
         ORDER BY SCHEDULE_SEQ
    </select>
    
    <select id="SM7004.selectLastInterfaceScheduleMappingId" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.INTERFACE_SCHEDULE_MAPPING_ID
          FROM INTERFACE_SCHEDULE_MAPPING T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.SCHEDULE_CD = #SCHEDULE_CD#
           AND T.SCHEDULE_SEQ = FN_PG_GET_CAST_NUM(#SCHEDULE_SEQ#)
    </select>

    <select id="SM7004.selectScheduleMappingInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT ISM.INTERFACE_SCHEDULE_MAPPING_ID
              ,ISM.SCHEDULE_CD
              ,ISC.SCHEDULE_NAME
              ,ISM.COMPANY_CD
              ,ISM.SCHEDULE_SEQ
              ,ISM.IF_CD
              ,ISM.IF_PARENT_CD
              ,ISM.REQUIRED_YN AS REQUIRED_YN
              ,FN_GET_COMMON_CD(ISM.COMPANY_CD, 'YN', ISM.REQUIRED_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS REQUIRED_YN_NAME
              ,ISM.IF_METHOD AS IF_METHOD
              ,FN_GET_COMMON_CD(ISM.COMPANY_CD, 'IF_METHOD', ISM.IF_METHOD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS IF_METHOD_NAME
              ,ISM.VALID_CHECK_YN
              ,FN_GET_COMMON_CD(ISM.COMPANY_CD, 'YN', ISM.VALID_CHECK_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS VALID_CHECK_YN_NAME
              ,TO_CHAR(ISM.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,ISM.CREATE_BY
              ,TO_CHAR(ISM.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,ISM.UPDATE_BY
          FROM INTERFACE_SCHEDULE_MAPPING ISM
               INNER JOIN INTERFACE_SCHEDULE ISC
                  ON ISM.COMPANY_CD = ISC.COMPANY_CD
                 AND ISM.SCHEDULE_CD = ISC.SCHEDULE_CD
         WHERE ISM.COMPANY_CD = #COMPANY_CD#
           AND ISM.SCHEDULE_CD = #SCHEDULE_CD#
           AND ISM.SCHEDULE_SEQ = #SCHEDULE_SEQ#::numeric
    </select>

    <insert id="SM7004.insertScheduleMappingInfo" parameterClass="java.util.Map">
        INSERT INTO INTERFACE_SCHEDULE_MAPPING(
             INTERFACE_SCHEDULE_MAPPING_ID
            ,SCHEDULE_CD
            ,COMPANY_CD
            ,SCHEDULE_SEQ
            ,IF_CD
            ,IF_PARENT_CD
            ,REQUIRED_YN
            ,IF_METHOD
            ,VALID_CHECK_YN
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             NEXTVAL('SEQ_INTERFACE_SCHEDULE_MAP_01')
            ,#SCHEDULE_CD#
            ,#COMPANY_CD#
            ,#SCHEDULE_SEQ_NEW#::numeric
            ,#IF_CD#
            ,#IF_PARENT_CD#
            ,#REQUIRED_YN#
            ,#IF_METHOD#
            ,#VALID_CHECK_YN#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
        )
    </insert>

    <update id="SM7004.updateScheduleMappingInfo" parameterClass="java.util.Map">
        UPDATE INTERFACE_SCHEDULE_MAPPING
           SET UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
              <isNotNull prepend=", " property="SCHEDULE_SEQ_NEW">SCHEDULE_SEQ = #SCHEDULE_SEQ_NEW#::numeric </isNotNull>
              <isNotNull prepend=", " property="IF_CD"       >IF_CD        = #IF_CD#        </isNotNull>
              <isNotNull prepend=", " property="IF_PARENT_CD">IF_PARENT_CD = #IF_PARENT_CD# </isNotNull>
              <isNotNull prepend=", " property="REQUIRED_YN" >REQUIRED_YN  = #REQUIRED_YN#  </isNotNull>
              <isNotNull prepend=", " property="IF_METHOD"   >IF_METHOD  = #IF_METHOD#      </isNotNull>
              <isNotNull prepend=", " property="VALID_CHECK_YN"   >VALID_CHECK_YN    = #VALID_CHECK_YN#   </isNotNull>
         WHERE COMPANY_CD = #COMPANY_CD#
           AND SCHEDULE_CD = #SCHEDULE_CD#
           AND SCHEDULE_SEQ = #SCHEDULE_SEQ#::numeric
    </update>

    <delete id="SM7004.deleteScheduleMappingInfo" parameterClass="java.util.Map">
        DELETE FROM INTERFACE_SCHEDULE_MAPPING
         WHERE SCHEDULE_CD = #SCHEDULE_CD#
           AND COMPANY_CD = #COMPANY_CD#
           AND SCHEDULE_SEQ = #SCHEDULE_SEQ#::numeric
    </delete>

    <delete id="SM7004.deleteScheduleMappingAllInfo" parameterClass="java.util.Map">
        DELETE FROM INTERFACE_SCHEDULE_MAPPING
         WHERE SCHEDULE_CD = #SCHEDULE_CD#
           AND COMPANY_CD = #COMPANY_CD#
    </delete>

    <update id="SM7004.updateInitScheduleStatus" parameterClass="java.util.Map">
        
            BEGIN;
            
                UPDATE INTERFACE_SCHEDULE
                   SET STATUS = #STATUS#
                      ,BATCH_YYYYMM = NULL
                      ,BATCH_YYYYMM_YN = 'N'
                      ,BATCH_FILTER_TYPE = NULL
                      ,UPDATE_DATE = NOW()::TIMESTAMP
                      ,UPDATE_BY = #SESSION_USER_ID#
                 WHERE SCHEDULE_CD = #SCHEDULE_CD#
                   AND COMPANY_CD = #COMPANY_CD#;

                UPDATE INTERFACE_HISTORY IH
                   SET IH.BATCH_STATUS = 'E'
                      ,IH.ERROR_YN = 'Y'
                      ,IH.ERROR_MESSAGE = '[User Interceptor] Batch has been stopped by the user.'
                      ,UPDATE_DATE = NOW()::TIMESTAMP
                      ,UPDATE_BY = #SESSION_USER_ID#
                 WHERE IH.COMPANY_CD = #COMPANY_CD#
                   AND IH.SCHEDULE_CD = #SCHEDULE_CD#
                   AND IH.BATCH_STATUS = 'N'
                   AND IH.TRANS_STATUS = 0;
        
            END;
    </update>

    <!-- SM7005 START :: CARLOS -->
    <select id="SM7005.selectInterfaceItemMstList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT T.INTERFACE_ITEM_MST_ID
                  ,T.IF_CD
                  ,T.COMPANY_CD AS COMPANY_CD
                  ,T.IF_NAME
                  ,T.SOURCE_TABLE
                  ,T.TARGET_TABLE
                  ,T.HISTORY_TABLE
                  ,T.ITEM_TYPE
                  ,FN_GET_COMMON_CD(T.COMPANY_CD, 'BCTY', T.ITEM_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ITEM_TYPE_NAME
                  ,T.REMARK
                  ,T.USING_YN
                  ,FN_GET_COMMON_CD(T.COMPANY_CD, 'YN', T.USING_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS USING_YN_NAME
                  ,T.FILE_PATH
	              ,T.FILE_TYPE
	              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'IF_CATEGORY', T.FILE_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS FILE_TYPE_NAME
	              ,T.FILE_NAME
	              ,T.FILE_STATUS
	              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'FSTAT', T.FILE_STATUS, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS FILE_STATUS_NAME
                  ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                  ,T.CREATE_BY
                  ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
                  ,T.UPDATE_BY
                  ,(CASE WHEN T.FILE_TYPE = 'M' THEN 1 WHEN T.FILE_TYPE = 'C' THEN 2 ELSE 3 END) AS SORT_NO
              FROM INTERFACE_ITEM_MST T
             WHERE T.COMPANY_CD = #COMPANY_CD#
            <isNotEmpty property="ITEM_TYPE">
               AND T.ITEM_TYPE = #ITEM_TYPE#
            </isNotEmpty>
            <isNotEmpty property="schKeyWord">
               AND UPPER(T.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
        <include refid="select-paging-end" />
        ORDER by IF_CD, SORT_NO, IF_CD
    </select>

    <select id="SM7005.selectInterfaceItemMstInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.INTERFACE_ITEM_MST_ID
              ,T.IF_CD
              ,T.COMPANY_CD AS COMPANY_CD
              ,T.IF_NAME
              ,T.SOURCE_TABLE
              ,T.TARGET_TABLE
              ,T.HISTORY_TABLE
              ,T.ITEM_TYPE
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'BCTY', T.ITEM_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ITEM_TYPE_NAME
              ,T.REMARK
              ,T.USING_YN
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'YN', T.USING_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS USING_YN_NAME
              ,T.FILE_PATH
              ,T.FILE_TYPE
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'IF_CATEGORY', T.FILE_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS FILE_TYPE_NAME
              ,T.FILE_NAME
              ,T.FILE_STATUS
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'FSTAT', T.FILE_STATUS, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS FILE_STATUS_NAME
              ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,T.CREATE_BY
              ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,T.UPDATE_BY
          FROM INTERFACE_ITEM_MST T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.INTERFACE_ITEM_MST_ID = #INTERFACE_ITEM_MST_ID#::numeric
    </select>

    <select id="SM7005.selectcInterfaceDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(*) AS DUPLICATE
          FROM INTERFACE_ITEM_MST
         WHERE COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
    </select>

    <select id="SM7005.selectLastInterfaceItemMstId" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.INTERFACE_ITEM_MST_ID
          FROM INTERFACE_ITEM_MST T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.IF_CD = #IF_CD#
    </select>

    <select id="SM7005.selectInterfaceItemMstCombo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.INTERFACE_ITEM_MST_ID
              ,T.COMPANY_CD
              ,T.CODE
              ,T.ITEM_TYPE_NAME||T.NAME AS NAME
              ,T.ITEM_TYPE
          FROM (
		        <isNotEmpty property="FIRST_ROW">
		            <isEqual property="FIRST_ROW" compareValue="UNCHOOSE">
		                SELECT NULL AS INTERFACE_ITEM_MST_ID
		                      ,NULL AS COMPANY_CD
		                      ,' ' AS CODE
		                      ,MESSAGE AS NAME
		                      ,'' AS ITEM_TYPE
		                      ,'' AS ITEM_TYPE_NAME
		                  FROM MESSAGE_TABLE
		                 WHERE MESSAGE_CODE = 'NOSEL'
		                   AND NATION_CODE = COALESCE(#SESSION_DEFAULT_LANGUAGE#, 'EN')
		               UNION ALL
		            </isEqual>
		        </isNotEmpty>
		        SELECT T.INTERFACE_ITEM_MST_ID
		              ,T.COMPANY_CD
		              ,T.IF_CD AS CODE
		              ,T.IF_NAME AS NAME
		              ,T.ITEM_TYPE
		              ,'['||FN_GET_COMMON_CD(T.COMPANY_CD, 'BCTY', T.ITEM_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#)||'] ' AS ITEM_TYPE_NAME
		          FROM INTERFACE_ITEM_MST T
		         WHERE T.COMPANY_CD = #COMPANY_CD#
		           AND T.USING_YN = 'Y'
	            ) T
	     ORDER BY T.ITEM_TYPE DESC, T.CODE DESC
    </select>
    
    <insert id="SM7005.insertInterfaceItemMstInfo" parameterClass="java.util.Map">
        INSERT INTO INTERFACE_ITEM_MST(
             INTERFACE_ITEM_MST_ID
            ,COMPANY_CD
            ,IF_CD
            ,IF_NAME
            ,SOURCE_TABLE
            ,TARGET_TABLE
            ,HISTORY_TABLE
            ,ITEM_TYPE
            ,REMARK
            ,USING_YN
            ,FILE_PATH
            ,FILE_NAME
            ,FILE_TYPE
            ,FILE_STATUS
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             NEXTVAL('SEQ_INTERFACE_ITEM_MST_01')
            ,#COMPANY_CD#
            ,#IF_CD#
            ,#IF_NAME#
            ,#SOURCE_TABLE#
            ,#TARGET_TABLE#
            ,#HISTORY_TABLE#
            ,#ITEM_TYPE#
            ,#REMARK#
            ,#USING_YN#
            ,#FILE_PATH#
            ,#FILE_NAME#
            ,#FILE_TYPE#
            ,#FILE_STATUS#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
        )
    </insert>

    <update id="SM7005.updateInterfaceItemMstInfo" parameterClass="java.util.Map">
        UPDATE INTERFACE_ITEM_MST
           SET UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #SESSION_USER_ID#
              <isNotNull prepend=", " property="COMPANY_CD"   >COMPANY_CD    = #COMPANY_CD#    </isNotNull>
              <isNotNull prepend=", " property="IF_CD"        >IF_CD         = #IF_CD#         </isNotNull>
              <isNotNull prepend=", " property="IF_NAME"      >IF_NAME       = #IF_NAME#       </isNotNull>
              <isNotNull prepend=", " property="SOURCE_TABLE" >SOURCE_TABLE  = #SOURCE_TABLE#  </isNotNull>
              <isNotNull prepend=", " property="TARGET_TABLE" >TARGET_TABLE  = #TARGET_TABLE#  </isNotNull>
              <isNotNull prepend=", " property="HISTORY_TABLE">HISTORY_TABLE = #HISTORY_TABLE# </isNotNull>
              <isNotNull prepend=", " property="REMARK"       >REMARK        = #REMARK#        </isNotNull>
              <isNotNull prepend=", " property="USING_YN"     >USING_YN      = #USING_YN#      </isNotNull>
              <isNotNull prepend=", " property="FILE_PATH"    >FILE_PATH     = #FILE_PATH#     </isNotNull>
              <isNotNull prepend=", " property="FILE_NAME"    >FILE_NAME     = #FILE_NAME#     </isNotNull>
              <isNotNull prepend=", " property="FILE_TYPE"    >FILE_TYPE     = #FILE_TYPE#     </isNotNull>
              <isNotNull prepend=", " property="FILE_STATUS"  >FILE_STATUS   = #FILE_STATUS#   </isNotNull>
         WHERE COMPANY_CD = #COMPANY_CD#
           AND INTERFACE_ITEM_MST_ID = #INTERFACE_ITEM_MST_ID#::numeric
    </update>

    <delete id="SM7005.deleteInterfaceItemMstInfo" parameterClass="java.util.Map">
        DELETE FROM INTERFACE_ITEM_MST
         WHERE COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
    </delete>

    <select id="SM7005.selectInterfaceItemDtlList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
	        SELECT T.INTERFACE_ITEM_DTL_ID
	              ,T.INTERFACE_ITEM_MST_ID
	              ,T.IF_CD
	              ,T.COMPANY_CD
	              ,T.COL_SEQ
	              ,T.FROM_COL_ID
	              ,T.TO_COL_ID
	              ,T.REQUIRED_YN
	              ,DATA_TYPE AS DATA_TYPE
	              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'DATA_TYPE', T.DATA_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS DATA_TYPE_NAME
	              ,T.DATA_LENGTH
	              ,T.DATA_FORMAT
	              ,COALESCE(T.REMARK, T.TO_COL_ID) AS REMARK
	              ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
	              ,T.CREATE_BY
	              ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
	              ,T.UPDATE_BY
	          FROM INTERFACE_ITEM_DTL T
	         WHERE 1=1
	           AND T.COMPANY_CD = #COMPANY_CD#
	           AND T.IF_CD = #IF_CD#
        <include refid="select-paging-end" />
         ORDER BY COL_SEQ
    </select>

    <select id="SM7005.selectInterfaceItemDtlInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.INTERFACE_ITEM_DTL_ID
              ,T.INTERFACE_ITEM_MST_ID
              ,T.IF_CD
              ,T.COMPANY_CD
              ,T.COL_SEQ
              ,T.FROM_COL_ID
              ,T.TO_COL_ID
              ,T.REQUIRED_YN
              ,DATA_TYPE AS DATA_TYPE
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'DATA_TYPE', T.DATA_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS DATA_TYPE_NAME
              ,T.DATA_LENGTH
              ,T.DATA_FORMAT
              ,T.REMARK
              ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,T.CREATE_BY
              ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,T.UPDATE_BY
          FROM INTERFACE_ITEM_DTL T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.IF_CD = #IF_CD#
           AND T.COL_SEQ = #COL_SEQ#::numeric
    </select>

    <select id="SM7005.selectLastInterfaceItemDtlId" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.INTERFACE_ITEM_DTL_ID
          FROM INTERFACE_ITEM_DTL T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.IF_CD = #IF_CD#
           AND T.COL_SEQ = #COL_SEQ#::numeric
    </select>

    <insert id="SM7005.insertInterfaceItemDtlInfo" parameterClass="java.util.Map">
        <selectKey resultClass="int" keyProperty="COL_SEQ">
            SELECT COALESCE(MAX(COL_SEQ), 0) + 1 AS COL_SEQ
              FROM INTERFACE_ITEM_DTL 
             WHERE COMPANY_CD = #COMPANY_CD# AND IF_CD = #IF_CD#
        </selectKey>

        INSERT INTO INTERFACE_ITEM_DTL(
             INTERFACE_ITEM_DTL_ID
            ,INTERFACE_ITEM_MST_ID
            ,COMPANY_CD
            ,IF_CD
            ,COL_SEQ
            ,FROM_COL_ID
            ,TO_COL_ID
            ,REQUIRED_YN
            ,DATA_TYPE
            ,DATA_LENGTH
            ,DATA_FORMAT
            ,REMARK
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             NEXTVAL('SEQ_INTERFACE_ITEM_DTL_01')
            ,#INTERFACE_ITEM_MST_ID#::numeric
            ,#COMPANY_CD#
            ,#IF_CD#
            ,#COL_SEQ#::numeric
            ,#FROM_COL_ID#
            ,#TO_COL_ID#
            ,#REQUIRED_YN#
            ,#DATA_TYPE#
            ,#DATA_LENGTH#::numeric
            ,#DATA_FORMAT#
            ,#REMARK#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
        )
    </insert>
    
    <update id="SM7005.insertExcuteInterfaceItemDtlBatch" parameterClass="java.util.Map">
        INSERT INTO INTERFACE_ITEM_DTL(
             INTERFACE_ITEM_DTL_ID
            ,INTERFACE_ITEM_MST_ID
            ,COMPANY_CD
            ,IF_CD
            ,COL_SEQ
            ,FROM_COL_ID
            ,TO_COL_ID
            ,REQUIRED_YN
            ,DATA_TYPE
            ,DATA_LENGTH
            ,DATA_FORMAT
            ,REMARK
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             NEXTVAL('SEQ_INTERFACE_ITEM_DTL_01')
            ,#INTERFACE_ITEM_MST_ID#::numeric
            ,#COMPANY_CD#
            ,#IF_CD#
            ,#COL_SEQ#::numeric
            ,#FROM_COL_ID#
            ,#TO_COL_ID#
            ,#REQUIRED_YN#
            ,#DATA_TYPE#
            ,#DATA_LENGTH#::numeric
            ,#DATA_FORMAT#
            ,#REMARK#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
            ,NOW()::TIMESTAMP
            ,#SESSION_USER_ID#
        )
    </update>
    
    <update id="SM7005.updateInterfaceItemDtlInfo" parameterClass="java.util.Map">
        UPDATE INTERFACE_ITEM_DTL
        SET UPDATE_DATE = NOW()::TIMESTAMP
           ,UPDATE_BY = #SESSION_USER_ID#
           <isNotNull prepend=", " property="COMPANY_CD" >COMPANY_CD  = #COMPANY_CD#  </isNotNull>
           <isNotNull prepend=", " property="IF_CD"      >IF_CD       = #IF_CD#       </isNotNull>
           <isNotNull prepend=", " property="FROM_COL_ID">FROM_COL_ID = #FROM_COL_ID# </isNotNull>
           <isNotNull prepend=", " property="TO_COL_ID"  >TO_COL_ID   = #TO_COL_ID#   </isNotNull>
           <isNotNull prepend=", " property="REQUIRED_YN">REQUIRED_YN = #REQUIRED_YN# </isNotNull>
           <isNotNull prepend=", " property="DATA_TYPE"  >DATA_TYPE   = #DATA_TYPE#   </isNotNull>
           <isNotNull prepend=", " property="DATA_LENGTH">DATA_LENGTH = #DATA_LENGTH#::numeric </isNotNull>
           <isNotNull prepend=", " property="DATA_FORMAT">DATA_FORMAT = #DATA_FORMAT# </isNotNull>
           <isNotNull prepend=", " property="REMARK"     >REMARK      = #REMARK#      </isNotNull>
         WHERE INTERFACE_ITEM_MST_ID = #INTERFACE_ITEM_MST_ID#::numeric
           AND COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
           AND COL_SEQ = #COL_SEQ#::numeric
    </update>

    <delete id="SM7005.deleteInterfaceItemDtlInfo" parameterClass="java.util.Map">
        DELETE FROM INTERFACE_ITEM_DTL
         WHERE COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
           AND COL_SEQ = #COL_SEQ#::numeric
    </delete>

    <delete id="SM7005.deleteInterfaceItemDtlAllInfo" parameterClass="java.util.Map">
        DELETE FROM INTERFACE_ITEM_DTL
         WHERE COMPANY_CD = #COMPANY_CD#
           AND IF_CD = #IF_CD#
    </delete>

    <!-- SM7006 START :: CARLOS -->
    <select id="SM7006.selectInterfaceItemMstList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT ISM.SCHEDULE_CD
              ,ISM.COMPANY_CD
              ,ISM.IF_CD
              ,IIM.IF_NAME
              ,ISM.IF_METHOD
              ,IIM.ITEM_TYPE
              ,IIM.FILE_TYPE
              ,IIM.FILE_PATH
              ,FN_GET_COMMON_CD(IIM.COMPANY_CD, 'BCTY', IIM.ITEM_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ITEM_TYPE_NAME
              ,COALESCE(ISM.VALID_CHECK_YN, 'Y') AS VALID_CHECK_YN
          FROM INTERFACE_SCHEDULE_MAPPING ISM
               INNER JOIN INTERFACE_ITEM_MST IIM
                  ON IIM.COMPANY_CD = ISM.COMPANY_CD
                 AND IIM.IF_CD = ISM.IF_CD
                 AND IIM.USING_YN = 'Y'
         WHERE ISM.COMPANY_CD = #COMPANY_CD#
           AND ISM.SCHEDULE_CD = #SCHEDULE_CD#
           AND ISM.IF_METHOD NOT IN('U', 'E', 'H')
         ORDER BY ISM.SCHEDULE_SEQ
    </select>

    <select id="SM7006.selectInterfaceItemMstInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT T.INTERFACE_ITEM_MST_ID
              ,T.IF_CD
              ,T.COMPANY_CD AS COMPANY_CD
              ,T.IF_NAME
              ,T.SOURCE_TABLE
              ,T.TARGET_TABLE
              ,T.HISTORY_TABLE
              ,T.ITEM_TYPE
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'BCTY', T.ITEM_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ITEM_TYPE_NAME
              ,T.REMARK
              ,T.USING_YN
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'YN', T.USING_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS USING_YN_NAME
              ,T.FILE_PATH
              ,T.FILE_NAME
              ,CASE WHEN T.ITEM_TYPE = 'P' THEN 'Z' ELSE T.FILE_STATUS END AS FILE_STATUS
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'FSTAT', (CASE WHEN T.ITEM_TYPE = 'P' THEN 'Z' ELSE T.FILE_STATUS END), 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS FILE_STATUS_NAME
              ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,T.CREATE_BY
              ,TO_CHAR(T.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,T.UPDATE_BY
          FROM INTERFACE_ITEM_MST T
         WHERE T.COMPANY_CD = #COMPANY_CD#
           AND T.INTERFACE_ITEM_MST_ID = #INTERFACE_ITEM_MST_ID#
    </select>

    <select id="SM7006.selectInterfaceItemMstCombo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <isNotEmpty property="ALL">
            <isEqual property="ALL" compareValue="Y">
                SELECT ' ' AS CODE
                      ,MESSAGE AS NAME
                      ,NULL AS INTERFACE_ITEM_MST_ID
                      ,NULL AS COMPANY_CD
                      ,NULL AS SOURCE_TABLE
                      ,NULL AS TARGET_TABLE
                      ,NULL AS HISTORY_TABLE
                      ,NULL AS ITEM_TYPE
                      ,NULL AS ITEM_TYPE_NAME
                      ,NULL AS REMARK
                      ,NULL AS USING_YN
                      ,NULL AS USING_YN_NAME
                      ,NULL AS FILE_PATH
                      ,NULL AS FILE_NAME
                      ,NULL AS FILE_TYPE
                      ,NULL AS FILE_STATUS
                  FROM MESSAGE_TABLE
                 WHERE MESSAGE_CODE = 'TXT_ALL'
                   AND NATION_CODE = COALESCE(#SESSION_DEFAULT_LANGUAGE#, 'EN')
               UNION ALL
            </isEqual>
        </isNotEmpty>
        SELECT T.IF_CD AS CODE
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'BCTY', T.ITEM_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) || '::' || T.IF_NAME AS NAME
              ,T.INTERFACE_ITEM_MST_ID
              ,T.COMPANY_CD
              ,T.SOURCE_TABLE
              ,T.TARGET_TABLE
              ,T.HISTORY_TABLE
              ,T.ITEM_TYPE
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'BCTY', T.ITEM_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ITEM_TYPE_NAME
              ,T.REMARK
              ,T.USING_YN
              ,FN_GET_COMMON_CD(T.COMPANY_CD, 'YN', T.USING_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS USING_YN_NAME
              ,T.FILE_PATH
              ,T.FILE_NAME
              ,T.FILE_TYPE
              ,T.FILE_STATUS
          FROM INTERFACE_ITEM_MST T
         WHERE T.COMPANY_CD = #COMPANY_CD#
    </select>

    <select id="SM7006.selectInterfaceHistoryList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT IH.INTERFACE_HISTORY_ID
                  ,IH.COMPANY_CD
                  ,IH.DIVISION_CD
                  ,IH.SCHEDULE_CD
                  ,IH.IF_CD
                  ,IIM.IF_NAME
                  ,IH.TOTAL_ROWS
                  ,IH.FROM_DATE
                  ,IH.TO_DATE
                  ,IH.IF_PARAM
                  ,IH.ERROR_YN
                  ,FN_GET_COMMON_CD(IH.COMPANY_CD, 'YN_TYPE', IH.ERROR_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS ERROR_YN_NAME
                  ,IH.ERROR_MESSAGE
                  ,IH.SUBMIT_STATUS
                  ,FN_GET_COMMON_CD(IH.COMPANY_CD, 'SUBMIT_STATUS', IH.SUBMIT_STATUS, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS SUBMIT_STATUS_NAME
                  ,IH.BATCH_STATUS
                  ,FN_GET_COMMON_CD(IH.COMPANY_CD, 'BATCH_STATUS', IH.BATCH_STATUS, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS BATCH_STATUS_NAME
                  ,IH.TRANS_STATUS
                  ,FN_GET_COMMON_CD(IH.COMPANY_CD, 'TRANS_STATUS', IH.TRANS_STATUS, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS TRANS_STATUS_NAME
                  ,TO_CHAR(IH.TRANS_DATE, 'YYYY-MM-DD HH24:MI:SS') AS TRANS_DATE
                  ,TO_CHAR(IH.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                  ,IH.CREATE_BY
                  ,TO_CHAR(IH.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
                  ,IH.UPDATE_BY
              FROM INTERFACE_HISTORY IH
                   LEFT JOIN INTERFACE_ITEM_MST IIM
                     ON IIM.COMPANY_CD = IH.COMPANY_CD
                    AND IIM.IF_CD = IH.IF_CD
             WHERE 1=1
               AND IH.COMPANY_CD = #COMPANY_CD#
            <isNotEmpty property="IF_CD">
               AND IH.IF_CD = #IF_CD#
            </isNotEmpty>
            <isNotEmpty property="schKeyWord">
               AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
        <include refid="select-paging-end" />
         ORDER BY INTERFACE_HISTORY_ID DESC
    </select>

    <!-- SM7007 : 공통코드 관리 -->
    <select id="SM7007.selectSysCategoryList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT CM.CATEGORY_CD
                  ,CM.CATEGORY_NAME_ENG
                  ,CM.CATEGORY_NAME
                  ,COMPANY_YN
                  ,UPDATE_YN
              FROM CODE_MST CM
             WHERE 1 = 1
             <isNotEmpty property="schKeyWord">
               AND UPPER(CM.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
             </isNotEmpty>
             <isNotEqual property="SESSION_USER_ID" compareValue="fta">
               AND CM.CATEGORY_CD NOT IN('SYS_CONFIG')
               AND CM.COMPANY_YN = 'Y'
             </isNotEqual>
        <include refid="select-paging-end" />
         ORDER BY CATEGORY_CD
    </select>

    <select id="SM7007.selectSysCategoryDetail" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CM.CATEGORY_CD
              ,CM.CATEGORY_NAME_ENG
              ,CM.CATEGORY_NAME
              ,COMPANY_YN
              ,UPDATE_YN
          FROM CODE_MST CM
         WHERE CM.CATEGORY_CD = #CATEGORY_CD#
    </select>

    <insert id="SM7007.insertSysCategoryInfo" parameterClass="java.util.Map">
        INSERT INTO CODE_MST(
             CATEGORY_CD
            ,CATEGORY_NAME_ENG
            ,CATEGORY_NAME
            ,COMPANY_YN
            ,UPDATE_YN
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             #CATEGORY_CD#
            ,#CATEGORY_NAME_ENG#
            ,#CATEGORY_NAME#
            ,#COMPANY_YN#
            ,'Y'
            ,NOW()::TIMESTAMP
            ,#USER_ID#
            ,NOW()::TIMESTAMP
            ,#USER_ID#
        )
    </insert>

    <update id="SM7007.updateSysCategoryInfo" parameterClass="java.util.Map">
        UPDATE CODE_MST
           SET CATEGORY_NAME_ENG = #CATEGORY_NAME_ENG#
              ,CATEGORY_NAME = #CATEGORY_NAME#
              ,COMPANY_YN = #COMPANY_YN#
              ,UPDATE_DATE = NOW()::TIMESTAMP
              ,UPDATE_BY = #USER_ID#
         WHERE CATEGORY_CD = #CATEGORY_CD#
    </update>

    <delete id="SM7007.deleteSysCategoryInfo" parameterClass="java.util.Map">
        DELETE FROM CODE_MST
        WHERE CATEGORY_CD = #CATEGORY_CD#
    </delete>

    <select id="SM7007.selectSysCodeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CD.COMPANY_CD
              ,CD.CATEGORY_CD
              ,CD.CODE
              ,CD.CODE_NAME
              ,CD.CODE_NAME_ENG
              ,CD.SORT_NO
              ,CD.TXT_VALUE1
              ,CD.TXT_VALUE2
              ,CD.TXT_VALUE3
              ,CD.TXT_VALUE4
              ,CD.TXT_VALUE5
              ,CD.NUM_VALUE1
              ,CD.NUM_VALUE2
              ,CD.NUM_VALUE3
              ,CD.NUM_VALUE4
              ,CD.NUM_VALUE5
          FROM CODE_DTL CD
         WHERE CD.COMPANY_CD = #COMPANY_CD#
           AND CD.CATEGORY_CD = #CATEGORY_CD#
        <isNotEmpty property="schKeyWord">
           AND UPPER(CD.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>
         ORDER BY SORT_NO
    </select>

    <select id="SM7007.selectSysCodeDetail" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CD.CATEGORY_CD
              ,CD.CODE
              ,CD.CODE_NAME
              ,CD.CODE_NAME_ENG
              ,CD.SORT_NO
              ,CD.TXT_VALUE1
              ,CD.TXT_VALUE2
              ,CD.TXT_VALUE3
              ,CD.TXT_VALUE4
              ,CD.TXT_VALUE5
              ,CD.NUM_VALUE1
              ,CD.NUM_VALUE2
              ,CD.NUM_VALUE3
              ,CD.NUM_VALUE4
              ,CD.NUM_VALUE5
          FROM CODE_DTL CD
         WHERE CD.CATEGORY_CD = #CATEGORY_CD#
           AND CD.COMPANY_CD = #COMPANY_CD#
           AND CD.CODE = #CODE#
    </select>

    <insert id="SM7007.insertSysCodeInfo" parameterClass="java.util.Map">
        INSERT INTO CODE_DTL(
             COMPANY_CD
            ,CATEGORY_CD
            ,CODE
            ,CODE_NAME
            ,CODE_NAME_ENG
            ,SORT_NO
            ,TXT_VALUE1
            ,TXT_VALUE2
            ,TXT_VALUE3
            ,TXT_VALUE4
            ,TXT_VALUE5
            ,NUM_VALUE1
            ,NUM_VALUE2
            ,NUM_VALUE3
            ,NUM_VALUE4
            ,NUM_VALUE5
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        SELECT COMPANY_CD
              ,#CATEGORY_CD#
              ,#CODE#
              ,#CODE_NAME#
              ,#CODE_NAME_ENG#
              ,#SORT_NO#::numeric
              ,#TXT_VALUE1#
              ,#TXT_VALUE2#
              ,#TXT_VALUE3#
              ,#TXT_VALUE4#
              ,#TXT_VALUE5#
              ,FN_PG_GET_CAST_NUM(#NUM_VALUE1#)
              ,FN_PG_GET_CAST_NUM(#NUM_VALUE2#)
              ,FN_PG_GET_CAST_NUM(#NUM_VALUE3#)
              ,FN_PG_GET_CAST_NUM(#NUM_VALUE4#)
              ,FN_PG_GET_CAST_NUM(#NUM_VALUE5#)
              ,NOW()
              ,#USER_ID#
              ,NOW()
              ,#USER_ID#
          FROM COMPANY
       <isNotEmpty property="COMPANY_CD">
         WHERE COMPANY_CD = #COMPANY_CD#
       </isNotEmpty>
    </insert>

    <update id="SM7007.updateSysCodeInfo" parameterClass="java.util.Map">
        UPDATE CODE_DTL
           SET CODE_NAME = #CODE_NAME#
              ,CODE_NAME_ENG = #CODE_NAME_ENG#
              ,SORT_NO = #SORT_NO#::numeric
              ,TXT_VALUE1 = #TXT_VALUE1#
              ,TXT_VALUE2 = #TXT_VALUE2#
              ,TXT_VALUE3 = #TXT_VALUE3#
              ,TXT_VALUE4 = #TXT_VALUE4#
              ,TXT_VALUE5 = #TXT_VALUE5#
              ,NUM_VALUE1 = FN_PG_GET_CAST_NUM(#NUM_VALUE1#)
              ,NUM_VALUE2 = FN_PG_GET_CAST_NUM(#NUM_VALUE2#)
              ,NUM_VALUE3 = FN_PG_GET_CAST_NUM(#NUM_VALUE3#)
              ,NUM_VALUE4 = FN_PG_GET_CAST_NUM(#NUM_VALUE4#)
              ,NUM_VALUE5 = FN_PG_GET_CAST_NUM(#NUM_VALUE5#)
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #USER_ID#
         WHERE CATEGORY_CD = #CATEGORY_CD#
        <isNotEmpty property="COMPANY_CD">
           AND COMPANY_CD = #COMPANY_CD#
        </isNotEmpty>
           AND CODE = #CODE#
    </update>

    <delete id="SM7007.deleteSysCodeInfo" parameterClass="java.util.Map">
        DELETE FROM CODE_DTL
         WHERE CATEGORY_CD = #CATEGORY_CD#
        <isNotEmpty property="COMPANY_CD">
           AND COMPANY_CD = #COMPANY_CD#
        </isNotEmpty>
           AND CODE = #CODE#
    </delete>

    <select id="SM7007.selectcDupCheckCodeMst" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(*) AS DUPLICATE
          FROM CODE_MST
         WHERE CATEGORY_CD = #CATEGORY_CD#
    </select>

    <select id="SM7007.selectcDupCheckCodeDtl" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(*) AS DUPLICATE
          FROM CODE_DTL
         WHERE CATEGORY_CD = #CATEGORY_CD#
           AND COMPANY_CD = #COMPANY_CD#
           AND CODE = #CODE#
    </select>

    <select id="SM7008.selectMessgeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT MT.MESSAGE
                  ,MT.MESSAGE_CODE
                  ,MT.NATION_CODE
                  ,TO_CHAR(MT.CREATE_DATE,'YYYYMMDD') AS CREATE_DATE
                  ,MT.CREATE_BY
              FROM MESSAGE_TABLE MT
             WHERE MT.NATION_CODE = #NATION_CODE#
            <isNotEmpty property="schKeyWord">
               AND UPPER(MT.$schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
            <isNotEmpty property="SCH_FROM_DATE">
               AND TO_CHAR(MT.CREATE_DATE,'YYYYMMDD') BETWEEN #SCH_FROM_DATE# AND #SCH_TO_DATE#
            </isNotEmpty>
        <include refid="select-paging-end" />
         ORDER BY MESSAGE_CODE
    </select>

    <select id="SM7008.selectMessgeDetail" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT MT.MESSAGE
              ,MT.MESSAGE_CODE
              ,MT.NATION_CODE
              ,MT.APPLY_START_DATE
              ,MT.APPLY_END_DATE
              ,MT.USE_YN
              ,MT.COMMENTS
              ,MT.CREATE_BY
              ,MT.MESSAGE AS BF_MESSAGE
              ,MT.APPLY_START_DATE AS BF_APPLY_START_DATE
              ,MT.APPLY_END_DATE AS BF_APPLY_END_DATE
              ,MT.USE_YN AS BF_USE_YN
              ,MT.COMMENTS AS BF_COMMENTS
          FROM MESSAGE_TABLE MT
         WHERE MT.NATION_CODE = #NATION_CODE#
           AND MT.MESSAGE_CODE = #MESSAGE_CODE#
    </select>

    <insert id="SM7008.insertMessageInfo" parameterClass="java.util.Map">
        INSERT INTO MESSAGE_TABLE(MESSAGE, MESSAGE_CODE, NATION_CODE, CREATE_DATE, CREATE_BY, UPDATE_DATE, UPDATE_BY)
        VALUES(#MESSAGE#, #MESSAGE_CODE#, #NATION_CODE#, NOW(), #USER_ID#, NOW(), #USER_ID#)
    </insert>

    <update id="SM7008.updateMessageInfo" parameterClass="java.util.Map">
        UPDATE MESSAGE_TABLE
           SET MESSAGE = #MESSAGE#
              ,APPLY_START_DATE = #APPLY_START_DATE#
              ,APPLY_END_DATE = #APPLY_END_DATE#
              ,USE_YN = #USE_YN#
              ,COMMENTS = #COMMENTS#
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #USER_ID#
         WHERE MESSAGE_CODE = #MESSAGE_CODE#
           AND NATION_CODE = #NATION_CODE#
           AND USE_YN = #BF_USE_YN#
           AND APPLY_START_DATE = #BF_APPLY_START_DATE#
           AND APPLY_END_DATE = #BF_APPLY_END_DATE#
           AND CREATE_BY = #CREATE_BY#
        <isNotEmpty property="BF_COMMENTS">
           AND COMMENTS = #BF_COMMENTS#
        </isNotEmpty>
        <isNotEmpty property="BF_MESSAGE">
           AND MESSAGE = #BF_MESSAGE#
        </isNotEmpty>
    </update>

    <!-- 메뉴 목록 -->
    <select id="SM7009.selectMenuList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
	        SELECT T1.SYS_ID
	              ,T1.MENU_ID
	              ,COALESCE(MLD1.WORD, T1.MENU_NM) AS MENU_NM
	              ,T1.HGRNK_MENU_ID
	              ,COALESCE(MLD2.WORD, T2.MENU_NM) AS HGRNK_MENU_NM
	              ,T1.MENU_LVL_NO
	              ,T1.MENU_SORT_SER
	              ,T1.DIRECT_URL
	              ,T1.PRGM_ID
	              ,T1.USE_YN
	              ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'YN', T1.USE_YN, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS USE_YN_NAME
	          FROM MENU_MGMT T1
	               INNER JOIN MENU_MGMT T2
	                  ON T1.HGRNK_MENU_ID = T2.MENU_ID
	                LEFT OUTER JOIN MENU_LANG_DIC MLD1
	                  ON MLD1.MENU_ID = T1.MENU_ID
	                 AND MLD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
	                 AND MLD1.LANG_ID = '1'
	                LEFT OUTER JOIN MENU_LANG_DIC MLD2
	                  ON MLD2.MENU_ID = T2.MENU_ID
	                 AND MLD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
	                 AND MLD2.LANG_ID = '1'
	         WHERE 1=1
	        <isNotEmpty property="SYS_ID">
	           AND T1.SYS_ID = #SYS_ID#
	        </isNotEmpty>
	        <isNotEmpty property="HGRNK_MENU_ID">
	           AND T2.HGRNK_MENU_ID = #HGRNK_MENU_ID#
	        </isNotEmpty>
	        <isNotEmpty property="USE_YN">
               AND T1.USE_YN = #USE_YN#
            </isNotEmpty>
         <include refid="select-paging-end" />
         <isNotEmpty property="schKeyWord">
         WHERE UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
         </isNotEmpty>
         ORDER BY MENU_SORT_SER
    </select>

    <!-- 메뉴 정보 -->
    <select id="SM7009.selectMenuInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SYS_ID
              ,MENU_ID
              ,MENU_NM
              ,HGRNK_MENU_ID
              ,HGRNK_SYS_ID
              ,MENU_TYPE
              ,MENU_LVL_NO
              ,MENU_SORT_SER
              ,MENU_DSPLY_YN
              ,MENU_START_DT
              ,MENU_END_DT
              ,MENU_EPLN
              ,USE_YN
              ,DIRECT_URL
              ,PRGM_ID
          FROM MENU_MGMT
         WHERE MENU_ID = #MENU_ID#
    </select>

    <!-- 메뉴 언어 목록 -->
    <select id="SM7009.selectMenuLanguageList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT MENU_ID
              ,LANGUAGE_CAT
              ,LANG_ID
              ,WORD
              ,MEANNING
          FROM MENU_LANG_DIC
         WHERE MENU_ID = #MENU_ID#
         ORDER BY LANGUAGE_CAT
    </select>

    <!-- 메뉴 정보 추가 -->
    <insert id="SM7009.insertMenuInfo" parameterClass="java.util.Map">
        INSERT INTO MENU_MGMT (
             SYS_ID
            ,MENU_ID
            ,MENU_NM
            ,HGRNK_MENU_ID
            ,HGRNK_SYS_ID
            ,MENU_TYPE
            ,MENU_LVL_NO
            ,MENU_SORT_SER
            ,MENU_DSPLY_YN
            ,MENU_START_DT
            ,MENU_END_DT
            ,MENU_EPLN
            ,USE_YN
            ,DIRECT_URL
            ,PRGM_ID
            ,CREATE_BY
            ,CREATE_DATE
            ,UPDATE_BY
            ,UPDATE_DATE)
        VALUES (
             #SYS_ID#
            ,#MENU_ID#
            ,#MENU_NM#
            ,#HGRNK_MENU_ID#
            ,#HGRNK_SYS_ID#
            ,#MENU_TYPE#
            ,#MENU_LVL_NO#::numeric
            ,#MENU_SORT_SER#::numeric
            ,'Y'
            ,TO_CHAR(NOW(),'YYYYMMDD')
            ,'99991231'
            ,#MENU_EPLN#
            ,#USE_YN#
            ,#DIRECT_URL#
            ,#PRGM_ID#
            ,#SESSION_USER_ID#
            ,NOW()
            ,#SESSION_USER_ID#
            ,NOW()
        )
    </insert>

    <!-- 메뉴 수정 -->
    <update id="SM7009.updateMenuInfo" parameterClass="java.util.Map">
        UPDATE MENU_MGMT
        <dynamic prepend="SET">
            <isNotNull prepend=", " property="SYS_ID"       >SYS_ID        = #SYS_ID#        </isNotNull>
            <isNotNull prepend=", " property="MENU_NM"      >MENU_NM       = #MENU_NM#       </isNotNull>
            <isNotNull prepend=", " property="HGRNK_MENU_ID">HGRNK_MENU_ID = #HGRNK_MENU_ID# </isNotNull>
            <isNotNull prepend=", " property="HGRNK_SYS_ID" >HGRNK_SYS_ID  = #HGRNK_SYS_ID#  </isNotNull>
            <isNotNull prepend=", " property="MENU_TYPE"    >MENU_TYPE     = #MENU_TYPE#     </isNotNull>
            <isNotNull prepend=", " property="MENU_LVL_NO"  >MENU_LVL_NO   = FN_PG_GET_CAST_NUM(#MENU_LVL_NO#)   </isNotNull>
            <isNotNull prepend=", " property="MENU_SORT_SER">MENU_SORT_SER = FN_PG_GET_CAST_NUM(#MENU_SORT_SER#) </isNotNull>
            <isNotNull prepend=", " property="MENU_EPLN"    >MENU_EPLN     = #MENU_EPLN#     </isNotNull>
            <isNotNull prepend=", " property="DIRECT_URL"   >DIRECT_URL    = #DIRECT_URL#    </isNotNull>
            <isNotNull prepend=", " property="USE_YN"       >USE_YN        = #USE_YN#        </isNotNull>
        </dynamic>
             ,PRGM_ID = #PRGM_ID#
             ,UPDATE_BY = #SESSION_USER_ID#
             ,UPDATE_DATE = NOW()
         WHERE MENU_ID = #MENU_ID#
    </update>

    <!-- 메뉴 언어 정보 -->
    <select id="SM7009.selectMenuLanguageInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT MENU_ID
              ,LANGUAGE_CAT
              ,LANG_ID
              ,WORD
              ,MEANNING
          FROM MENU_LANG_DIC
         WHERE MENU_ID = #MENU_ID#
           AND LANGUAGE_CAT = #LANGUAGE_CAT#
           AND LANG_ID = FN_PG_GET_CAST_NUM(#LANG_ID#)
    </select>

    <!-- 메뉴 정보 추가 -->
    <insert id="SM7009.insertMenuLanguageInfo" parameterClass="java.util.Map">
        INSERT INTO MENU_LANG_DIC(
             MENU_ID
            ,LANGUAGE_CAT
            ,LANG_ID
            ,WORD
            ,MEANNING)
        VALUES(
             #MENU_ID#
            ,#LANGUAGE_CAT#
            ,FN_PG_GET_CAST_NUM(#LANG_ID#)
            ,#WORD#
            ,#MEANNING#
        )
    </insert>

    <!-- 메뉴 수정 -->
    <update id="SM7009.updateMenuLanguageInfo" parameterClass="java.util.Map">
        UPDATE MENU_LANG_DIC
        <dynamic prepend="SET">
            <isNotNull prepend=", " property="WORD"         >WORD        = #WORD#       </isNotNull>
            <isNotNull prepend=", " property="MEANNING"     >MEANNING    = #MEANNING#   </isNotNull>
        </dynamic>
         WHERE MENU_ID = #MENU_ID#
           AND LANGUAGE_CAT = #LANGUAGE_CAT#
           AND LANG_ID = FN_PG_GET_CAST_NUM(#LANG_ID#)
    </update>

    <select id="SM7010.selectAuthGroupList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT AG.COMPANY_CD, AG.AUTH_GROUP_ID, AG.AUTH_GROUP_NAME, AG.AUTH_GROUP_NAME_ENG, AG.USE_YN, AG.COMMENTS
          FROM AUTH_GROUP AG
               INNER JOIN COMPANY C
                  ON AG.COMPANY_CD = C.COMPANY_CD
         WHERE AG.COMPANY_CD = #COMPANY_CD#
         <isNotEqual property="SESSION_USER_ID" compareValue="fta">
           AND AG.AUTH_GROUP_ID NOT IN('supplier', 'admin', 'root')
           AND AG.AUTH_GROUP_ID != COALESCE(C.AUTH_GROUP_ID, '-')
         </isNotEqual>
         ORDER BY AG.AUTH_GROUP_ID
    </select>

    <select id="SM7010.selectAuthGroupInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COMPANY_CD, AUTH_GROUP_ID, AUTH_GROUP_NAME, AUTH_GROUP_NAME_ENG, USE_YN, COMMENTS
          FROM AUTH_GROUP
         WHERE COMPANY_CD = #COMPANY_CD#
           AND AUTH_GROUP_ID = #AUTH_GROUP_ID#
    </select>

    <insert id="SM7010.insertAuthGroupInfo" parameterClass="java.util.Map">
        INSERT INTO AUTH_GROUP(COMPANY_CD, AUTH_GROUP_ID, AUTH_GROUP_NAME, AUTH_GROUP_NAME_ENG, USE_YN, COMMENTS)
        SELECT COMPANY_CD, #AUTH_GROUP_ID#, #AUTH_GROUP_NAME#, #AUTH_GROUP_NAME_ENG#, COALESCE(#USE_YN#, 'Y'), #COMMENTS#
          FROM COMPANY
        <isNotEmpty property="COMPANY_CD">
         WHERE COMPANY_CD = #COMPANY_CD#
        </isNotEmpty>
    </insert>

    <update id="SM7010.updateAuthGroupInfo" parameterClass="java.util.Map">
        UPDATE AUTH_GROUP
        SET AUTH_GROUP_NAME = #AUTH_GROUP_NAME#
           ,AUTH_GROUP_NAME_ENG = #AUTH_GROUP_NAME_ENG#
           ,USE_YN = COALESCE(#USE_YN#, 'Y')
           ,COMMENTS = #COMMENTS#
         WHERE AUTH_GROUP_ID = #AUTH_GROUP_ID#
        <isNotEmpty property="COMPANY_CD">
           AND COMPANY_CD = #COMPANY_CD#
        </isNotEmpty>
    </update>

    <delete id="SM7010.deleteAuthGroupInfo" parameterClass="java.util.Map">
        DELETE FROM AUTH_GROUP
         WHERE AUTH_GROUP_ID = #AUTH_GROUP_ID#
        <isNotEmpty property="COMPANY_CD">
           AND COMPANY_CD = #COMPANY_CD#
        </isNotEmpty>
    </delete>

    <select id="SM7010.selectAuthUserList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT AU.COMPANY_CD, AU.AUTH_GROUP_ID, AU.USER_ID, FU.EMP_NO, FU.NAME, FU.NAME_ENG, FU.POSITION
              ,FU.EMAIL, FU.CELL_PHONE_NO, FU.START_DATE, FU.END_DATE
          FROM AUTH_USER AU
               INNER JOIN FTA_USER FU
                  ON AU.COMPANY_CD = FU.COMPANY_CD
                 AND AU.USER_ID = FU.USER_ID
         WHERE AU.COMPANY_CD = #COMPANY_CD#
           AND AU.AUTH_GROUP_ID = #AUTH_GROUP_ID#
           AND AU.USER_ID NOT IN('fta', 'supplier')
         ORDER BY AU.USER_ID
    </select>

    <!-- 사용자권한 중복체크 -->
    <select id="SM7010.selectAuthUserDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(*) AS DUPLICATE
          FROM AUTH_USER
         WHERE AUTH_GROUP_ID = #AUTH_GROUP_ID#
           AND COMPANY_CD = #COMPANY_CD#
           AND USER_ID = #USER_ID#
    </select>

    <!-- 권한그룹 중복체크 -->
    <select id="SM7010.selectAuthGroupDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(*) AS DUPLICATE
          FROM AUTH_GROUP
         WHERE AUTH_GROUP_ID = #AUTH_GROUP_ID#
           AND COMPANY_CD = #COMPANY_CD#
    </select>

    <insert id="SM7010.insertAuthUserInfo" parameterClass="java.util.Map">
        INSERT INTO AUTH_USER(COMPANY_CD, AUTH_GROUP_ID, USER_ID)
        VALUES (#COMPANY_CD#, #AUTH_GROUP_ID#, #USER_ID#)
    </insert>

    <delete id="SM7010.deleteAuthUserInfo" parameterClass="java.util.Map">
        DELETE FROM AUTH_USER
         WHERE AUTH_GROUP_ID = #AUTH_GROUP_ID#
           AND COMPANY_CD = #COMPANY_CD#
           AND USER_ID = #USER_ID#
    </delete>

    <select id="SM7010.selectMenuList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT MM.MENU_ID, COALESCE(MLD.WORD, MM.MENU_NM) AS MENU_NM, MM.MENU_EPLN
          FROM MENU_MGMT MM
               LEFT OUTER JOIN MENU_LANG_DIC MLD
                 ON MLD.MENU_ID = MM.MENU_ID
                AND MLD.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                AND MLD.LANG_ID = '1'
         WHERE MM.USE_YN = 'Y'
         <isNotEqual property="SESSION_USER_ID" compareValue="fta">
           AND MM.SYS_ID != 'SM'
           AND MM.HGRNK_MENU_ID != 'OP-0000'
         </isNotEqual>
         <isNotEqual property="AUTH_GROUP_ID" compareValue="supplier">
           AND MM.SYS_ID != 'SP'
         </isNotEqual>
         <isEqual property="AUTH_GROUP_ID" compareValue="supplier">
           AND MM.SYS_ID = 'SP'
         </isEqual>
           AND NOT EXISTS(SELECT 1
                            FROM AUTH_MENU AM
                           WHERE AM.MENU_ID = MM.MENU_ID
                             AND AM.COMPANY_CD = #COMPANY_CD#
                             AND AM.AUTH_GROUP_ID = #AUTH_GROUP_ID#
                          )
        ORDER BY MENU_SORT_SER
    </select>

    <select id="SM7010.selectAuthMenuList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT AM.COMPANY_CD ,AM.AUTH_GROUP_ID, AM.MENU_ID, COALESCE(MLD.WORD, MM.MENU_NM) AS MENU_NM, AM.SEL_AUTH, AM.REG_AUTH, AM.UPD_AUTH, AM.DEL_AUTH, AM.EXC_AUTH, AM.FLE_AUTH
          FROM AUTH_MENU AM
               INNER JOIN MENU_MGMT MM
                  ON MM.MENU_ID = AM.MENU_ID
                LEFT OUTER JOIN MENU_LANG_DIC MLD
                  ON MLD.MENU_ID = MM.MENU_ID
                 AND MLD.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                 AND MLD.LANG_ID = '1'
         WHERE AM.COMPANY_CD = #COMPANY_CD#
           AND AM.AUTH_GROUP_ID = #AUTH_GROUP_ID#
         ORDER BY MM.MENU_SORT_SER
    </select>

    <insert id="SM7010.insertAuthMenuInfo" parameterClass="java.util.Map">
        INSERT INTO AUTH_MENU(COMPANY_CD, AUTH_GROUP_ID, MENU_ID, SEL_AUTH, REG_AUTH, UPD_AUTH, DEL_AUTH, EXC_AUTH, FLE_AUTH)
        SELECT COMPANY_CD, #AUTH_GROUP_ID#, #MENU_ID#, COALESCE(#SEL_AUTH#, 'Y'),COALESCE(#REG_AUTH#, 'Y'),COALESCE(#UPD_AUTH#, 'Y'),COALESCE(#DEL_AUTH#, 'Y'),COALESCE(#EXC_AUTH#, 'Y'),COALESCE(#FLE_AUTH#, 'Y')
          FROM COMPANY
        <isNotEmpty property="COMPANY_CD">
         WHERE COMPANY_CD = #COMPANY_CD#
        </isNotEmpty>
    </insert>

    <delete id="SM7010.deleteAuthMenuInfo" parameterClass="java.util.Map">
        DELETE FROM AUTH_MENU
         WHERE AUTH_GROUP_ID = #AUTH_GROUP_ID#
           AND COMPANY_CD = #COMPANY_CD#
           AND MENU_ID = #MENU_ID#
    </delete>
    
    <update id="SM7010.updateAuthMenuInfo" parameterClass="java.util.Map">
		UPDATE AUTH_MENU 
		   SET SEL_AUTH = COALESCE(#SEL_AUTH#, 'N')
		      ,REG_AUTH = COALESCE(#REG_AUTH#, 'N')
		      ,UPD_AUTH = COALESCE(#UPD_AUTH#, 'N')
		      ,DEL_AUTH = COALESCE(#DEL_AUTH#, 'N')
		      ,EXC_AUTH = COALESCE(#EXC_AUTH#, 'N')
		      ,FLE_AUTH = COALESCE(#FLE_AUTH#, 'N')
		 WHERE COMPANY_CD = #COMPANY_CD#
		   AND AUTH_GROUP_ID = #AUTH_GROUP_ID#
		   AND MENU_ID = #MENU_ID#
    </update>    

    <!-- 공지사항 목록 -->
    <select id="SM7011.selectNoticeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT T.NOTICE_NO
                  ,T.COMPANY_CD
                  ,MT1.MESSAGE AS POST_TYPE_NAME
                  ,'N' AS POST_TYPE
                  ,T.SUBJECT
                  ,NULL AS CONTENT1
                  ,T.BBS_TYPE
                  ,FN_GET_COMMON_CD(T.COMPANY_CD, 'BBS_TYPE', T.BBS_TYPE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS BBS_TYPE_NAME
                  ,T.START_DATE
                  ,T.END_DATE
                  ,TO_CHAR(T.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                  ,(CASE WHEN TO_CHAR(T.CREATE_DATE, 'YYYYMMDD') BETWEEN 
	                          TO_CHAR(NOW() - INTERVAL '4 WEEK', 'YYYYMMDD') AND TO_CHAR(NOW(), 'YYYYMMDD') THEN 'Y'
	                     ELSE 'N'
	                END) AS NEW_YN
              FROM NOTICE T
                   LEFT OUTER JOIN MESSAGE_TABLE MT1
                     ON MT1.MESSAGE_CODE  = 'NOTIS'
                    AND MT1.NATION_CODE  = #SESSION_DEFAULT_LANGUAGE#
             WHERE T.COMPANY_CD = #COMPANY_CD#
            <isNotEmpty property="BBS_TYPE">
               AND (T.BBS_TYPE IN(#BBS_TYPE#, 'A') OR T.BBS_TYPE IS NULL)
            </isNotEmpty>
            <isNotEmpty property="SUBJECT">
               AND UPPER(T.SUBJECT) LIKE '%' || UPPER(#SUBJECT#) || '%'
            </isNotEmpty>
            <isNotEmpty property="USE_YN">
                <isEqual property="USE_YN" compareValue="Y">
                   AND TO_CHAR(NOW(),'YYYYMMDD') BETWEEN T.START_DATE AND T.END_DATE
                </isEqual>
            </isNotEmpty>
            <isNotEmpty property="USE_YN">
                <isEqual property="USE_YN" compareValue="N">
                   AND TO_CHAR(NOW(),'YYYYMMDD') NOT BETWEEN T.START_DATE AND T.END_DATE
                </isEqual>
            </isNotEmpty>
        <include refid="select-paging-end" />
      <isNotEmpty property="schKeyWord">
         WHERE UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
      </isNotEmpty>
         ORDER BY CREATE_DATE DESC
    </select>

    <select id="SM7011.selectNoticeInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT NOTICE_NO
              ,COMPANY_CD
              ,SUBJECT
              ,CONTENT1
              ,START_DATE
              ,END_DATE
              ,NOTICE_FILE_NAME
              ,CREATE_BY
              ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
          FROM NOTICE
         WHERE COMPANY_CD = #COMPANY_CD#
           AND NOTICE_NO = fn_pg_get_cast_num(#NOTICE_NO#)
    </select>

    <update id="SM7011.updateNoticeInfo" parameterClass="java.util.Map">
        UPDATE NOTICE
           SET SUBJECT = #SUBJECT#
              ,CONTENT1 = #CONTENT1#
              ,BBS_TYPE = #BBS_TYPE#
              ,START_DATE = #START_DATE#
              ,END_DATE = #END_DATE#
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #USER_ID#
           <isNotEmpty property="NOTICE_FILE_DATA">
              ,NOTICE_FILE_DATA = #NOTICE_FILE_DATA#
           </isNotEmpty>
           <isNotEmpty property="NOTICE_FILE_NAME">
              ,NOTICE_FILE_NAME = #NOTICE_FILE_NAME#
           </isNotEmpty>
         WHERE COMPANY_CD = #COMPANY_CD#
           AND NOTICE_NO = fn_pg_get_cast_num(#NOTICE_NO#)
    </update>

    <sql id="SM7011.insertNoticeInfoWrapper">
        INSERT INTO NOTICE(
             NOTICE_NO
            ,COMPANY_CD
            ,SUBJECT
            ,CONTENT1
            <isNotEmpty prepend=", " property="NOTICE_FILE_DATA">NOTICE_FILE_DATA </isNotEmpty>
            <isNotEmpty prepend=", " property="NOTICE_FILE_NAME">NOTICE_FILE_NAME </isNotEmpty>
            ,START_DATE
            ,END_DATE
            ,BBS_TYPE
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             #NOTICE_NO#
            ,#COMPANY_CD#
            ,#SUBJECT#
            ,#CONTENT1#
            <isNotEmpty prepend=", " property="NOTICE_FILE_DATA">#NOTICE_FILE_DATA# </isNotEmpty>
            <isNotEmpty prepend=", " property="NOTICE_FILE_NAME">#NOTICE_FILE_NAME# </isNotEmpty>
            ,#START_DATE#
            ,#END_DATE#
            ,#BBS_TYPE#
            ,NOW()
            ,#USER_ID#
            ,NOW()
            ,#USER_ID#
        )
    </sql>

    <insert id="SM7011.insertNoticeInfo" parameterClass="java.util.Map">
        <selectKey resultClass="int" keyProperty="NOTICE_NO">
            SELECT NEXTVAL('SEQ_NOTICE_01') AS NOTICE_NO 
        </selectKey>
        <include refid="SM7011.insertNoticeInfoWrapper" />
    </insert>

    <delete id="SM7011.deleteNoticeInfo" parameterClass="java.util.Map">
        DELETE FROM NOTICE
         WHERE COMPANY_CD = #COMPANY_CD#
           AND NOTICE_NO = fn_pg_get_cast_num(#NOTICE_NO#)
    </delete>

    <select id="SM7011.selectNoticeFile" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT NOTICE_FILE_DATA
              ,NOTICE_FILE_NAME
          FROM NOTICE
         WHERE COMPANY_CD = #COMPANY_CD#
        <isNotEmpty property="NOTICE_NO">
           AND NOTICE_NO = fn_pg_get_cast_num(#NOTICE_NO#)
        </isNotEmpty>
    </select>

    <select id="SM7011.selectLastNoticeNo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SEQ_NOTICE_01.CURRVAL AS NOTICE_NO 
    </select>
    
    <select id="SM7014.selectInquiryRecordList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
        SELECT IR.INQUIRY_NO
              ,IR.INQUIRY_TYPE
              ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'INQUIRY_TYPE', IR.INQUIRY_TYPE, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS INQUIRY_TYPE_NAME
              ,IR.INQUIRY_NAME
              ,IR.INQUIRY_POSITION
              ,IR.INQUIRY_EMAIL
              ,IR.INQUIRY_TEL
              ,IR.INQUIRY_RESPONSE
              ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'INQUIRY_RESPONSE', IR.INQUIRY_RESPONSE, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS INQUIRY_RESPONSE_NAME
              ,IR.INQUIRY_TITLE
              ,IR.INQUIRY_CONTENTS
              ,TO_CHAR(IR.INQUIRY_DATE, 'YYYY-MM-DD HH24:MI:SS') AS INQUIRY_DATE
              ,IR.STATUS
              ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'INQUIRY_STATUS', IR.STATUS, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS INQUIRY_STATUS_NAME
              ,IR.RECEIPT_ID
              ,FU1.NAME AS RECEIPT_NAME
              ,TO_CHAR(IR.RECEIPT_DATE, 'YYYY-MM-DD HH24:MI:SS') AS RECEIPT_DATE
              ,IR.SEND_ID
              ,FU2.NAME AS SEND_NAME
              ,(CASE WHEN IR.SEND_EMAIL IS NOT NULL THEN IR.SEND_EMAIL
                     WHEN IR.SEND_ID = #SESSION_USER_ID# THEN FU2.EMAIL
                     ELSE FU3.EMAIL
                END) AS SEND_EMAIL
              ,IR.SEND_CONTENTS
              ,TO_CHAR(IR.SEND_DATE, 'YYYY-MM-DD HH24:MI:SS') AS SEND_DATE
              ,IR.SURVEY_COMPANY
              ,IR.SURVEY_NAME
              ,IR.SURVEY_POSITION
              ,IR.SURVEY_DEPT
              ,IR.SURVEY_RESULT
              ,IR.ERROR_INFO
              ,IR.CUSTOMER_NAME
              ,IR.INQUIRY_PARENT_TYPE
              ,(SELECT MAX(MJR.COMPANY_NAME) 
                  FROM MEMBER_CONTRACT_RECORD MCR 
                       INNER JOIN MEMBER_JOIN_REQ MJR
                          ON MJR.COMPANY_JOIN_NO = MCR.COMPANY_JOIN_NO
                 WHERE MCR.LICENSE_NO = IR.LICENSE_KEY) AS COMPANY_NAME
          FROM INQUIRY_RECORD IR
               LEFT OUTER JOIN FTA_USER FU1
                 ON FU1.COMPANY_CD = #SESSION_COMPANY_CD#
                AND FU1.USER_ID = IR.RECEIPT_ID
               LEFT OUTER JOIN FTA_USER FU2
                 ON FU2.COMPANY_CD = #SESSION_COMPANY_CD#
                AND FU2.USER_ID = IR.SEND_ID
               LEFT OUTER JOIN FTA_USER FU3
                 ON FU3.COMPANY_CD = #SESSION_COMPANY_CD#
                AND FU3.USER_ID = #SESSION_USER_ID#
         WHERE IR.STATUS = #INQUIRY_STATUS#
         <isNotEmpty property="INQUIRY_TYPE">
           AND IR.INQUIRY_TYPE = #INQUIRY_TYPE#
         </isNotEmpty>
         <isNotEmpty property="SEND_ID">
           AND #SEND_ID# IN(IR.SEND_ID, 'fta')
         </isNotEmpty>
         <isEqual property="INQUIRY_STATUS" compareValue="1">
           AND TO_CHAR(IR.INQUIRY_DATE, 'YYYYMMDD') BETWEEN #INQUIRY_FROM_DATE# AND #INQUIRY_TO_DATE#
         </isEqual>
         <isEqual property="INQUIRY_STATUS" compareValue="2">
           AND TO_CHAR(IR.RECEIPT_DATE, 'YYYYMMDD') BETWEEN #INQUIRY_FROM_DATE# AND #INQUIRY_TO_DATE#
         </isEqual>
         <isEqual property="INQUIRY_STATUS" compareValue="3">
           AND TO_CHAR(IR.SEND_DATE, 'YYYYMMDD') BETWEEN #INQUIRY_FROM_DATE# AND #INQUIRY_TO_DATE#
         </isEqual>
         <isEqual property="INQUIRY_STATUS" compareValue="4">
           AND TO_CHAR(IR.SEND_DATE, 'YYYYMMDD') BETWEEN #INQUIRY_FROM_DATE# AND #INQUIRY_TO_DATE#
         </isEqual>
         <isNotEmpty property="schKeyWord">
           AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
         </isNotEmpty>
        <include refid="select-paging-end" />
        ORDER BY INQUIRY_DATE DESC
    </select>
    
    <select id="SM7014.selectInquiryRecordStatus" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
	    SELECT SUM(CASE WHEN C.STATUS = '1' THEN C.STATUS_CNT ELSE 0 END) AS INQUIRY_CNT
		      ,SUM(CASE WHEN C.STATUS = '2' THEN C.STATUS_CNT ELSE 0 END) AS RECEPIT_CNT
		      ,SUM(CASE WHEN C.STATUS = '3' THEN C.STATUS_CNT ELSE 0 END) AS SUCCES_CNT
		      ,SUM(CASE WHEN C.STATUS = '4' THEN C.STATUS_CNT ELSE 0 END) AS FAIL_CNT
		  FROM (
		        SELECT STATUS
		              ,COUNT(STATUS) AS STATUS_CNT
		          FROM INQUIRY_RECORD
		         GROUP BY STATUS
		        ) C
    </select>
    
    <update id="SM7014.updateInquiryReceiptStatus" parameterClass="java.util.Map">
	    UPDATE INQUIRY_RECORD
		   SET STATUS = '2'
		      ,RECEIPT_ID = #RECEIPT_ID#
		      ,SEND_ID = #SEND_ID#  
		      ,RECEIPT_DATE = NOW()
		 WHERE INQUIRY_NO = #INQUIRY_NO#
    </update>
    
    <update id="SM7014.updateInquirySendStatus" parameterClass="java.util.Map">
        UPDATE INQUIRY_RECORD
           SET STATUS = #STATUS#
              ,SEND_ID = #SEND_ID#
              ,SEND_EMAIL = #SEND_EMAIL#
              ,SEND_CONTENTS = #SEND_CONTENTS#
              ,SEND_DATE = NOW()
              ,SURVEY_COMPANY = #SURVEY_COMPANY#
              ,SURVEY_NAME = #SURVEY_NAME#
              ,SURVEY_POSITION = #SURVEY_POSITION#
              ,SURVEY_DEPT = #SURVEY_DEPT#
              ,SURVEY_RESULT = #SURVEY_RESULT#
              ,ERROR_INFO = #ERROR_INFO#
         WHERE INQUIRY_NO = #INQUIRY_NO#
    </update>
	
	<select id="SM7014.selectInquiryUserList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        SELECT *
          FROM (
                SELECT DISTINCT IR.INQUIRY_NAME
                      ,IR.INQUIRY_POSITION
                      ,IR.INQUIRY_EMAIL
                      ,IR.INQUIRY_TEL
                      ,RANK() OVER(PARTITION BY IR.INQUIRY_NAME ORDER BY IR.INQUIRY_DATE DESC) AS CUR_RANK
                  FROM INQUIRY_RECORD IR
                 WHERE IR.LICENSE_KEY = #LICENSE_KEY#
               ) IR
         WHERE IR.CUR_RANK = 1
         ORDER BY IR.INQUIRY_NAME
    </select>
    
	<select id="SM7015.selectApplicateList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
		SELECT MJR.COMPANY_JOIN_NO
		      ,MJR.COMPANY_NAME
		      ,MJR.COMPANY_NAME_ENG
		      ,MJR.BUSINESS_NO
		      ,MJR.PRESIDENT_NAME
		      ,MJR.PRESIDENT_NAME_ENG
		      ,MJR.COM_PHONE_NO
		      ,MJR.COM_FAX_NO
		      ,MJR.COM_EMAIL
		      ,MJR.ADDRESS1
		      ,MJR.ADDRESS2
		      ,MJR.COMMENTS
		      ,MJR.OFFICER_NAME
		      ,MJR.OFFICER_POSITION
		      ,MJR.OFFICER_DEPT
		      ,MJR.OFFICER_PHONE_NO
		      ,MJR.OFFICER_CELL_NO
		      ,MJR.OFFICER_FAX_NO
		      ,MJR.OFFICER_EMAIL
		      ,MJR.USER_ID
		      ,MJR.FTA_NATION
		      ,CD1.WORD AS FTA_NATION_NAME
		      ,MJR.COMPANY_CD
		      ,MJR.SERVICE_URL
		      ,C.COMPANY_NAME AS COMPANY_CD_NAME
		      ,TO_CHAR(MJR.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS SERVICE_JOIN_DATE
		      ,(SELECT MAX(MC.LICENSE_NO) FROM MEMBER_CONTRACT_RECORD MC WHERE MC.COMPANY_JOIN_NO = MJR.COMPANY_JOIN_NO) AS LICENSE_NO
		  FROM MEMBER_JOIN_REQ MJR
		       LEFT OUTER JOIN COMPANY C
		         ON C.COMPANY_CD = MJR.COMPANY_CD
		       LEFT OUTER JOIN CODE_LANG_DIC CD1
                 ON CD1.COMPANY_CD = #COMPANY_CD# 
                AND CD1.CATEGORY_CD = 'NATION' 
                AND CD1.CODE = MJR.FTA_NATION
                AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		 WHERE TO_CHAR(MJR.CREATE_DATE, 'YYYYMMDD') BETWEEN #SERVICE_FROM_DATE# AND #SERVICE_TO_DATE#
		 <isNotEmpty property="FTA_NATION">
		   AND MJR.FTA_NATION = #FTA_NATION#
		 </isNotEmpty>
		 <isNotEmpty property="SERVICE_STATUS">
		   <isNotEqual property="SERVICE_STATUS" compareValue="0">
           AND EXISTS(SELECT 1
                        FROM MEMBER_CONTRACT_RECORD MCR
                       WHERE MCR.COMPANY_JOIN_NO = MJR.COMPANY_JOIN_NO
                         AND MCR.SERVICE_STATUS = #SERVICE_STATUS#)
            </isNotEqual>
            <isEqual property="SERVICE_STATUS" compareValue="0">
            AND NOT EXISTS(SELECT 1
	                         FROM MEMBER_CONTRACT_RECORD MCR
	                        WHERE MCR.COMPANY_JOIN_NO = MJR.COMPANY_JOIN_NO
	                          AND MCR.SERVICE_STATUS != '0')
            </isEqual>
         </isNotEmpty>
		 <isNotEmpty property="schKeyWord">
           AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
         </isNotEmpty>
         <isNotEmpty property="CONT_FROM_YYYY">
           AND EXISTS(SELECT 1
                        FROM MEMBER_CONTRACT_PLAN MCP
                       WHERE MCP.COMPANY_JOIN_NO = MJR.COMPANY_JOIN_NO
                         AND MCP.CONTS_YYYY BETWEEN #CONT_FROM_YYYY# AND #CONT_TO_YYYY#)
         </isNotEmpty>
        <include refid="select-paging-end" />
        ORDER BY COMPANY_JOIN_NO DESC
    </select>
    
    <select id="SM7015.selectApplyRecordList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
        <include refid="select-paging-start" />
        SELECT MJR.COMPANY_JOIN_NO
		      ,MJR.COMPANY_NAME
		      ,MJR.COMPANY_CD
		      ,COALESCE(C.COMPANY_NAME, MJR.COMPANY_NAME) AS COMPANY_CD_NAME
		      ,MJR.SERVICE_URL
		      ,MJR.BUSINESS_NO
		      ,COALESCE(MCR.SERIVCE_SEQ, 0) AS SERIVCE_SEQ
		      ,MCR.LICENSE_NO
		      ,COALESCE(MCR.SERVICE_STATUS, '0') AS SERVICE_STATUS
		      ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'SERVICE_STATUS', COALESCE(MCR.SERVICE_STATUS, '0'), 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS SERVICE_STATUS_NAME
		      ,MCR.SERVICE_START_DATE
		      ,MCR.SERVICE_END_DATE
		      ,MCR.SERVICE_TYPE
		      ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'SERVICE_TYPE', MCR.SERVICE_TYPE, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS SERVICE_TYPE_NAME
		      ,MCR.CONTRACT_NO
		      ,MCR.CONTRACT_DATE
		      ,MCR.CONTRACT_WRITER
		      ,MCR.CONSULTING_YN
		      ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'YN', MCR.CONSULTING_YN, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS CONSULTING_YN_NAME
		      ,MCR.CONTRACT_FILE_NAME
		      ,MCR.TERMINAT_DATE
		      ,MCR.TERMINAT_REASON
		      ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'TERMINAT_REASON', MCR.TERMINAT_REASON, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS TERMINAT_REASON_NAME
		      ,MCR.TERMINAT_COMMENTS
		      ,MCR.CLOSE_YN
		      ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'YN', MCR.CLOSE_YN, 'CODE_NAME', #SESSION_DEFAULT_LANGUAGE#) AS CLOSE_YN_NAME
		      ,MCR.COMMENTS
		      ,MCR.BUSINESS_TYPE
              ,MCR.STND_AMT
              ,MCR.DISCOUNT_AMT
              ,MCR.DISCOUNT_TYPE
              ,MCR.BIZ_REG_FILE_NAME
              ,MCR.TAX_SEND_MAIL
              ,MCR.CONTS_NOTICE
              ,MCR.CONTS_TERM
              ,ROUND((CASE WHEN MCR.STND_AMT = 0 THEN NULL ELSE MCR.DISCOUNT_AMT/MCR.STND_AMT END)*100, 2) AS DISCOUNT_RATE
              ,MCR.BILL_START_DATE
              ,MCR.SITE_USER_NAME
              ,MCR.BILL_LAST_YN
		      ,MJR.FTA_NATION
		  FROM MEMBER_JOIN_REQ MJR
		  <isNotEmpty property="COMPANY_JOIN_NO">
		       INNER JOIN MEMBER_CONTRACT_RECORD MCR
		          ON MJR.COMPANY_JOIN_NO = MCR.COMPANY_JOIN_NO
		  </isNotEmpty>
		  <isEmpty property="COMPANY_JOIN_NO">
               LEFT OUTER JOIN MEMBER_CONTRACT_RECORD MCR
                 ON MJR.COMPANY_JOIN_NO = MCR.COMPANY_JOIN_NO
          </isEmpty>
               LEFT OUTER JOIN COMPANY C
                 ON C.COMPANY_CD = MJR.COMPANY_CD
		 WHERE 1 = 1
		 <isNotEmpty property="COMPANY_JOIN_NO">
		   AND MJR.COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
		 </isNotEmpty>
		 <isNotEmpty property="SERVICE_FROM_DATE"> 
           AND TO_CHAR(MJR.CREATE_DATE, 'YYYYMMDD') BETWEEN #SERVICE_FROM_DATE# AND #SERVICE_TO_DATE#
         </isNotEmpty>
         <isNotEmpty property="CONT_FROM_YYYY">
           AND EXISTS(SELECT 1
                        FROM MEMBER_CONTRACT_PLAN MCP
                       WHERE MCP.COMPANY_JOIN_NO = MJR.COMPANY_JOIN_NO
                         AND MCP.CONTS_YYYY BETWEEN #CONT_FROM_YYYY# AND #CONT_TO_YYYY#)
         </isNotEmpty>
        <include refid="select-paging-end" />
        ORDER BY COMPANY_JOIN_NO, SERIVCE_SEQ DESC
    </select>
    
    <insert id="SM7015.insertApplyRecord" parameterClass="java.util.Map">
        <selectKey resultClass="java.lang.String" keyProperty="SERIVCE_SEQ">
        SELECT COALESCE(MAX(SERIVCE_SEQ), 0) + 1 AS SERIVCE_SEQ
          FROM MEMBER_CONTRACT_RECORD
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
        </selectKey>
        
        INSERT INTO MEMBER_CONTRACT_RECORD(
                COMPANY_JOIN_NO
               ,SERIVCE_SEQ
               ,LICENSE_NO
               ,SERVICE_STATUS
               ,SERVICE_START_DATE
               ,SERVICE_END_DATE
               ,SERVICE_TYPE
               ,CONTRACT_NO
               ,CONTRACT_DATE
               ,CONTRACT_WRITER
               ,CONSULTING_YN
             <isNotEmpty property="CONTRACT_FILE">
               ,CONTRACT_FILE
               ,CONTRACT_FILE_NAME
             </isNotEmpty>
               ,TERMINAT_DATE
               ,TERMINAT_REASON
               ,TERMINAT_COMMENTS
               ,CLOSE_YN
               ,COMMENTS
               ,BUSINESS_TYPE
               ,STND_AMT
               ,DISCOUNT_AMT
               ,DISCOUNT_TYPE
             <isNotEmpty property="BIZ_REG_FILE">
               ,BIZ_REG_FILE
               ,BIZ_REG_FILE_NAME
             </isNotEmpty>
               ,TAX_SEND_MAIL
               ,CONTS_NOTICE
               ,CONTS_TERM
               ,BILL_START_DATE
               ,SITE_USER_NAME
               ,BILL_LAST_YN
               ,CREATE_DATE
               ,CREATE_BY
               ,UPDATE_DATE
               ,UPDATE_BY)
         VALUES(#COMPANY_JOIN_NO#::NUMERIC
               ,#SERIVCE_SEQ#::NUMERIC
               ,#LICENSE_NO#
               ,#SERVICE_STATUS#
               ,#SERVICE_START_DATE#
               ,#SERVICE_END_DATE#
               ,#SERVICE_TYPE#
               ,#CONTRACT_NO#
               ,#CONTRACT_DATE#
               ,#CONTRACT_WRITER#
               ,#CONSULTING_YN#
             <isNotEmpty property="CONTRACT_FILE">
               ,#CONTRACT_FILE:BLOB#
               ,#CONTRACT_FILE_NAME#
             </isNotEmpty>
               ,#TERMINAT_DATE#
               ,#TERMINAT_REASON#
               ,#TERMINAT_COMMENTS#
               ,#CLOSE_YN#
               ,#COMMENTS#
               ,#BUSINESS_TYPE#
               ,FN_PG_GET_CAST_NUM(#STND_AMT#)
               ,FN_PG_GET_CAST_NUM(#DISCOUNT_AMT#)
               ,#DISCOUNT_TYPE#
             <isNotEmpty property="BIZ_REG_FILE">
               ,#BIZ_REG_FILE:BLOB#
               ,#BIZ_REG_FILE_NAME#
             </isNotEmpty>
               ,#TAX_SEND_MAIL#
               ,#CONTS_NOTICE#
               ,#CONTS_TERM#
               ,#BILL_START_DATE#
               ,#SITE_USER_NAME#
               ,#BILL_LAST_YN#
               ,NOW()
               ,#SESSION_USER_ID#
               ,NOW()
               ,#SESSION_USER_ID#)
    </insert>
    
    <update id="SM7015.updateApplicateState" parameterClass="java.util.Map">
        UPDATE MEMBER_JOIN_REQ
           SET SERVICE_STATUS     = #SERVICE_STATUS#::NUMERIC
              ,COMPANY_CD         = (CASE WHEN #COMPANY_CD# IS NULL OR #COMPANY_CD# = '' THEN COMPANY_CD ELSE #COMPANY_CD# END)
              ,SERVICE_URL        = #SERVICE_URL#
              ,FTA_NATION         = #FTA_NATION#
              ,UPDATE_DATE        = NOW()
              ,UPDATE_BY          = #SESSION_USER_ID#
         WHERE COMPANY_JOIN_NO    = #COMPANY_JOIN_NO#::NUMERIC
    </update>
    
    <update id="SM7015.updateApplyRecord" parameterClass="java.util.Map">
        UPDATE MEMBER_CONTRACT_RECORD
		   SET LICENSE_NO         = #LICENSE_NO#
		      ,SERVICE_STATUS     = #SERVICE_STATUS#
		      ,SERVICE_START_DATE = #SERVICE_START_DATE#
		      ,SERVICE_END_DATE   = #SERVICE_END_DATE#
		      ,SERVICE_TYPE       = #SERVICE_TYPE#
		      ,CONTRACT_NO        = #CONTRACT_NO#
		      ,CONTRACT_DATE      = #CONTRACT_DATE#
		      ,CONTRACT_WRITER    = #CONTRACT_WRITER#
		      ,CONSULTING_YN      = #CONSULTING_YN#
		    <isNotEmpty property="CONTRACT_FILE">
              ,CONTRACT_FILE      = #CONTRACT_FILE:BLOB#
              ,CONTRACT_FILE_NAME = #CONTRACT_FILE_NAME#
            </isNotEmpty>
		      ,TERMINAT_DATE      = #TERMINAT_DATE#
		      ,TERMINAT_REASON    = #TERMINAT_REASON#
		      ,TERMINAT_COMMENTS  = #TERMINAT_COMMENTS#
		      ,CLOSE_YN           = #CLOSE_YN#
		      ,COMMENTS           = #COMMENTS#
		      ,BUSINESS_TYPE      = #BUSINESS_TYPE#
              ,STND_AMT           = FN_PG_GET_CAST_NUM(#STND_AMT#)
              ,DISCOUNT_AMT       = FN_PG_GET_CAST_NUM(#DISCOUNT_AMT#)
              ,DISCOUNT_TYPE      = #DISCOUNT_TYPE#
            <isNotEmpty property="BIZ_REG_FILE">
              ,BIZ_REG_FILE       = #BIZ_REG_FILE:BLOB#
              ,BIZ_REG_FILE_NAME  = #BIZ_REG_FILE_NAME#
            </isNotEmpty>
              ,TAX_SEND_MAIL      = #TAX_SEND_MAIL#
              ,CONTS_NOTICE       = #CONTS_NOTICE#
              ,CONTS_TERM         = #CONTS_TERM#
              ,BILL_START_DATE    = #BILL_START_DATE#
              ,SITE_USER_NAME     = #SITE_USER_NAME#
              ,BILL_LAST_YN       = #BILL_LAST_YN#
		      ,UPDATE_DATE        = NOW()
		      ,UPDATE_BY          = #SESSION_USER_ID#
		 WHERE COMPANY_JOIN_NO    = #COMPANY_JOIN_NO#::NUMERIC
		   AND SERIVCE_SEQ        = #SERIVCE_SEQ#::NUMERIC
    </update>
    
    <delete id="SM7015.deleteApplicateState" parameterClass="java.util.Map">
        DELETE FROM MEMBER_CONTRACT_RECORD
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
           AND SERIVCE_SEQ = #SERIVCE_SEQ#::NUMERIC
    </delete>
    
    <select id="SM7015.selectApplicateDocs" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CONTRACT_FILE
              ,CONTRACT_FILE_NAME
          FROM MEMBER_CONTRACT_RECORD
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
           AND SERIVCE_SEQ = #SERIVCE_SEQ#::NUMERIC
    </select>
    
    <select id="SM7015.selectBizRegisterCert" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT BIZ_REG_FILE
              ,BIZ_REG_FILE_NAME
          FROM MEMBER_CONTRACT_RECORD
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
           AND SERIVCE_SEQ = #SERIVCE_SEQ#::NUMERIC
    </select>
    
    <select id="SM7015.selectContractUser" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COMPANY_JOIN_NO
              ,CLIENT_NO
              ,CLIENT_NAME
              ,CONTACT
              ,EMAIL
              ,POSITION
              ,FN_GET_COMMON_CD(#SESSION_COMPANY_CD#, 'CLIENT_POSITION', POSITION, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS POSITION_NAME
              ,APPLY_DATE
              ,END_DATE
              ,COMMENTS
          FROM MEMBER_CONTRACT_USER
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
    </select>
    
    <insert id="SM7015.insertContractUser" parameterClass="java.util.Map">
        <selectKey resultClass="java.lang.String" keyProperty="CLIENT_NO">
        SELECT COALESCE(MAX(CLIENT_NO), 0) + 1 AS CLIENT_NO
          FROM MEMBER_CONTRACT_USER
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
        </selectKey>
        
        INSERT INTO MEMBER_CONTRACT_USER
            (COMPANY_JOIN_NO
            ,CLIENT_NO
            ,CLIENT_NAME
            ,CONTACT
            ,EMAIL
            ,POSITION
            ,APPLY_DATE
            ,END_DATE
            ,COMMENTS
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             #COMPANY_JOIN_NO#::NUMERIC
            ,#CLIENT_NO#::NUMERIC
            ,#CLIENT_NAME#
            ,#CONTACT#
            ,#EMAIL#
            ,#POSITION#
            ,#APPLY_DATE#
            ,#END_DATE#
            ,#COMMENTS#
            ,NOW()
            ,#SESSION_USER_ID#
            ,NOW()
            ,#SESSION_USER_ID#)
    </insert>
    
    <update id="SM7015.updateContractUser" parameterClass="java.util.Map">
        UPDATE MEMBER_CONTRACT_USER
           SET CLIENT_NAME = #CLIENT_NAME#
              ,CONTACT = #CONTACT#
              ,EMAIL = #EMAIL#
              ,POSITION = #POSITION#
              ,APPLY_DATE = #APPLY_DATE#
              ,END_DATE = #END_DATE#
              ,COMMENTS = #COMMENTS#
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #SESSION_USER_ID#
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
           AND CLIENT_NO = #CLIENT_NO#::NUMERIC
    </update>
    
    <delete id="SM7015.deleteContractUser" parameterClass="java.util.Map">
        DELETE FROM MEMBER_CONTRACT_USER
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
           AND CLIENT_NO = #CLIENT_NO#::NUMERIC
    </delete>
    
    <select id="SM7015.selectContractPlan" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT M.*
          FROM (
		        SELECT MCP.COMPANY_JOIN_NO
		              ,MJR.COMPANY_NAME
		            <isNotEmpty property="SERIVCE_SEQ">
		              ,MCP.SERIVCE_SEQ
		            </isNotEmpty>
		            <isEmpty property="SERIVCE_SEQ">
		              ,NULL AS SERIVCE_SEQ
		            </isEmpty>
		              ,MCP.CONTS_YYYY
		              ,(CASE WHEN MAX(MCR.CONTRACT_NO) != MIN(MCR.CONTRACT_NO) THEN 'Re-sign' ELSE MAX(MCR.SERIVCE_SEQ)||'st contract' END) AS RECONTS_YN
		              ,MAX(CASE WHEN MCP.CONTS_MM = '1' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE1
		              ,MAX(CASE WHEN MCP.CONTS_MM = '2' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE2
		              ,MAX(CASE WHEN MCP.CONTS_MM = '3' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE3
		              ,MAX(CASE WHEN MCP.CONTS_MM = '4' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE4
		              ,MAX(CASE WHEN MCP.CONTS_MM = '5' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE5
		              ,MAX(CASE WHEN MCP.CONTS_MM = '6' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE6
		              ,MAX(CASE WHEN MCP.CONTS_MM = '7' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE7
		              ,MAX(CASE WHEN MCP.CONTS_MM = '8' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE8
		              ,MAX(CASE WHEN MCP.CONTS_MM = '9' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE9
		              ,MAX(CASE WHEN MCP.CONTS_MM = '10' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE10
		              ,MAX(CASE WHEN MCP.CONTS_MM = '11' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE11
		              ,MAX(CASE WHEN MCP.CONTS_MM = '12' THEN MCP.INVOICE_DATE ELSE NULL END) AS INVOICE_DATE12
		              ,MAX(CASE WHEN MCP.CONTS_MM = '1' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT1
		              ,MAX(CASE WHEN MCP.CONTS_MM = '2' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT2
		              ,MAX(CASE WHEN MCP.CONTS_MM = '3' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT3
		              ,MAX(CASE WHEN MCP.CONTS_MM = '4' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT4
		              ,MAX(CASE WHEN MCP.CONTS_MM = '5' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT5
		              ,MAX(CASE WHEN MCP.CONTS_MM = '6' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT6
		              ,MAX(CASE WHEN MCP.CONTS_MM = '7' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT7
		              ,MAX(CASE WHEN MCP.CONTS_MM = '8' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT8
		              ,MAX(CASE WHEN MCP.CONTS_MM = '9' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT9
		              ,MAX(CASE WHEN MCP.CONTS_MM = '10' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT10
		              ,MAX(CASE WHEN MCP.CONTS_MM = '11' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT11
		              ,MAX(CASE WHEN MCP.CONTS_MM = '12' THEN MCP.BILLING_AMT ELSE NULL END) AS BILLING_AMT12
		              ,MAX(CASE WHEN MCP.CONTS_MM = '1' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS1
		              ,MAX(CASE WHEN MCP.CONTS_MM = '2' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS2
		              ,MAX(CASE WHEN MCP.CONTS_MM = '3' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS3
		              ,MAX(CASE WHEN MCP.CONTS_MM = '4' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS4
		              ,MAX(CASE WHEN MCP.CONTS_MM = '5' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS5
		              ,MAX(CASE WHEN MCP.CONTS_MM = '6' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS6
		              ,MAX(CASE WHEN MCP.CONTS_MM = '7' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS7
		              ,MAX(CASE WHEN MCP.CONTS_MM = '8' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS8
		              ,MAX(CASE WHEN MCP.CONTS_MM = '9' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS9
		              ,MAX(CASE WHEN MCP.CONTS_MM = '10' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS10
		              ,MAX(CASE WHEN MCP.CONTS_MM = '11' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS11
		              ,MAX(CASE WHEN MCP.CONTS_MM = '12' THEN MCP.CONTS_COMMENTS ELSE NULL END) AS CONTS_COMMENTS12
		              ,SUM(MCP.BILLING_AMT) AS TOT_BILLING_AMT
		          FROM MEMBER_CONTRACT_PLAN MCP
		               INNER JOIN MEMBER_JOIN_REQ MJR
		                  ON MJR.COMPANY_JOIN_NO = MCP.COMPANY_JOIN_NO
		               <isNotEmpty property="FTA_NATION">
				         AND MJR.FTA_NATION = #FTA_NATION#
				       </isNotEmpty>
		               INNER JOIN MEMBER_CONTRACT_RECORD MCR
		                  ON MCR.COMPANY_JOIN_NO = MCP.COMPANY_JOIN_NO
		                 AND MCR.SERIVCE_SEQ = MCP.SERIVCE_SEQ
		               <isNotEmpty property="SERVICE_STATUS">
		                 <isNotEqual property="SERVICE_STATUS" compareValue="0">
		                 AND MCR.SERVICE_STATUS = #SERVICE_STATUS#
		                 </isNotEqual>
		                 <isEqual property="SERVICE_STATUS" compareValue="0">
		                 AND MCR.SERVICE_STATUS != '0'
		                 </isEqual>
		               </isNotEmpty>
		         WHERE 1 = 1
		         <isNotEmpty property="COMPANY_JOIN_NO">
		           AND MCP.COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
		         </isNotEmpty>
		         <isNotEmpty property="SERIVCE_SEQ">
		           AND MCP.SERIVCE_SEQ = #SERIVCE_SEQ#::NUMERIC
		         </isNotEmpty>
		         <isNotEmpty property="schKeyWord">
		           AND UPPER($schKeyField$) LIKE UPPER(#schKeyWord#)
		         </isNotEmpty>
		         <isNotEmpty property="CONT_FROM_YYYY">
		           AND MCP.CONTS_YYYY BETWEEN #CONT_FROM_YYYY# AND #CONT_TO_YYYY#
		         </isNotEmpty>
		         <isNotEmpty property="SERVICE_FROM_DATE"> 
		           AND TO_CHAR(MJR.CREATE_DATE, 'YYYYMMDD') BETWEEN #SERVICE_FROM_DATE# AND #SERVICE_TO_DATE#
		         </isNotEmpty>
		         GROUP BY MCP.COMPANY_JOIN_NO
                         ,MCP.SERIVCE_SEQ
                         ,MCP.CONTS_YYYY
                         ,MJR.COMPANY_NAME
               ) M
         WHERE M.TOT_BILLING_AMT != 0
         ORDER BY M.COMPANY_NAME, M.CONTS_YYYY
    </select>
    
    <insert id="SM7015.insertContractPlan" parameterClass="java.util.Map">
        WITH UPSERT AS (
		        SELECT MC.COMPANY_JOIN_NO
				      ,MC.SERIVCE_SEQ
				      ,MC.CONTS_YYYY
				      ,MC.CONTS_MM
				      ,(CASE WHEN MC.CONTS_YYYY||MC.MM >= MC.CONTS_START_YYYYMM AND CONTS_END_YYYYMM >= MC.CONTS_YYYY||MC.MM THEN 
				                   (CASE WHEN MC.BILL_LAST_YN = 'Y' THEN
				                              MC.CONTS_YYYY||MC.MM||TO_CHAR((DATE_TRUNC('MONTH', (MC.CONTS_YYYY||MC.MM||'01')::DATE) + INTERVAL '1 MONTH - 1 DAY')::DATE, 'DD')
				                         ELSE MC.CONTS_YYYY||MC.MM||MC.CONTS_DAY
				                    END)
				             ELSE NULL
				        END) AS INVOICE_DATE
				      ,(CASE WHEN MC.CONTS_YYYY||MC.MM >= MC.CONTS_START_YYYYMM AND CONTS_END_YYYYMM >= MC.CONTS_YYYY||MC.MM THEN MC.DISCOUNT_AMT ELSE NULL END) AS BILLING_AMT
				      ,(CASE WHEN MC.CONTS_YYYY||MC.MM >= MC.CONTS_START_YYYYMM AND CONTS_END_YYYYMM >= MC.CONTS_YYYY||MC.MM THEN FN_GET_SYSTEM_CONFIG('TOMS' ,'LOCAL_CURRENCY') ELSE NULL END) AS CURRENCY
				      ,NULL AS CONTS_COMMENTS
				      ,NOW() AS CREATE_DATE
		              ,#SESSION_USER_ID# AS CREATE_BY
		              ,NOW() AS UPDATE_DATE
		              ,#SESSION_USER_ID# AS UPDATE_BY
				  FROM (
				        SELECT MCR.COMPANY_JOIN_NO
				              ,MCR.SERIVCE_SEQ
				              ,(SUBSTRING(MCR.BILL_START_DATE, 1, 4)::NUMERIC+N.NUM)::VARCHAR AS CONTS_YYYY
				              ,(CASE WHEN 10 > M.NUM THEN '0'||M.NUM::VARCHAR ELSE M.NUM::VARCHAR END) AS MM
				              ,M.NUM::VARCHAR AS CONTS_MM
				              ,SUBSTRING(MCR.BILL_START_DATE, 7, 2) AS CONTS_DAY
				              ,MCR.DISCOUNT_AMT
				              ,MCR.BILL_LAST_YN
				              ,SUBSTRING(MCR.BILL_START_DATE, 1, 6) AS CONTS_START_YYYYMM
				              ,(CASE WHEN SUBSTRING(MCR.BILL_START_DATE, 5, 2) = '01' THEN (SUBSTRING(MCR.BILL_START_DATE, 1, 4)::NUMERIC+MCR.CONTS_TERM::INT-1)::VARCHAR
				                     ELSE (SUBSTRING(MCR.BILL_START_DATE, 1, 4)::NUMERIC+MCR.CONTS_TERM::INT)::VARCHAR
				                END)||
				               TO_CHAR((DATE_TRUNC('MONTH', MCR.BILL_START_DATE::DATE) - INTERVAL '1 MONTH')::DATE, 'MM') AS CONTS_END_YYYYMM
				          FROM MEMBER_CONTRACT_RECORD MCR
				               INNER JOIN (
				                            SELECT 0 AS NUM UNION ALL
				                            SELECT 1 AS NUM UNION ALL
				                            SELECT 2 AS NUM UNION ALL
				                            SELECT 3 AS NUM UNION ALL
				                            SELECT 4 AS NUM UNION ALL
				                            SELECT 5 AS NUM UNION ALL
				                            SELECT 6 AS NUM UNION ALL
				                            SELECT 7 AS NUM UNION ALL
				                            SELECT 8 AS NUM UNION ALL
				                            SELECT 9 AS NUM UNION ALL
				                            SELECT 10 AS NUM
				                          ) N
				                 ON N.NUM BETWEEN 0 AND FN_PG_GET_CAST_NUM(MCR.CONTS_TERM) - (CASE WHEN SUBSTRING(MCR.BILL_START_DATE, 5, 2) = '01' THEN 1 ELSE 0 END)
				               INNER JOIN (
				                            SELECT 1 AS NUM UNION ALL
				                            SELECT 2 AS NUM UNION ALL
				                            SELECT 3 AS NUM UNION ALL
				                            SELECT 4 AS NUM UNION ALL
				                            SELECT 5 AS NUM UNION ALL
				                            SELECT 6 AS NUM UNION ALL
				                            SELECT 7 AS NUM UNION ALL
				                            SELECT 8 AS NUM UNION ALL
				                            SELECT 9 AS NUM UNION ALL
				                            SELECT 10 AS NUM UNION ALL
				                            SELECT 11 AS NUM UNION ALL
				                            SELECT 12 AS NUM
				                          ) M
				                  ON 1 = 1
				         WHERE MCR.COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
				           AND MCR.SERIVCE_SEQ = #SERIVCE_SEQ#::NUMERIC
				           AND MCR.BILL_START_DATE IS NOT NULL AND MCR.BILL_START_DATE != ''
				        ) MC
		         WHERE NOT EXISTS(SELECT 1
		                            FROM MEMBER_CONTRACT_PLAN MCP
		                           WHERE MCP.COMPANY_JOIN_NO = MC.COMPANY_JOIN_NO
		                             AND MCP.SERIVCE_SEQ = MC.SERIVCE_SEQ
		                             AND MCP.CONTS_YYYY = MC.CONTS_YYYY
		                             AND MCP.CONTS_MM = MC.CONTS_MM
		                             AND MCP.BILLING_AMT IS NOT NULL
		                          )
        ),
        UPDATE_OPTOIN AS(
             UPDATE MEMBER_CONTRACT_PLAN MCP
                SET INVOICE_DATE = M.INVOICE_DATE
                   ,BILLING_AMT = M.BILLING_AMT
                   ,CURRENCY = M.CURRENCY
                   ,UPDATE_DATE = M.UPDATE_DATE
                   ,UPDATE_BY = M.UPDATE_BY
               FROM UPSERT M
	          WHERE MCP.COMPANY_JOIN_NO = M.COMPANY_JOIN_NO
	            AND MCP.SERIVCE_SEQ = M.SERIVCE_SEQ
	            AND MCP.CONTS_YYYY = M.CONTS_YYYY
	            AND MCP.CONTS_MM = M.CONTS_MM)
        INSERT INTO MEMBER_CONTRACT_PLAN(
	             COMPANY_JOIN_NO
	            ,SERIVCE_SEQ
	            ,CONTS_YYYY
	            ,CONTS_MM
	            ,INVOICE_DATE
	            ,BILLING_AMT
	            ,CURRENCY
	            ,CONTS_COMMENTS
	            ,CREATE_DATE
	            ,CREATE_BY
	            ,UPDATE_DATE
	            ,UPDATE_BY)
          SELECT M.COMPANY_JOIN_NO
                ,M.SERIVCE_SEQ
                ,M.CONTS_YYYY
                ,M.CONTS_MM
                ,M.INVOICE_DATE
                ,M.BILLING_AMT
                ,M.CURRENCY
                ,M.CONTS_COMMENTS
                ,M.CREATE_DATE
                ,M.CREATE_BY
                ,M.UPDATE_DATE
                ,M.UPDATE_BY
            FROM UPSERT M 
           WHERE NOT EXISTS(SELECT 1 FROM MEMBER_CONTRACT_PLAN MCP
                             WHERE MCP.COMPANY_JOIN_NO = M.COMPANY_JOIN_NO AND MCP.SERIVCE_SEQ = M.SERIVCE_SEQ 
                               AND MCP.CONTS_YYYY = M.CONTS_YYYY AND MCP.CONTS_MM = M.CONTS_MM)
    </insert>
    
    <update id="SM7015.updateContractPlan" parameterClass="java.util.Map">
        UPDATE MEMBER_CONTRACT_PLAN 
           SET UPDATE_DATE = NOW()
              <isNotEmpty property="INVOICE_DATE">,INVOICE_DATE = #INVOICE_DATE#</isNotEmpty><isEmpty property="INVOICE_DATE">,INVOICE_DATE = NULL</isEmpty>
              <isNotEmpty property="BILLING_AMT">,BILLING_AMT = #BILLING_AMT#::NUMERIC</isNotEmpty><isEmpty property="BILLING_AMT">,BILLING_AMT = NULL</isEmpty>
              <isNotEmpty property="CURRENCY">,CURRENCY = #CURRENCY#</isNotEmpty>
              <isNotEmpty property="CONTS_COMMENTS">,CONTS_COMMENTS = #CONTS_COMMENTS#</isNotEmpty>
              ,UPDATE_BY = #SESSION_USER_ID#
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
           AND SERIVCE_SEQ = #SERIVCE_SEQ#::NUMERIC
           AND CONTS_YYYY = #CONTS_YYYY#
           AND CONTS_MM = #CONTS_MM#::VARCHAR
    </update>
    
    <delete id="SM7015.deleteContractPlan" parameterClass="java.util.Map">
        DELETE FROM MEMBER_CONTRACT_PLAN
         WHERE COMPANY_JOIN_NO = #COMPANY_JOIN_NO#::NUMERIC
           AND SERIVCE_SEQ = #SERIVCE_SEQ#::NUMERIC
         <isNotEmpty property="CONTS_YYYY">
           AND CONTS_YYYY = #CONTS_YYYY#
         </isNotEmpty>
         <isNotEmpty property="CONTS_MM">
           AND CONTS_MM = #CONTS_MM#::VARCHAR
         </isNotEmpty>
    </delete>
    
    <select id="SM7015.selectAllMemberList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
        SELECT MJR.COMPANY_JOIN_NO
              ,MJR.COMPANY_NAME
		      ,MJR.BUSINESS_NO
		      ,MJR.ADDRESS1
		      ,MCR.SERVICE_TYPE AS APPLICATION_SERVICE_TYPE
		      ,MAX(CD1.WORD) AS SERVICE_TYPE_NAME
		      ,MJR.FTA_NATION
		      ,MAX(CD2.WORD) AS FTA_NATION_NAME
		      ,MJR.COMPANY_CD AS MEMBER_ID
              ,MAX(MCR.LICENSE_NO) AS LICENSE_KEY
              ,COALESCE(MAX(MJR.USER_ID), 'fta') AS INQUIRY_ID
              ,COUNT(IR.INQUIRY_NO) AS INQUIRY_CNT
		  FROM MEMBER_JOIN_REQ MJR
		       INNER JOIN MEMBER_CONTRACT_RECORD MCR
		          ON MJR.COMPANY_JOIN_NO = MCR.COMPANY_JOIN_NO
		        LEFT OUTER JOIN INQUIRY_RECORD IR
                  ON IR.LICENSE_KEY = MCR.LICENSE_NO
		        LEFT OUTER JOIN CODE_LANG_DIC CD1
		          ON CD1.COMPANY_CD = #COMPANY_CD#
		         AND CD1.CATEGORY_CD = 'SERVICE_TYPE'
		         AND CD1.CODE = MCR.SERVICE_TYPE
		         AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		        LEFT OUTER JOIN CODE_LANG_DIC CD2
                  ON CD2.COMPANY_CD = #COMPANY_CD# 
                 AND CD2.CATEGORY_CD = 'NATION' 
                 AND CD2.CODE = MJR.FTA_NATION
                 AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		 WHERE 1 = 1
		 <isNotEmpty property="schKeyWord">
		   <isEqual property="schKeyField" compareValue="COMPANY_NAME">
		   AND UPPER(MJR.COMPANY_NAME) LIKE UPPER(#schKeyWord#)
		   </isEqual>
		   <isEqual property="schKeyField" compareValue="BUSINESS_NO">
		   AND REPLACE(MJR.BUSINESS_NO, '-', '') LIKE UPPER(REPLACE(#schKeyWord#, '-', ''))
		   </isEqual>
		   <isEqual property="schKeyField" compareValue="COMPANY_CD">
		   AND UPPER(MJR.COMPANY_CD) LIKE UPPER(#schKeyWord#)
		   </isEqual>
		 </isNotEmpty>
		 GROUP BY MJR.COMPANY_JOIN_NO
	             ,MJR.COMPANY_NAME
	             ,MJR.BUSINESS_NO
	             ,MJR.ADDRESS1
	             ,MCR.SERVICE_TYPE
	             ,MJR.FTA_NATION
	             ,MJR.COMPANY_CD
       <include refid="select-paging-end" />
        ORDER BY INQUIRY_CNT DESC, COMPANY_JOIN_NO DESC
    </select>
		   
    <select id="SM7015.selectResignList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT M.*
              ,(CASE WHEN M.MIN_CONT_YYYYMM IS NOT NULL THEN 'Re-sign' ELSE 'Expire' END)||'('||M.BETWEEN_MONTH||'Month)' AS CONT_STATUS
		  FROM (SELECT M.*
                      ,CEIL(EXTRACT(YEAR FROM AGE(TO_TIMESTAMP(COALESCE(M.MAX_CONT_YYYYMM, TO_CHAR(TO_DATE(M.MIN_CONT_YYYYMM, 'YYYYMMDD') - INTERVAL '1 MONTH', 'YYYYMMDD')), 'YYYYMMDD'), NOW())) * 12 + 
                           EXTRACT(MONTH FROM AGE(TO_TIMESTAMP(COALESCE(M.MAX_CONT_YYYYMM, TO_CHAR(TO_DATE(M.MIN_CONT_YYYYMM, 'YYYYMMDD') - INTERVAL '1 MONTH', 'YYYYMMDD')), 'YYYYMMDD'), NOW())))::INT+2 AS BETWEEN_MONTH
                  FROM (
                        SELECT MCP.COMPANY_JOIN_NO 
                              ,MJR.COMPANY_NAME
                              ,MCR.BUSINESS_TYPE
                              ,MAX(CASE WHEN MCR.SERVICE_STATUS = '2' AND MCP.BILLING_AMT IS NOT NULL THEN
                                             MCP.CONTS_YYYY||(CASE WHEN 10 > MCP.CONTS_MM::INT THEN '0'||MCP.CONTS_MM ELSE MCP.CONTS_MM END)||'01'
                                        ELSE NULL
                               END) AS MAX_CONT_YYYYMM
                              ,MIN(CASE WHEN MCR.SERVICE_STATUS = '5' AND MCP.BILLING_AMT IS NOT NULL THEN
                                             MCP.CONTS_YYYY||(CASE WHEN 10 > MCP.CONTS_MM::INT THEN '0'||MCP.CONTS_MM ELSE MCP.CONTS_MM END)||'01'
                                        ELSE NULL
                               END) AS MIN_CONT_YYYYMM
                          FROM MEMBER_CONTRACT_PLAN MCP
                               INNER JOIN MEMBER_CONTRACT_RECORD MCR
                                  ON MCR.COMPANY_JOIN_NO = MCP.COMPANY_JOIN_NO
                                 AND MCR.SERIVCE_SEQ = MCP.SERIVCE_SEQ
                               INNER JOIN MEMBER_JOIN_REQ MJR
                                  ON MJR.COMPANY_JOIN_NO = MCR.COMPANY_JOIN_NO
                         WHERE MCR.SERVICE_STATUS IN('2', '5')
                         GROUP BY MCP.COMPANY_JOIN_NO
                                 ,MJR.COMPANY_NAME
                                 ,MCR.BUSINESS_TYPE
                        ) M
                 WHERE M.MIN_CONT_YYYYMM IS NOT NULL
		        ) M
         WHERE #BETWEEN_MONTH#::INT >= M.BETWEEN_MONTH
         ORDER BY M.BETWEEN_MONTH, M.COMPANY_NAME
    </select>
    
    <!-- Board SM7012,SM7013 START -->
    <select id="BoardDao.selectBoardList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
         WITH recursive CONECT_CONTENTS(BOARD_NO, BOARD_TYPE, BOARD_ID, COMPANY_CD, SUBJECT, CONTENT, READ_COUNT, START_DATE, END_DATE, PARENT_BOARD_ID, 
                              USER_ID, USER_NAME, CREATE_DATE, CREATE_BY, UPDATE_DATE, UPDATE_BY, FILE_COUNT, SORT_PATH)
         AS (
             SELECT BOARD_NO
                   ,BOARD_TYPE
                   ,BOARD_ID
                   ,COMPANY_CODE AS COMPANY_CD
                   ,(CASE WHEN LEV = 1 THEN '' ELSE FN_PAD('', LEV, '┗ ', 'L') || SUBJECT END) AS SUBJECT
                   ,CONTENT
                   ,READ_COUNT
                   ,START_DATE
                   ,END_DATE
                   ,PARENT_BOARD_ID
                   ,USER_ID
                   ,USER_NAME
                   ,CREATE_DATE
                   ,CREATE_BY
                   ,UPDATE_DATE
                   ,UPDATE_BY
                   ,FILE_COUNT
                   ,SORT_PATH
               FROM (
                     SELECT B.BOARD_NO                           
                           ,0 AS LEV
                           ,B.BOARD_TYPE
                           ,B.BOARD_ID
                           ,B.COMPANY_CODE
                           ,B.SUBJECT
                           ,B.CONTENT
                           ,COALESCE(B.READ_COUNT,0) AS READ_COUNT
                           ,B.START_DATE
                           ,B.END_DATE
                           ,B.PARENT_BOARD_ID
                           ,FU.USER_NAME
                           ,FU.USER_ID
                           ,B.CREATE_BY
                           ,TO_CHAR(B.CREATE_DATE, 'YYYY-MM-DD HH24:mi:ss') AS CREATE_DATE
                           ,B.UPDATE_BY
                           ,TO_CHAR(B.UPDATE_DATE, 'YYYY-MM-DD HH24:mi:ss') AS UPDATE_DATE
                           ,COALESCE(BF.FILE_COUNT,0) AS FILE_COUNT
                           ,B.BOARD_NO AS SORT_PATH
                       FROM BOARD B
                            LEFT OUTER JOIN (
                                             SELECT DISTINCT CASE WHEN #DEFAULT_LANGUAGE# = 'KR' THEN NAME 
                                                         ELSE NAME_ENG 
                                                         END AS USER_NAME
                                                   ,COMPANY_CD
                                                   ,USER_ID
                                               FROM FTA_USER ) FU
                              ON B.COMPANY_CODE = FU.COMPANY_CD
                             AND B.CREATE_BY = FU.USER_ID
                            LEFT OUTER JOIN (
                                            SELECT COUNT(*) AS FILE_COUNT
                                                  ,BOARD_ID 
                                              FROM BOARD_FILE
                                             GROUP BY BOARD_ID)BF
                              ON B.BOARD_ID = BF.BOARD_ID
                      WHERE B.COMPANY_CODE = #COMPANY_CD#
                        AND B.BOARD_TYPE = #BOARD_TYPE# 
                        AND B.PARENT_BOARD_ID IS NULL
                    UNION ALL
                     SELECT B.BOARD_NO                           
                           ,0 AS LEV
                           ,B.BOARD_TYPE
                           ,B.BOARD_ID
                           ,B.COMPANY_CODE
                           ,B.SUBJECT
                           ,B.CONTENT
                           ,COALESCE(B.READ_COUNT,0) AS READ_COUNT
                           ,B.START_DATE
                           ,B.END_DATE
                           ,B.PARENT_BOARD_ID
                           ,FU.USER_NAME
                           ,FU.USER_ID
                           ,B.CREATE_BY
                           ,TO_CHAR(B.CREATE_DATE, 'YYYY-MM-DD HH24:mi:ss') AS CREATE_DATE
                           ,B.UPDATE_BY
                           ,TO_CHAR(B.UPDATE_DATE, 'YYYY-MM-DD HH24:mi:ss') AS UPDATE_DATE
                           ,COALESCE(BF.FILE_COUNT,0) AS FILE_COUNT
                           ,B.PARENT_BOARD_ID AS SORT_PATH
                       FROM BOARD B
                            LEFT OUTER JOIN (
                                             SELECT DISTINCT CASE WHEN 'KR' = 'KR' THEN NAME 
                                                         ELSE NAME_ENG 
                                                         END AS USER_NAME
                                                   ,COMPANY_CD
                                                   ,USER_ID
                                               FROM FTA_USER ) FU
                              ON B.COMPANY_CODE = FU.COMPANY_CD
                             AND B.CREATE_BY = FU.USER_ID
                            LEFT OUTER JOIN (
                                            SELECT COUNT(*) AS FILE_COUNT
                                                  ,BOARD_ID 
                                              FROM BOARD_FILE
                                             GROUP BY BOARD_ID)BF
                              ON B.BOARD_ID = BF.BOARD_ID
                      WHERE B.COMPANY_CODE = #COMPANY_CD#
                        AND B.BOARD_TYPE = #BOARD_TYPE# 
                        AND B.PARENT_BOARD_ID IS NOT NULL
                    ) B
              WHERE B.COMPANY_CODE = #COMPANY_CD#
             <isNotEmpty property="schKeyWord">
                AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
             </isNotEmpty>
        )
        <include refid="select-paging-start" />
        SELECT * FROM CONECT_CONTENTS
        <include refid="select-paging-end" />        
        ORDER BY SORT_PATH DESC, BOARD_NO
    </select>
    
    <sql id="BoardDao.insertBoardInfoWrapper">
        INSERT INTO BOARD(
             BOARD_ID
            ,BOARD_TYPE
            ,BOARD_NO
            ,COMPANY_CODE
            ,SUBJECT
            ,CONTENT
            ,READ_COUNT
            ,START_DATE
            ,END_DATE
            ,PARENT_BOARD_ID
            ,CREATE_DATE
            ,CREATE_BY
            ,UPDATE_DATE
            ,UPDATE_BY)
        VALUES(
             #BOARD_ID#
            ,#BOARD_TYPE#
            ,(SELECT (CASE WHEN COUNT(*) > 0 THEN MAX(BOARD_NO) + 1 ELSE 1 END) 
                FROM BOARD
               WHERE COMPANY_CODE = #COMPANY_CD# 
                 AND BOARD_TYPE = #BOARD_TYPE#
              )
            ,#COMPANY_CD#
            ,#SUBJECT#
            ,#CONTENT:CLOB#
            ,COALESCE(FN_PG_GET_CAST_NUM(#PARENT_BOARD_ID#),'0')::NUMERIC
            ,#START_DATE#
            ,#END_DATE#
            ,FN_PG_GET_CAST_NUM(#PARENT_BOARD_ID#)
            ,NOW()
            ,#SESSION_USER_ID#
            ,NOW()
            ,#SESSION_USER_ID#)
    </sql>
    
    <insert id="BoardDao.insertBoardInfo" parameterClass="java.util.Map">
        <selectKey resultClass="int" keyProperty="BOARD_ID">
            SELECT NEXTVAL('SEQ_NOTICE_01') AS BOARD_ID 
        </selectKey>
        <include refid="BoardDao.insertBoardInfoWrapper" />
    </insert>

    <update id="BoardDao.updateBoardInfo" parameterClass="java.util.Map">
        UPDATE BOARD
           SET SUBJECT = #SUBJECT#
              ,CONTENT = #CONTENT:CLOB#
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #SESSION_USER_ID#
         WHERE BOARD_ID = #BOARD_ID#::numeric
    </update>

    <insert id="BoardDao.deleteBoardInfo" parameterClass="java.util.Map">
		BEGIN;
        
            DELETE FROM BOARD_FILE
            WHERE BOARD_ID = #BOARD_ID#::numeric;
           
            DELETE FROM BOARD 
            WHERE PARENT_BOARD_ID = #BOARD_ID#::numeric;
            
            DELETE FROM BOARD
            WHERE BOARD_ID = #BOARD_ID#::numeric;
            
		END;
    </insert>
    
    <select id="BoardDao.selectReadCount" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT READ_COUNT
              ,BOARD_NO
              ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:mi:ss') AS CREATE_DATE
          FROM BOARD
         WHERE BOARD_ID = #BOARD_ID#::numeric
    </select>
    
    <update id="BoardDao.updateReadCount" parameterClass="java.util.Map">
        UPDATE BOARD
           SET READ_COUNT = COALESCE(READ_COUNT,0) + 1
         WHERE BOARD_ID = #BOARD_ID#::numeric
    </update>
    
    <update id="BoardDao.insertBoardFile" parameterClass="java.util.Map">
        INSERT INTO BOARD_FILE(  
             BOARD_FILE_ID
            ,FILE_SEQ                
            ,BOARD_ID               
            ,COMPANY_CODE       
            ,FILE_PATH              
            ,FILE_NAME              
            ,ORIGIN_FILE_NAME
            ,CREATE_DATE            
            ,CREATE_BY              
            ,UPDATE_DATE            
            ,UPDATE_BY
            ,REALFILE)
        VALUES(
             NEXTVAL('SEQ_BOARD_FILE')
            ,(SELECT (CASE WHEN COUNT(*) > 0 THEN MAX(FILE_SEQ) +1 ELSE 1 END)
              FROM BOARD_FILE
              WHERE BOARD_ID=#BOARD_ID#::numeric
              )    
            ,#BOARD_ID#::numeric             
            ,#SESSION_COMPANY_CODE#     
            ,'ORACLE'<!-- #FILE_PATH# -->                
            ,#FILE_NAME#                
            ,#ORIGIN_FILE_NAME#
            ,NOW()            
            ,#SESSION_USER_ID#
            ,NOW()            
            ,#SESSION_USER_ID#        
            ,#REALFILE:BLOB#)
    </update> 
    
    <delete id="BoardDao.deleteBoardFile" parameterClass="java.util.Map" >
        DELETE FROM BOARD_FILE
         WHERE BOARD_FILE_ID = #BOARD_FILE_ID#::numeric
    </delete>
    
    <delete id="BoardDao.deleteBoardFileAll" parameterClass="java.util.Map" >
        DELETE FROM BOARD_FILE 
         WHERE BOARD_ID = #BOARD_ID#::numeric
    </delete>

    <select id="BoardDao.selectBoardFile" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT REALFILE
              ,ORIGIN_FILE_NAME
          FROM BOARD_FILE
         WHERE BOARD_FILE_ID = #BOARD_FILE_ID#::numeric
    </select>
    
    <select id="BoardDao.selectBoardFileList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT FILE_NAME
              ,FILE_PATH
              ,ORIGIN_FILE_NAME
              ,BOARD_FILE_ID AS FILE_SEQ
          FROM BOARD_FILE
         WHERE BOARD_ID = #BOARD_ID#::numeric
    </select>
    
    <select id="SM7016.selectMemberCompanyList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT C.COMPANY_CD
                  ,C.COMPANY_NAME
                  ,C.COMPANY_NAME_ENG
                  ,C.BUSINESS_NO
                  ,C.PRESIDENT_NAME
                  ,C.PRESIDENT_NAME_ENG
                  ,C.OFFICER_NAME
                  ,C.OFFICER_PHONE_NO
                  ,C.OFFICER_EMAIL
                  ,C.COM_PHONE_NO
                  ,C.COM_FAX_NO
                  ,C.ZIP_CD
                  ,C.ADDRESS1
                  ,C.PARENT_COMPANY_CD
                  ,C.AUTH_GROUP_ID
                  ,PC.COMPANY_NAME AS PARENT_COMPANY_NAME
                  ,AC.COMPANY_NAME AS MGMT_COMPANY_NAME
              FROM COMPANY C
                   LEFT OUTER JOIN COMPANY PC
                     ON PC.COMPANY_CD = C.PARENT_COMPANY_CD
                   LEFT OUTER JOIN COMPANY AC
                     ON AC.COMPANY_CD = C.AUTH_GROUP_ID
             WHERE 1 =1
             <isNotEmpty property="OFFICER_NAME">
               AND EXISTS(SELECT 1
                            FROM AUTH_USER AU
                                 INNER JOIN FTA_USER FU
                                    ON FU.COMPANY_CD = AU.COMPANY_CD
                                   AND UPPER(FU.NAME) LIKE '%'||UPPER(#OFFICER_NAME#)||'%'
                           WHERE AU.COMPANY_CD = C.COMPANY_CD)
             </isNotEmpty>
        <include refid="select-paging-end" />
        WHERE 1 =1
        <isNotEmpty property="AUTH_GROUP_ID">
          AND AUTH_GROUP_ID = #AUTH_GROUP_ID#
        </isNotEmpty>
        <isNotEmpty property="PARENT_COMPANY_CD">
          AND PARENT_COMPANY_CD = #PARENT_COMPANY_CD#
        </isNotEmpty>
         ORDER BY COMPANY_NAME
    </select>
    
    <update id="SM7016.updateMemberCompanyInfo" parameterClass="java.util.Map">
        
          BEGIN;
            
            INSERT INTO FTA_USER(
                   ID_SEQ
                  ,COMPANY_CD
                  ,USER_ID
                  ,PASSWORD
                  ,EMP_NO
                  ,NAME
                  ,NAME_ENG
                  ,POSITION
                  ,EMAIL
                  ,CELL_PHONE_NO
                  ,OFFICE_PHONE_NO
                  ,FAX_NO
                  ,MANAGER_YN
                  ,STATUS
                  ,DEFAULT_LANGUAGE
                  ,WORK_YYYY_MM
                  ,SELECT_LANG
                  ,CREATE_DATE
                  ,CREATE_BY
                  ,UPDATE_DATE
                  ,UPDATE_BY
                  ,MAIL_ID
                  ,MAIL_PASSWORD
                  ,KAKAO_SCRIPT_KEY
                  ,START_DATE
                  ,END_DATE
                  ,END_DESC)
            SELECT NEXTVAL('SEQ_FTA_USER_01')
                  ,#COMPANY_CD#
                  ,FU.USER_ID
                  ,FU.PASSWORD
                  ,FU.EMP_NO
                  ,FU.NAME
                  ,FU.NAME_ENG
                  ,FU.POSITION
                  ,FU.EMAIL
                  ,FU.CELL_PHONE_NO
                  ,FU.OFFICE_PHONE_NO
                  ,FU.FAX_NO
                  ,FU.MANAGER_YN
                  ,FU.STATUS
                  ,FU.DEFAULT_LANGUAGE
                  ,FU.WORK_YYYY_MM
                  ,FU.SELECT_LANG
                  ,NOW()
                  ,'sysfta'
                  ,NOW()
                  ,'sysfta'
                  ,FU.MAIL_ID
                  ,FU.MAIL_PASSWORD
                  ,FU.KAKAO_SCRIPT_KEY
                  ,FU.START_DATE
                  ,FU.END_DATE
                  ,FU.END_DESC
              FROM FTA_USER FU
                   INNER JOIN AUTH_USER AU
                      ON AU.COMPANY_CD = FU.COMPANY_CD
                     AND AU.USER_ID = FU.USER_ID
                     AND AU.AUTH_GROUP_ID = #AUTH_GROUP_ID#
             WHERE FU.COMPANY_CD = #AUTH_GROUP_ID#
               AND NOT EXISTS(SELECT 1 
                                FROM FTA_USER FUS
                               WHERE FUS.COMPANY_CD = #COMPANY_CD#
                                 AND FUS.USER_ID = FU.USER_ID);
            
            INSERT INTO AUTH_GROUP(
                   COMPANY_CD
                  ,AUTH_GROUP_ID
                  ,AUTH_GROUP_NAME
                  ,AUTH_GROUP_NAME_ENG
                  ,USE_YN
                  ,COMMENTS)
            SELECT #COMPANY_CD#
			      ,AG.AUTH_GROUP_ID
			      ,AG.AUTH_GROUP_NAME
			      ,AG.AUTH_GROUP_NAME_ENG
			      ,AG.USE_YN
			      ,AG.COMMENTS
			  FROM AUTH_GROUP AG
			 WHERE AG.COMPANY_CD = #AUTH_GROUP_ID#
			   AND AG.AUTH_GROUP_ID = #AUTH_GROUP_ID#
			   AND NOT EXISTS(SELECT 1 
	                            FROM AUTH_GROUP AGR 
	                           WHERE AGR.COMPANY_CD = #COMPANY_CD#
	                             AND AGR.AUTH_GROUP_ID = AG.AUTH_GROUP_ID);
			               
	        INSERT INTO AUTH_USER(
                   COMPANY_CD
                  ,AUTH_GROUP_ID
                  ,USER_ID)
	        SELECT #COMPANY_CD#
                  ,AG.AUTH_GROUP_ID
                  ,AU.USER_ID
              FROM AUTH_GROUP AG
             INNER JOIN AUTH_USER AU
                ON AU.COMPANY_CD = AG.COMPANY_CD
               AND AU.AUTH_GROUP_ID = #AUTH_GROUP_ID#
             WHERE AG.COMPANY_CD = #AUTH_GROUP_ID#
               AND AG.AUTH_GROUP_ID IN('manager', #AUTH_GROUP_ID#)
               AND NOT EXISTS(SELECT 1 
                                FROM AUTH_USER AUS
                               WHERE AUS.COMPANY_CD = #COMPANY_CD#
                                 AND AUS.AUTH_GROUP_ID = AG.AUTH_GROUP_ID
                                 AND AUS.USER_ID = AU.USER_ID);
	        
	        UPDATE COMPANY
	           SET AUTH_GROUP_ID = #AUTH_GROUP_ID#
	         WHERE COMPANY_CD = #COMPANY_CD#;
		         
		  END;
    </update>
    
    <update id="SM7016.updateParentCompanyInfo" parameterClass="java.util.Map">
        UPDATE COMPANY
           SET PARENT_COMPANY_CD = #PARENT_COMPANY_CD#
         WHERE COMPANY_CD = #COMPANY_CD#
    </update>
    
    <update id="SM7016.deleteMemberCompanyInfo" parameterClass="java.util.Map">
        
          BEGIN;
            
            DELETE FROM FTA_USER
             WHERE COMPANY_CD = #COMPANY_CD#
               AND COMPANY_CD != #AUTH_GROUP_ID#
               AND EXISTS(SELECT 1
                            FROM AUTH_USER AU
                           WHERE AU.COMPANY_CD = FTA_USER.COMPANY_CD
                             AND AU.USER_ID = FTA_USER.USER_ID
                             AND AU.AUTH_GROUP_ID = #AUTH_GROUP_ID#
                             AND AU.COMPANY_CD != AU.AUTH_GROUP_ID);
            
            DELETE FROM AUTH_GROUP
             WHERE COMPANY_CD = #COMPANY_CD#
               AND AUTH_GROUP_ID = #AUTH_GROUP_ID#
               AND COMPANY_CD != AUTH_GROUP_ID;
            
            DELETE FROM AUTH_USER
             WHERE COMPANY_CD = #COMPANY_CD#
               AND AUTH_GROUP_ID = #AUTH_GROUP_ID#
               AND COMPANY_CD != AUTH_GROUP_ID;
               
            UPDATE COMPANY
	           SET AUTH_GROUP_ID = NULL
	         WHERE COMPANY_CD = #COMPANY_CD#;
	      
	      END;
    </update>
    
    <update id="SM7016.deleteParentCompanyInfo" parameterClass="java.util.Map">
        UPDATE COMPANY
           SET PARENT_COMPANY_CD = NULL
         WHERE COMPANY_CD = #COMPANY_CD#
    </update>
    
    <select id="SM7017.selectMonthlyClosingList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT I.COMPANY_CD
	              ,I.COMPANY_NAME
	              ,I.YYYYMM
	              ,COALESCE(MAX(IF_ITEM_PO), 0) AS IF_ITEM_PO
	              ,COALESCE(MAX(IF_ITEM_INV), 0) AS IF_ITEM_INV
	              ,COALESCE(MAX(IF_ITEM_BOM), 0) AS IF_ITEM_BOM
	              ,COALESCE(MAX(IF_ITEM_SALES), 0) AS IF_ITEM_SALES
	              ,COALESCE(MAX(IF_DOM_ITEM_DE), 0) || ' / ' || COALESCE(MAX(IF_DOM_ITEM_TOT_DE), 0) AS IF_DOC_ITEM_DE
                  ,COALESCE(MAX(IF_EXP_ITEM_DE), 0) || ' / ' || COALESCE(MAX(IF_EXP_ITEM_TOT_DE), 0) AS IF_EXP_ITEM_DE
	              ,COALESCE(MAX(IF_DOC_ITEM_ISSUE), 0) AS IF_DOC_ITEM_ISSUE
	              ,COALESCE(MAX(IF_EXP_ITEM_ISSUE), 0) AS IF_EXP_ITEM_ISSUE
	              ,MAX(CD1.TXT_VALUE1) AS AGING
	              ,MAX(CD2.TXT_VALUE1) AS BOM_TYPE
	              ,COALESCE(MAX(CD3.TXT_VALUE1), 'A') AS EVALU_TYPE
	              ,COALESCE(MAX(CD4.TXT_VALUE1), '2') AS PROD_YYYYMM
	          FROM (
	                SELECT C.COMPANY_CD
	                      ,C.COMPANY_NAME
	                      ,CM.YYYYMM
	                      ,(CASE WHEN IIM.IF_CD = 'RPT_PP_001' THEN
	                                  (SELECT COUNT(A.COMPANY_CD) FROM M_BOM A 
	                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.YYYYMM = CM.YYYYMM)
	                             WHEN IIM.IF_CD = 'RPT_PP_002' THEN
	                                  (SELECT COUNT(A.COMPANY_CD) FROM S_BOM A
	                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND CM.YYYYMM||'01' BETWEEN A.START_DATE AND A.END_DATE)
	                             ELSE 0
	                         END) AS IF_ITEM_BOM
	                      ,(CASE WHEN IIM.IF_CD = 'RPT_MM_004' THEN
	                                  (SELECT COUNT(A.COMPANY_CD) FROM PROCUREMENT A 
	                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND SUBSTRING(A.TXN_DATE, 1, 6) = CM.YYYYMM)
	                             ELSE 0
	                        END) AS IF_ITEM_PO
	                      ,(CASE WHEN IIM.IF_CD = 'RPT_CO_001' THEN
	                                  (SELECT COUNT(A.COMPANY_CD) FROM INVENTORY_CLOSING_MONTHLY A 
	                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.YYYYMM = CM.YYYYMM)
	                             ELSE 0
	                        END) AS IF_ITEM_INV
	                      ,(CASE WHEN IIM.IF_CD = 'RPT_SD_004' OR IIM.IF_CD = 'RPT_SD_005' OR IIM.IF_CD = 'RPT_SD_008' THEN
	                                  (SELECT COUNT(A.COMPANY_CD) FROM SALES A 
	                                    WHERE A.COMPANY_CD = ISM.COMPANY_CD AND SUBSTRING(A.INVOICE_DATE, 1, 6) = CM.YYYYMM)
	                              ELSE 0
	                        END) AS IF_ITEM_SALES
	                      ,(SELECT COUNT(A.COMPANY_CD) FROM SALES_DOMESTIC A 
                             WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.YYYYMM = CM.YYYYMM AND A.DELETE_YN = 'N') AS IF_DOM_ITEM_TOT_DE
                          ,(SELECT COUNT(A.COMPANY_CD) FROM SALES_DOMESTIC A 
                             WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.YYYYMM = CM.YYYYMM AND A.DELETE_YN = 'N' AND A.STATUS = '4') AS IF_DOM_ITEM_DE
                          ,(SELECT COUNT(A.COMPANY_CD) FROM SALES_EXPORT A 
                             WHERE A.COMPANY_CD = ISM.COMPANY_CD AND SUBSTRING(A.INVOICE_DATE, 1, 6) = CM.YYYYMM AND A.DELETE_YN = 'N') AS IF_EXP_ITEM_TOT_DE
                          ,(SELECT COUNT(A.COMPANY_CD) FROM SALES_EXPORT A 
                             WHERE A.COMPANY_CD = ISM.COMPANY_CD AND SUBSTRING(A.INVOICE_DATE, 1, 6) = CM.YYYYMM AND A.DELETE_YN = 'N' AND A.STATUS = '4') AS IF_EXP_ITEM_DE
	                      ,(SELECT COUNT(A.COMPANY_CD) FROM SALES_DOMESTIC A 
                             WHERE A.COMPANY_CD = ISM.COMPANY_CD AND A.YYYYMM = CM.YYYYMM AND A.DELETE_YN = 'N' AND A.CO_DOC_NO IS NOT NULL) AS IF_DOC_ITEM_ISSUE
                          ,(SELECT COUNT(A.COMPANY_CD) FROM SALES_EXPORT A 
                             WHERE A.COMPANY_CD = ISM.COMPANY_CD AND SUBSTRING(A.INVOICE_DATE, 1, 6) = CM.YYYYMM AND A.CO_DOC_NO IS NOT NULL) AS IF_EXP_ITEM_ISSUE
	                  FROM COMPANY C
		                   INNER JOIN INTERFACE_SCHEDULE_MAPPING ISM
	                          ON ISM.COMPANY_CD = C.COMPANY_CD 
	                         AND ISM.SCHEDULE_CD = #SCHEDULE_CD#
	                         AND ISM.IF_CD IN('RPT_PP_002', 'RPT_MM_004', 'RPT_CO_001', 'RPT_PP_001', 'RPT_SD_005', 'RPT_SD_008')
	                       INNER JOIN INTERFACE_ITEM_MST IIM
	                          ON IIM.COMPANY_CD = ISM.COMPANY_CD
	                         AND IIM.IF_CD = ISM.IF_CD
	                         AND IIM.USING_YN = 'Y'
	                         AND IIM.ITEM_TYPE != 'P'
	                       INNER JOIN MENU_MGMT MM
	                          ON MM.PRGM_ID = IIM.IF_CD
	                         AND MM.USE_YN = 'Y'
	                       INNER JOIN
	                                 <iterate open="(" close=") CM" property="CLOSING_MONTH_LIST" conjunction=" UNION ">
	                                   SELECT #CLOSING_MONTH_LIST[].YYYYMM# AS YYYYMM  
					                 </iterate>
	                          ON 1 = 1
	                 WHERE 1 = 1
	                 <isNotEmpty property="AUTH_GROUP_ID">
			           AND C.AUTH_GROUP_ID = #AUTH_GROUP_ID#
			         </isNotEmpty>
			         <isNotEmpty property="PARENT_COMPANY_CD">
			           AND C.PARENT_COMPANY_CD = #PARENT_COMPANY_CD#
			         </isNotEmpty>
	                 <isNotEmpty property="schKeyWord">
                       AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
                     </isNotEmpty>
	              ) I
	             LEFT OUTER JOIN CODE_DTL CD1
	               ON CD1.COMPANY_CD = I.COMPANY_CD
	              AND CD1.CATEGORY_CD = 'SYS_CONFIG'
	              AND CD1.CODE = 'AGING'
	             LEFT OUTER JOIN CODE_DTL CD2
                   ON CD2.COMPANY_CD = I.COMPANY_CD
                  AND CD2.CATEGORY_CD = 'SYS_CONFIG'
                  AND CD2.CODE = 'BOM_TYPE'
                 LEFT OUTER JOIN CODE_DTL CD3
                   ON CD3.COMPANY_CD = I.COMPANY_CD
                  AND CD3.CATEGORY_CD = 'SYS_CONFIG'
                  AND CD3.CODE = 'EVALU_TYPE'
                 LEFT OUTER JOIN CODE_DTL CD4
                   ON CD4.COMPANY_CD = I.COMPANY_CD
                  AND CD4.CATEGORY_CD = 'SYS_CONFIG'
                  AND CD4.CODE = 'PROD_YYYYMM'
	       GROUP BY I.COMPANY_CD
	               ,I.COMPANY_NAME
	               ,I.YYYYMM
        <include refid="select-paging-end" />
         ORDER BY COMPANY_NAME
                 ,YYYYMM
    </select>
    
    <select id="SM7018.selectUseLogList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT ULD.LOG_SEQ
                  ,ULD.COMPANY_CD
                  ,ULD.USER_ID
                  ,(CASE WHEN ULD.SITE_TYPE = 'internal' THEN FU.NAME ELSE VC.NAME END) AS USER_NAME
                  ,ULD.SITE_TYPE
                  ,ULD.MENU_ID
                  ,MLD.WORD AS MENU_NAME
                  ,ULD.COOPER_CD
                  ,(CASE WHEN ULD.SITE_TYPE = 'internal' THEN C.COMPANY_NAME ELSE V.VENDOR_NAME END) AS COOPER_NAME
                  ,ULD.SERVER_IP
                  ,TO_CHAR(ULD.REQUEST_DATE, 'YYYYMMDD') AS REQUEST_DATE
                  ,TO_CHAR(ULD.REQUEST_DATE, 'HH24:MI:SS') AS REQUEST_TIME
                  ,ULD.REQUEST_TYPE
                  ,ULD.REQUEST_URL
                  ,ULD.CLIENT_IP
                  ,ULD.PARAMETER
                  ,TO_CHAR(ULD.RESPONSE_DATE, 'HH24:MI:SS') AS RESPONSE_TIME
                  ,ULD.RESPONSE_RESULT
                  ,ULD.DATA_COUNT
                  ,(CASE WHEN ULD.RESPONSE_MSG IS NOT NULL THEN ULD.RESPONSE_MSG
                         WHEN ULD.RESPONSE_DATE IS NOT NULL THEN 'Completed'
                         ELSE 'Failed'
                    END) AS RESPONSE_MSG
              FROM USER_LOG_DTL ULD
                   LEFT OUTER JOIN FTA_USER FU
                     ON FU.COMPANY_CD = ULD.COMPANY_CD
                    AND FU.USER_ID = ULD.USER_ID
                   LEFT OUTER JOIN MENU_LANG_DIC MLD
                     ON MLD.MENU_ID = ULD.MENU_ID
                    AND MLD.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                    AND MLD.LANG_ID = 1
                   LEFT OUTER JOIN VENDOR V
                     ON V.COMPANY_CD = ULD.COMPANY_CD
                    AND V.VENDOR_CD = ULD.COOPER_CD
                   LEFT OUTER JOIN COMPANY C
                     ON C.COMPANY_CD = ULD.COMPANY_CD
                   LEFT OUTER JOIN VENDOR_CHARGER VC
                     ON VC.COMPANY_CD = ULD.COMPANY_CD
                    AND VC.VENDOR_CD = ULD.COOPER_CD
                    AND VC.CHARGER_ID = ULD.USER_ID
             WHERE ULD.COMPANY_CD = #COMPANY_CD#
               AND TO_CHAR(ULD.REQUEST_DATE, 'YYYYMMDD') BETWEEN #SEARCH_FROM_DATE# AND #SEARCH_TO_DATE#
             <isNotEmpty property="USER_ID">
               AND ULD.USER_ID = #USER_ID#
             </isNotEmpty>
             <isNotEmpty property="SITE_TYPE">
               AND ULD.SITE_TYPE = #SITE_TYPE#
             </isNotEmpty>
             <isNotEqual property="SESSION_USER_ID" compareValue="fta">
               AND ULD.USER_ID != 'fta'
             </isNotEqual>
        <include refid="select-paging-end" />
        <isNotEmpty property="schKeyWord">
          WHERE UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>
        ORDER BY REQUEST_DATE DESC, REQUEST_TIME DESC
    </select>
    
    <select id="SM7018.selectUseLogStatusList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT U.COMPANY_CD
                  ,U.USER_ID
                  ,U.USER_NAME
                  ,SUM(CASE WHEN U.MENU_ID = 'MM-0000' THEN U.TRANS_COUNT ELSE 0 END) AS LOGIN_COUNT
                  ,SUM(CASE WHEN U.MENU_ID != 'MM-0000' THEN U.TRANS_COUNT ELSE 0 END) AS TRANS_COUNT
                  ,MIN(U.FIRST_TIME) AS FIRST_TIME
                  ,MAX(U.LAST_TIME) AS LAST_TIME
              FROM (
                    SELECT U.*
                      FROM (
				            SELECT ULS.COMPANY_CD
				                  ,ULS.USER_ID
				                  ,(CASE WHEN ULS.SITE_TYPE = 'internal' THEN FU.NAME ELSE VC.NAME END) AS USER_NAME
				                  ,ULS.SITE_TYPE
				                  ,ULS.MENU_ID
				                  ,MLD.WORD AS MENU_NAME
				                  ,ULS.COOPER_CD
				                  ,(CASE WHEN ULS.SITE_TYPE = 'internal' THEN C.COMPANY_NAME ELSE V.VENDOR_NAME END) AS COOPER_NAME
				                  ,ULS.TRANS_COUNT
				                  ,TO_CHAR(ULS.FIRST_TIME, 'YYYY-MM-DD HH24:MI:SS') AS FIRST_TIME
				                  ,TO_CHAR(ULS.LAST_TIME, 'YYYY-MM-DD HH24:MI:SS') AS LAST_TIME
				              FROM USER_LOG_STATUS ULS
				                    LEFT OUTER JOIN FTA_USER FU
				                      ON FU.COMPANY_CD = ULS.COMPANY_CD
				                     AND FU.USER_ID = ULS.USER_ID
				                    LEFT OUTER JOIN MENU_LANG_DIC MLD
				                      ON MLD.MENU_ID = ULS.MENU_ID
				                     AND MLD.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
				                     AND MLD.LANG_ID = 1
				                    LEFT OUTER JOIN VENDOR V
				                      ON V.COMPANY_CD = ULS.COMPANY_CD
				                     AND V.VENDOR_CD = ULS.COOPER_CD
				                    LEFT OUTER JOIN COMPANY C
				                      ON C.COMPANY_CD = ULS.COMPANY_CD
				                    LEFT OUTER JOIN VENDOR_CHARGER VC
				                      ON VC.COMPANY_CD = ULS.COMPANY_CD
				                     AND VC.VENDOR_CD = ULS.COOPER_CD
				                     AND VC.CHARGER_ID = ULS.USER_ID
				             WHERE ULS.COMPANY_CD = #COMPANY_CD#
				             <isNotEmpty property="USER_ID">
				               AND ULS.USER_ID = #USER_ID#
				             </isNotEmpty>
				             <isNotEmpty property="SITE_TYPE">
				               AND ULS.SITE_TYPE = #SITE_TYPE#
				             </isNotEmpty>
				             <isNotEqual property="SESSION_USER_ID" compareValue="fta">
                               AND ULS.USER_ID != 'fta'
                             </isNotEqual>
				            ) U
                     <isNotEmpty property="schKeyWord">
                       WHERE UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
                     </isNotEmpty>
                    ) U
              GROUP BY U.COMPANY_CD
                      ,U.USER_ID
                      ,U.USER_NAME
        <include refid="select-paging-end" />
        ORDER BY TRANS_COUNT DESC
    </select>
    
    <select id="SM7019.selectAnalysisList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT DISTINCT FA.COMPANY_CD
                  ,C.COMPANY_NAME
                  ,FA.CO_REQ_NO
                  ,FA.LAST_CO_REQ_NO
                  ,FA.PRODUCT_ITEM_CD
                  ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
                  ,FA.FTA_CD
                  ,FMS.FTA_NAME
                  ,FA.LAST_RULE_CONTENTS
                  ,FA.RULE_CONTENTS
                  ,FA.LAST_YYYYMM
                  ,FA.YYYYMM
                  ,FA.LAST_COMPANY_CO_YN
                  ,CD1.WORD AS LAST_COMPANY_CO_YN_NAME
                  ,FA.COMPANY_CO_YN
                  ,CD2.WORD AS COMPANY_CO_YN_NAME
                  ,FAM.ANY_MAP_VALUE
                  ,FAM.ANY_CODE
                  ,FAM.ANY_MSG
              FROM FCR_ANALYSIS FA
                    LEFT OUTER JOIN FCR_ANALYSIS_MSG FAM
                      ON FA.CO_REQ_NO = FAM.CO_REQ_NO
                     AND FA.COMPANY_CD = FAM.COMPANY_CD
                     AND FA.DIVISION_CD = FAM.DIVISION_CD
                     AND FA.FTA_CD = FAM.FTA_CD
                    LEFT OUTER JOIN ITEM I
                      ON I.COMPANY_CD = FA.COMPANY_CD
                     AND I.ITEM_CD = FA.PRODUCT_ITEM_CD
                    LEFT OUTER JOIN FTA_MST FMS
                      ON FMS.FTA_CD = FA.FTA_CD
                    LEFT OUTER JOIN COMPANY C
                      ON C.COMPANY_CD = FA.COMPANY_CD
                    LEFT OUTER JOIN CODE_LANG_DIC CD1
                      ON CD1.COMPANY_CD = FA.COMPANY_CD
                     AND CD1.CATEGORY_CD = 'FTA_CO_YN' 
                     AND CD1.CODE = FA.LAST_COMPANY_CO_YN
                     AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
                    LEFT OUTER JOIN CODE_LANG_DIC CD2
                      ON CD2.COMPANY_CD = FA.COMPANY_CD
                     AND CD2.CATEGORY_CD = 'FTA_CO_YN' 
                     AND CD2.CODE = FA.COMPANY_CO_YN
                     AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
             WHERE FA.YYYYMM BETWEEN #SEARCH_START_MONTH# AND #SEARCH_END_MONTH#
             <isNotEmpty property="COMPANY_CD">
               AND FA.COMPANY_CD = #COMPANY_CD#
             </isNotEmpty>
             <isNotEmpty property="FTA_CD">
               AND FA.FTA_CD = #FTA_CD#
             </isNotEmpty>
             <isNotEmpty property="schKeyWord">
               AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
             </isNotEmpty>
        <include refid="select-paging-end" />
         ORDER BY COMPANY_CD, YYYYMM, COMPANY_CO_YN DESC, PRODUCT_ITEM_CD, FTA_CD, ANY_CODE
    </select>
    
    <select id="SM7019.selectAnalysisDetailList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT DISTINCT FA.COMPANY_CD
                  ,FA.PRODUCT_ITEM_CD
                  ,I.ITEM_NAME AS PRODUCT_ITEM_NAME
                  ,COALESCE(FA.ITEM_CD, FA.LAST_ITEM_CD) AS ITEM_CD
                  ,COALESCE(I2.ITEM_NAME, I3.ITEM_NAME) AS ITEM_NAME
                  ,FA.PRODUCT_HS_CODE
                  ,FA.ITEM_HS_CODE
                  ,FA.REQ_QTY
                  ,FA.FTA_UNIT_PRICE
	              ,FA.ORIGIN_RATE
	              ,FA.NONORIGIN_RATE
	              ,FA.INPUT_RATE
	              ,FA.CTC_DUP_YN
	              ,FA.ROT_MINUS_YYYYMM
	              ,FA.ROT_START_YYYYMM
                  ,FA.LAST_PRODUCT_HS_CODE
                  ,FA.LAST_ITEM_HS_CODE
                  ,FA.LAST_REQ_QTY
                  ,FA.LAST_FTA_UNIT_PRICE
                  ,FA.LAST_ORIGIN_RATE
                  ,FA.LAST_NONORIGIN_RATE
                  ,FA.LAST_INPUT_RATE
                  ,FA.LAST_CTC_DUP_YN
                  ,FA.LAST_ROT_MINUS_YYYYMM
                  ,FA.LAST_ROT_START_YYYYMM
                  ,FA.CTC_HS_CODE_YN
				  ,FA.CTC_RCV_CO_YN
				  ,FA.RVC_ORGIN_CHG_YN
				  ,FA.RVC_NONORGIN_CHG_YN
				  ,FA.BOM_REQ_CHG_YN
				  ,FA.BOM_PRICE_CHG_YN
				  ,FA.GOODS_HS_CODE_YN
				  ,FA.GOODS_RCV_CO_YN
              FROM FCR_ANALYSIS FA
                    LEFT OUTER JOIN ITEM I
                      ON I.COMPANY_CD = FA.COMPANY_CD
                     AND I.ITEM_CD = FA.PRODUCT_ITEM_CD
                    LEFT OUTER JOIN ITEM I2
                      ON I2.COMPANY_CD = FA.COMPANY_CD
                     AND I2.ITEM_CD = FA.ITEM_CD
                    LEFT OUTER JOIN ITEM I3
                      ON I3.COMPANY_CD = FA.COMPANY_CD
                     AND I3.ITEM_CD = FA.LAST_ITEM_CD
             WHERE FA.COMPANY_CD = #COMPANY_CD#
               AND FA.CO_REQ_NO = #CO_REQ_NO#::NUMERIC
               AND FA.FTA_CD = #FTA_CD#
               AND FA.PRODUCT_ITEM_CD = #PRODUCT_ITEM_CD#
             <isEqual property="SEARCH_CLOSING_TYPE" compareValue="THIS">
               AND FA.PRODUCT_YYYYMM IS NOT NULL
             </isEqual>
             <isEqual property="SEARCH_CLOSING_TYPE" compareValue="LAST">
               AND FA.LAST_PRODUCT_YYYYMM IS NOT NULL
             </isEqual>
        <include refid="select-paging-end" />
         ORDER BY COMPANY_CD, PRODUCT_ITEM_CD, ITEM_CD
    </select>
    
    <select id="SM7019.selectAnalysisItemList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
            SELECT DISTINCT FA.COMPANY_CD
                  ,C.COMPANY_NAME
                  ,FA.ITEM_CD
                  ,I.ITEM_NAME
                  ,FA.ITEM_DESC
                  ,FA.REASON_MSG
              FROM (
                    SELECT FA.COMPANY_CD, FA.ITEM_CD, 'HS코드 등록 필요' AS REASON_MSG
                          ,(CASE WHEN FA.PRODUCT_ITEM_CD = FA.ITEM_CD AND FA.GOODS_HS_CODE_YN = 'N' THEN '상품판매' ELSE '원재료(최대 구성비율:'||ROUND(MAX(FA.INPUT_RATE), 0)||'%)' END) AS ITEM_DESC
                          ,(CASE WHEN FA.PRODUCT_ITEM_CD = FA.ITEM_CD AND MAX(FA.GOODS_RCV_CO_YN) = 'N' THEN 100 ELSE ROUND(MAX(FA.INPUT_RATE), 0) END) AS ITEM_INPUT_RATE
                      FROM FCR_ANALYSIS FA
                     WHERE FA.YYYYMM BETWEEN #SEARCH_START_MONTH# AND #SEARCH_END_MONTH#
                       AND (FA.CTC_HS_CODE_YN = 'N' OR FA.GOODS_HS_CODE_YN = 'N')
                     <isNotEmpty property="COMPANY_CD">
                       AND FA.COMPANY_CD = #COMPANY_CD#
                     </isNotEmpty>
                     <isNotEmpty property="FTA_CD">
                       AND FA.FTA_CD = #FTA_CD#
                     </isNotEmpty>
                     <isNotEmpty property="CO_REQ_NO">
                       AND FA.CO_REQ_NO = #CO_REQ_NO#::NUMERIC
                     </isNotEmpty>
                     GROUP BY FA.COMPANY_CD, FA.ITEM_CD, FA.ITEM_HS_CODE, FA.PRODUCT_ITEM_CD, FA.GOODS_HS_CODE_YN
                    UNION ALL   
                    SELECT FA.COMPANY_CD, FA.ITEM_CD, V.VENDOR_NAME||'로부터 '||SUBSTRING(YYYYMM,1, 4)||'년도 확인서 수취 필요' AS REASON_MSG, ITEM_DESC, ITEM_INPUT_RATE
                      FROM (
                            SELECT DISTINCT FA.COMPANY_CD, FA.ITEM_CD, FA.ITEM_HS_CODE, DP.VENDOR_CD, MAX(RCCD.CO_DOC_NO) AS CO_DOC_NO 
                                  ,(CASE WHEN MAX(FA.COMPANY_CO_YN) = 'N' THEN MAX(FA.YYYYMM) ELSE MAX(FA.LAST_YYYYMM) END) AS YYYYMM
                                  ,(CASE WHEN FA.PRODUCT_ITEM_CD = FA.ITEM_CD AND MAX(FA.GOODS_RCV_CO_YN) = 'N' THEN '상품판매' ELSE '원재료(최대 구성비율:'||ROUND(MAX(FA.INPUT_RATE), 0)||'%)' END) AS ITEM_DESC
                                  ,(CASE WHEN FA.PRODUCT_ITEM_CD = FA.ITEM_CD AND MAX(FA.GOODS_RCV_CO_YN) = 'N' THEN 100 ELSE ROUND(MAX(FA.INPUT_RATE), 0) END) AS ITEM_INPUT_RATE
                              FROM FCR_ANALYSIS FA
                                   LEFT OUTER JOIN DW_PROCUREMENT DP
                                     ON DP.COMPANY_CD = FA.COMPANY_CD
                                    AND DP.ITEM_CD = FA.ITEM_CD
                                    AND DP.TXN_YYYYMM BETWEEN FA.ROT_MINUS_YYYYMM AND FA.ROT_START_YYYYMM
                                  LEFT OUTER JOIN RCV_CO_CERTIFICATE_DTL RCCD
                                    ON RCCD.COMPANY_CD = FA.COMPANY_CD
                                   AND RCCD.DIVISION_CD = FA.DIVISION_CD
                                   AND RCCD.FTA_CD = FA.FTA_CD
                                   AND RCCD.ITEM_CD = DP.ITEM_CD
                                   AND RCCD.VENDOR_CD = DP.VENDOR_CD
                                   AND DP.TXN_YYYYMM BETWEEN RCCD.APPLY_DATE AND RCCD.END_DATE
                             WHERE FA.YYYYMM BETWEEN #SEARCH_START_MONTH# AND #SEARCH_END_MONTH#
                               AND (FA.CTC_RCV_CO_YN = 'N' OR FA.GOODS_RCV_CO_YN = 'N')
                             <isNotEmpty property="COMPANY_CD">
                               AND FA.COMPANY_CD = #COMPANY_CD#
                             </isNotEmpty>
                             <isNotEmpty property="FTA_CD">
                               AND FA.FTA_CD = #FTA_CD#
                             </isNotEmpty>
                             <isNotEmpty property="CO_REQ_NO">
		                       AND FA.CO_REQ_NO = #CO_REQ_NO#::NUMERIC
		                     </isNotEmpty>
                             GROUP BY FA.COMPANY_CD, FA.ITEM_CD, FA.ITEM_HS_CODE, FA.PRODUCT_ITEM_CD, FA.GOODS_HS_CODE_YN, DP.VENDOR_CD
                          ) FA
                          LEFT OUTER JOIN VENDOR V
                            ON V.COMPANY_CD = FA.COMPANY_CD
                           AND V.VENDOR_CD = FA.VENDOR_CD
                     WHERE FA.CO_DOC_NO IS NULL
                       AND FA.VENDOR_CD IS NOT NULL
                    ) FA
                   LEFT OUTER JOIN ITEM I
                     ON I.COMPANY_CD = FA.COMPANY_CD
                    AND I.ITEM_CD = FA.ITEM_CD
                   LEFT OUTER JOIN COMPANY C
                     ON C.COMPANY_CD = FA.COMPANY_CD
             WHERE FA.ITEM_INPUT_RATE > 0
        <include refid="select-paging-end" />
         ORDER BY COMPANY_CD, ITEM_DESC, REASON_MSG, ITEM_CD
    </select>
    <!-- com.yni.fta.common.postgresql.PostgresqlDao 클래스에서 직접 구현
    <parameterMap id="analysisRCFProcedureMap" class="java.util.Map">
        <parameter property="COMPANY_CD" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="YYYYMM" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="SALES_MGMT_NO" jdbcType="VARCHAR" javaType="java.lang.String" mode="IN"/>
        <parameter property="ERROR_MESSAGE" jdbcType="VARCHAR" javaType="java.lang.String" mode="OUT"/>
    </parameterMap>

    <procedure id="SM7019.executeFCRAnalysisProcess" parameterMap="analysisRCFProcedureMap">
        { CALL OA_ORGIN_ANALYSIS(?, ?, ?, ?) }
    </procedure>
    -->
    <select id="SM7020.selectSurveyList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
        SELECT SFM.SURVEY_FORMAT_MST_ID
             , SFM.SURVEY_TYPE
             , CD1.WORD AS SURVEY_TYPE_NAME
             , SFM.VERSION
             , SFM.REVISION_DATE
             , SFM.APPLY_DATE
             , SFM.END_DATE
             , SFM.DESCRIPTION
             , SFM.FILE_NAME
             , SFM.QNA_START_NM
        FROM SURVEY_FORMAT_MST SFM
             LEFT OUTER JOIN CODE_LANG_DIC CD1
               ON CD1.COMPANY_CD = #SESSION_COMPANY_CD#
              AND CD1.CATEGORY_CD = 'EVALU_TYPE' 
              AND CD1.CODE = SFM.SURVEY_TYPE
              AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
        WHERE 1=1
        <isNotEmpty property="SURVEY_TYPE" prepend="AND">
          SFM.SURVEY_TYPE = #SURVEY_TYPE#
        </isNotEmpty>
        <isNotEmpty property="SURVEY_FORMAT_MST_ID" prepend="AND">
          SFM.SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
        </isNotEmpty>
        <isNotEmpty property="USING_YN">
            <isEqual property="USING_YN" compareValue="Y">
              AND TO_CHAR(NOW(), 'YYYYMMDD') BETWEEN SFM.APPLY_DATE AND SFM.END_DATE
            </isEqual>
        </isNotEmpty>
        <include refid="select-paging-end" />
        ORDER BY VERSION DESC
    </select>
    
    <select id="SM7020.selectSurveyTree" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SM.PARENT_ATTRIBUTE_CODE
             , SM.ATTRIBUTE_CODE AS ID
             , SM.ATTRIBUTE_NAME AS TEXT
             , SM.SURVEY_FORMAT_DTL_ID
             , SM.SORT_NUM
        FROM (
              SELECT NULL AS PARENT_ATTRIBUTE_CODE,
                     SURVEY_FORMAT_MST_ID::TEXT AS ATTRIBUTE_CODE,
                     CD1.WORD AS ATTRIBUTE_NAME,
                     NULL AS SURVEY_FORMAT_DTL_ID,
                     0 AS SORT_NUM
                FROM SURVEY_FORMAT_MST SFM
                     LEFT OUTER JOIN CODE_LANG_DIC CD1
                       ON CD1.COMPANY_CD = #SESSION_COMPANY_CD#
                      AND CD1.CATEGORY_CD = 'EVALU_TYPE' 
                      AND CD1.CODE = SFM.SURVEY_TYPE
                      AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
               WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
               UNION ALL
              SELECT SFD.PARENT_ATTRIBUTE_CODE,
                     SFD.ATTRIBUTE_CODE AS ATTRIBUTE_CODE,
                     SFD.SORT_NUM||'.'||SFD.ATTRIBUTE_NAME||
                     (CASE WHEN SFD.ANSWER_TYPE1 = 'label' THEN (' > '||SFD.ANSWER_NAME1) ELSE '' END)||
                     (CASE WHEN SFD.ANSWER_TYPE2 = 'label' THEN (' > '||SFD.ANSWER_NAME2) ELSE '' END)||
                     (CASE WHEN SFD.ANSWER_TYPE3 = 'label' THEN (' > '||SFD.ANSWER_NAME3) ELSE '' END)||
                     (CASE WHEN SFD.ANSWER_TYPE4 = 'label' THEN (' > '||SFD.ANSWER_NAME4) ELSE '' END)
                     AS ATTRIBUTE_NAME,
                     SFD.SURVEY_FORMAT_DTL_ID,
                     SFD.SORT_NUM
                FROM SURVEY_FORMAT_MST SFM
                     INNER JOIN SURVEY_FORMAT_DTL SFD
                        ON SFM.SURVEY_FORMAT_MST_ID = SFD.SURVEY_FORMAT_MST_ID
                WHERE SFM.SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
              ) SM
        ORDER BY SM.SORT_NUM ASC
    </select>
    
    <select id="SM7020.selectSurveyMstDetail" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SFM.SURVEY_FORMAT_MST_ID
             , SFM.SURVEY_TYPE
             , SFM.VERSION
             , SFM.REVISION_DATE
             , SFM.APPLY_DATE
             , SFM.END_DATE
             , SFM.DESCRIPTION
             , SFM.FILE_NAME
             , SFM.REALFILE
             , SFM.QNA_START_NM
        FROM SURVEY_FORMAT_MST SFM
        WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
    </select>
    
    <select id="SM7020.selectSurveyDtlDetail" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SFD.SURVEY_FORMAT_DTL_ID
              ,SFD.SURVEY_TYPE
              ,SFD.VERSION
              ,SFD.ATTRIBUTE_CODE
              ,SFD.ATTRIBUTE_NAME
              ,SFD.ATTRIBUTE_NAME_ENG
              ,SFD.ATTRIBUTE_STYLE
              ,SFD.DESCRIPTION
              ,SFD.DESCRIPTION_ENG
              ,SFD.SORT_NUM
              ,SFD.ANSWER_NUM
              ,SFD.FILE_ATTACH_YN
              ,SFD.CATEGORY
              ,SFD.ANSWER_NAME1
              ,SFD.ANSWER_NAME2
              ,SFD.ANSWER_NAME3
              ,SFD.ANSWER_NAME4
              ,SFD.ANSWER_TYPE1
              ,SFD.ANSWER_TYPE2
              ,SFD.ANSWER_TYPE3
              ,SFD.ANSWER_TYPE4
              ,SFD.ANSWER_STYLE1
              ,SFD.ANSWER_STYLE2
              ,SFD.ANSWER_STYLE3
              ,SFD.ANSWER_STYLE4
              ,SFD.ANSWER_DESC1
              ,SFD.ANSWER_DESC2
              ,SFD.ANSWER_DESC3
              ,SFD.ANSWER_DESC4
              ,SFD.ANSWER_CATEGORY1
              ,SFD.ANSWER_CATEGORY2
              ,SFD.ANSWER_CATEGORY3
              ,SFD.ANSWER_CATEGORY4
              ,SFD.METAL_CODE
              ,SFD.PARENT_ATTRIBUTE_CODE
          FROM SURVEY_FORMAT_DTL SFD
        WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
          AND SURVEY_FORMAT_DTL_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_DTL_ID#)
    </select>
    
    <select id="SM7020.selectSurveyFormatMstId" parameterClass="java.util.Map" resultClass="java.lang.String">
        SELECT NEXTVAL('SURVEY_FORMAT_MST_S')
    </select>
    
    <select id="SM7020.selectSurveyFormatDtlId" parameterClass="java.util.Map" resultClass="java.lang.String">
        SELECT NEXTVAL('SURVEY_FORMAT_DTL_S')
    </select>
    
    <insert id="SM7020.insertSurveyFormatMst" parameterClass="java.util.Map">
        INSERT INTO SURVEY_FORMAT_MST(
            SURVEY_FORMAT_MST_ID
          , SURVEY_TYPE
          , VERSION
          , REVISION_DATE
          , APPLY_DATE
          , END_DATE
          , DESCRIPTION
          , QNA_START_NM
          , UPDATE_DATE
          , UPDATE_BY
          , CREATE_DATE
          , CREATE_BY)             
        VALUES (
            FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
          , #SURVEY_TYPE#
          , #VERSION#
          , #REVISION_DATE#
          , #APPLY_DATE#
          , #END_DATE#
          , #DESCRIPTION#
          , FN_PG_GET_CAST_NUM(#QNA_START_NM#)
          , NOW()
          , #UPDATE_BY#
          , NOW()
          , #CREATE_BY#)
    </insert>
    
    <update id="SM7020.updateSurveyFormatMst" parameterClass="java.util.Map">
       UPDATE SURVEY_FORMAT_MST
          SET SURVEY_TYPE = #SURVEY_TYPE#
            , REVISION_DATE = #REVISION_DATE#
            , APPLY_DATE    = #APPLY_DATE#
            , END_DATE      = #END_DATE#
            , DESCRIPTION   = #DESCRIPTION#
            , QNA_START_NM  = FN_PG_GET_CAST_NUM(#QNA_START_NM#)
            , UPDATE_DATE   = NOW()
            , UPDATE_BY     = #UPDATE_BY#
        WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
    </update>
    
    <update id="SM7020.updateRealCmrtFile" parameterClass="java.util.Map">
        UPDATE SURVEY_FORMAT_MST
           SET FILE_NAME = #FILE_NAME#
              ,REALFILE = #REALFILE:BLOB#
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #UPDATE_BY#
         WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
    </update>
    
    <insert id="SM7020.insertSurveyFormatDtl" parameterClass="java.util.Map">
        INSERT INTO SURVEY_FORMAT_DTL(
                SURVEY_FORMAT_MST_ID
              , SURVEY_FORMAT_DTL_ID
              , SURVEY_TYPE
              , VERSION
              , ATTRIBUTE_CODE
              , ATTRIBUTE_NAME
              , ATTRIBUTE_NAME_ENG
              , PARENT_ATTRIBUTE_CODE
              , DESCRIPTION
              , DESCRIPTION_ENG
              , METAL_CODE
              , SORT_NUM
              , ANSWER_NUM
              , FILE_ATTACH_YN
              , CATEGORY
              , ANSWER_NAME1
              , ANSWER_NAME2
              , ANSWER_NAME3
              , ANSWER_NAME4
              , ANSWER_TYPE1
              , ANSWER_TYPE2
              , ANSWER_TYPE3
              , ANSWER_TYPE4
              , ATTRIBUTE_STYLE
              , ANSWER_STYLE1
              , ANSWER_STYLE2
              , ANSWER_STYLE3
              , ANSWER_STYLE4
              , ANSWER_DESC1
              , ANSWER_DESC2
              , ANSWER_DESC3
              , ANSWER_DESC4
              , ANSWER_CATEGORY1
              , ANSWER_CATEGORY2
              , ANSWER_CATEGORY3
              , ANSWER_CATEGORY4
              , UPDATE_DATE
              , UPDATE_BY
              , CREATE_DATE
              , CREATE_BY)             
        VALUES (
                FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
              , FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_DTL_ID#)
              , #SURVEY_TYPE#
              , #VERSION#
              , #ATTRIBUTE_CODE#
              , #ATTRIBUTE_NAME#
              , #ATTRIBUTE_NAME_ENG#
              , #PARENT_ATTRIBUTE_CODE#
              , #DESCRIPTION#
              , #DESCRIPTION_ENG#
              , #METAL_CODE#
              , FN_PG_GET_CAST_NUM(#SORT_NUM#)
              , FN_PG_GET_CAST_NUM(#ANSWER_NUM#)
              , #FILE_ATTACH_YN#
              , #CATEGORY#
              , #ANSWER_NAME1#
              , #ANSWER_NAME2#
              , #ANSWER_NAME3#
              , #ANSWER_NAME4#
              , #ANSWER_TYPE1#
              , #ANSWER_TYPE2#
              , #ANSWER_TYPE3#
              , #ANSWER_TYPE4#
              , #ATTRIBUTE_STYLE#
              , #ANSWER_STYLE1#
              , #ANSWER_STYLE2#
              , #ANSWER_STYLE3#
              , #ANSWER_STYLE4#
              , #ANSWER_DESC1#
              , #ANSWER_DESC2#
              , #ANSWER_DESC3#
              , #ANSWER_DESC4#
              , #ANSWER_CATEGORY1#
              , #ANSWER_CATEGORY2#
              , #ANSWER_CATEGORY3#
              , #ANSWER_CATEGORY4#
              , NOW()
              , #UPDATE_BY#
              , NOW()
              , #CREATE_BY#)
    </insert>
    
    <update id="SM7020.updateSurveyFormatDtl" parameterClass="java.util.Map">
        UPDATE SURVEY_FORMAT_DTL SET
                  ATTRIBUTE_NAME     = #ATTRIBUTE_NAME#
                , ATTRIBUTE_NAME_ENG = #ATTRIBUTE_NAME_ENG#
                , ATTRIBUTE_STYLE    = #ATTRIBUTE_STYLE#
                , DESCRIPTION        = #DESCRIPTION#
                , DESCRIPTION_ENG    = #DESCRIPTION_ENG#
                , SORT_NUM           = FN_PG_GET_CAST_NUM(#SORT_NUM#)
                , ANSWER_NUM         = FN_PG_GET_CAST_NUM(#ANSWER_NUM#)
                , FILE_ATTACH_YN     = #FILE_ATTACH_YN#
                , CATEGORY           = #CATEGORY#
                , METAL_CODE         = #METAL_CODE#
                , PARENT_ATTRIBUTE_CODE =  #PARENT_ATTRIBUTE_CODE#
                , ANSWER_NAME1    = #ANSWER_NAME1#
                , ANSWER_NAME2    = #ANSWER_NAME2#
                , ANSWER_NAME3    = #ANSWER_NAME3#
                , ANSWER_NAME4    = #ANSWER_NAME4#
                , ANSWER_TYPE1    = #ANSWER_TYPE1#
                , ANSWER_TYPE2    = #ANSWER_TYPE2#
                , ANSWER_TYPE3    = #ANSWER_TYPE3#
                , ANSWER_TYPE4    = #ANSWER_TYPE4#
                , ANSWER_STYLE1   = #ANSWER_STYLE1#
                , ANSWER_STYLE2   = #ANSWER_STYLE2#
                , ANSWER_STYLE3   = #ANSWER_STYLE3#
                , ANSWER_STYLE4   = #ANSWER_STYLE4#
                , ANSWER_DESC1 = #ANSWER_DESC1#
                , ANSWER_DESC2 = #ANSWER_DESC2#
                , ANSWER_DESC3 = #ANSWER_DESC3#
                , ANSWER_DESC4 = #ANSWER_DESC4#
                , ANSWER_CATEGORY1 = #ANSWER_CATEGORY1#
                , ANSWER_CATEGORY2 = #ANSWER_CATEGORY2#
                , ANSWER_CATEGORY3 = #ANSWER_CATEGORY3#
                , ANSWER_CATEGORY4 = #ANSWER_CATEGORY4#
                , UPDATE_DATE        = NOW()
                , UPDATE_BY          = #UPDATE_BY#
            WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#) 
              AND SURVEY_FORMAT_DTL_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_DTL_ID#)
    </update>
    
    <select id="SM7020.selectcSurveyAttributeCodeDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(*) AS DUPLICATE
          FROM SURVEY_FORMAT_DTL
          WHERE (SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
            AND ATTRIBUTE_CODE = #ATTRIBUTE_CODE#)
             OR SURVEY_FORMAT_MST_ID::TEXT = #ATTRIBUTE_CODE#
    </select>
    
    <delete id="SM7020.deleteSurveyFormatMst" parameterClass="java.util.Map">
        DELETE FROM SURVEY_FORMAT_MST
         WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
    </delete>
    
    <delete id="SM7020.deleteSurveyFormatDtl" parameterClass="java.util.Map">
        DELETE FROM SURVEY_FORMAT_DTL
         WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
         <isNotEmpty property="SURVEY_FORMAT_DTL_ID">
           AND SURVEY_FORMAT_DTL_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_DTL_ID#) 
         </isNotEmpty>
    </delete>
    
    <update id="SM7020.insertSurveyFormatDtlCopy" parameterClass="java.util.Map">
        BEGIN;
            DELETE FROM SURVEY_FORMAT_DTL 
             WHERE SURVEY_FORMAT_MST_ID = (SELECT MAX(SURVEY_FORMAT_MST_ID)
                                             FROM SURVEY_FORMAT_MST SFM
                                            WHERE SFM.SURVEY_TYPE = #SURVEY_TYPE#
                                              AND SFM.VERSION = #VERSION#);
                                              
            DELETE FROM SURVEY_CODE 
             WHERE SURVEY_FORMAT_MST_ID = (SELECT MAX(SURVEY_FORMAT_MST_ID)
                                             FROM SURVEY_FORMAT_MST SFM
                                            WHERE SFM.SURVEY_TYPE = #SURVEY_TYPE#
                                              AND SFM.VERSION = #VERSION#);
            
            INSERT INTO SURVEY_FORMAT_DTL (
                 SURVEY_FORMAT_DTL_ID
               , SURVEY_FORMAT_MST_ID
               , SURVEY_TYPE
               , VERSION
               , ATTRIBUTE_CODE
               , ATTRIBUTE_NAME
               , ATTRIBUTE_NAME_ENG
               , DESCRIPTION
               , DESCRIPTION_ENG
               , METAL_CODE
               , PARENT_ATTRIBUTE_CODE
               , SORT_NUM
               , ANSWER_NUM
               , FILE_ATTACH_YN
               , CATEGORY
               , ATTRIBUTE_STYLE
               , ANSWER_NAME1
               , ANSWER_TYPE1
               , ANSWER_STYLE1
               , ANSWER_NAME2
               , ANSWER_TYPE2
               , ANSWER_STYLE2
               , ANSWER_NAME3
               , ANSWER_TYPE3
               , ANSWER_STYLE3
               , ANSWER_NAME4
               , ANSWER_TYPE4
               , ANSWER_STYLE4
               , ANSWER_DESC1
               , ANSWER_DESC2
               , ANSWER_DESC3
               , ANSWER_DESC4
               , ANSWER_CATEGORY1
               , ANSWER_CATEGORY2
               , ANSWER_CATEGORY3
               , ANSWER_CATEGORY4
               , CREATE_DATE
               , CREATE_BY
               , UPDATE_DATE
               , UPDATE_BY) 
            SELECT NEXTVAL('SURVEY_FORMAT_DTL_S')
               , SURVEY_FORMAT_MST_ID_S
               , SURVEY_TYPE
               , #VERSION#
               , ATTRIBUTE_CODE
               , ATTRIBUTE_NAME
               , ATTRIBUTE_NAME_ENG
               , DESCRIPTION
               , DESCRIPTION_ENG
               , METAL_CODE
                , (CASE WHEN PARENT_ATTRIBUTE_CODE = SURVEY_FORMAT_MST_ID::TEXT THEN SURVEY_FORMAT_MST_ID_S::TEXT
                       ELSE PARENT_ATTRIBUTE_CODE END)
               , SORT_NUM
               , ANSWER_NUM
               , FILE_ATTACH_YN
               , CATEGORY
               , ATTRIBUTE_STYLE
               , ANSWER_NAME1
               , ANSWER_TYPE1
               , ANSWER_STYLE1
               , ANSWER_NAME2
               , ANSWER_TYPE2
               , ANSWER_STYLE2
               , ANSWER_NAME3
               , ANSWER_TYPE3
               , ANSWER_STYLE3
               , ANSWER_NAME4
               , ANSWER_TYPE4
               , ANSWER_STYLE4
               , ANSWER_DESC1
               , ANSWER_DESC2
               , ANSWER_DESC3
               , ANSWER_DESC4
               , ANSWER_CATEGORY1
               , ANSWER_CATEGORY2
               , ANSWER_CATEGORY3
               , ANSWER_CATEGORY4
               , CREATE_DATE
               , #SESSION_USER_ID#
               , UPDATE_DATE
               , #SESSION_USER_ID#
            FROM SURVEY_FORMAT_DTL A
                 LEFT OUTER JOIN (SELECT MAX(SURVEY_FORMAT_MST_ID) AS SURVEY_FORMAT_MST_ID_S
                                    FROM SURVEY_FORMAT_MST SFM
                                   WHERE SFM.SURVEY_TYPE = #SURVEY_TYPE#
                                     AND SFM.VERSION = #VERSION#) B
                   ON 1 = 1
           WHERE SURVEY_FORMAT_MST_ID = (SELECT MAX(SURVEY_FORMAT_MST_ID)
                                           FROM SURVEY_FORMAT_MST SFM
                                          WHERE SFM.SURVEY_TYPE = #SURVEY_TYPE#
                                            AND SFM.VERSION = #VERSION_S#);
           
           INSERT INTO SURVEY_CODE(
                CATEGORY    
               ,SURVEY_FORMAT_MST_ID 
               ,TASK_CD  
               ,TASK_NAME    
               ,POINTS   
               ,FROM_POINTS  
               ,TO_POINTS    
               ,SORT_NO  
               ,USER_YN  
               ,CREATE_DATE  
               ,CREATE_BY    
               ,UPDATE_DATE  
               ,UPDATE_BY)             
            SELECT
                CATEGORY 
               ,SURVEY_FORMAT_MST_ID_S
               ,TASK_CD
               ,TASK_NAME
               ,POINTS
               ,FROM_POINTS
               ,TO_POINTS   
               ,SORT_NO 
               ,USER_YN  
               ,NOW()
               ,#SESSION_USER_ID#
               ,NOW()
               ,#SESSION_USER_ID#
            FROM SURVEY_CODE A
                 LEFT OUTER JOIN (SELECT MAX(SURVEY_FORMAT_MST_ID) AS SURVEY_FORMAT_MST_ID_S
                                    FROM SURVEY_FORMAT_MST SFM
                                   WHERE SFM.SURVEY_TYPE = #SURVEY_TYPE#
                                     AND SFM.VERSION = #VERSION#) B
                   ON 1 = 1
           WHERE SURVEY_FORMAT_MST_ID = (SELECT MAX(SURVEY_FORMAT_MST_ID)
                                           FROM SURVEY_FORMAT_MST SFM
                                          WHERE SFM.SURVEY_TYPE = #SURVEY_TYPE#
                                            AND SFM.VERSION = #VERSION_S#);
          
       END;
    </update>
    
    <select id="SM7020.selectSurveyTempletList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SFD.PARENT_ATTRIBUTE_CODE
             , SFD.ATTRIBUTE_CODE
             , SFD.ATTRIBUTE_NAME
             , SFD.SURVEY_FORMAT_DTL_ID AS SURVEY_FORMAT_DTL_ID
             , SFD.ATTRIBUTE_STYLE
             , SFD.ANSWER_NAME1
             , SFD.ANSWER_NAME2
             , SFD.ANSWER_NAME3
             , SFD.ANSWER_NAME4
             , SFD.ANSWER_TYPE1
             , SFD.ANSWER_TYPE2
             , SFD.ANSWER_TYPE3
             , SFD.ANSWER_TYPE4
             , SFD.ANSWER_STYLE1
             , SFD.ANSWER_STYLE2
             , SFD.ANSWER_STYLE3
             , SFD.ANSWER_STYLE4
             , SFD.ANSWER_DESC1
             , SFD.ANSWER_DESC2
             , SFD.ANSWER_DESC3
             , SFD.ANSWER_DESC4
             , SFD.ANSWER_CATEGORY1
             , SFD.ANSWER_CATEGORY2
             , SFD.ANSWER_CATEGORY3
             , SFD.ANSWER_CATEGORY4
             , SFD.ANSWER_NUM
             , SFD.CATEGORY
             , SFD.DESCRIPTION
             , SFD.FILE_ATTACH_YN
             , SFD.SURVEY_TYPE
             , SFD.VERSION
             , SFD.SORT_NUM
          FROM SURVEY_FORMAT_DTL SFD
         WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
         ORDER BY SORT_NUM ASC
    </select>
    
    <select id="SM7020.selectAllCodeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SC.CATEGORY
              ,SC.TASK_CD AS CODE
              ,SC.TASK_NAME AS NAME 
         FROM SURVEY_CODE SC
        WHERE SC.SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
        ORDER BY SC.CATEGORY, SC.SORT_NO
    </select>
    
    <select id="SM7020.selectSurveyParentList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT SFM.SURVEY_FORMAT_MST_ID::TEXT AS CODE
             , CD1.WORD AS NAME
             , 0 AS SORT_NUM
          FROM SURVEY_FORMAT_MST SFM
              LEFT OUTER JOIN CODE_LANG_DIC CD1
                ON CD1.COMPANY_CD = #SESSION_COMPANY_CD#
               AND CD1.CATEGORY_CD = 'EVALU_TYPE' 
               AND CD1.CODE = SFM.SURVEY_TYPE
               AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
        WHERE SFM.SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
        UNION ALL
        SELECT SFD.ATTRIBUTE_CODE AS CODE
             , SFD.ATTRIBUTE_NAME AS NAME
             , SFD.SORT_NUM
          FROM SURVEY_FORMAT_MST SFM
               INNER JOIN SURVEY_FORMAT_DTL SFD
                  ON SFM.SURVEY_FORMAT_MST_ID = SFD.SURVEY_FORMAT_MST_ID
         WHERE SFM.SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
         ORDER BY SORT_NUM
    </select>
    
    <select id="SM7020.selectDocVersionList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT VERSION AS CODE
              ,VERSION AS NAME 
          FROM SURVEY_FORMAT_MST
         WHERE SURVEY_TYPE = #SURVEY_TYPE#
         <isNotEmpty property="SURVEY_ALL">
            <isEqual property="SURVEY_ALL" compareValue="N">
           AND (CASE WHEN #YYYYMMDD# IS NULL OR #YYYYMMDD# = '' THEN TO_CHAR(NOW(), 'YYYYMMDD') ELSE #YYYYMMDD# END) BETWEEN APPLY_DATE AND END_DATE 
            </isEqual>
         </isNotEmpty>
         <isEmpty property="SURVEY_ALL">
           AND (CASE WHEN #YYYYMMDD# IS NULL OR #YYYYMMDD# = '' THEN TO_CHAR(NOW(), 'YYYYMMDD') ELSE #YYYYMMDD# END) BETWEEN APPLY_DATE AND END_DATE
         </isEmpty>
         ORDER BY VERSION DESC
    </select>
    
    <select id="SM7020.selectSurveyCategoryList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CATEGORY 
              ,CATEGORY_NAME   
              ,USER_OPEN_YN    
          FROM SURVEY_CATEGORY
         WHERE 1 = 1
         <isNotEmpty property="CATEGORY">
           AND CATEGORY LIKE '%'||#CATEGORY#||'%'
         </isNotEmpty>
         <isNotEmpty property="TASK_CD">
           AND CATEGORY_NAME LIKE '%'||#CATEGORY_NAME#||'%' 
         </isNotEmpty>
         <isNotEqual property="SESSION_USER_ID" compareValue="fta">
           AND USER_OPEN_YN = #USER_OPEN_YN#
         </isNotEqual>
         ORDER BY CATEGORY
    </select>
    
    <insert id="SM7020.insertSurveyCategory" parameterClass="java.util.Map">
        INSERT INTO SURVEY_CATEGORY(
            CATEGORY
          , CATEGORY_NAME
          , USER_OPEN_YN
          , UPDATE_DATE
          , UPDATE_BY
          , CREATE_DATE
          , CREATE_BY)             
        VALUES (
            #CATEGORY#
          , #CATEGORY_NAME#
          , #USER_OPEN_YN#
          , NOW()
          , #UPDATE_BY#
          , NOW()
          , #CREATE_BY#)
    </insert>
    
    <update id="SM7020.updateSurveyCategory" parameterClass="java.util.Map">
       UPDATE SURVEY_CATEGORY
          SET CATEGORY_NAME = #CATEGORY_NAME#
            , USER_OPEN_YN = #USER_OPEN_YN#
            , UPDATE_DATE   = NOW()
            , UPDATE_BY     = #UPDATE_BY#
        WHERE CATEGORY = #CATEGORY#
    </update>
    
    <delete id="SM7020.deleteSurveyCategory" parameterClass="java.util.Map">
        DELETE FROM SURVEY_CATEGORY
         WHERE CATEGORY = #CATEGORY#
    </delete>
    
    <select id="SM7020.selectSurveyCodeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT CATEGORY 
              ,SURVEY_FORMAT_MST_ID    
              ,TASK_CD 
              ,TASK_NAME   
              ,POINTS  
              ,FROM_POINTS 
              ,TO_POINTS   
              ,SORT_NO 
              ,USER_YN 
          FROM SURVEY_CODE
         WHERE CATEGORY = #CATEGORY#
           AND SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
         ORDER BY SORT_NO
    </select>
    
    <insert id="SM7020.insertSurveyCode" parameterClass="java.util.Map">
        INSERT INTO SURVEY_CODE(
            CATEGORY    
           ,SURVEY_FORMAT_MST_ID 
           ,TASK_CD  
           ,TASK_NAME    
           ,POINTS   
           ,FROM_POINTS  
           ,TO_POINTS    
           ,SORT_NO  
           ,USER_YN  
           ,CREATE_DATE  
           ,CREATE_BY    
           ,UPDATE_DATE  
           ,UPDATE_BY)             
        VALUES (
            #CATEGORY#    
           ,FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#) 
           ,#TASK_CD#  
           ,#TASK_NAME#    
           ,#POINTS#   
           ,#FROM_POINTS#  
           ,#TO_POINTS#    
           ,FN_PG_GET_CAST_NUM(#SORT_NO#)  
           ,#USER_YN#  
           ,NOW()
           ,#UPDATE_BY#
           ,NOW()
           ,#CREATE_BY#)
    </insert>
    
    <update id="SM7020.updateSurveyCode" parameterClass="java.util.Map">
       UPDATE SURVEY_CODE
          SET TASK_NAME = #TASK_NAME#
             ,POINTS = #POINTS#
             ,FROM_POINTS = #FROM_POINTS#
             ,TO_POINTS = #TO_POINTS#
             ,SORT_NO = FN_PG_GET_CAST_NUM(#SORT_NO#) 
             ,USER_YN = #USER_YN#
            , UPDATE_DATE   = NOW()
            , UPDATE_BY     = #UPDATE_BY#
        WHERE CATEGORY = #CATEGORY#
          AND SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
          AND TASK_CD = #TASK_CD#
    </update>
    
    <delete id="SM7020.deleteSurveyCode" parameterClass="java.util.Map">
        DELETE FROM SURVEY_CODE
         WHERE SURVEY_FORMAT_MST_ID = FN_PG_GET_CAST_NUM(#SURVEY_FORMAT_MST_ID#)
         <isNotEmpty property="CATEGORY">
           AND CATEGORY = #CATEGORY# 
         </isNotEmpty>
         <isNotEmpty property="TASK_CD">
           AND TASK_CD = #TASK_CD# 
         </isNotEmpty>
    </delete>
    
    <select id="SM7035.selectTomsClientList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
        SELECT TC.*
              ,COALESCE(TSH.HIST_CNT, 0) AS HIST_REG_CNT
              ,TSH.ACTION_DATE 
          FROM (
		        SELECT TC.COMPANY_CD
		              ,TC.CLIENT_NO
		              ,TC.CLIENT_NAME
		              ,TC.BUSINESS_NO
		              ,TC.PRESIDENT_NAME
		              ,TC.PRESIDENT_NAME_ENG
		              ,TC.PRESIDENT_EMAIL
		              ,TC.PRESIDENT_PHONE_NO
		              ,TC.NATION_CD
		              ,CD1.WORD AS NATION_NAME
		              ,TC.ZIP_CD
		              ,TC.ADDRESS
		              ,TC.PHONE_NO
		              ,TC.FAX_NO
		              ,TC.CITY
		              ,TC.HOME_PAGE_URL
		              ,TC.AMOUNT
		              ,TC.CO_YYYY
		              ,TC.PLANT_NUM
		              ,TC.PLANT_DESC
		              ,TC.USER_PROD_DESC
		              ,TC.ERP_PROD_DESC
		              ,TC.DEAL_COPERS
		              ,TC.SALES_USER_ID
		              ,FU1.NAME AS SALES_USER_NAME
		              ,TC.PARTNER_USER_ID
		              ,FU2.NAME AS PARTNER_USER_NAME
		              ,TC.MNGT_USER_ID
		              ,FU3.NAME AS MNGT_USER_NAME
		              ,TC.MNGT_SIGN_YN
		              ,TC.TOP_USER_ID
		              ,FU4.NAME AS TOP_USER_NAME
		              ,TC.TOP_SIGN_YN
		              ,TC.ORDER_SCORE
		              ,CD4.WORD AS ORDER_SCORE_NAME
		              ,TC.ON_AMOUNT
		              ,TC.MAINT_AMOUNT
		              ,TC.SALES_PRODS
		              ,TC.SALES_STATUS
		              ,CD2.WORD AS SALES_STATUS_NAME
		              ,TC.PJT_STATUS
		              ,CD3.WORD AS PJT_STATUS_NAME
		              ,TC.COMMT
		              ,TO_CHAR(TC.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		              ,TC.CREATE_BY
		              ,TO_CHAR(TC.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		              ,TC.UPDATE_BY
		              ,TCC.NAME AS CHARGER_NAME
                      ,TCC.PHONE_NO AS CHARGER_PHONE_NO
                      ,TCC.EMAIL AS CHARGER_EMAIL
		              ,RANK() OVER(PARTITION BY TCC.COMPANY_CD, TCC.CLIENT_NO, TCC.JOB_TYPE ORDER BY TCC.NAME) AS TC_RANK
		              ,TC.PRODUCTS
                      ,TC.SECTORS
		          FROM TOMS_CLIENT TC
		               LEFT OUTER JOIN TOMS_CLIENT_CHARGER TCC
		                 ON TCC.COMPANY_CD = TC.COMPANY_CD
		                AND TCC.CLIENT_NO = TC.CLIENT_NO
		                AND TCC.JOB_TYPE = '1'
		               LEFT OUTER JOIN FTA_USER FU1
		                 ON FU1.COMPANY_CD = TC.COMPANY_CD
		                AND FU1.USER_ID = TC.SALES_USER_ID
		               LEFT OUTER JOIN FTA_USER FU2
		                 ON FU2.COMPANY_CD = TC.COMPANY_CD
		                AND FU2.USER_ID = TC.PARTNER_USER_ID
		               LEFT OUTER JOIN FTA_USER FU3
		                 ON FU3.COMPANY_CD = TC.COMPANY_CD
		                AND FU3.USER_ID = TC.MNGT_USER_ID
		               LEFT OUTER JOIN FTA_USER FU4
		                 ON FU4.COMPANY_CD = TC.COMPANY_CD
		                AND FU4.USER_ID = TC.TOP_USER_ID
		               LEFT OUTER JOIN CODE_LANG_DIC CD1
		                 ON CD1.COMPANY_CD = TC.COMPANY_CD
		                AND CD1.CATEGORY_CD = 'NATION' 
		                AND CD1.CODE = TC.NATION_CD
		                AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		               LEFT OUTER JOIN CODE_LANG_DIC CD2
		                 ON CD2.COMPANY_CD = TC.COMPANY_CD
		                AND CD2.CATEGORY_CD = 'TS_SALES_STATUS' 
		                AND CD2.CODE = TC.SALES_STATUS
		                AND CD2.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		               LEFT OUTER JOIN CODE_LANG_DIC CD3
		                 ON CD3.COMPANY_CD = TC.COMPANY_CD
		                AND CD3.CATEGORY_CD = 'TS_PJT_STATUS' 
		                AND CD3.CODE = TC.PJT_STATUS
		                AND CD3.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		               LEFT OUTER JOIN CODE_LANG_DIC CD4
		                 ON CD4.COMPANY_CD = TC.COMPANY_CD
		                AND CD4.CATEGORY_CD = 'ORDER_SCORE_TYPE' 
		                AND CD4.CODE = TC.ORDER_SCORE
		                AND CD4.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
		         WHERE TC.COMPANY_CD = #COMPANY_CD#
		         <isNotEmpty property="SALES_STATUS">
		           AND TC.SALES_STATUS = #SALES_STATUS#
		         </isNotEmpty>
		         <isNotEmpty property="ORDER_SCORE">
		           AND TC.ORDER_SCORE = #ORDER_SCORE#
		         </isNotEmpty>
		         <isNotEmpty property="CITY">
		           AND TC.CITY LIKE '%'||#CITY#||'%'
		         </isNotEmpty>
		         <isNotEmpty property="SECTORS">
                   AND TC.SECTORS LIKE '%'||#SECTORS#||'%'
                 </isNotEmpty>
                 <isNotEmpty property="PRODUCTS">
                   AND TC.PRODUCTS LIKE '%'||#PRODUCTS#||'%'
                 </isNotEmpty>
		         <isNotEmpty property="FROM_AMOUNT">
		           AND TC.AMOUNT BETWEEN FN_PG_GET_CAST_NUM(#FROM_AMOUNT#) AND FN_PG_GET_CAST_NUM(#TO_AMOUNT#)
		         </isNotEmpty>
		         <isNotEmpty property="schKeyWord">
		           AND UPPER(TC.$schKeyField$) LIKE UPPER(#schKeyWord#)
		         </isNotEmpty>
             ) TC
             LEFT OUTER JOIN (SELECT TSH.COMPANY_CD
                                    ,TSH.CLIENT_NO
                                    ,COUNT(1) AS HIST_CNT
                                    ,MAX(ACTION_DATE) AS ACTION_DATE
                                FROM TOMS_SALES_HIST TSH
                               GROUP BY TSH.COMPANY_CD
                                       ,TSH.CLIENT_NO
                              ) TSH
              ON TSH.COMPANY_CD = TC.COMPANY_CD
             AND TSH.CLIENT_NO = TC.CLIENT_NO
         WHERE TC.TC_RANK = 1
        <include refid="select-paging-end" />
         ORDER BY CLIENT_NO DESC
    </select>
    
    <insert id="SM7035.insertTomsClientInfo" parameterClass="java.util.Map">
        <selectKey resultClass="java.lang.String" keyProperty="CLIENT_NO">
            SELECT COALESCE(MAX(CLIENT_NO), 10000000) + 1 AS CLIENT_NO
	          FROM TOMS_CLIENT
             WHERE COMPANY_CD = #COMPANY_CD#
        </selectKey>
        
        INSERT INTO TOMS_CLIENT(
               COMPANY_CD
              ,CLIENT_NO
              ,CLIENT_NAME
              ,BUSINESS_NO
              ,PRESIDENT_NAME
              ,PRESIDENT_NAME_ENG
              ,PRESIDENT_EMAIL
              ,PRESIDENT_PHONE_NO
              ,NATION_CD
              ,ZIP_CD
              ,ADDRESS
              ,PHONE_NO
              ,FAX_NO
              ,CITY
              ,HOME_PAGE_URL
              ,AMOUNT
              ,CO_YYYY
              ,PLANT_NUM
              ,PLANT_DESC
              ,USER_PROD_DESC
              ,ERP_PROD_DESC
              ,DEAL_COPERS
              ,SALES_STATUS
              ,ORDER_SCORE
              ,COMMT
              ,PRODUCTS
              ,SECTORS
              ,CREATE_DATE
              ,CREATE_BY
              ,UPDATE_DATE
              ,UPDATE_BY)   
        VALUES(#COMPANY_CD#
              ,FN_PG_GET_CAST_NUM(#CLIENT_NO#)
              ,#CLIENT_NAME#
              ,#BUSINESS_NO#
              ,#PRESIDENT_NAME#
              ,#PRESIDENT_NAME_ENG#
              ,#PRESIDENT_EMAIL#
              ,#PRESIDENT_PHONE_NO#
              ,#NATION_CD#
              ,#ZIP_CD#
              ,#ADDRESS#
              ,#PHONE_NO#
              ,#FAX_NO#
              ,#CITY#
              ,#HOME_PAGE_URL#
              ,FN_PG_GET_CAST_NUM(#AMOUNT#)
              ,#CO_YYYY#
              ,FN_PG_GET_CAST_NUM(#PLANT_NUM#)
              ,#PLANT_DESC#
              ,#USER_PROD_DESC#
              ,#ERP_PROD_DESC#
              ,#DEAL_COPERS#
              ,'1'
              ,0
              ,#COMMT#
              ,#PRODUCTS#
              ,#SECTORS#
              ,NOW()
              ,#USER_ID#
              ,NOW()
              ,#USER_ID#)
    </insert>
    
    <update id="SM7035.updateTomsClientInfo" parameterClass="java.util.Map">
        UPDATE TOMS_CLIENT
           SET CLIENT_NAME = #CLIENT_NAME#
              <isNotNull property="BUSINESS_NO">,BUSINESS_NO = #BUSINESS_NO#</isNotNull>
              <isNotNull property="PRESIDENT_NAME">,PRESIDENT_NAME = #PRESIDENT_NAME#</isNotNull>
              <isNotNull property="PRESIDENT_NAME_ENG">,PRESIDENT_NAME_ENG = #PRESIDENT_NAME_ENG#</isNotNull>
              <isNotNull property="PRESIDENT_EMAIL">,PRESIDENT_EMAIL = #PRESIDENT_EMAIL#</isNotNull>
              <isNotNull property="PRESIDENT_PHONE_NO">,PRESIDENT_PHONE_NO = #PRESIDENT_PHONE_NO#</isNotNull>
              <isNotNull property="NATION_CD">,NATION_CD = #NATION_CD#</isNotNull>
              <isNotNull property="ZIP_CD">,ZIP_CD = #ZIP_CD#</isNotNull>
              <isNotNull property="ADDRESS">,ADDRESS = #ADDRESS#</isNotNull>
              <isNotNull property="PHONE_NO">,PHONE_NO = #PHONE_NO#</isNotNull>
              <isNotNull property="FAX_NO">,FAX_NO = #FAX_NO#</isNotNull>
              <isNotNull property="CITY">,CITY = #CITY#</isNotNull>
              <isNotNull property="HOME_PAGE_URL">,HOME_PAGE_URL = #HOME_PAGE_URL#</isNotNull>
              <isNotNull property="AMOUNT">,AMOUNT = FN_PG_GET_CAST_NUM(#AMOUNT#)</isNotNull>
              <isNotNull property="CO_YYYY">,CO_YYYY = #CO_YYYY#</isNotNull>
              <isNotNull property="PLANT_NUM">,PLANT_NUM = FN_PG_GET_CAST_NUM(#PLANT_NUM#)</isNotNull>
              <isNotNull property="PLANT_DESC">,PLANT_DESC = #PLANT_DESC#</isNotNull>
              <isNotNull property="USER_PROD_DESC">,USER_PROD_DESC = #USER_PROD_DESC#</isNotNull>
              <isNotNull property="ERP_PROD_DESC">,ERP_PROD_DESC = #ERP_PROD_DESC#</isNotNull>
              <isNotNull property="DEAL_COPERS">,DEAL_COPERS = #DEAL_COPERS#</isNotNull>
              <isNotNull property="COMMT">,COMMT = #COMMT#</isNotNull>
              <isNotNull property="SALES_USER_ID">,SALES_USER_ID = #SALES_USER_ID#</isNotNull>
              <isNotNull property="PARTNER_USER_ID">,PARTNER_USER_ID = #PARTNER_USER_ID#</isNotNull>
              <isNotNull property="MNGT_USER_ID">,MNGT_USER_ID = #MNGT_USER_ID#</isNotNull>
              <isNotNull property="TOP_USER_ID">,TOP_USER_ID = #TOP_USER_ID#</isNotNull>
              <isNotNull property="ORDER_SCORE">,ORDER_SCORE = #ORDER_SCORE#</isNotNull>
              <isNotNull property="ON_AMOUNT">,ON_AMOUNT = FN_PG_GET_CAST_NUM(#ON_AMOUNT#)</isNotNull>
              <isNotNull property="MAINT_AMOUNT">,MAINT_AMOUNT = FN_PG_GET_CAST_NUM(#MAINT_AMOUNT#)</isNotNull>
              <isNotNull property="SALES_PRODS">,SALES_PRODS = #SALES_PRODS#</isNotNull>
              <isNotNull property="SALES_STATUS">,SALES_STATUS = #SALES_STATUS#</isNotNull>
              <isNotNull property="PRODUCTS">,PRODUCTS = #PRODUCTS#</isNotNull>
              <isNotNull property="SECTORS">,SECTORS = #SECTORS#</isNotNull>
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
    </update>
    
    <delete id="SM7035.deleteTomsClientInfo" parameterClass="java.util.Map">
        DELETE FROM TOMS_CLIENT
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
    </delete>
    
    <select id="SM7035.selectTomsClientUserList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT TCC.COMPANY_CD
              ,TCC.CLIENT_NO
              ,TCC.JOB_TYPE
              ,CD1.WORD AS JOB_TYPE_NAME
              ,TCC.NAME
              ,TCC.DEPARTMENT
              ,TCC.POSITION
              ,TCC.PHONE_NO
              ,TCC.EMAIL
              ,TCC.COMMT
              ,TO_CHAR(TCC.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,TCC.CREATE_BY
              ,TO_CHAR(TCC.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,TCC.UPDATE_BY
          FROM TOMS_CLIENT_CHARGER TCC
               LEFT OUTER JOIN CODE_LANG_DIC CD1
                 ON CD1.COMPANY_CD = TCC.COMPANY_CD
                AND CD1.CATEGORY_CD = 'JOB_TYPE' 
                AND CD1.CODE = TCC.JOB_TYPE
                AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
         WHERE TCC.COMPANY_CD = #COMPANY_CD#
           AND TCC.CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
         ORDER BY TCC.NAME
    </select>
    
    <insert id="SM7035.insertTomsClientUserInfo" parameterClass="java.util.Map">
        INSERT INTO TOMS_CLIENT_CHARGER(
               COMPANY_CD
              ,CLIENT_NO
              ,JOB_TYPE
              ,NAME
              ,DEPARTMENT
              ,POSITION
              ,PHONE_NO
              ,EMAIL
              ,COMMT
              ,CREATE_DATE
              ,CREATE_BY
              ,UPDATE_DATE
              ,UPDATE_BY)   
        VALUES(#COMPANY_CD#
              ,FN_PG_GET_CAST_NUM(#CLIENT_NO#)
              ,#JOB_TYPE#
              ,#NAME#
              ,#DEPARTMENT#
              ,#POSITION#
              ,#PHONE_NO#
              ,#EMAIL#
              ,#COMMT#
              ,NOW()
              ,#USER_ID#
              ,NOW()
              ,#USER_ID#)
    </insert>
    
    <update id="SM7035.updateTomsClientUserInfo" parameterClass="java.util.Map">
        UPDATE TOMS_CLIENT_CHARGER
           SET DEPARTMENT = #DEPARTMENT#
              ,POSITION = #POSITION#
              ,PHONE_NO = #PHONE_NO#
              ,EMAIL = #EMAIL#
              ,COMMT = #COMMT#
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
           AND JOB_TYPE = #JOB_TYPE#
           AND NAME = #NAME#
    </update>
    
    <delete id="SM7035.deleteTomsClientUserInfo" parameterClass="java.util.Map">
        DELETE FROM TOMS_CLIENT_CHARGER
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
         <isNotEmpty property="JOB_TYPE">
           AND JOB_TYPE = #JOB_TYPE#
         </isNotEmpty>
         <isNotEmpty property="NAME">
           AND NAME = #NAME#
         </isNotEmpty>
    </delete>
    
    <update id="SM7035.updateTomsSalesStatus" parameterClass="java.util.Map">
        UPDATE TOMS_CLIENT
           SET SALES_STATUS = #SALES_STATUS#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
    </update>
    
    <select id="SM7035.selectTomsSalesHistoryList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT TSH.COMPANY_CD
              ,TSH.CLIENT_NO
              ,TSH.HIST_NUM
              ,TSH.HIST_TYPE
              ,TSH.MESSAGE
              <![CDATA[ ,REPLACE(TSH.MESSAGE, CHR(10), '<p>') AS HTML_MESSAGE ]]>
              ,TSH.FILE_DESC
              ,TSH.KEYWORD
              ,TSH.CLS_ID
              ,TSH.SALES_STATUS_ID
              ,CD1.WORD AS SALES_STATUS_NAME
              ,TSH.ACTION_DATE
              ,TO_CHAR(TSH.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
              ,TSH.CREATE_BY
              ,FU1.NAME AS CREATE_NAME
              ,TO_CHAR(TSH.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
              ,TSH.UPDATE_BY
          FROM TOMS_SALES_HIST TSH
               LEFT OUTER JOIN FTA_USER FU1
                 ON FU1.COMPANY_CD = TSH.COMPANY_CD
                AND FU1.USER_ID = TSH.CREATE_BY
               LEFT OUTER JOIN CODE_LANG_DIC CD1
                 ON CD1.COMPANY_CD = TSH.COMPANY_CD
                AND CD1.CATEGORY_CD = 'TS_SALES_STATUS' 
                AND CD1.CODE = TSH.SALES_STATUS_ID
                AND CD1.LANGUAGE_CAT = #SESSION_DEFAULT_LANGUAGE#
         WHERE TSH.COMPANY_CD = #COMPANY_CD#
           AND TSH.CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
           AND TSH.HIST_TYPE = #HIST_TYPE#
         ORDER BY TSH.ACTION_DATE DESC, TSH.HIST_NUM DESC
    </select>
    
    <select id="SM7035.selectTomsSalesHistAttaFile" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT TSH.COMPANY_CD
              ,TSH.CLIENT_NO
              ,TSH.HIST_NUM
              ,TSH.ATT_FILE
              ,TSH.FILE_DESC
          FROM TOMS_SALES_HIST TSH
         WHERE TSH.COMPANY_CD = #COMPANY_CD#
           AND TSH.CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
           AND TSH.HIST_NUM = FN_PG_GET_CAST_NUM(#HIST_NUM#)
           AND TSH.ATT_FILE IS NOT NULL
    </select>
    
    <insert id="SM7035.insertTomsSalesHistoryInfo" parameterClass="java.util.Map">
        INSERT INTO TOMS_SALES_HIST(
               COMPANY_CD
              ,CLIENT_NO
              ,HIST_NUM
              ,HIST_TYPE
              ,MESSAGE
              ,ATT_FILE
              ,FILE_DESC
              ,KEYWORD
              ,CLS_ID
              ,SALES_STATUS_ID
              ,ACTION_DATE
              ,CREATE_DATE
              ,CREATE_BY
              ,UPDATE_DATE
              ,UPDATE_BY)
        VALUES(#COMPANY_CD#
              ,FN_PG_GET_CAST_NUM(#CLIENT_NO#)
              ,NEXTVAL('HIST_NUM_S')
              ,#HIST_TYPE#
              ,#MESSAGE#
              ,#ATT_FILE:BLOB#
              ,#FILE_DESC#
              ,#KEYWORD#
              ,#CLS_ID#
              ,#SALES_STATUS_ID#
              ,#ACTION_DATE#
              ,NOW()
              ,#USER_ID#
              ,NOW()
              ,#USER_ID#)
    </insert>
    
    <update id="SM7035.updateTomsSalesHistoryInfo" parameterClass="java.util.Map">
        UPDATE TOMS_SALES_HIST
           SET MESSAGE = #MESSAGE#
              <isNotEmpty property="FILE_DESC">,ATT_FILE = #ATT_FILE:BLOB#</isNotEmpty>
              <isNotEmpty property="FILE_DESC">,FILE_DESC = #FILE_DESC#</isNotEmpty>
              ,KEYWORD = #KEYWORD#
              ,CLS_ID = #CLS_ID#
              ,SALES_STATUS_ID = #SALES_STATUS_ID#
              ,ACTION_DATE = #ACTION_DATE#
              ,UPDATE_DATE = NOW()
              ,UPDATE_BY = #USER_ID#
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
           AND HIST_NUM = FN_PG_GET_CAST_NUM(#HIST_NUM#)
           AND HIST_TYPE = #HIST_TYPE#
    </update>
        
    <delete id="SM7035.deleteTomsSalesHistoryInfo" parameterClass="java.util.Map">
        DELETE FROM TOMS_SALES_HIST
         WHERE COMPANY_CD = #COMPANY_CD#
           AND CLIENT_NO = FN_PG_GET_CAST_NUM(#CLIENT_NO#)
         <isNotEmpty property="HIST_NUM">
           AND HIST_NUM = FN_PG_GET_CAST_NUM(#HIST_NUM#)
         </isNotEmpty>
    </delete>
        
    <select id="SM7023.selectOpenAPIList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />
		SELECT COMPANY_CD
		      ,OAPI_IEM_CD
		      ,UPP_OAPI_IEM_CD
		      ,OAPI_IEM_NM
		      ,OAPI_IEM_DC
		      ,FN_GET_COMMON_CD(CO.COMPANY_CD, 'CC_M_INTFC_REC_INSTT', CO.OAPI_IEM_REC_INSTT_CD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) OAPI_IEM_REC_INSTT_NM
		      ,OAPI_IEM_REC_INSTT_CD
		      ,OAPI_IEM_REC_TY_CD
		      ,TRNT_URL
		      ,CMMN_CD_PFIX
		      ,FN_GET_COMMON_CD(CO.COMPANY_CD, 'YN', CO.USE_AT, 'NAME', #SESSION_DEFAULT_LANGUAGE#) USE
		      ,USE_AT
		      ,CREATE_DATE
		      ,CREATE_BY
		      ,UPDATE_DATE
		      ,UPDATE_BY
		      ,(SELECT ARRAY_TO_STRING(ARRAY_AGG(OIRL.OAPI_IEM_REC_LIST_SN::TEXT), ',')
		          FROM OAPI_IEM_REC_LIST OIRL 
		         WHERE OIRL.COMPANY_CD = CO.COMPANY_CD 
		           AND OIRL.OAPI_IEM_CD = CO.OAPI_IEM_CD 
		         GROUP BY OIRL.COMPANY_CD, OIRL.OAPI_IEM_CD) AS OAPI_IEM_REC_LIST_SN_ARRAY
		      ,COALESCE((SELECT CASE WHEN COUNT(1) > 0 THEN 'Y' ELSE 'N' END
				           FROM OAPI_IEM_REC_LIST OIRL 
				          WHERE OIRL.COMPANY_CD = CO.COMPANY_CD 
				            AND OIRL.OAPI_IEM_CD = CO.OAPI_IEM_CD
				            AND COALESCE(OIRL.TRG_TABLE) != '' 
				          GROUP BY OIRL.COMPANY_CD, OIRL.OAPI_IEM_CD), 'N') AS TRG_TABLE_YN
		FROM   OAPI_IEM CO
		WHERE  CO.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="OAPI_IEM_CD">
		AND    CO.OAPI_IEM_CD = #OAPI_IEM_CD#
		</isNotEmpty>
		<isNotEmpty property="schKeyWord">
			<isEqual property="schKeyField" compareValue="OAPI_IEM_CD">
		   	AND UPPER(CO.OAPI_IEM_CD) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
		 	</isEqual>
		 	<isEqual property="schKeyField" compareValue="OAPI_IEM_NM">
		   	AND UPPER(CO.OAPI_IEM_NM) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
		 	</isEqual>
		</isNotEmpty>	
		<include refid="select-paging-end" />
		ORDER  BY COMPANY_CD, OAPI_IEM_CD		
	</select>
	
    <select id="SM7023.selectOpenAPIInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />
		SELECT COMPANY_CD
		      ,OAPI_IEM_CD
		      ,UPP_OAPI_IEM_CD
		      ,OAPI_IEM_NM
		      ,OAPI_IEM_DC
		      ,OAPI_IEM_REC_INSTT_CD 
		      ,FN_GET_COMMON_CD(CO.COMPANY_CD, 'CC_M_INTFC_REC_INSTT', CO.OAPI_IEM_REC_INSTT_CD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) OAPI_IEM_REC_TY_NM
		      ,OAPI_IEM_REC_TY_CD
		      ,TRNT_URL
		      ,CMMN_CD_PFIX
		      ,USE_AT
		      ,CREATE_DATE
		      ,CREATE_BY
		      ,UPDATE_DATE
		      ,UPDATE_BY
		      ,(SELECT ARRAY_TO_STRING(ARRAY_AGG(OIRL.OAPI_IEM_REC_LIST_SN::TEXT), ',')
		          FROM OAPI_IEM_REC_LIST OIRL 
		         WHERE OIRL.COMPANY_CD = CO.COMPANY_CD 
		           AND OIRL.OAPI_IEM_CD = CO.OAPI_IEM_CD 
		         GROUP BY OIRL.COMPANY_CD, OIRL.OAPI_IEM_CD) AS OAPI_IEM_REC_LIST_SN_ARRAY
		      ,COALESCE((SELECT CASE WHEN COUNT(1) > 0 THEN 'Y' ELSE 'N' END
				           FROM OAPI_IEM_REC_LIST OIRL 
				          WHERE OIRL.COMPANY_CD = CO.COMPANY_CD 
				            AND OIRL.OAPI_IEM_CD = CO.OAPI_IEM_CD
				            AND COALESCE(OIRL.TRG_TABLE) != '' 
				          GROUP BY OIRL.COMPANY_CD, OIRL.OAPI_IEM_CD), 'N') AS TRG_TABLE_YN		      
		FROM   OAPI_IEM CO
		WHERE  CO.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="OAPI_IEM_CD">
		AND    OAPI_IEM_CD = #OAPI_IEM_CD#
		</isNotEmpty>		
		<include refid="select-paging-end" />
		ORDER  BY COMPANY_CD, OAPI_IEM_CD		
	</select>
	
    <select id="SM7023.selectcOpenAPIDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(*) AS DUPLICATE
          FROM OAPI_IEM
         WHERE COMPANY_CD = #COMPANY_CD#
           AND OAPI_IEM_CD = #OAPI_IEM_CD#
    </select>		
	
    <insert id="SM7023.insertOpenAPI" parameterClass="java.util.Map"> 
		INSERT INTO OAPI_IEM
		    (COMPANY_CD
		    ,OAPI_IEM_CD
		    ,UPP_OAPI_IEM_CD
		    ,OAPI_IEM_NM
		    ,OAPI_IEM_DC
		    ,OAPI_IEM_REC_INSTT_CD
		    ,OAPI_IEM_REC_TY_CD
		    ,TRNT_URL
		    ,CMMN_CD_PFIX
		    ,USE_AT
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		VALUES
		    (#COMPANY_CD#
		    ,#OAPI_IEM_CD#
		    ,#UPP_OAPI_IEM_CD#
		    ,#OAPI_IEM_NM#
		    ,#OAPI_IEM_DC#
		    ,#OAPI_IEM_REC_INSTT_CD#
		    ,#OAPI_IEM_REC_TY_CD#
		    ,#TRNT_URL#
		    ,#CMMN_CD_PFIX#
		    ,#USE_AT#
		    ,NOW()
		    ,#CREATE_BY#
		    ,NOW()
		    ,#UPDATE_BY#)
    </insert>
    
    <update id="SM7023.updateOpenAPI" parameterClass="java.util.Map">
		UPDATE OAPI_IEM
		SET    OAPI_IEM_NM           = #OAPI_IEM_NM#
		      ,OAPI_IEM_DC           = #OAPI_IEM_DC#
		      ,OAPI_IEM_REC_INSTT_CD = #OAPI_IEM_REC_INSTT_CD#
		      ,OAPI_IEM_REC_TY_CD    = #OAPI_IEM_REC_TY_CD#
		      ,TRNT_URL              = #TRNT_URL#
		      ,CMMN_CD_PFIX          = #CMMN_CD_PFIX#
		      ,USE_AT                = #USE_AT#
		      ,UPDATE_DATE           = NOW()
		      ,UPDATE_BY             = #SESSION_USER_ID#
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    OAPI_IEM_CD = #OAPI_IEM_CD#
    </update>
    	
    <delete id="SM7023.deleteOpenAPI" parameterClass="java.util.Map">
		DELETE FROM OAPI_IEM
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    OAPI_IEM_CD = #OAPI_IEM_CD#
    </delete>	
    
    <select id="SM7023.selectOpenAPIParaList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />
		SELECT CASE
		           WHEN OITP.PARA_NM = COALESCE(#P_PARA_KEY_01#, '') AND COALESCE(#P_PARA_VAL_01#, '') != '' THEN
		            #P_PARA_VAL_01#
		           WHEN OITP.PARA_NM = COALESCE(#P_PARA_KEY_02#, '') AND COALESCE(#P_PARA_VAL_02#, '') != '' THEN
		            #P_PARA_VAL_02#
		           WHEN OITP.PARA_NM = COALESCE(#P_PARA_KEY_03#, '') AND COALESCE(#P_PARA_VAL_03#, '') != '' THEN
		            #P_PARA_VAL_03#
		           WHEN OITP.PARA_NM = COALESCE(#P_PARA_KEY_04#, '') AND COALESCE(#P_PARA_VAL_04#, '') != '' THEN
		            #P_PARA_VAL_04#
		           WHEN OITP.PARA_NM = COALESCE(#P_PARA_KEY_05#, '') AND COALESCE(#P_PARA_VAL_05#, '') != '' THEN
		            #P_PARA_VAL_05#
		           ELSE
		            CASE
		                WHEN OITP.PARA_NM IN ('crkyCn', 'serviceKey') THEN
		                 (SELECT PARA_VAL
		                  FROM   CC_USER_OAPI_CRTFC CUOC
		                  WHERE  CUOC.COMPANY_CD = #COMPANY_CD#
		                  AND    CUOC.USER_ID = #UPDATE_BY#
		                  AND    CUOC.OAPI_IEM_CD = #OAPI_IEM_CD#)
		                ELSE
		                 PARA_VAL
		            END
		       END PARA_VAL 
		      ,OITP.COMPANY_CD
		      ,OITP.OAPI_IEM_TRNT_PARA_SN
		      ,OITP.OAPI_IEM_CD
		      ,OITP.PARA_NM
		      ,OITP.PARA_DC
		      ,OITP.ESSN_AT
		      ,OITP.PGE_REPT_AT
		      ,OITP.ENCD_AT
		      ,OITP.CREATE_DATE
		      ,OITP.CREATE_BY
		FROM   OAPI_IEM OI
		JOIN   OAPI_IEM_TRNT_PARA OITP
		ON     OITP.COMPANY_CD = OI.COMPANY_CD
		AND    OITP.OAPI_IEM_CD = OI.OAPI_IEM_CD
		WHERE  OI.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="INTRA_TRNT_PARA_SN">
		AND    OITP.INTRA_TRNT_PARA_SN = #INTRA_TRNT_PARA_SN#
		</isNotEmpty>
		<isNotEmpty property="OAPI_IEM_CD">
		AND    OITP.OAPI_IEM_CD = #OAPI_IEM_CD#
		</isNotEmpty>
		<include refid="select-paging-end" />
		ORDER  BY COMPANY_CD, OAPI_IEM_CD, OAPI_IEM_TRNT_PARA_SN		
	</select>
	
	<select id="SM7023.selectOpenAPIParaKey" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT OITP.PARA_NM, OITP.PARA_VAL
	      FROM OAPI_IEM OI
	           JOIN OAPI_IEM_TRNT_PARA OITP 
	             ON OITP.COMPANY_CD = OI.COMPANY_CD
	            AND OITP.OAPI_IEM_CD = OI.OAPI_IEM_CD
	     WHERE OI.COMPANY_CD = #COMPANY_CD#
	       AND OITP.OAPI_IEM_CD = #OAPI_IEM_CD#
	       AND PARA_NM = #PARA_NM#
    </select>
	
    <select id="SM7023.selectcOpenAPIParaDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT COUNT(*) AS DUPLICATE
          FROM OAPI_IEM_TRNT_PARA OITP
         WHERE COMPANY_CD = #COMPANY_CD#
           AND OAPI_IEM_CD = #OAPI_IEM_CD#
           AND PARA_NM = #PARA_NM#
    </select>		
	
    <insert id="SM7023.insertOpenAPIPara" parameterClass="java.util.Map"> 
		INSERT INTO OAPI_IEM_TRNT_PARA
		    (COMPANY_CD
		    ,OAPI_IEM_TRNT_PARA_SN
		    ,OAPI_IEM_CD
		    ,PARA_NM
		    ,PARA_VAL
		    ,PARA_DC
		    ,ESSN_AT
		    ,PGE_REPT_AT
		    ,ENCD_AT
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		VALUES
		    (#COMPANY_CD#
		    ,#OAPI_IEM_TRNT_PARA_SN#
		    ,#OAPI_IEM_CD#
		    ,#PARA_NM#
		    ,#PARA_VAL#
		    ,#PARA_DC#
		    ,#ESSN_AT#
		    ,#PGE_REPT_AT#
		    ,#ENCD_AT#
		    ,NOW()
		    ,#CREATE_BY#
		    ,NOW()
		    ,#UPDATE_BY#)
    </insert>
    
    <update id="SM7023.updateOpenAPIPara" parameterClass="java.util.Map">
		UPDATE OAPI_IEM_TRNT_PARA
		SET    OAPI_IEM_CD        = #OAPI_IEM_CD#
		      ,PARA_VAL           = #PARA_VAL#
		      ,PARA_DC            = #PARA_DC#
		      ,ESSN_AT            = #ESSN_AT#
		      ,PGE_REPT_AT        = #PGE_REPT_AT#
		      ,ENCD_AT            = #ENCD_AT#
		      ,UPDATE_DATE        = NOW()::TIMESTAMP
		      ,UPDATE_BY          = #UPDATE_BY#
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    OAPI_IEM_TRNT_PARA_SN = #OAPI_IEM_TRNT_PARA_SN#
    </update>
    	
    <delete id="SM7023.deleteOpenAPIPara" parameterClass="java.util.Map">
		DELETE FROM OAPI_IEM_TRNT_PARA
		WHERE  COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="OAPI_IEM_TRNT_PARA_SN">
		AND    OAPI_IEM_TRNT_PARA_SN = #OAPI_IEM_TRNT_PARA_SN#
		</isNotEmpty>
		<isNotEmpty property="OAPI_IEM_CD">
		AND    OAPI_IEM_CD = #OAPI_IEM_CD#
		</isNotEmpty>		
		<isNotEmpty property="OAPI_IEM_TRNT_PARA_SN_DELETE">
		AND    OAPI_IEM_TRNT_PARA_SN NOT IN ($OAPI_IEM_TRNT_PARA_SN_DELETE$)
		</isNotEmpty>
    </delete>
    
    <update id="SM7023.updateOpenAPIParaMerge" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #COMPANY_CD#         COMPANY_CD
		      ,fn_pg_get_cast_num(#OAPI_IEM_TRNT_PARA_SN#) OAPI_IEM_TRNT_PARA_SN
		      ,#OAPI_IEM_CD#        OAPI_IEM_CD
		      ,#PARA_NM#            PARA_NM
		      ,#PARA_VAL#           PARA_VAL
		      ,#PARA_DC#            PARA_DC
		      ,#ESSN_AT#            ESSN_AT
		      ,#PGE_REPT_AT#        PGE_REPT_AT
		      ,#ENCD_AT#            ENCD_AT
		      ,NOW()::TIMESTAMP     CREATE_DATE
		      ,#USER_ID#            CREATE_BY
		      ,NOW()::TIMESTAMP     UPDATE_DATE
		      ,#USER_ID#            UPDATE_BY
		),
		UPDATE_OPTOIN AS
		( 
		UPDATE OAPI_IEM_TRNT_PARA OITP
		SET    OAPI_IEM_CD = B.OAPI_IEM_CD
		      ,PARA_NM     = B.PARA_NM
		      ,PARA_VAL    = B.PARA_VAL
		      ,PARA_DC     = B.PARA_DC
		      ,ESSN_AT     = B.ESSN_AT
		      ,PGE_REPT_AT = B.PGE_REPT_AT
		      ,ENCD_AT     = B.ENCD_AT
		      ,UPDATE_DATE = B.UPDATE_DATE
		      ,UPDATE_BY   = B.UPDATE_BY 
		FROM   UPSERT B
		WHERE  OITP.COMPANY_CD = B.COMPANY_CD
		AND    OITP.OAPI_IEM_TRNT_PARA_SN = B.OAPI_IEM_TRNT_PARA_SN
		)
		INSERT INTO OAPI_IEM_TRNT_PARA
		    (COMPANY_CD
		    ,OAPI_IEM_TRNT_PARA_SN
		    ,OAPI_IEM_CD
		    ,PARA_NM
		    ,PARA_VAL
		    ,PARA_DC
		    ,ESSN_AT
		    ,PGE_REPT_AT
		    ,ENCD_AT
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		    SELECT B.COMPANY_CD
		          ,NEXTVAL('OAPI_IEM_TRNT_PARA_S') OAPI_IEM_TRNT_PARA_SN
		          ,B.OAPI_IEM_CD
		          ,B.PARA_NM
		          ,B.PARA_VAL
		          ,B.PARA_DC
		          ,B.ESSN_AT
		          ,B.PGE_REPT_AT
		          ,B.ENCD_AT
		          ,B.CREATE_DATE
		          ,B.CREATE_BY
		          ,B.UPDATE_DATE
		          ,B.UPDATE_BY
		    FROM   UPSERT B
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   OAPI_IEM_TRNT_PARA OITP
		            WHERE  OITP.COMPANY_CD = B.COMPANY_CD
		            AND    OITP.OAPI_IEM_TRNT_PARA_SN = B.OAPI_IEM_TRNT_PARA_SN)
	</update>	
	
	<select id="SM7023.selectOpenAPIItemReceiveList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />
		SELECT OIRL.COMPANY_CD
		      ,OIRL.OAPI_IEM_REC_LIST_SN
		      ,OIRL.OAPI_IEM_CD
		      ,OI.OAPI_IEM_NM
		      ,OIRL.OAPI_IEM_REC_LIST_NM
		      ,OIRL.OAPI_IEM_REC_LIST_DC
		      ,OIRL.TRG_TABLE
		      ,OIRL.TRG_TABLE_SEQU
		      ,OIRL.TRG_TABLE_SEQU_COL
		      ,OIRL.REC_CNTC_AT
		      ,OIRL.DISTINCT_AT
		      ,OIRL.COMPANY_CD_AT
		      ,OIRL.SORT_ORDR
		      ,OIRL.CREATE_DATE
		      ,OIRL.CREATE_BY
		      ,OIRL.UPDATE_DATE
		      ,OIRL.UPDATE_BY
		FROM   OAPI_IEM OI
		JOIN   OAPI_IEM_REC_LIST OIRL
		ON     OIRL.COMPANY_CD = OI.COMPANY_CD
		AND    OIRL.OAPI_IEM_CD = OI.OAPI_IEM_CD
		WHERE  OI.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="OAPI_IEM_REC_LIST_SN">
		AND    OI.OAPI_IEM_REC_LIST_SN = #OAPI_IEM_REC_LIST_SN#::NUMERIC  
		</isNotEmpty>
		<isNotEmpty property="OAPI_IEM_CD">
		AND    OIRL.OAPI_IEM_CD = #OAPI_IEM_CD#
		</isNotEmpty>
		<include refid="select-paging-end" />
		ORDER  BY COMPANY_CD, OAPI_IEM_CD, SORT_ORDR
	</select>
	
    <update id="SM7023.updateOpenAPIItemReceiveMerge" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #COMPANY_CD# COMPANY_CD
		      ,FN_PG_GET_CAST_NUM(#OAPI_IEM_REC_LIST_SN#) OAPI_IEM_REC_LIST_SN
		      ,#OAPI_IEM_CD# OAPI_IEM_CD
		      ,#OAPI_IEM_REC_LIST_NM# OAPI_IEM_REC_LIST_NM
		      ,#OAPI_IEM_REC_LIST_DC# OAPI_IEM_REC_LIST_DC
		      ,#TRG_TABLE# TRG_TABLE
		      ,#TRG_TABLE_SEQU# TRG_TABLE_SEQU
		      ,#TRG_TABLE_SEQU_COL# TRG_TABLE_SEQU_COL
		      ,#REC_CNTC_AT# REC_CNTC_AT
		      ,#DISTINCT_AT# DISTINCT_AT
		      ,#COMPANY_CD_AT# COMPANY_CD_AT
		      ,#SORT_ORDR#::NUMERIC SORT_ORDR
		      ,NOW()::TIMESTAMP CREATE_DATE
		      ,#USER_ID# CREATE_BY
		      ,NOW()::TIMESTAMP UPDATE_DATE
		      ,#USER_ID# UPDATE_BY
		),
		UPDATE_OPTOIN AS
		( 
		UPDATE OAPI_IEM_REC_LIST OIRL
		SET    OAPI_IEM_CD      = B.OAPI_IEM_CD
		      ,OAPI_IEM_REC_LIST_NM = B.OAPI_IEM_REC_LIST_NM
		      ,OAPI_IEM_REC_LIST_DC = B.OAPI_IEM_REC_LIST_DC
		      ,TRG_TABLE        	= B.TRG_TABLE
		      ,TRG_TABLE_SEQU       = B.TRG_TABLE_SEQU
		      ,TRG_TABLE_SEQU_COL	= B.TRG_TABLE_SEQU_COL
		      ,REC_CNTC_AT          = B.REC_CNTC_AT
		      ,DISTINCT_AT          = B.DISTINCT_AT
		      ,COMPANY_CD_AT        = B.COMPANY_CD_AT
		      ,SORT_ORDR        	= B.SORT_ORDR
		      ,UPDATE_DATE      	= B.UPDATE_DATE
		      ,UPDATE_BY        	= B.UPDATE_BY FROM UPSERT B
		WHERE  OIRL.COMPANY_CD = B.COMPANY_CD
		AND    OIRL.OAPI_IEM_REC_LIST_SN = B.OAPI_IEM_REC_LIST_SN
		)
		INSERT INTO OAPI_IEM_REC_LIST
		    (COMPANY_CD
		    ,OAPI_IEM_REC_LIST_SN
		    ,OAPI_IEM_CD
		    ,OAPI_IEM_REC_LIST_NM
		    ,OAPI_IEM_REC_LIST_DC
		    ,TRG_TABLE
		    ,TRG_TABLE_SEQU
		    ,TRG_TABLE_SEQU_COL
		    ,REC_CNTC_AT
		    ,DISTINCT_AT
		    ,COMPANY_CD_AT
		    ,SORT_ORDR
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		    SELECT B.COMPANY_CD
		          ,NEXTVAL('OAPI_IEM_REC_LIST_S')
		          ,B.OAPI_IEM_CD
		          ,B.OAPI_IEM_REC_LIST_NM
		          ,B.OAPI_IEM_REC_LIST_DC
		          ,B.TRG_TABLE
		     	  ,B.TRG_TABLE_SEQU
		    	  ,B.TRG_TABLE_SEQU_COL		
		    	  ,B.REC_CNTC_AT 
		    	  ,B.DISTINCT_AT  
		    	  ,B.COMPANY_CD_AT       
		          ,B.SORT_ORDR
		          ,B.CREATE_DATE
		          ,B.CREATE_BY
		          ,B.UPDATE_DATE
		          ,B.UPDATE_BY
		    FROM   UPSERT B
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   OAPI_IEM_REC_LIST OIRL
		            WHERE  OIRL.COMPANY_CD = B.COMPANY_CD
		            AND    OIRL.OAPI_IEM_REC_LIST_SN = B.OAPI_IEM_REC_LIST_SN)
	</update>	
	
    <delete id="SM7023.deleteOpenAPIItemReceive" parameterClass="java.util.Map">
		DELETE FROM OAPI_IEM_REC_LIST
		WHERE  COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="OAPI_IEM_CD">
		AND    OAPI_IEM_CD = #OAPI_IEM_CD#
		</isNotEmpty>	
		<isNotEmpty property="OAPI_IEM_REC_LIST_SN_DELETE">
		AND    OAPI_IEM_REC_LIST_SN NOT IN ($OAPI_IEM_REC_LIST_SN_DELETE$)
		</isNotEmpty>
    </delete>	
    
	<select id="SM7023.selectOpenAPIReceiveItemList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />    
		SELECT OIRI.COMPANY_CD
		      ,OIRI.OAPI_IEM_REC_IEM_SN
		      ,OIRI.OAPI_IEM_REC_LIST_SN
		      ,OIRI.COL_NM
		      ,CASE WHEN OIRI.COL_NCNM != '' OR OIRI.COL_NCNM != NULL THEN OIRI.COL_NCNM ELSE OIRI.EL_NM END COL_NCNM
		      ,OIRI.EL_NM
		      ,OIRI.EL_ALL
		      ,OIRI.TRG_COL
		      ,OIRI.TRG_COL_NM
		      ,OIRI.PK_AT
		      ,OIRI.COL_TY
		      ,OIRI.MASTR_AT
		      ,OIRI.PFIX
		      ,OIRI.SFIX
		      ,OIRI.BASS_VAL
		      ,OIRI.SORT_ORDR
		      ,OIRI.CREATE_DATE
		      ,OIRI.CREATE_BY
		      ,OIRI.UPDATE_DATE
		      ,OIRI.UPDATE_BY
		FROM   OAPI_IEM OI
		JOIN   OAPI_IEM_REC_LIST OIRL
		ON     OIRL.COMPANY_CD = OI.COMPANY_CD
		AND    OIRL.OAPI_IEM_CD = OI.OAPI_IEM_CD
		JOIN   OAPI_IEM_REC_IEM OIRI
		ON     OIRI.COMPANY_CD = OIRL.COMPANY_CD 
		AND    OIRI.OAPI_IEM_REC_LIST_SN = OIRL.OAPI_IEM_REC_LIST_SN 
		WHERE  OI.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="OAPI_IEM_REC_LIST_SN">
		AND    OIRL.OAPI_IEM_REC_LIST_SN = #OAPI_IEM_REC_LIST_SN#::NUMERIC  
		</isNotEmpty>
		<isNotEmpty property="OAPI_IEM_REC_IEM_SN">
		AND    OIRI.OAPI_IEM_REC_IEM_SN = #OAPI_IEM_REC_IEM_SN#::NUMERIC    
		</isNotEmpty>
		<include refid="select-paging-end" />
		ORDER  BY COMPANY_CD, OAPI_IEM_REC_LIST_SN, SORT_ORDR 
	</select>
		 
    <update id="SM7023.updateOpenAPIReceiveItemMerge" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #COMPANY_CD# COMPANY_CD
		      ,FN_PG_GET_CAST_NUM(#OAPI_IEM_REC_IEM_SN#) OAPI_IEM_REC_IEM_SN
		      ,FN_PG_GET_CAST_NUM(#OAPI_IEM_REC_LIST_SN#) OAPI_IEM_REC_LIST_SN
		      ,#COL_NM# COL_NM
		      ,#COL_NCNM# COL_NCNM
		      ,#EL_NM# EL_NM
		      ,#EL_ALL# EL_ALL
		      ,#TRG_COL# TRG_COL
		      ,#TRG_COL_NM# TRG_COL_NM
		      ,#PK_AT# PK_AT
		      ,#COL_TY# COL_TY
		      ,#MASTR_AT# MASTR_AT
		      ,#PFIX# PFIX
		      ,#SFIX# SFIX
		      ,#BASS_VAL# BASS_VAL
		      ,FN_PG_GET_CAST_NUM(#SORT_ORDR#) SORT_ORDR
		      ,NOW()::TIMESTAMP CREATE_DATE
		      ,#USER_ID# CREATE_BY
		      ,NOW()::TIMESTAMP UPDATE_DATE
		      ,#USER_ID# UPDATE_BY
		),
		UPDATE_OPTOIN AS
		( 
		UPDATE OAPI_IEM_REC_IEM OIRI
		SET    OAPI_IEM_REC_LIST_SN = B.OAPI_IEM_REC_LIST_SN
		      ,COL_NM               = B.COL_NM
		      ,COL_NCNM             = B.COL_NCNM
		      ,EL_NM                = B.EL_NM
		      ,EL_ALL               = B.EL_ALL
		      ,TRG_COL              = B.TRG_COL
		      ,TRG_COL_NM           = B.TRG_COL_NM
		      ,PK_AT                = B.PK_AT
		      ,COL_TY               = B.COL_TY
		      ,MASTR_AT             = B.MASTR_AT
		      ,PFIX                 = B.PFIX
		      ,SFIX                 = B.SFIX
		      ,BASS_VAL             = B.BASS_VAL
		      ,SORT_ORDR            = B.SORT_ORDR
		      ,UPDATE_DATE          = B.UPDATE_DATE
		      ,UPDATE_BY            = B.UPDATE_BY 
		  FROM UPSERT B
		WHERE  OIRI.COMPANY_CD = B.COMPANY_CD
		AND    OIRI.OAPI_IEM_REC_IEM_SN = B.OAPI_IEM_REC_IEM_SN
		)
		INSERT INTO OAPI_IEM_REC_IEM
		    (COMPANY_CD
		      ,OAPI_IEM_REC_IEM_SN
		      ,OAPI_IEM_REC_LIST_SN
		      ,COL_NM
		      ,COL_NCNM
		      ,EL_NM
		      ,EL_ALL
		      ,TRG_COL
		      ,TRG_COL_NM
		      ,PK_AT
		      ,COL_TY
		      ,MASTR_AT
		      ,PFIX
		      ,SFIX
		      ,BASS_VAL
		      ,SORT_ORDR
		      ,CREATE_DATE
		      ,CREATE_BY
		      ,UPDATE_DATE
		      ,UPDATE_BY)
		SELECT COMPANY_CD
		      ,NEXTVAL('OAPI_IEM_REC_IEM_S') OAPI_IEM_REC_IEM_SN
		      ,OAPI_IEM_REC_LIST_SN
		      ,COL_NM
		      ,COL_NCNM
		      ,EL_NM
		      ,EL_ALL
		      ,TRG_COL
		      ,TRG_COL_NM
		      ,PK_AT
		      ,COL_TY
		      ,MASTR_AT
		      ,PFIX
		      ,SFIX
		      ,BASS_VAL
		      ,SORT_ORDR
		      ,CREATE_DATE
		      ,CREATE_BY
		      ,UPDATE_DATE
		      ,UPDATE_BY
		    FROM   UPSERT B
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   OAPI_IEM_REC_IEM OIRI
		            WHERE  OIRI.COMPANY_CD = B.COMPANY_CD
		            AND    OIRI.OAPI_IEM_REC_IEM_SN = B.OAPI_IEM_REC_IEM_SN)
	</update>	
			 
    <delete id="SM7023.deleteOpenAPIReceiveItem" parameterClass="java.util.Map">
		DELETE FROM OAPI_IEM_REC_IEM
		WHERE  COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="OAPI_IEM_REC_IEM_SN">
		AND    OAPI_IEM_REC_IEM_SN = #OAPI_IEM_REC_IEM_SN#::NUMERIC
		</isNotEmpty>
		<isNotEmpty property="OAPI_IEM_REC_LIST_SN">
		AND    OAPI_IEM_REC_LIST_SN = #OAPI_IEM_REC_LIST_SN#::NUMERIC
		</isNotEmpty>		
		<isNotEmpty property="OAPI_IEM_REC_IEM_SN_DELETE">
		AND   OAPI_IEM_REC_IEM_SN NOT IN ($OAPI_IEM_REC_IEM_SN_DELETE$)
		</isNotEmpty>		
    </delete>		            
    
	<select id="SM7024.selectOpenAPICallRequest" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		<!-- 사용안함, PostgresqlDao으로 변경 함. -->
		SELECT CC_FN_OPENAPI_GET(#COMPANY_CD#
								, #OAPI_IEM_CD#
								, ''
								, #P_PARA_KEY_01#
								, #P_PARA_VAL_01#
								, #P_PARA_KEY_02#
								, #P_PARA_VAL_02#
								, #P_PARA_KEY_03#
								, #P_PARA_VAL_03#
								, #P_PARA_KEY_04#
								, #P_PARA_VAL_04#
								, #P_PARA_KEY_05#
								, #P_PARA_VAL_05#
								, #P_PARA_KEY_06#
								, #P_PARA_VAL_06#
								, #P_PARA_KEY_07#
								, #P_PARA_VAL_07#
								, #P_PARA_KEY_08#
								, #P_PARA_VAL_08#
								, #P_PARA_KEY_09#
								, #P_PARA_VAL_09#
								, #P_PARA_KEY_10#
								, #P_PARA_VAL_10#)
	</select>
	
	<select id="SM7024.selectOpenAPICallReceive" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT * FROM CC_FN_OPENAPI_SELECT(#COMPANY_CD#, #OAPI_IEM_CD#, #O_OAPI_IEM_GROUP#, 'N')
	</select>
	
	<!-- CC_FN_OPENAPI_SELECT_JOIN -->
	<select id="SM7024.selectOpenAPISelectJoin" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT CC_FN_OPENAPI_SELECT_JOIN(#COMPANY_CD#, #OAPI_IEM_CD#, #OAPI_IEM_GROUP#) P_SQL
	</select>	
	
	<select id="SM7024.selectOpenAPICallSelectList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" remapResults="true">
		$OPENAPI_SQL$
	</select>
	
	<select id="SM7024.selectFnGetBlMas" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" remapResults="true">
		SELECT * FROM CC_FN_GET_BL_MAS(#COMPANY_CD#, #OAPI_IEM_CD#, #OAPI_IEM_GROUP#, 'N')
	</select>	

	<!-- 표준 품명 -->
	<select id="SM7025.selectStardProductNameList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />    
		SELECT STD_PRDNM_SN
		      ,YYYY
		      ,SNU
		      ,PRDNM
		      ,HS_CD		      
		      ,BEGIN_DE
		      ,END_DE
		      ,PRPOS_SE
		      ,PRDNM_NO
		      ,STD_PRDNM_KOR
		      ,STD_PRDNM_ENG
		      ,STARD_NO
		      ,STARD_ORDR
		      ,ESSN_STARD_KOR
		      ,ESSN_STARD_ENG
		      ,STARD_VAL
		      ,DETAIL_CL_CN
		      ,RM
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_STD_PRDNM CSP
		WHERE  1 = 1
		<isNotEmpty property="YYYY">
		  AND  CSP.YYYY = #YYYY#  
		</isNotEmpty>
        <isNotEmpty property="schKeyWord">
          AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>			
		<include refid="select-paging-end" />
		ORDER  BY FN_PG_GET_CAST_NUM(YYYY) DESC, FN_PG_GET_CAST_NUM(SNU), HS_CD, PRDNM_NO, FN_PG_GET_CAST_NUM(STARD_NO), FN_PG_GET_CAST_NUM(STARD_ORDR)
	</select>
	
	<update id="SM7025.updateStardProductName" parameterClass="java.util.Map">
	WITH UPSERT AS (
			SELECT #YYYY# AS YYYY
			      ,#SNU# AS SNU
			      ,#PRDNM# AS PRDNM 
			      ,#HS_CD# AS HS_CD 
			      ,#BEGIN_DE# AS BEGIN_DE 
			      ,#END_DE# AS END_DE
			      ,#PRPOS_SE# AS PRPOS_SE			      
			      ,#PRDNM_NO# AS PRDNM_NO 
			      ,#STD_PRDNM_KOR# AS STD_PRDNM_KOR
			      ,#STD_PRDNM_ENG# AS STD_PRDNM_ENG
			      ,#STARD_NO# AS STARD_NO
			      ,#STARD_ORDR# AS STARD_ORDR
			      ,#ESSN_STARD_KOR# AS ESSN_STARD_KOR
			      ,#ESSN_STARD_ENG# AS ESSN_STARD_ENG
			      ,#STARD_VAL# AS STARD_VAL
			      ,#DETAIL_CL_CN# AS DETAIL_CL_CN
			      ,#RM# AS RM
			      ,NOW()::TIMESTAMP AS CREATE_DATE 
			      ,#USER_ID# AS CREATE_BY
			      ),
				UPDATE_OPTION AS (
					UPDATE CC_STD_PRDNM A
					   SET YYYY = B.YYYY
					      ,SNU = B.SNU 
					      ,PRDNM = B.PRDNM
					      ,HS_CD = B.HS_CD
					      ,BEGIN_DE = B.BEGIN_DE
					      ,END_DE = B.END_DE
					      ,PRPOS_SE = B.PRPOS_SE
					      ,PRDNM_NO = B.PRDNM_NO
					      ,STD_PRDNM_KOR = B.STD_PRDNM_KOR
					      ,STD_PRDNM_ENG = B.STD_PRDNM_ENG
					      ,STARD_NO = B.STARD_NO
					      ,STARD_ORDR = B.STARD_ORDR
					      ,ESSN_STARD_KOR = B.ESSN_STARD_KOR
					      ,ESSN_STARD_ENG = B.ESSN_STARD_ENG
					      ,STARD_VAL = B.STARD_VAL
					      ,DETAIL_CL_CN = B.DETAIL_CL_CN
					      ,RM = B.RM
					      ,UPDATE_DATE = B.CREATE_DATE 
					      ,UPDATE_BY = B.CREATE_BY			   
					  FROM UPSERT B
					 WHERE 1 = 1
					   AND A.YYYY = B.YYYY					   
					   AND A.SNU = B.SNU
					   AND A.HS_CD = B.HS_CD 
					   AND A.BEGIN_DE = B.BEGIN_DE 
					   AND A.PRDNM_NO = B.PRDNM_NO 
					   AND A.STARD_NO = B.STARD_NO 
					   AND A.STARD_ORDR = B.STARD_ORDR
				)
				INSERT INTO CC_STD_PRDNM
						(STD_PRDNM_SN
						,YYYY
						,SNU
						,PRDNM
						,HS_CD
						,BEGIN_DE
						,END_DE
						,PRPOS_SE
						,PRDNM_NO
						,STD_PRDNM_KOR
						,STD_PRDNM_ENG
						,STARD_NO
						,STARD_ORDR
						,ESSN_STARD_KOR
						,ESSN_STARD_ENG
						,STARD_VAL
						,DETAIL_CL_CN
						,RM
						,CREATE_BY 
						,UPDATE_BY)
						SELECT NEXTVAL('CC_STD_PRDNM_S')
						      ,YYYY
						      ,SNU
							  ,PRDNM
							  ,HS_CD
							  ,BEGIN_DE
							  ,END_DE
							  ,PRPOS_SE
							  ,PRDNM_NO
							  ,STD_PRDNM_KOR
							  ,STD_PRDNM_ENG
							  ,STARD_NO
							  ,STARD_ORDR
							  ,ESSN_STARD_KOR
							  ,ESSN_STARD_ENG
							  ,STARD_VAL
							  ,DETAIL_CL_CN
							  ,RM
							  ,CREATE_BY 
							  ,CREATE_BY 
					     FROM UPSERT B
					    WHERE NOT EXISTS (SELECT 1
					                        FROM CC_STD_PRDNM A
					                       WHERE 1 = 1
					                         AND A.YYYY = B.YYYY
					                         AND A.SNU = B.SNU
										     AND A.HS_CD = B.HS_CD 
										     AND A.BEGIN_DE = B.BEGIN_DE 
										     AND A.PRDNM_NO = B.PRDNM_NO 
										     AND A.STARD_NO = B.STARD_NO 
										     AND A.STARD_ORDR = B.STARD_ORDR)
	</update>
	
	<delete id="SM7025.deleteStardProductName" parameterClass="java.util.Map">
		DELETE
		  FROM CC_STD_PRDNM
		 WHERE YYYY = #YYYY#
	</delete>
	
	<!-- 관세율 기본 -->
	<select id="SM7026.selectTariffRateList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />    
		SELECT TARSCHD_SN
		      ,HS_CD
		      ,TARRATE_SE_CD
		      ,FN_GET_COMMON_CD(#COMPANY_CD#, 'C_TRRT_TPCD', TARRATE_SE_CD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) TARRATE_SE_NM
		      ,TARRATE
		      ,PU_TAXAMT
		      ,STDR_PC
		      ,APC_BEGIN_DE
		      ,APC_END_DE
		      ,APC_NATION_SE
		      ,PRPOS_TAXRT_SE
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_TARSCHD CT
		WHERE  1 = 1
		<isNotEmpty property="HS_CD">
		AND    CT.HS_CD = #HS_CD#
		</isNotEmpty>
		<isNotEmpty property="TARRATE_SE_CD">
		AND    CT.TARRATE_SE_CD = #TARRATE_SE_CD#
		</isNotEmpty>
		<isNotEmpty property="STT_DE">
        AND    #STT_DE# BETWEEN CT.APC_BEGIN_DE AND CT.APC_END_DE
        </isNotEmpty>
        <isNotEmpty property="schKeyWord">
           AND UPPER($schKeyField$) <isNotEmpty property="multiData"> IN($multiData$)</isNotEmpty><isEmpty property="multiData"> LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>				
		<include refid="select-paging-end" />
		ORDER  BY HS_CD
		         ,TARRATE_SE_CD
		         ,APC_BEGIN_DE DESC
		         ,APC_END_DE
	</select>
	
	<select id="SM7026.selectTariffRateInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT TARSCHD_SN
		      ,HS_CD
		      ,TARRATE_SE_CD
		      ,FN_GET_COMMON_CD(#COMPANY_CD#, 'C_TRRT_TPCD', TARRATE_SE_CD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) TARRATE_SE_NM
		      ,TARRATE
		      ,PU_TAXAMT
		      ,STDR_PC
		      ,APC_BEGIN_DE
		      ,APC_END_DE
		      ,APC_NATION_SE
		      ,PRPOS_TAXRT_SE
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_TARSCHD
		WHERE  1 = 1
		AND    TARSCHD_SN = #TARSCHD_SN#NUMERIC
		ORDER  BY HS_CD
		         ,TARRATE_SE_CD
		         ,APC_BEGIN_DE
		         ,APC_END_DE
	</select>		
	
	<select id="SM7027.selectShedList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />    
		SELECT SHED_SL
		      ,SHED_NM
		      ,CSMH_CD
		      ,IMP_KWA_CD
		      ,EXP_KWA_CD
		      ,APC_DE
		      ,ZIP
		      ,ADRES
		      ,TELNO
		      ,FXNUM
		      ,HMPG
		      ,FFNLG_LEVY_AT
		      ,ADTX_LEV_AT
		      ,PLCDSCH_BDDR_AT
		      ,ODCY_AT
		      ,SORT_ORDR
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_SHED
		WHERE 1 = 1
		<isNotEmpty property="SHED_SL">
		AND    SHED_SL = #SHED_SL#
		</isNotEmpty>		
		<isNotEmpty property="SHED_NM">
		AND    SHED_NM = #SHED_NM#
		</isNotEmpty>		
        <isNotEmpty property="schKeyWord">
           AND UPPER($schKeyField$) <isNotEmpty property="multiData"> IN($multiData$)</isNotEmpty><isEmpty property="multiData"> LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>					
		<include refid="select-paging-end" />
		ORDER  BY SHED_SL
		         ,SHED_NM
	</select>
	
	<select id="SM7027.selectShedInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT SHED_SL
		      ,SHED_NM
		      ,CSMH_CD
		      ,IMP_KWA_CD
		      ,EXP_KWA_CD
		      ,APC_DE
		      ,ZIP
		      ,ADRES
		      ,TELNO
		      ,FXNUM
		      ,HMPG
		      ,FFNLG_LEVY_AT
		      ,ADTX_LEV_AT
		      ,PLCDSCH_BDDR_AT
		      ,ODCY_AT
		      ,SORT_ORDR
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_SHED
		WHERE 1 = 1
		AND   SHED_SL = #SHED_SL#
	</select>	
	
	<update id="SM7027.updateShed" parameterClass="java.util.Map">
		WITH UPSERT AS
		(
		SELECT #SHED_SL# SHED_SL
		      ,#SHED_NM# SHED_NM
		      ,#CSMH_CD# CSMH_CD
		      ,#IMP_KWA_CD# IMP_KWA_CD
		      ,#EXP_KWA_CD# EXP_KWA_CD
		      ,#APC_DE# APC_DE
		      ,#ZIP# ZIP
		      ,#ADRES# ADRES
		      ,#TELNO# TELNO
		      ,#FXNUM# FXNUM
		      ,#HMPG# HMPG
		      ,#FFNLG_LEVY_AT# FFNLG_LEVY_AT
		      ,#ADTX_LEV_AT# ADTX_LEV_AT
		      ,#PLCDSCH_BDDR_AT# PLCDSCH_BDDR_AT
		      ,#ODCY_AT# ODCY_AT
		      ,#SORT_ORDR#::NUMERIC SORT_ORDR
		      ,NOW()::TIMESTAMP AS CREATE_DATE
		      ,#USER_ID# AS CREATE_BY
		),
		UPDATE_OPTOIN AS
		(
		UPDATE CC_SHED CS
		SET    SHED_NM         = D.SHED_NM
		      ,CSMH_CD         = D.CSMH_CD
		      ,IMP_KWA_CD      = D.IMP_KWA_CD
		      ,EXP_KWA_CD      = D.EXP_KWA_CD
		      ,APC_DE          = D.APC_DE
		      ,ZIP             = D.ZIP
		      ,ADRES           = D.ADRES
		      ,TELNO           = D.TELNO
		      ,FXNUM           = D.FXNUM
		      ,HMPG            = D.HMPG
		      ,FFNLG_LEVY_AT   = D.FFNLG_LEVY_AT
		      ,ADTX_LEV_AT     = D.ADTX_LEV_AT
		      ,PLCDSCH_BDDR_AT = D.PLCDSCH_BDDR_AT
		      ,ODCY_AT         = D.ODCY_AT
		      ,SORT_ORDR       = D.SORT_ORDR
		      ,CREATE_BY       = D.CREATE_BY
		      ,UPDATE_BY       = D.CREATE_BY FROM UPSERT D
		WHERE  CS.SHED_SL = D.SHED_SL
		)
		INSERT INTO CC_SHED
		    (SHED_SL
		    ,SHED_NM
		    ,CSMH_CD
		    ,IMP_KWA_CD
		    ,EXP_KWA_CD
		    ,APC_DE
		    ,ZIP
		    ,ADRES
		    ,TELNO
		    ,FXNUM
		    ,HMPG
		    ,FFNLG_LEVY_AT
		    ,ADTX_LEV_AT
		    ,PLCDSCH_BDDR_AT
		    ,ODCY_AT
		    ,SORT_ORDR
		    ,CREATE_BY
		    ,UPDATE_BY)
		    SELECT SHED_SL
		          ,SHED_NM
		          ,CSMH_CD
		          ,IMP_KWA_CD
		          ,EXP_KWA_CD
		          ,APC_DE
		          ,ZIP
		          ,ADRES
		          ,TELNO
		          ,FXNUM
		          ,HMPG
		          ,FFNLG_LEVY_AT
		          ,ADTX_LEV_AT
		          ,PLCDSCH_BDDR_AT
		          ,ODCY_AT
		          ,SORT_ORDR
		          ,CREATE_BY
		          ,CREATE_BY
		    FROM   UPSERT D
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   CC_SHED CS
		            WHERE  CS.SHED_SL = D.SHED_SL)
	</update>		
	
	<!-- 세관, 항구, 공항... -->
	<select id="SM7028.selectKcsCodeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />
    	<!-- 세관 -->
    	<isEqual property="CATEGORY_CD" compareValue="CT">
			SELECT KCM.CATEGORY_CD
			      ,KCM.CODE 		AS CSMH_CD
			      ,KCM.CODE_NAME 	AS CSMH_NM
			      ,KCM.TXT_VALUE1 	AS NATION_CD
			      ,FN_GET_COMMON_CD(#COMPANY_CD#, 'C_CNTY_CD', KCM.TXT_VALUE1, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS NATION_NM
			      ,SORT_NO
			FROM   KCS_CODE_MST KCM
			WHERE  KCM.CATEGORY_CD = #CATEGORY_CD#
			<isNotEmpty property="CODE">
			AND    CT.CODE = #CSMH_CD#
			</isNotEmpty>		
			<isNotEmpty property="CODE_NAME">
			AND    CT.CODE_NAME = #CSMH_NM#
			</isNotEmpty>
			<isNotEmpty property="schKeyField">			
		        <isNotEmpty property="schKeyWord">
		           AND UPPER($schKeyField$) <isNotEmpty property="multiData"> IN($multiData$)</isNotEmpty><isEmpty property="multiData"> LIKE UPPER(#schKeyWord#)</isEmpty>
		        </isNotEmpty>
			</isNotEmpty>		        
    	</isEqual>
    	<!-- 항구, 공항 -->
    	<isEqual property="CATEGORY_CD" compareValue="OPOS">
			SELECT KCM.CATEGORY_CD
			      ,KCM.CODE 		AS PORT_AIR_CD
			      ,KCM.CODE_NAME 	AS PORT_AIR_NM
			      ,KCM.TXT_VALUE1 	AS NATION_CD
			      ,FN_GET_COMMON_CD(#COMPANY_CD#, 'C_CNTY_CD', KCM.TXT_VALUE1, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS NATION_NM
			      ,KCM.TXT_VALUE2 	AS PORT_AIR_TY
			      ,CASE WHEN KCM.TXT_VALUE2 = '10' THEN '항구' WHEN KCM.TXT_VALUE2 = '40' THEN '공항' ELSE '' END AS PORT_AIR_TY_NM		
			      ,SORT_NO
			FROM   KCS_CODE_MST KCM
			WHERE  KCM.CATEGORY_CD = #CATEGORY_CD#
			<isNotEmpty property="NATION_CD">
			AND    KCM.TXT_VALUE1 = #NATION_CD#
			</isNotEmpty>	
			<isNotEmpty property="PORT_AIR_TY">
			AND    KCM.TXT_VALUE2 = #PORT_AIR_TY#
			</isNotEmpty>					
			<isNotEmpty property="schKeyField">			
		        <isNotEmpty property="schKeyWord">
		           AND UPPER($schKeyField$) <isNotEmpty property="multiData"> IN($multiData$)</isNotEmpty><isEmpty property="multiData"> LIKE UPPER(#schKeyWord#)</isEmpty>
		        </isNotEmpty>
			</isNotEmpty>	        
    	</isEqual>    
				
		<include refid="select-paging-end" />
		ORDER  BY SORT_NO
	</select>
	
	<!-- 세관 과 리스트  -->
    <select id="SM7028.selectKwaList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />    
		SELECT KCM.CODE      AS CSMH_CD
		      ,KCM.CODE_NAME AS CSMH_NAME
		      ,CCKC.IMP_EXP_SE_CD
		      ,CD.CODE       AS KWA_CD
		      ,CD.CODE_NAME  AS KWA_NAME
		FROM   KCS_CODE_MST KCM
		JOIN   CC_CSMH_KWA_CNTC CCKC
		ON     CCKC.CSMH_CD = KCM.CODE
		JOIN   CODE_DTL CD
		ON     CD.COMPANY_CD = #COMPANY_CD#
		AND    CD.CATEGORY_CD = 'C_DVSN_CD'
		AND    CD.CODE = CCKC.KWA_CD
		WHERE  KCM.CATEGORY_CD = #CATEGORY_CD#
		AND    KCM.CODE = #CSMH_CD#
		AND    CCKC.IMP_EXP_SE_CD = #IMP_EXP_SE_CD#
		<include refid="select-paging-end" />
	</select>

    <insert id="SM7028.insertCsmhKwaMapping" parameterClass="java.util.Map">
		INSERT INTO CC_CSMH_KWA_CNTC
		    (IMP_EXP_SE_CD
		    ,CSMH_CD
		    ,KWA_CD
		    ,CREATE_DATE
		    ,CREATE_BY
		    ,UPDATE_DATE
		    ,UPDATE_BY)
		VALUES
		    (#IMP_EXP_SE_CD#
		    ,#CSMH_CD#
		    ,#KWA_CD#
		    ,NOW()::TIMESTAMP
		    ,#CREATE_BY#
		    ,NOW()::TIMESTAMP
		    ,#CREATE_BY#)
    </insert>

    <delete id="SM7028.deleteCsmhKwaMapping" parameterClass="java.util.Map">
		DELETE FROM CC_CSMH_KWA_CNTC
		WHERE  IMP_EXP_SE_CD = #IMP_EXP_SE_CD#
		AND    CSMH_CD = #CSMH_CD#
		AND    KWA_CD = #KWA_CD#
    </delete>
    
	<!-- 세관 과 제외 리스트  -->
    <select id="SM7028.selectCsmhKwaExcludeList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">    
		SELECT CD.COMPANY_CD
		      ,CD.CATEGORY_CD
		      ,CD.CODE			AS KWA_CD
		      ,CD.CODE_NAME		AS KWA_NM
		      ,CD.CODE_NAME_ENG	AS KWA_ENG_NM
		FROM   CODE_DTL CD
		WHERE  CD.COMPANY_CD = #COMPANY_CD#
		AND    CD.CATEGORY_CD = 'C_DVSN_CD'
		AND    NOT EXISTS (SELECT CODE
		                     FROM   CC_CSMH_KWA_CNTC CCKC
		                     WHERE  CCKC.CSMH_CD = #CSMH_CD#
		                     AND    CCKC.IMP_EXP_SE_CD = #IMP_EXP_SE_CD#
		                     AND    CCKC.KWA_CD = CD.CODE)
		ORDER  BY SORT_NO		
	</select>

	<select id="SM7030.selectOverBcncInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT OVSEA_BCNC_CD
		      ,OVSEA_BCNC_MTLTY
		      ,NATION_CD
		      ,ETC
		      ,RPRS
		      ,ADRES
		      ,TELNO
		      ,FXNUM
		      ,ALWNC_DE
		      ,AEO_NO
		      ,OVSEA_BCNC_ARNG_AF_MTLTY
		      ,REPRSNT_CD
		      ,USE_AT_CD
		      ,USE_STOP_RESN
		      ,OAPI_REC_SN
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_OVSEA_BCNC COB
		WHERE  1 = 1
		AND    OVSEA_BCNC_CD = #OVSEA_BCNC_CD#
	</select>	 
		
	<select id="SM7030.selectOverBcncList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />    
		SELECT OVSEA_BCNC_CD
		      ,OVSEA_BCNC_MTLTY
		      ,NATION_CD
		      ,ETC
		      ,RPRS
		      ,ADRES
		      ,TELNO
		      ,FXNUM
		      ,ALWNC_DE
		      ,AEO_NO
		      ,OVSEA_BCNC_ARNG_AF_MTLTY
		      ,REPRSNT_CD
		      ,USE_AT_CD
		      ,USE_STOP_RESN
		      ,OAPI_REC_SN
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_OVSEA_BCNC COB
		WHERE  1 = 1	
        <isNotEmpty property="schKeyWord">
           AND UPPER($schKeyField$) <isNotEmpty property="multiData"> IN($multiData$)</isNotEmpty><isEmpty property="multiData"> LIKE UPPER(#schKeyWord#)</isEmpty>
        </isNotEmpty>					
		<include refid="select-paging-end" />
		ORDER  BY OVSEA_BCNC_CD
		         ,OVSEA_BCNC_MTLTY
	</select>

    <select id="SM7030.selectOvseaBcncCdDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap"> 
		SELECT COUNT(1) CNT
		  FROM CC_OVSEA_BCNC
		 WHERE OVSEA_BCNC_CD = #OVSEA_BCNC_CD#
    </select>	
	
	<update id="SM7030.updateOverBcnc" parameterClass="java.util.Map">
		WITH UPSERT AS
		(SELECT  #OVSEA_BCNC_CD# AS OVSEA_BCNC_CD
				,#OVSEA_BCNC_MTLTY# AS OVSEA_BCNC_MTLTY
				,#NATION_CD# AS NATION_CD
				,#ETC# AS ETC
				,#RPRS# AS RPRS
				,#ADRES# AS ADRES
				,#TELNO# AS TELNO
				,#FXNUM# AS FXNUM
				,#ALWNC_DE# AS ALWNC_DE
				,#AEO_NO# AS AEO_NO
				,#OVSEA_BCNC_ARNG_AF_MTLTY# AS OVSEA_BCNC_ARNG_AF_MTLTY
				,#REPRSNT_CD# AS REPRSNT_CD
				,#USE_AT_CD# AS USE_AT_CD
				,#USE_STOP_RESN# AS USE_STOP_RESN
				,NOW()::TIMESTAMP AS CREATE_DATE
				,#USER_ID# AS CREATE_BY
		),
		UPDATE_OPTION AS
		(
		UPDATE CC_OVSEA_BCNC
		SET    OVSEA_BCNC_MTLTY = D.OVSEA_BCNC_MTLTY
			  ,NATION_CD = D.NATION_CD
			  ,ETC = D.ETC
			  ,RPRS = D.RPRS
			  ,ADRES = D.ADRES
			  ,TELNO = D.TELNO
			  ,FXNUM = D.FXNUM
			  ,ALWNC_DE = D.ALWNC_DE
			  ,AEO_NO = D.AEO_NO
			  ,OVSEA_BCNC_ARNG_AF_MTLTY = D.OVSEA_BCNC_ARNG_AF_MTLTY
			  ,REPRSNT_CD = D.REPRSNT_CD
			  ,USE_AT_CD = D.USE_AT_CD
			  ,USE_STOP_RESN = D.USE_STOP_RESN
			  ,UPDATE_DATE = D.CREATE_DATE
			  ,UPDATE_BY = D.CREATE_BY	
		FROM UPSERT D
		WHERE CC_OVSEA_BCNC.OVSEA_BCNC_CD = #OVSEA_BCNC_CD#
		)
		INSERT INTO CC_OVSEA_BCNC
		(OVSEA_BCNC_CD
		,OVSEA_BCNC_MTLTY
		,NATION_CD
		,ETC
		,RPRS
		,ADRES
		,TELNO
		,FXNUM
		,ALWNC_DE
		,AEO_NO
		,OVSEA_BCNC_ARNG_AF_MTLTY
		,REPRSNT_CD
		,USE_AT_CD
		,USE_STOP_RESN
		,CREATE_BY
		,UPDATE_BY)
		SELECT OVSEA_BCNC_CD
			  ,OVSEA_BCNC_MTLTY
			  ,NATION_CD
			  ,ETC
			  ,RPRS
			  ,ADRES
			  ,TELNO
			  ,FXNUM
			  ,ALWNC_DE
			  ,AEO_NO
			  ,OVSEA_BCNC_ARNG_AF_MTLTY
			  ,REPRSNT_CD
			  ,USE_AT_CD
			  ,USE_STOP_RESN
			  ,CREATE_BY
			  ,CREATE_BY
		  FROM UPSERT D
		  WHERE NOT EXISTS (SELECT 1
		  					  FROM CC_OVSEA_BCNC
		  					 WHERE CC_OVSEA_BCNC.OVSEA_BCNC_CD = #OVSEA_BCNC_CD#)
	</update>
	
    <delete id="SM7030.deleteOverBcnc" parameterClass="java.util.Map">
		DELETE FROM CC_OVSEA_BCNC COB
		 WHERE COB.OVSEA_BCNC_CD = #OVSEA_BCNC_CD#
    </delete>	
	
	<select id="SM7031.selectCustomsExchangeRateInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT IMP_EXP_SE_CD
		      ,NATION_CD
		      ,fn_get_common_cd(#COMPANY_CD#, 'C_CNTY_CD', NATION_CD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) NATION_NM
		      ,APC_BEGIN_DE
		      ,CRRNCY_UNIT_NM
		      ,CURR_CD
		      ,EHGT
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		  FROM CC_CSTMS_EHGT
		 WHERE 1 = 1
		<isNotEmpty property="IMP_EXP_SE_CD">
		   AND IMP_EXP_SE_CD = #IMP_EXP_SE_CD#
	    </isNotEmpty>
		<isNotEmpty property="APC_BEGIN_DE">
		   AND APC_BEGIN_DE BETWEEN TO_CHAR(DATE_TRUNC('week', TO_DATE(#APC_BEGIN_DE#, 'YYYYMMDD')+interval '1 day')::DATE - 1, 'YYYYMMDD') 
		                        AND TO_CHAR(DATE_TRUNC('week', TO_DATE(#APC_BEGIN_DE#, 'YYYYMMDD')+interval '1 day')::DATE + 5, 'YYYYMMDD')
		</isNotEmpty>
		<isNotEmpty property="NATION_CD">
		   AND NATION_CD = #NATION_CD#
		</isNotEmpty>		
	</select>	 
		
	<select id="SM7031.selectCustomsExchangeRateList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />    
		SELECT IMP_EXP_SE_CD
		      ,fn_get_common_cd(#COMPANY_CD#, 'CC_IMP_EXP_TYPE', IMP_EXP_SE_CD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS IMP_EXP_SE_NM
		      ,NATION_CD
		      ,fn_get_common_cd(#COMPANY_CD#, 'C_CNTY_CD', NATION_CD, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS NATION_NM
		      ,APC_BEGIN_DE
		      ,CRRNCY_UNIT_NM
		      ,CURR_CD
		      ,EHGT
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		  FROM CC_CSTMS_EHGT
		 WHERE 1 = 1
		<isNotEmpty property="IMP_EXP_SE_CD">
		   AND IMP_EXP_SE_CD = #IMP_EXP_SE_CD#
		</isNotEmpty>
		<isNotEmpty property="APC_BEGIN_DE">
	       AND APC_BEGIN_DE BETWEEN TO_CHAR(DATE_TRUNC('week', TO_DATE(#APC_BEGIN_DE#, 'YYYYMMDD')+interval '1 day')::DATE - 1, 'YYYYMMDD')
		                        AND TO_CHAR(DATE_TRUNC('week', TO_DATE(#APC_BEGIN_DE#, 'YYYYMMDD')+interval '1 day')::DATE + 5, 'YYYYMMDD')
		</isNotEmpty>
		<isNotEmpty property="NATION_CD">
		   AND NATION_CD = #NATION_CD#
		</isNotEmpty>
		<include refid="select-paging-end" />
		ORDER BY IMP_EXP_SE_CD
		        ,NATION_CD
		        ,APC_BEGIN_DE DESC
	</select>
	
	<select id="SM7032.selectFreightTransportAgencyList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />
		SELECT FRGHT_TRN_AGENC_BSMN_SL
		      ,MTLTY_KOR_NM
		      ,MTLTY_ENG_NM
		      ,RPRS_NM
		      ,BIZRNO
		      ,HEDOFC_ADRES
		      ,SPOT_ADRES
		      ,NATION_CD
		      ,TELNO
		      ,FXNUM
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_FRGHT_TRN_AGENC_BSMN
		WHERE  1 = 1	                        
		<isNotEmpty property="FRGHT_TRN_AGENC_BSMN_SL">
		AND    UPPER(FRGHT_TRN_AGENC_BSMN_SL) LIKE '%'||#FRGHT_TRN_AGENC_BSMN_SL#||'%'
		</isNotEmpty>
		<isNotEmpty property="MTLTY_KOR_NM">
		AND    MTLTY_KOR_NM LIKE '%'||#MTLTY_KOR_NM#||'%'
		</isNotEmpty>					
		<include refid="select-paging-end" />
		ORDER  BY FRGHT_TRN_AGENC_BSMN_SL
		         ,MTLTY_KOR_NM
	</select>	
	
	<!-- 관세사 -->
	<select id="SM7033.selectCustomsBrokerAgentList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	<include refid="select-paging-start" />    
		SELECT CBOA_SL
		      ,CBOA_NM
		      ,APLC_SE
		      ,RPRS_NM
		      ,CSMH_SL
		      ,CSMH_NM
		      ,TELNO
		      ,ADRES
		      ,LXTN_TELNO
		      ,EMAIL		      
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_CBOA
		WHERE  1 = 1                      
		<isNotEmpty property="CBOA_SL">
		AND    UPPER(CBOA_SL) LIKE '%'||#CBOA_SL#||'%'
		</isNotEmpty>
		<isNotEmpty property="CBOA_NM">
		AND    CBOA_NM LIKE '%'||#CBOA_NM#||'%'
		</isNotEmpty>					
		<include refid="select-paging-end" />
		ORDER  BY CBOA_SL
		         ,CBOA_NM
	</select>
	
	<!-- 관세사 상세 -->
	<select id="SM7033.selectCustomsBrokerAgentInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap"> 
		SELECT CBOA_SL
		      ,CBOA_NM
		      ,APLC_SE
		      ,RPRS_NM
		      ,CSMH_SL
		      ,CSMH_NM
		      ,TELNO
		      ,ADRES
		      ,LXTN_TELNO
		      ,EMAIL		      
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY
		FROM   CC_CBOA
		WHERE  1 = 1
		AND    CBOA_SL = #CBOA_SL#
	</select>	
	
	<update id="SM7033.updateCustomsBrokerAgent" parameterClass="java.util.Map">
		UPDATE CC_CBOA
		SET    CBOA_NM     = #CBOA_NM#
		      ,APLC_SE     = #APLC_SE#
		      ,RPRS_NM     = #RPRS_NM#
		      ,CSMH_SL     = #CSMH_SL#
		      ,CSMH_NM     = #CSMH_NM#
		      ,TELNO       = #TELNO#
		      ,ADRES       = #ADRES#
		      ,LXTN_TELNO  = #LXTN_TELNO#
		      ,EMAIL       = #EMAIL#      
		      ,UPDATE_DATE = NOW()::TIMESTAMP
		      ,UPDATE_BY   = #USER_ID#
		WHERE  CBOA_SL = #CBOA_SL#
	</update>

	<!-- 대행사 -->
    <select id="SM7037.selectAgencyList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
			SELECT COMPANY_CD
			      ,AGEN_CD
			      ,BCNC_CD
			      ,AGEN_MTLTY
			      ,RPRS_NM
			      ,BIZRNO
			      ,ZIP
			      ,ADRES
			      ,FXNUM
			      ,BIZCND
			      ,IOB
			      ,EMAIL
			      ,EMAIL_TRNS_AT
			      ,CHRCTR_TRNS_AT
			      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			      ,CREATE_BY
			      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			      ,UPDATE_BY	
			FROM   CC_AGEN
			WHERE  1 = 1
			AND    COMPANY_CD = #COMPANY_CD#
            <isNotEmpty property="schKeyWord">
                AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
            </isNotEmpty>
	   <include refid="select-paging-end" />
	   		ORDER  BY COMPANY_CD, AGEN_CD
    </select>
	
    <select id="SM7037.selectAgencyInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT COMPANY_CD
		      ,AGEN_CD
		      ,BCNC_CD
		      ,AGEN_MTLTY
		      ,RPRS_NM
		      ,BIZRNO
		      ,ZIP
		      ,ADRES
		      ,FXNUM
		      ,BIZCND
		      ,IOB
		      ,EMAIL
		      ,EMAIL_TRNS_AT
		      ,CHRCTR_TRNS_AT
		      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      ,CREATE_BY
		      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		      ,UPDATE_BY	
		FROM   CC_AGEN
		WHERE  1 = 1
		AND    COMPANY_CD = #COMPANY_CD#
		AND    AGEN_CD = #AGEN_CD#
    </select>	
    
    <!-- 대행사 코드 중복 체크 -->
    <select id="SM7037.selectAgencyDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		select COUNT(1) CNT from CC_AGEN CA
		 where CA.COMPANY_CD = #COMPANY_CD#
		 and   CA.AGEN_CD = #AGEN_CD#
    </select>    
    
	<update id="SM7037.insertAgency" parameterClass="java.util.Map">
		INSERT INTO CC_AGEN
		    (COMPANY_CD
		    ,AGEN_CD
		    ,BCNC_CD
		    ,AGEN_MTLTY
		    ,RPRS_NM
		    ,BIZRNO
		    ,ZIP
		    ,ADRES
		    ,FXNUM
		    ,BIZCND
		    ,IOB
		    ,EMAIL
		    ,EMAIL_TRNS_AT
		    ,CHRCTR_TRNS_AT
		    ,CREATE_BY
		    ,UPDATE_BY)
		VALUES
		    (#COMPANY_CD#
		    ,#AGEN_CD#
		    ,CASE WHEN #BCNC_CD# = '' THEN NULL ELSE #BCNC_CD# END 
		    ,#AGEN_MTLTY#
		    ,#RPRS_NM#
		    ,#BIZRNO#
		    ,#ZIP#
		    ,#ADRES#
		    ,#FXNUM#
		    ,#BIZCND#
		    ,#IOB#
		    ,#EMAIL#
		    ,COALESCE(#EMAIL_TRNS_AT#, 'N')
		    ,COALESCE(#CHRCTR_TRNS_AT#, 'N')
		    ,#USER_ID#
		    ,#USER_ID#)
    </update>
    
	<update id="SM7037.updateAgency" parameterClass="java.util.Map">
		UPDATE CC_AGEN
		SET    AGEN_MTLTY     = #AGEN_MTLTY#
		      ,RPRS_NM        = #RPRS_NM#
		      ,BIZRNO         = #BIZRNO#
		      ,ZIP            = #ZIP#
		      ,ADRES          = #ADRES#
		      ,FXNUM          = #FXNUM#
		      ,BIZCND         = #BIZCND#
		      ,IOB            = #IOB#
		      ,EMAIL          = #EMAIL#
		      ,EMAIL_TRNS_AT  = CASE WHEN #EMAIL_TRNS_AT#::TEXT IS null OR #EMAIL_TRNS_AT# = '' THEN 'N' ELSE 'Y' END
		      ,CHRCTR_TRNS_AT = CASE WHEN #CHRCTR_TRNS_AT#::TEXT IS null OR #CHRCTR_TRNS_AT# = '' THEN 'N' ELSE 'Y' END
		      ,UPDATE_DATE    = NOW()::TIMESTAMP
		      ,UPDATE_BY      = #USER_ID#
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    AGEN_CD = #AGEN_CD#
    </update>
    
    <delete id="SM7037.deleteAgency" parameterClass="java.util.Map">
	    DELETE FROM CC_AGEN
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    AGEN_CD = #AGEN_CD#
    </delete>
    
	<!-- HS부호(CC_HS_INFO) -->
    <select id="SM7038.selectHscodeInfoList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
			SELECT YYYY 
			      ,HS_CD
			      ,APC_BEGIN_DE
			      ,APC_END_DE
			      ,KOR_ITEM_NM
			      ,ENG_ITEM_NM
			      ,HS_CD_CN
			      ,KOREA_STD_CMMRC_CL_NM
			      ,QY_UNIT_MXMM_UNTPC
			      ,WT_UNIT_MXMM_UNTPC
			      ,QY_UNIT_CD
			      ,WT_UNIT_CD
			      ,EXP_DISPOS_CD
			      ,IMP_DISPOS_CD
			      ,ITEM_STARD_NM
			      ,ESSN_STARD_NM
			      ,REFER_STARD_NM
			      ,STARD_DC
			      ,STARD_MAT_CN
			      ,DISPOS_UNITY_CL_CD
			      ,DISPOS_UNITY_CL_CD_NM
			      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			      ,CREATE_BY
			      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			      ,UPDATE_BY
			FROM   CC_HS_INFO
			WHERE  1 = 1
			<isNotEmpty property="YYYY">
			  AND  YYYY = #YYYY#  
			</isNotEmpty>						
            <isNotEmpty property="schKeyWord">
              <isNotEmpty property="schKeyField">
            AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
              </isNotEmpty>
            </isNotEmpty>
	   <include refid="select-paging-end" />
	   ORDER BY YYYY DESC, HS_CD, APC_BEGIN_DE, APC_END_DE 
    </select>
    
    <update id="SM7038.updateHscodeInfo" parameterClass="java.util.Map">
    WITH UPSERT AS (
			SELECT   #YYYY# AS YYYY
			        ,#HS_CD# AS HS_CD
					,#APC_BEGIN_DE# AS APC_BEGIN_DE
					,#APC_END_DE# AS APC_END_DE
					,#KOR_ITEM_NM# AS KOR_ITEM_NM
					,#ENG_ITEM_NM# AS ENG_ITEM_NM
					,#HS_CD_CN# AS HS_CD_CN
					,#KOREA_STD_CMMRC_CL_NM# AS KOREA_STD_CMMRC_CL_NM
					,FN_PG_GET_CAST_NUM(#QY_UNIT_MXMM_UNTPC#) AS QY_UNIT_MXMM_UNTPC
					,FN_PG_GET_CAST_NUM(#WT_UNIT_MXMM_UNTPC#) AS WT_UNIT_MXMM_UNTPC
					,#QY_UNIT_CD# AS QY_UNIT_CD
					,#WT_UNIT_CD# AS WT_UNIT_CD
					,#EXP_DISPOS_CD# AS EXP_DISPOS_CD
					,#IMP_DISPOS_CD# AS IMP_DISPOS_CD
					,#ITEM_STARD_NM# AS ITEM_STARD_NM
					,#ESSN_STARD_NM# AS ESSN_STARD_NM
					,#REFER_STARD_NM# AS REFER_STARD_NM
					,#STARD_DC# AS STARD_DC
					,#STARD_MAT_CN# AS STARD_MAT_CN
					,#DISPOS_UNITY_CL_CD# AS DISPOS_UNITY_CL_CD
					,#DISPOS_UNITY_CL_CD_NM# AS DISPOS_UNITY_CL_CD_NM
					,#CHE_MAT# AS CHE_MAT
					,NOW()::TIMESTAMP AS CREATE_DATE 
					,#USER_ID# AS CREATE_BY
		),
		UPDATE_OPTION AS (
				UPDATE CC_HS_INFO A
				   SET YYYY = B.YYYY
				      ,HS_CD = B.HS_CD
				      ,APC_BEGIN_DE = B.APC_BEGIN_DE
				      ,APC_END_DE = B.APC_END_DE
				      ,KOR_ITEM_NM = B.KOR_ITEM_NM
				      ,ENG_ITEM_NM = B.ENG_ITEM_NM
				      ,HS_CD_CN = B.HS_CD_CN
				      ,KOREA_STD_CMMRC_CL_NM = B.KOREA_STD_CMMRC_CL_NM
				      ,QY_UNIT_MXMM_UNTPC = B.QY_UNIT_MXMM_UNTPC
				      ,WT_UNIT_MXMM_UNTPC = B.WT_UNIT_MXMM_UNTPC
				      ,QY_UNIT_CD = B.QY_UNIT_CD
				      ,WT_UNIT_CD = B.WT_UNIT_CD
				      ,EXP_DISPOS_CD = B.EXP_DISPOS_CD
				      ,IMP_DISPOS_CD = B.IMP_DISPOS_CD
				      ,ITEM_STARD_NM = B.ITEM_STARD_NM
				      ,ESSN_STARD_NM = B.ESSN_STARD_NM
				      ,REFER_STARD_NM = B.REFER_STARD_NM
				      ,STARD_DC = B.STARD_DC
				      ,STARD_MAT_CN = B.STARD_MAT_CN
				      ,DISPOS_UNITY_CL_CD = B.DISPOS_UNITY_CL_CD
				      ,DISPOS_UNITY_CL_CD_NM = B.DISPOS_UNITY_CL_CD_NM
				      ,CHE_MAT = B.CHE_MAT
				      ,UPDATE_DATE = B.CREATE_DATE 
				      ,UPDATE_BY = B.CREATE_BY		   
				 FROM  UPSERT B
				WHERE  1 = 1
				  AND  A.YYYY = B.YYYY
				  AND  A.HS_CD = B.HS_CD 
				  AND  A.APC_BEGIN_DE = B.APC_BEGIN_DE
		)
		INSERT INTO CC_HS_INFO
		(YYYY
		,HS_CD
		,APC_BEGIN_DE
		,APC_END_DE
		,KOR_ITEM_NM
		,ENG_ITEM_NM
		,HS_CD_CN
		,KOREA_STD_CMMRC_CL_NM
		,QY_UNIT_MXMM_UNTPC
		,WT_UNIT_MXMM_UNTPC
		,QY_UNIT_CD
		,WT_UNIT_CD
		,EXP_DISPOS_CD
		,IMP_DISPOS_CD
		,ITEM_STARD_NM
		,ESSN_STARD_NM
		,REFER_STARD_NM
		,STARD_DC
		,STARD_MAT_CN
		,DISPOS_UNITY_CL_CD
		,DISPOS_UNITY_CL_CD_NM
		,CHE_MAT
		,CREATE_BY
		,UPDATE_BY)
		SELECT   YYYY
		        ,HS_CD
				,APC_BEGIN_DE
				,APC_END_DE
				,KOR_ITEM_NM
				,ENG_ITEM_NM
				,HS_CD_CN
				,KOREA_STD_CMMRC_CL_NM
				,QY_UNIT_MXMM_UNTPC
				,WT_UNIT_MXMM_UNTPC
				,QY_UNIT_CD
				,WT_UNIT_CD
				,EXP_DISPOS_CD
				,IMP_DISPOS_CD
				,ITEM_STARD_NM
				,ESSN_STARD_NM
				,REFER_STARD_NM
				,STARD_DC
				,STARD_MAT_CN
				,DISPOS_UNITY_CL_CD
				,DISPOS_UNITY_CL_CD_NM
				,CHE_MAT
				,CREATE_BY
				,CREATE_BY
		  FROM  UPSERT B
		 WHERE  NOT EXISTS (SELECT 1
		                      FROM CC_HS_INFO A
		                     WHERE 1 = 1
		                       AND A.YYYY = B.YYYY
		                       AND A.HS_CD = B.HS_CD 
		                       AND A.APC_BEGIN_DE = B.APC_BEGIN_DE)
    </update>
    
    <delete id="SM7038.deleteHscodeInfo" parameterClass="java.util.Map">
		DELETE
		  FROM CC_HS_INFO
		 WHERE YYYY = #YYYY#
	</delete>
    
	<!-- 운수기관(CC_TRAT_INSTT) -->
    <select id="SM7039.selectTratInsttList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
			SELECT CTI.TRAT_INSTT_SE
			      ,FN_GET_COMMON_CD(#COMPANY_CD#, 'CC_TRAT_INSTT_SE', CTI.TRAT_INSTT_SE, 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS TRAT_INSTT_NM
			      ,CTI.TRAT_INSTT_CD
			      ,CTI.TRAT_INSTT_KOR_NM
			      ,CTI.TRAT_INSTT_ENG_NM
			      ,CTI.RPRS_NM
			      ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			      ,CREATE_BY
			      ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			      ,UPDATE_BY
			FROM   CC_TRAT_INSTT CTI
			WHERE  1 = 1
			<isNotEmpty property="TRAT_INSTT_SE">
			AND    TRAT_INSTT_SE = #TRAT_INSTT_SE#
			</isNotEmpty>
			<isNotEmpty property="TRAT_INSTT_CD">
			AND    UPPER(TRAT_INSTT_CD) LIKE '%'||#TRAT_INSTT_CD#||'%'
			</isNotEmpty>				
			<isNotEmpty property="TRAT_INSTT_KOR_NM">
			AND    UPPER(TRAT_INSTT_KOR_NM) LIKE '%'||#TRAT_INSTT_KOR_NM#||'%'
			</isNotEmpty>						
			<isNotEmpty property="schKeyWord">
           	AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
           	</isNotEmpty>
	   <include refid="select-paging-end" />
    </select>         	
	  	
    <select id="SM7003.selectUserOpenApiKeyList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT CD.COMPANY_CD
		      ,CUOC.USER_ADIT_INFO_SN
		      ,CD.CODE          OAPI_IEM_CD
		      ,CD.CODE_NAME     OAPI_IEM_NM
		      ,OI.OAPI_IEM_REC_INSTT_CD 
		      ,FN_GET_COMMON_CD(CD.COMPANY_CD, 'CC_M_INTFC_REC_INSTT', OI.OAPI_IEM_REC_INSTT_CD , 'NAME', #SESSION_DEFAULT_LANGUAGE#) AS OAPI_IEM_REC_INSTT_NM		      
		      ,COALESCE(CUOC.USER_ID, #USER_ID#) USER_ID
		      ,CD.TXT_VALUE1
		      ,CD.TXT_VALUE2
		      ,CUOC.PARA_VAL
		      ,CUOC.CREATE_DATE
		      ,CUOC.CREATE_BY
		      ,CUOC.UPDATE_DATE
		      ,CUOC.UPDATE_BY
		FROM   CODE_DTL CD
		JOIN   OAPI_IEM OI 
		ON     OI.COMPANY_CD  = CD.COMPANY_CD 
		AND    OI.OAPI_IEM_CD = CD.CODE 		
		LEFT   OUTER JOIN CC_USER_OAPI_CRTFC CUOC
		ON     CUOC.COMPANY_CD = CD.COMPANY_CD
		AND    CUOC.OAPI_IEM_CD = CD.CODE
		AND    CUOC.USER_ID = #USER_ID# 
		WHERE  CD.COMPANY_CD = #COMPANY_CD#
		AND    CD.CATEGORY_CD = 'CC_M_OPENAPI_KEY'
		ORDER  BY CD.SORT_NO
    </select>
    
    <select id="SM7003.selectUserEntrInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT CUE.COMPANY_CD
		      ,CUE.USER_ENTR_SN
		      ,CUE.USER_ID
		      ,CUE.APLC_CD
		      ,CC.CBOA_NM APLC_NM
		FROM   FTA_USER FU
		JOIN   CC_USER_ENTR CUE
		ON     CUE.COMPANY_CD = FU.COMPANY_CD
		AND    CUE.USER_ID = FU.USER_ID
		LEFT   OUTER JOIN CC_CBOA CC
		ON     CC.CBOA_SL = CUE.APLC_CD
		WHERE  FU.COMPANY_CD = #COMPANY_CD#
		AND    FU.USER_ID = COALESCE(#USER_ID#, #SESSION_USER_ID#)
    </select>    
    
    <update id="SM7003.updateUserEntr" parameterClass="java.util.Map">
		WITH UPSERT AS
		(
		SELECT FN_PG_GET_CAST_NUM(#USER_ENTR_SN#) AS USER_ENTR_SN
		      ,#COMPANY_CD# AS COMPANY_CD
		      ,#USER_ID# AS USER_ID
		      ,#APLC_CD# AS APLC_CD
		      ,NOW()::TIMESTAMP AS CREATE_DATE
		      ,#USER_ID# AS CREATE_BY
		),
		UPDATE_OPTOIN AS
		(
		UPDATE CC_USER_ENTR CUE
		SET    APLC_CD   = D.APLC_CD
		      ,CREATE_BY = D.CREATE_BY
		      ,UPDATE_BY = D.CREATE_BY FROM UPSERT D
		WHERE  CUE.COMPANY_CD = D.COMPANY_CD
		AND    CUE.USER_ENTR_SN = D.USER_ENTR_SN
		)
		INSERT INTO CC_USER_ENTR
		    (COMPANY_CD
		    ,USER_ENTR_SN
		    ,USER_ID
		    ,APLC_CD
		    ,CREATE_BY
		    ,UPDATE_BY)
		    SELECT COMPANY_CD
		          ,NEXTVAL('CC_USER_ENTR_S') USER_ENTR_SN
		          ,USER_ID
		          ,APLC_CD
		          ,CREATE_BY
		          ,CREATE_BY
		    FROM   UPSERT D
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   CC_USER_ENTR CUE
		            WHERE  CUE.COMPANY_CD = D.COMPANY_CD
		            AND    CUE.USER_ENTR_SN = D.USER_ENTR_SN) 
    </update>
        
    <update id="SM7003.updateUserOpenApiKey" parameterClass="java.util.Map">
		WITH UPSERT AS
		(
		SELECT FN_PG_GET_CAST_NUM(#USER_ADIT_INFO_SN#) AS USER_ADIT_INFO_SN
		      ,#COMPANY_CD# AS COMPANY_CD
		      ,#USER_ID# AS USER_ID
		      ,#OAPI_IEM_CD# AS OAPI_IEM_CD
		      ,#PARA_VAL# AS PARA_VAL
		      ,NOW()::TIMESTAMP AS CREATE_DATE
		      ,#USER_ID# AS CREATE_BY
		),
		UPDATE_OPTOIN AS
		(
		UPDATE CC_USER_OAPI_CRTFC CUOC
		SET    USER_ID     = D.USER_ID
		      ,OAPI_IEM_CD = D.OAPI_IEM_CD
		      ,PARA_VAL    = D.PARA_VAL
		      ,CREATE_BY   = D.CREATE_BY
		      ,UPDATE_BY   = D.CREATE_BY FROM UPSERT D
		WHERE  CUOC.COMPANY_CD = D.COMPANY_CD
		AND    CUOC.USER_ADIT_INFO_SN = D.USER_ADIT_INFO_SN
		)
		INSERT INTO CC_USER_OAPI_CRTFC
		    (USER_ADIT_INFO_SN
		    ,COMPANY_CD
		    ,USER_ID
		    ,OAPI_IEM_CD
		    ,PARA_VAL
		    ,CREATE_BY
		    ,UPDATE_BY)
		    SELECT NEXTVAL('CC_USER_OAPI_CRTFC_S') USER_ADIT_INFO_SN
		          ,COMPANY_CD
		          ,USER_ID
		          ,OAPI_IEM_CD
		          ,PARA_VAL
		          ,CREATE_BY
		          ,CREATE_BY
		    FROM   UPSERT D
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   CC_USER_OAPI_CRTFC CUOC
		            WHERE  CUOC.COMPANY_CD = D.COMPANY_CD
		            AND    CUOC.USER_ADIT_INFO_SN = D.USER_ADIT_INFO_SN)    
    </update>	
    
    <!-- 사용자 통관 거래처 List (USER_ENTR_BCNC) -->
    <select id="SM7003.selectUserEntrBcncList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT COMPANY_CD
		      ,USER_ENTR_BCNC_SN
		      ,USER_ID
		      ,BCNC_CD
		      ,CREATE_DATE
		      ,CREATE_BY
		      ,UPDATE_DATE
		      ,UPDATE_BY
		FROM   USER_ENTR_BCNC UEB
		WHERE  UEB.COMPANY_CD = #COMPANY_CD#
		AND    UEB.USER_ID = #USER_ID#
		ORDER  BY BCNC_CD
    </select>
        
    <!-- 사용자 통관 거래처 MERGE(USER_ENTR_BCNC) -->
    <update id="SM7003.updateUserEntrBcnc" parameterClass="java.util.Map">
		WITH UPSERT AS
		(
		SELECT FN_PG_GET_CAST_NUM(#USER_ENTR_BCNC_SN#) AS USER_ENTR_BCNC_SN
		      ,#COMPANY_CD# AS COMPANY_CD
		      ,#USER_ID# AS USER_ID
		      ,#BCNC_CD# AS BCNC_CD
		      ,NOW()::TIMESTAMP AS CREATE_DATE
		      ,#USER_ID# AS CREATE_BY
		),
		UPDATE_OPTOIN AS
		(
		UPDATE USER_ENTR_BCNC CEB
		SET    CREATE_BY   = D.CREATE_BY
		      ,UPDATE_BY   = D.CREATE_BY FROM UPSERT D
		WHERE  CEB.COMPANY_CD = D.COMPANY_CD
		AND    CEB.USER_ID = D.USER_ID
		AND    CEB.BCNC_CD = D.BCNC_CD
		)
		INSERT INTO USER_ENTR_BCNC
		    (USER_ENTR_BCNC_SN
		    ,COMPANY_CD
		    ,USER_ID
		    ,BCNC_CD
		    ,CREATE_BY
		    ,UPDATE_BY)
		    SELECT NEXTVAL('USER_ENTR_BCNC_S') USER_ENTR_BCNC_SN
		          ,COMPANY_CD
		          ,USER_ID
		          ,BCNC_CD
		          ,CREATE_BY
		          ,CREATE_BY
		    FROM   UPSERT D
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   USER_ENTR_BCNC CEB
		            WHERE  CEB.COMPANY_CD = D.COMPANY_CD
					AND    CEB.USER_ID = D.USER_ID
					AND    CEB.BCNC_CD = D.BCNC_CD)   
    </update>      
    
    <!-- 사용자 통관 거래처 삭제 (USER_ENTR_BCNC) -->
    <delete id="SM7003.deleteUserEntrBcnc" parameterClass="java.util.Map">
    	DELETE FROM USER_ENTR_BCNC
		 WHERE COMPANY_CD = #COMPANY_CD#
		   AND USER_ENTR_BCNC_SN = FN_PG_GET_CAST_NUM(#USER_ENTR_BCNC_SN#)
    </delete>        	
    
	<!-- 우편번호별관할세관(CC_ZIP_CMPC_CSMH) -->
    <select id="SM7040.selectZipCmpcCsmhList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
			SELECT
				*
			FROM
				(
				SELECT
					ZIP_CMPC_CSMH_SN ,
					CSMH_SL ,
					CSMH_NM ,
					ZIP ,
					LOCPLC_CITY || ' ' || LOCPLC_GU || ' ' || LOCPLC_DONG AS ADDRESS ,
					LOCPLC_CITY ,
					LOCPLC_GU ,
					LOCPLC_DONG ,
					KWA_SL ,
					KWA_NM ,
					OAPI_REC_SN ,
					TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE ,
					CREATE_BY ,
					TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE ,
					UPDATE_BY
				from CC_ZIP_CMPC_CSMH ) CZCC
			WHERE 1 = 1
			<isNotEmpty property="schKeyField">					
				<isNotEmpty property="schKeyWord">
	           	AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
	           	</isNotEmpty>
	        </isNotEmpty>
           	ORDER BY CSMH_SL, ZIP
	   <include refid="select-paging-end" />
    </select>
    
    <select id="SM7040.selectZipCmpcCsmhDupCheck" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
    	SELECT COUNT(1) CNT
		  FROM CC_ZIP_CMPC_CSMH
		 WHERE CSMH_SL = #CSMH_SL#
		   AND CSMH_NM = #CSMH_NM#
		   AND ZIP = #ZIP#
		   AND LOCPLC_CITY = #LOCPLC_CITY#
		   AND LOCPLC_GU = #LOCPLC_GU#
		   AND LOCPLC_DONG = #LOCPLC_DONG#
    </select>
    
    <update id="SM7040.insertZipCmpcCsmh" parameterClass="java.util.Map">
	    INSERT INTO CC_ZIP_CMPC_CSMH
				(ZIP_CMPC_CSMH_SN
				,CSMH_SL
				,CSMH_NM
				,ZIP
				,LOCPLC_CITY
				,LOCPLC_GU
				,LOCPLC_DONG
				,KWA_SL
				,KWA_NM	
				,CREATE_BY	
				,UPDATE_BY)
		VALUES(NEXTVAL('CC_ZIP_CMPC_CSMH_S')
			  ,#CSMH_SL#
			  ,#CSMH_NM#
			  ,#ZIP#
			  ,#LOCPLC_CITY#
			  ,#LOCPLC_GU#
			  ,#LOCPLC_DONG#
			  ,#KWA_SL#
			  ,<isNotEmpty property="KWA_NM">#KWA_NM#</isNotEmpty><isEmpty property="KWA_NM">NULL</isEmpty>
			  ,#USER_ID#
			  ,#USER_ID#)
    </update>
    
    <update id="SM7040.updateZipCmpcCsmh" parameterClass="java.util.Map">
    	WITH UPSERT AS ( 
    	  SELECT #CSMH_SL# AS CSMH_SL
				,#CSMH_NM# AS CSMH_NM
				,#ZIP# AS ZIP
				,#LOCPLC_CITY# AS LOCPLC_CITY
				,#LOCPLC_GU# AS LOCPLC_GU
				,#LOCPLC_DONG# AS LOCPLC_DONG
				,#KWA_SL# AS KWA_SL
				,<isNotEmpty property="KWA_NM">#KWA_NM#</isNotEmpty><isEmpty property="KWA_NM">NULL</isEmpty> AS KWA_NM
				,<isNotEmpty property="OAPI_REC_SN">#OAPI_REC_SN#</isNotEmpty><isEmpty property="OAPI_REC_SN">NULL::NUMERIC</isEmpty> AS OAPI_REC_SN				
				,NOW()::TIMESTAMP AS CREATE_DATE
				,#USER_ID# AS CREATE_BY
				),
				UPDATE_OPTION AS (
					UPDATE CC_ZIP_CMPC_CSMH A
					   SET CSMH_SL = B.CSMH_SL
					      ,CSMH_NM = B.CSMH_NM
					      ,ZIP = B.ZIP
					      ,LOCPLC_CITY = B.LOCPLC_CITY
					      ,LOCPLC_GU = B.LOCPLC_GU
					      ,LOCPLC_DONG = B.LOCPLC_DONG
					      ,KWA_SL = B.KWA_SL
					      ,KWA_NM = B.KWA_NM  
					      ,OAPI_REC_SN = B.OAPI_REC_SN
					      ,UPDATE_DATE = B.CREATE_DATE 
					      ,UPDATE_BY = B.CREATE_BY	   
					  FROM UPSERT B
					 WHERE A.CSMH_SL = B.CSMH_SL 
					   AND A.CSMH_NM = B.CSMH_NM
					   AND A.LOCPLC_CITY = B.LOCPLC_CITY
					   AND A.LOCPLC_GU = B.LOCPLC_GU
					   AND A.LOCPLC_DONG = B.LOCPLC_DONG
					   AND A.ZIP = B.ZIP
				)
				INSERT INTO CC_ZIP_CMPC_CSMH
						(ZIP_CMPC_CSMH_SN
						,CSMH_SL
						,CSMH_NM
						,ZIP
						,LOCPLC_CITY
						,LOCPLC_GU
						,LOCPLC_DONG
						,KWA_SL
						,KWA_NM						
						,CREATE_BY 
						,UPDATE_BY)
						SELECT  NEXTVAL('CC_ZIP_CMPC_CSMH_S')
						       ,CSMH_SL
						       ,CSMH_NM
						       ,ZIP
							   ,LOCPLC_CITY
							   ,LOCPLC_GU
							   ,LOCPLC_DONG
							   ,KWA_SL
							   ,KWA_NM							   
							   ,CREATE_BY
							   ,CREATE_BY
						  FROM UPSERT B
						 WHERE NOT EXISTS (SELECT 1
						                     FROM CC_ZIP_CMPC_CSMH A
						                    WHERE A.CSMH_SL = B.CSMH_SL 
											  AND A.CSMH_NM = B.CSMH_NM
											  AND A.LOCPLC_CITY = B.LOCPLC_CITY
											  AND A.LOCPLC_GU = B.LOCPLC_GU
											  AND A.LOCPLC_DONG = B.LOCPLC_DONG
											  AND A.ZIP = B.ZIP)
    </update>
    
    <delete id="SM7040.deleteZipCmpcCsmh" parameterClass="java.util.Map">
    	DELETE 
		  FROM CC_ZIP_CMPC_CSMH
		 WHERE ZIP_CMPC_CSMH_SN=#ZIP_CMPC_CSMH_SN#::NUMERIC
    </delete>
    
    <!-- HS품명(CC_HS_PRDNM) -->
    <select id="SM7041.selectHsPrdnmList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
				SELECT COMPANY_CD ,
					   HS_CD ,
					   PRDNM ,
					   TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE ,
					   CREATE_BY ,
					   TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE ,
					   UPDATE_BY
			      FROM CC_HS_PRDNM HP
			     WHERE 1 = 1
			<isNotEmpty property="schKeyField">					
				<isNotEmpty property="schKeyWord">
	           	AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
	           	</isNotEmpty>
	        </isNotEmpty>
           	ORDER BY HS_CD
	   <include refid="select-paging-end" />
    </select>
    
    <select id="SM7041.selectHsPrdnmInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">\
		SELECT COMPANY_CD ,
			   HS_CD ,
			   PRDNM ,
			   TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE ,
			   CREATE_BY ,
			   TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE ,
			   UPDATE_BY
		  FROM CC_HS_PRDNM HP
		 WHERE 1 = 1
		   AND COMPANY_CD = #COMPANY_CD#
		   AND HS_CD = #HS_CD#
    </select>    
    
    <update id="SM7041.insertHsPrdnm" parameterClass="java.util.Map">
		INSERT INTO CC_HS_PRDNM
		     (COMPANY_CD
			 ,HS_CD
			 ,PRDNM
			 ,CREATE_DATE
			 ,CREATE_BY
			 ,UPDATE_DATE
			 ,UPDATE_BY)
		VALUES
		    (#COMPANY_CD#
		    ,#HS_CD#
		    ,#PRDNM#
		    ,NOW()::TIMESTAMP
		    ,#USER_ID#
		    ,NOW()::TIMESTAMP
		    ,#USER_ID#)
    </update>
    
	<update id="SM7041.updateHsPrdnm" parameterClass="java.util.Map">
		UPDATE CC_HS_PRDNM
		SET    COMPANY_CD     = #COMPANY_CD#
		      ,HS_CD          = #HS_CD#
		      ,PRDNM          = #PRDNM#
			  ,CREATE_DATE    = NOW()::TIMESTAMP
		      ,CREATE_BY      = #USER_ID#
		      ,UPDATE_DATE    = NOW()::TIMESTAMP
		      ,UPDATE_BY      = #USER_ID#
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    HS_CD = #HS_CD#
    </update>
    
    <delete id="SM7041.deleteHsPrdnm" parameterClass="java.util.Map">
	    DELETE FROM CC_HS_PRDNM
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    HS_CD      = #HS_CD#
    </delete>        
    
    <!-- 전략물자(CC_STTS) -->
    <select id="SM7042.selectSttsList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
				SELECT HS_CD ,
					   HS_NM ,
					   HS_ENG_NM ,
					   CNRL_NO ,
					   TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE ,
					   CREATE_BY ,
					   TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE ,
					   UPDATE_BY
			      FROM CC_STTS CST
			     WHERE 1 = 1
			<isNotEmpty property="schKeyField">					
				<isNotEmpty property="schKeyWord">
	           	AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
	           	</isNotEmpty>
	        </isNotEmpty>
           	ORDER BY HS_CD
	   <include refid="select-paging-end" />
    </select>
    
    <select id="SM7042.selectSttsInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">\
		SELECT HS_CD ,
			   HS_NM ,
			   HS_ENG_NM ,
			   CNRL_NO ,			
			   TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE ,
			   CREATE_BY ,
			   TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE ,
			   UPDATE_BY
		  FROM CC_STTS CST
		 WHERE 1 = 1
		   AND HS_CD = #HS_CD#
    </select>    
    
    <update id="SM7042.insertStts" parameterClass="java.util.Map">
		INSERT INTO CC_STTS
		     (HS_CD
			 ,HS_NM
			 ,HS_ENG_NM
			 ,CNRL_NO
			 ,CREATE_DATE
			 ,CREATE_BY
			 ,UPDATE_DATE
			 ,UPDATE_BY)
		VALUES
		    (#HS_CD#
		    ,#HS_NM#
		    ,#HS_ENG_NM#
		    ,#CNRL_NO#
		    ,NOW()::TIMESTAMP
		    ,#USER_ID#
		    ,NOW()::TIMESTAMP
		    ,#USER_ID#)
    </update>
    
	<update id="SM7042.updateStts" parameterClass="java.util.Map">
		UPDATE CC_STTS
		SET    HS_CD          = #HS_CD#
		      ,HS_NM          = #HS_NM#
		      ,HS_ENG_NM      = #HS_ENG_NM#
		      ,CNRL_NO        = #CNRL_NO#
			  ,CREATE_DATE    = NOW()::TIMESTAMP
		      ,CREATE_BY      = #USER_ID#
		      ,UPDATE_DATE    = NOW()::TIMESTAMP
		      ,UPDATE_BY      = #USER_ID#
		WHERE  HS_CD = #HS_CD#
    </update>
    
    <delete id="SM7042.deleteStts" parameterClass="java.util.Map">
	    DELETE FROM CC_STTS
		WHERE  HS_CD      = #HS_CD#
    </delete>
     
	<!-- 검사검역 -->
    <select id="SM7043.selectInspQrantList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
		SELECT *
		FROM   CC_INSP_QRANT CIQ
		WHERE  CIQ.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="INSP_QRANT_SN">
		AND    CIQ.INSP_QRANT_SN = #INSP_QRANT_SN#::NUMERIC
		</isNotEmpty>
		<isNotEmpty property="INSCQUANITT">
		AND    CIQ.INSP_QRANT_INSTT_SL = #INSCQUANITT#
		</isNotEmpty>
		<isNotEmpty property="NTFCNO">
		AND    CIQ.NTICE_NO LIKE '%'||#NTFCNO#||'%'
		</isNotEmpty>				
		<isNotEmpty property="DGCNT">
		AND    CIQ.NTICE_ODR = #DGCNT#
		</isNotEmpty>		
        <include refid="select-paging-end" />
	</select>

    <select id="SM7043.selectInspQrantDtlsList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
		SELECT CIQD.*
		FROM   CC_INSP_QRANT CIQ
		JOIN   CC_INSP_QRANT_DTLS CIQD 
		ON     CIQD.COMPANY_CD = CIQ.COMPANY_CD 
		AND    CIQD.INSP_QRANT_SN = CIQ.INSP_QRANT_SN 
		WHERE  CIQ.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="INSP_QRANT_SN">
		AND    CIQ.INSP_QRANT_SN = #INSP_QRANT_SN#::NUMERIC   
		</isNotEmpty>
		<isNotEmpty property="INSCQUANITT">
		AND    CIQ.INSP_QRANT_INSTT_SL = #INSCQUANITT#
		</isNotEmpty>
		<isNotEmpty property="NTFCNO">
		AND    CIQ.NTICE_NO LIKE '%'||#NTFCNO#||'%'
		</isNotEmpty>				
		<isNotEmpty property="DGCNT">
		AND    CIQ.NTICE_ODR = #DGCNT#
		</isNotEmpty>				     
        <include refid="select-paging-end" />
	</select>
	
	<!-- 요건승인 -->
    <select id="SM7043.selectImxprtRqiCofList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
		SELECT * 
		FROM   CC_IMXPRT_RQI_COF CIRC
		WHERE  CIRC.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="IMXPRT_RQI_COF_SN">
		AND    CIRC.IMXPRT_RQI_COF_SN = #IMXPRT_RQI_COF_SN#::NUMERIC
		</isNotEmpty>
		<isNotEmpty property="REQAPRENO">
		AND    CIRC.RQI_COF_NO = #REQAPRENO#	
		</isNotEmpty>
        <include refid="select-paging-end" />
	</select>
	
    <select id="SM7043.selectImxprtRqiCofDtlsList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
		SELECT CIRCD.* 
		FROM   CC_IMXPRT_RQI_COF CIRC
		JOIN   CC_IMXPRT_RQI_COF_DTLS CIRCD
		ON     CIRCD.COMPANY_CD = CIRC.COMPANY_CD 
		AND    CIRCD.IMXPRT_RQI_COF_SN = CIRC.IMXPRT_RQI_COF_SN 
		WHERE  CIRC.COMPANY_CD = #COMPANY_CD#
		<isNotEmpty property="IMXPRT_RQI_COF_SN">
		AND    CIRC.IMXPRT_RQI_COF_SN = #IMXPRT_RQI_COF_SN#::NUMERIC    
		</isNotEmpty>    
		<isNotEmpty property="REQAPRENO">
		AND    CIRC.RQI_COF_NO = #REQAPRENO#	
		</isNotEmpty>		
        <include refid="select-paging-end" />
	</select>		
	
	<!-- 간이정액환급율 -->
    <select id="SM7044.selectSfddRtList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
		SELECT HS_CD
		      ,APC_DE
		      ,END_DE
		      ,STARD
		      ,REU_AM
			  ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			  ,CREATE_BY
			  ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			  ,UPDATE_BY
		FROM   CC_SFDD_RT
		WHERE  1 = 1
		<isNotEmpty property="schKeyField">					
			<isNotEmpty property="schKeyWord">
           	AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
           	</isNotEmpty>
        </isNotEmpty>
		ORDER  BY HS_CD, APC_DE DESC
        <include refid="select-paging-end" />
	</select>
	
    <select id="SM7044.selectSfddRtInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT HS_CD
		      ,APC_DE
		      ,END_DE
		      ,STARD
		      ,REU_AM
			  ,TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			  ,CREATE_BY
			  ,TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			  ,UPDATE_BY
		FROM   CC_SFDD_RT
		WHERE  1 = 1
		AND    HS_CD = #HS_CD#
		AND    END_DE = #END_DE#
	</select>			
	
	<update id="SM7044.updateSfddRt" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT REPLACE(REPLACE(#HS_CD#, '-',''), '.', '') HS_CD
		      ,REPLACE(#APC_DE#, '-','') APC_DE
		      ,REPLACE(#END_DE#, '-','') END_DE
		      ,#STARD# STARD
		      ,FN_PG_GET_CAST_NUM(#REU_AM#) REU_AM
		      ,NOW()::TIMESTAMP CREATE_DATE
		      ,#USER_ID# CREATE_BY
		),
		UPDATE_OPTOIN AS
		( 
		UPDATE CC_SFDD_RT CSR
		SET    END_DE = B.END_DE
		      ,STARD  = B.STARD
		      ,REU_AM = B.REU_AM
		      ,CREATE_BY  = B.CREATE_BY
		      ,UPDATE_BY  = B.CREATE_BY FROM UPSERT B
		WHERE  CSR.HS_CD = B.HS_CD
		AND    CSR.APC_DE = B.APC_DE
		)
		INSERT INTO CC_SFDD_RT
		    (HS_CD
		    ,APC_DE
		    ,END_DE
		    ,STARD
		    ,REU_AM
		    ,CREATE_BY
		    ,UPDATE_BY)
		    SELECT HS_CD
		          ,APC_DE
		          ,END_DE
		          ,STARD
		          ,REU_AM
		          ,CREATE_BY
		          ,CREATE_BY
		    FROM   UPSERT B
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   CC_SFDD_RT CSR
		            WHERE  CSR.HS_CD = B.HS_CD
		            AND    CSR.APC_DE = B.APC_DE)	
	</update>
	
    <delete id="SM7044.deleteSfddRt" parameterClass="java.util.Map">
	    DELETE FROM CC_SFDD_RT
		WHERE  HS_CD = #HS_CD#
		AND    APC_DE = #APC_DE#
    </delete>	               

	<!-- 세관장확인대상물품 -->
    <select id="SM7045.selectCcttList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
		SELECT
			CUSCOLT_CIM_TRG_THNG_SN 
			, HS_SL
			, CASE WHEN IMP_EXP_SE_CD = '1' THEN '수출' ELSE '수입' END IMP_EXP_SE_CD 
			, APLC_CIM_LAOR_CD 
			, APLC_CIM_LAOR_NM 
			, RQI_COF_INSTT_CD 
			, RQI_COF_INSTT_NM 
			, APC_BEGIN_DE 
			, APC_END_DE 
			, RQI_CIM_PAPE_NM 
			, TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			, CREATE_BY
			, TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			, UPDATE_BY
		  FROM CC_CUSCOLT_CIM_TRG_THNG
		 WHERE 1 = 1
		<isNotEmpty property="IMP_EXP_SE_CD">
		AND    IMP_EXP_SE_CD = #IMP_EXP_SE_CD#
		</isNotEmpty>		 
 		<isNotEmpty property="schKeyField">					
			<isNotEmpty property="schKeyWord">
           	AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
           	</isNotEmpty>
        </isNotEmpty>
		ORDER  BY IMP_EXP_SE_CD, HS_SL, APC_BEGIN_DE DESC
        <include refid="select-paging-end" />
	</select>

    <select id="SM7045.selectCcttInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT 
			CUSCOLT_CIM_TRG_THNG_SN 
			, HS_SL
			, CASE WHEN IMP_EXP_SE_CD = '1' THEN '수출' ELSE '수입' END IMP_EXP_SE_CD 
			, APLC_CIM_LAOR_CD 
			, APLC_CIM_LAOR_NM 
			, RQI_COF_INSTT_CD 
			, RQI_COF_INSTT_NM 
			, APC_BEGIN_DE 
			, APC_END_DE 
			, RQI_CIM_PAPE_NM 
			, TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			, CREATE_BY
			, TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			, UPDATE_BY
		FROM   CC_CUSCOLT_CIM_TRG_THNG
		WHERE  1 = 1
		AND    HS_SL = #HS_SL#
		AND    IMP_EXP_SE_CD = #IMP_EXP_SE_CD#
	</select>			
	
	<update id="SM7045.updateCctt" parameterClass="java.util.Map">
		WITH UPSERT AS (
		SELECT #HS_SL# HS_SL
			  ,#IMP_EXP_SE_CD# IMP_EXP_SE_CD
			  ,#APLC_CIM_LAOR_CD# APLC_CIM_LAOR_CD
			  ,#APLC_CIM_LAOR_NM# APLC_CIM_LAOR_NM
			  ,#RQI_COF_INSTT_CD# RQI_COF_INSTT_CD
			  ,#RQI_COF_INSTT_NM# RQI_COF_INSTT_NM
			  ,#RQI_CIM_PAPE_NM# RQI_CIM_PAPE_NM
			  ,#APC_BEGIN_DE# APC_BEGIN_DE
			  ,#APC_END_DE# APC_END_DE
		      ,NOW()::TIMESTAMP CREATE_DATE
		      ,#USER_ID# CREATE_BY		
		),
		UPDATE_OPTION AS (
		UPDATE CC_CUSCOLT_CIM_TRG_THNG A
		SET    APLC_CIM_LAOR_NM = B.APLC_CIM_LAOR_NM
			  ,RQI_COF_INSTT_NM = B.RQI_COF_INSTT_NM
			  ,RQI_CIM_PAPE_NM = B.RQI_CIM_PAPE_NM
			  ,APC_END_DE = B.APC_END_DE
			  ,UPDATE_DATE = B.CREATE_DATE
			  ,UPDATE_BY  = B.CREATE_BY
		FROM UPSERT B
		WHERE A.IMP_EXP_SE_CD = B.IMP_EXP_SE_CD
		AND   A.HS_SL = B.HS_SL
		AND   A.RQI_COF_INSTT_CD = B.RQI_COF_INSTT_CD
		AND   A.APLC_CIM_LAOR_CD = B.APLC_CIM_LAOR_CD
		AND   A.APC_BEGIN_DE = B.APC_BEGIN_DE
		)
		INSERT INTO CC_CUSCOLT_CIM_TRG_THNG
				( CUSCOLT_CIM_TRG_THNG_SN
				, HS_SL
				, IMP_EXP_SE_CD
				, APLC_CIM_LAOR_CD
				, APLC_CIM_LAOR_NM
				, RQI_COF_INSTT_CD
				, RQI_COF_INSTT_NM
				, RQI_CIM_PAPE_NM
				, APC_BEGIN_DE
				, APC_END_DE
				, CREATE_BY
				, UPDATE_BY)
				SELECT    NEXTVAL('CC_CUSCOLT_CIM_TRG_THNG_S')
				        , HS_SL
						, IMP_EXP_SE_CD
						, APLC_CIM_LAOR_CD
						, APLC_CIM_LAOR_NM
						, RQI_COF_INSTT_CD
						, RQI_COF_INSTT_NM
						, RQI_CIM_PAPE_NM
						, APC_BEGIN_DE
						, APC_END_DE
						, CREATE_BY
						, CREATE_BY
				  FROM UPSERT B
				 WHERE NOT EXISTS (SELECT 1
				 					 FROM CC_CUSCOLT_CIM_TRG_THNG A
				 					WHERE A.IMP_EXP_SE_CD = B.IMP_EXP_SE_CD
				 					AND   A.HS_SL = B.HS_SL
									AND   A.RQI_COF_INSTT_CD = B.RQI_COF_INSTT_CD
									AND   A.APLC_CIM_LAOR_CD = B.APLC_CIM_LAOR_CD
									AND   A.APC_BEGIN_DE = B.APC_BEGIN_DE)
	</update>
	
    <delete id="SM7045.deleteCctt" parameterClass="java.util.Map">
	    DELETE FROM CUSCOLT_CIM_TRG_THNG_SN
		WHERE  HS_SL = #HS_SL#
		AND    IMP_EXP_SE_CD = #IMP_EXP_SE_CD#
    </delete> 
    
	<!-- 엔컴인터페이스로그 리스트 -->
    <select id="SM7047.selectEncomIntfcLogList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        <include refid="select-paging-start" />
		SELECT CEIL.COMPANY_CD
			  ,ENCOM_INTFC_LOG_SN
			  ,TRNT_REC_SE
			  ,CD03.CODE_NAME AS TRNT_REC_NM
		      ,DOC_STLE_SE
		      ,CD01.CODE_NAME AS DOC_STLE_NM
		      ,TRANR_STTUS
		      ,CD02.CODE_NAME AS TRANR_STTUS_NM
			  ,ERR_CN
			  ,FILE_NM
			  ,FILE_TYP
			  ,FILE_SIZE / 1024 AS FILE_SIZE
			  ,TO_CHAR(CEIL.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			  ,CEIL.CREATE_BY
			  ,FU.NAME AS CREATE_NAME
			  ,TO_CHAR(CEIL.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			  ,CEIL.UPDATE_BY			  
		FROM   CC_ENCOM_INTFC_LOG CEIL
		LEFT   OUTER JOIN FTA_USER FU
		ON     FU.COMPANY_CD = CEIL.COMPANY_CD
		AND    FU.USER_ID = CEIL.CREATE_BY
		LEFT   OUTER JOIN CODE_DTL CD01 
		ON     CD01.COMPANY_CD = CEIL.COMPANY_CD
		AND    CD01.CATEGORY_CD = 'CC_M_DOC_STLE_SE'
		AND    CD01.CODE = CEIL.DOC_STLE_SE
		LEFT   OUTER JOIN CODE_DTL CD02
		ON     CD02.COMPANY_CD = CEIL.COMPANY_CD
		AND    CD02.CATEGORY_CD = 'TRANS_STATUS'
		AND    CD02.CODE = CEIL.TRANR_STTUS		
		LEFT   OUTER JOIN CODE_DTL CD03
		ON     CD03.COMPANY_CD = CEIL.COMPANY_CD
		AND    CD03.CATEGORY_CD = 'SEND_RECEIVE_FLAG'
		AND    CD03.CODE = CEIL.TRNT_REC_SE			
		WHERE  CEIL.COMPANY_CD = #COMPANY_CD#		
		AND    CEIL.REGIST_DE BETWEEN #SCH_FROM_DATE# AND #SCH_TO_DATE#
		<isNotEmpty property="TRNT_REC_SE">
		AND    TRNT_REC_SE = #TRNT_REC_SE#
		</isNotEmpty>		
		<isNotEmpty property="DOC_STLE_SE">
		AND    DOC_STLE_SE = #DOC_STLE_SE#
		</isNotEmpty>
		<isNotEmpty property="TRANR_STTUS">
		AND    TRANR_STTUS = #TRANR_STTUS#
		</isNotEmpty>		
 		<isNotEmpty property="schKeyField">					
			<isNotEmpty property="schKeyWord">
           	AND UPPER($schKeyField$) <isNotEmpty property="multiData">IN ($multiData$)</isNotEmpty><isEmpty property="multiData">LIKE UPPER(#schKeyWord#)</isEmpty>
           	</isNotEmpty>
        </isNotEmpty>
        <include refid="select-paging-end" />
		ORDER  BY COMPANY_CD, ENCOM_INTFC_LOG_SN DESC
	</select>

	<!-- 엔컴인터페이스로그 상세 -->
    <select id="SM7047.selectEncomIntfcLogInfo" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT CEIL.COMPANY_CD
			  ,ENCOM_INTFC_LOG_SN
			  ,TRNT_REC_SE
			  ,DOC_STLE_SE
			  ,TRANR_STTUS
			  ,ERR_CN
			  ,FILE_NM
			  ,FILE_TYP
			  ,FILE_SIZE / 1024 AS FILE_SIZE
			  ,ATCHF
			  ,TO_CHAR(CEIL.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			  ,CEIL.CREATE_BY
			  ,TO_CHAR(CEIL.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			  ,CEIL.UPDATE_BY			  
		FROM   CC_ENCOM_INTFC_LOG CEIL
		LEFT   OUTER JOIN FTA_USER FU
		ON     FU.COMPANY_CD = CEIL.COMPANY_CD
		AND    FU.USER_ID = CEIL.CREATE_BY
		WHERE  CEIL.COMPANY_CD = #COMPANY_CD#
		AND    ENCOM_INTFC_LOG_SN = #ENCOM_INTFC_LOG_SN#::NUMERIC
	</select>			
	
	<!-- 엔컴인터페이스로그 일련번호 -->
    <select id="SM7047.selectEncomIntfcLogSeq" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
        SELECT NEXTVAL('CC_ENCOM_INTFC_LOG_S') AS ENCOM_INTFC_LOG_SN
    </select>
	
	<!-- 엔컴인터페이스로그 등록 -->
	<update id="SM7047.insertEncomIntfcLog" parameterClass="java.util.Map">
		INSERT INTO CC_ENCOM_INTFC_LOG
			(COMPANY_CD
			,ENCOM_INTFC_LOG_SN
			,TRNT_REC_SE
			,DOC_STLE_SE
			,TRANR_STTUS
			,ERR_CN
			,FILE_NM
			,FILE_TYP
			,FILE_SIZE
			,ATCHF		
			,CREATE_BY
			,UPDATE_BY)
		VALUES
			(#COMPANY_CD#
			,#ENCOM_INTFC_LOG_SN#::NUMERIC
			,#TRNT_REC_SE#
			,#DOC_STLE_SE#
			,#TRANR_STTUS#
			,#ERR_CN#
			,#FILE_NM#
			,#FILE_TYP#
			,#FILE_SIZE#
			,#ATCHF#
			,#USER_ID#
			,#USER_ID#)
	</update>
	
	<!-- 엔컴인터페이스로그 수정 -->
	<update id="SM7047.updateEncomIntfcLog" parameterClass="java.util.Map">
		UPDATE CC_ENCOM_INTFC_LOG
		SET    TRANR_STTUS = #TRANR_STTUS#
			  ,ERR_CN      = #ERR_CN#
			  ,UPDATE_DATE = CLOCK_TIMESTAMP()
			  ,UPDATE_BY   = #USER_ID#
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    ENCOM_INTFC_LOG_SN = #ENCOM_INTFC_LOG_SN#::NUMERIC
	</update>
	
	<!-- 엔컴인터페이스로그 파일 수정 -->
	<update id="SM7047.updateEncomIntfcLogFile" parameterClass="java.util.Map">
		UPDATE CC_ENCOM_INTFC_LOG
		SET    FILE_NM     = #FILE_NM#
			  ,FILE_TYP    = #FILE_TYP#
			  ,FILE_SIZE   = #FILE_SIZE#
			  ,ATCHF       = #ATCHF#
			  ,UPDATE_DATE = CLOCK_TIMESTAMP()
			  ,UPDATE_BY   = #USER_ID#
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    ENCOM_INTFC_LOG_SN = #ENCOM_INTFC_LOG_SN#::NUMERIC
	</update>	
	
	<!-- 엔컴인터페이스로그 삭제 -->
    <delete id="SM7047.deleteEncomIntfcLog" parameterClass="java.util.Map">
	    DELETE FROM CC_ENCOM_INTFC_LOG
		WHERE  COMPANY_CD = #COMPANY_CD#
		AND    ENCOM_INTFC_LOG_SN = #ENCOM_INTFC_LOG_SN#::NUMERIC
    </delete>        
    
	<!-- 엔컴 인터페이스 항목 리스트 -->
    <select id="SM7047.selectEncomInterfaceItemList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap">
		SELECT CETFS.COMPANY_CD
		      ,CETFS.DOC_STLE_SE
		      ,CETFS.TRANR_FORM_CD
		      ,CETFS.TRANR_FORM_NM 
		      ,CETFS.TMPR_TABLE
		      ,CETTT.LAST_TABLE
		      ,CETTT.TABLE_NCNM
		      ,CETFS.IEM_01
		      ,CETFS.IEM_02
		      ,CETFS.CREATE_BY
		      ,#ENPS_MGMT_NO# AS ENPS_MGMT_NO
		FROM   CC_ENTR_TRANR_FORM_SETUP CETFS
		JOIN   CC_ENTR_TRANR_TMPR_TABLE CETTT
		ON     CETTT.TMPR_TABLE = CETFS.TMPR_TABLE
		WHERE  CETFS.COMPANY_CD = #COMPANY_CD#
		AND    CETFS.DOC_STLE_SE = #DOC_STLE_SE#
		AND    CETFS.USE_AT = 'Y'
		ORDER  BY CETFS.TRANR_FORM_CD
	</select>
	
	<!-- 엔컴 송신 SELECT 절 -->
	<select id="SM7047.selectFnEncomSendSelect" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
		SELECT CC_FN_ENCOM_SEND_SELECT(#COMPANY_CD#, #DOC_STLE_SE#, #TRANR_FORM_CD#, #TMPR_TABLE#, #ENPS_MGMT_NO#) AS ENCOM_SQL		
	</select>
	
	<!-- 엔컴 동적 SELECT LIST -->
	<select id="SM7047.selectEncomSelectList" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" remapResults="true">
		$ENCOM_SQL$
	</select>
	
	<!-- Insert 엔컴 통관 이관 설정 -->
	<insert id="SM7047.insertEntrTransSetupEnCom" parameterClass="java.util.Map">
        <selectKey resultClass="int" keyProperty="ENTR_TRANR_SETUP_SN">
            SELECT NEXTVAL('CC_ENTR_TRANR_SETUP_S') AS ENTR_TRANR_SETUP_SN 
        </selectKey>
		INSERT INTO CC_ENTR_TRANR_SETUP
		    (COMPANY_CD
		    ,ENTR_TRANR_SETUP_SN
		    ,TRANR_FORM_CD
		    ,DOC_STLE_SE
		    ,ENTR_TRANR_SETUP_CN
		    ,ATCHF_NM
		    ,ATCHF_TYP
		    ,ATCHF
		    ,INQIRE_AT
		    ,CREATE_BY
		    ,UPDATE_BY)
		    SELECT CEIL.COMPANY_CD
		          ,#ENTR_TRANR_SETUP_SN# AS ENTR_TRANR_SETUP_SN
		          ,#TRANR_FORM_CD#
		          ,#DOC_STLE_SE#
		          ,#ENTR_TRANR_SETUP_CN#
		          ,FILE_NM
		          ,FILE_TYP
		          ,ATCHF
		          ,COALESCE(#INQIRE_AT#, 'Y')
		          ,#USER_ID#
		          ,#USER_ID#
		    FROM   CC_ENCOM_INTFC_LOG CEIL
		    WHERE  CEIL.COMPANY_CD = #COMPANY_CD#
		    AND    CEIL.ENCOM_INTFC_LOG_SN = #ENCOM_INTFC_LOG_SN#::NUMERIC
	</insert>
	
	<!-- 코드 테이블의 ROW 데이터를 가로로 변환 쿼리 -->
	<select id="SM7047.selectFnGetCodeConv" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" >
		SELECT CC_FN_GET_CODE_CONV(#COMPANY_CD#, #CATEGORY_CD#, #SELECT_COL#) AS SELECT_CODE		
	</select>
	
	<!-- 코드 테이블의 ROW 데이터를 가로로 변환 -->
	<select id="SM7047.selectFnGetCodeConvMap" parameterClass="java.util.Map" resultClass="java.util.LinkedHashMap" remapResults="true">
		$SELECT_CODE$
	</select>	
	
	<!-- 세관, 항공, 공항 업데이트 -->  
	<update id="SM7028.updateKcsCodeMst" parameterClass="java.util.Map">
		WITH UPSERT AS 
		(
		SELECT #CATEGORY_CD# AS CATEGORY_CD
		      ,#CODE# AS CODE
		      ,#CODE_NAME# AS CODE_NAME
		      ,'' AS CODE_NAME_ENG
		      ,CASE
		           WHEN #SORT_NO# IS NULL OR
		                #SORT_NO# = '' THEN
		            (SELECT MAX(SORT_NO) + 1
		             FROM   KCS_CODE_MST K
		             WHERE  CATEGORY_CD = #CATEGORY_CD#)
		           ELSE
		            #SORT_NO#::NUMERIC
		       END AS SORT_NO	      
		      ,#TXT_VALUE1# AS TXT_VALUE1
		      ,#TXT_VALUE2# AS TXT_VALUE2
		      ,#TXT_VALUE3# AS TXT_VALUE3
		      ,#TXT_VALUE4# AS TXT_VALUE4
		      ,#TXT_VALUE5# AS TXT_VALUE5
		      ,FN_PG_GET_CAST_NUM(#NUM_VALUE1#) AS NUM_VALUE1
		      ,FN_PG_GET_CAST_NUM(#NUM_VALUE2#) AS NUM_VALUE2 
		      ,FN_PG_GET_CAST_NUM(#NUM_VALUE3#) AS NUM_VALUE3
		      ,FN_PG_GET_CAST_NUM(#NUM_VALUE4#) AS NUM_VALUE4
		      ,FN_PG_GET_CAST_NUM(#NUM_VALUE5#) AS NUM_VALUE5
		      ,#COMMENTS# AS COMMENTS
		      ,NOW()::TIMESTAMP AS CREATE_DATE
		      ,#USER_ID# AS CREATE_BY
		),  
		UPDATE_OPTION AS 
		(
		UPDATE KCS_CODE_MST KCM
		SET    CATEGORY_CD   = D.CATEGORY_CD
		      ,CODE          = D.CODE
		      ,CODE_NAME     = D.CODE_NAME
		      ,CODE_NAME_ENG = D.CODE_NAME_ENG
		      ,SORT_NO       = D.SORT_NO
		      ,TXT_VALUE1    = D.TXT_VALUE1
		      ,TXT_VALUE2    = D.TXT_VALUE2
		      ,TXT_VALUE3    = D.TXT_VALUE3
		      ,TXT_VALUE4    = D.TXT_VALUE4
		      ,TXT_VALUE5    = D.TXT_VALUE5
		      ,NUM_VALUE1    = D.NUM_VALUE1
		      ,NUM_VALUE2    = D.NUM_VALUE2
		      ,NUM_VALUE3    = D.NUM_VALUE3
		      ,NUM_VALUE4    = D.NUM_VALUE4
		      ,NUM_VALUE5    = D.NUM_VALUE5
		      ,COMMENTS      = D.COMMENTS
		      ,UPDATE_DATE   = D.CREATE_DATE
		      ,UPDATE_BY     = D.CREATE_BY FROM UPSERT D
		WHERE  KCM.CATEGORY_CD = D.CATEGORY_CD
		AND    KCM.CODE = D.CODE
		) 
		INSERT INTO KCS_CODE_MST
		    (CATEGORY_CD
		    ,CODE
		    ,CODE_NAME
		    ,CODE_NAME_ENG
		    ,SORT_NO
		    ,TXT_VALUE1
		    ,TXT_VALUE2
		    ,TXT_VALUE3
		    ,TXT_VALUE4
		    ,TXT_VALUE5
		    ,NUM_VALUE1
		    ,NUM_VALUE2
		    ,NUM_VALUE3
		    ,NUM_VALUE4
		    ,NUM_VALUE5
		    ,COMMENTS
		    ,CREATE_BY
		    ,UPDATE_BY)
		    SELECT CATEGORY_CD
		          ,CODE
		          ,CODE_NAME
		          ,CODE_NAME_ENG
		          ,SORT_NO
		          ,TXT_VALUE1
		          ,TXT_VALUE2
		          ,TXT_VALUE3
		          ,TXT_VALUE4
		          ,TXT_VALUE5
		          ,NUM_VALUE1
		          ,NUM_VALUE2
		          ,NUM_VALUE3
		          ,NUM_VALUE4
		          ,NUM_VALUE5
		          ,COMMENTS
		          ,CREATE_BY
		          ,CREATE_BY
		    FROM   UPSERT D
		    WHERE  NOT EXISTS (SELECT 1
		            FROM   KCS_CODE_MST KCM
		            WHERE  KCM.CATEGORY_CD = D.CATEGORY_CD
		            AND    KCM.CODE = D.CODE)	
	</update>  
	
	<!-- 세관, 항공, 공항 삭제 -->  
	<update id="SM7028.deleteKcsCodeMst" parameterClass="java.util.Map">
		DELETE FROM KCS_CODE_MST
		 WHERE CATEGORY_CD = #CATEGORY_CD# 
		   AND CODE = #CODE#
	</update>	
</sqlMap>